
module 0x1::fixed_point32 {
    struct FixedPoint32 has copy, drop, store {
        value: u64,
    }
    public fun ceil(self: FixedPoint32): u64 {
        let _t1;
        _t1 = floor(self) << 32u8;
        if (*&(&self).value == _t1) return _t1 >> 32u8;
        (_t1 as u128) + 4294967296u128 >> 32u8 as u64
    }
    public fun floor(self: FixedPoint32): u64 {
        *&(&self).value >> 32u8
    }
    public fun create_from_rational(numerator: u64, denominator: u64): FixedPoint32 {
        let _t6;
        let _t4;
        let _t3;
        _t3 = (denominator as u128) << 32u8;
        if (!(_t3 != 0u128)) abort 65537;
        _t4 = ((numerator as u128) << 64u8) / _t3;
        if (_t4 != 0u128) _t6 = true else _t6 = numerator == 0;
        if (!_t6) abort 131077;
        if (!(_t4 <= 18446744073709551615u128)) abort 131077;
        FixedPoint32{value: _t4 as u64}
    }
    public fun create_from_raw_value(value: u64): FixedPoint32 {
        FixedPoint32{value: value}
    }
    public fun create_from_u64(val: u64): FixedPoint32 {
        let _t1;
        _t1 = (val as u128) << 32u8;
        if (!(_t1 <= 18446744073709551615u128)) abort 131077;
        FixedPoint32{value: _t1 as u64}
    }
    public fun divide_u64(val: u64, divisor: FixedPoint32): u64 {
        let _t2;
        if (!(*&(&divisor).value != 0)) abort 65540;
        _t2 = ((val as u128) << 32u8) / (*&(&divisor).value as u128);
        if (!(_t2 <= 18446744073709551615u128)) abort 131074;
        _t2 as u64
    }
    public fun get_raw_value(self: FixedPoint32): u64 {
        *&(&self).value
    }
    public fun is_zero(self: FixedPoint32): bool {
        *&(&self).value == 0
    }
    public fun max(num1: FixedPoint32, num2: FixedPoint32): FixedPoint32 {
        let _t2;
        if (*&(&num1).value > *&(&num2).value) _t2 = num1 else _t2 = num2;
        _t2
    }
    public fun min(num1: FixedPoint32, num2: FixedPoint32): FixedPoint32 {
        let _t2;
        if (*&(&num1).value < *&(&num2).value) _t2 = num1 else _t2 = num2;
        _t2
    }
    public fun multiply_u64(val: u64, multiplier: FixedPoint32): u64 {
        let _t2;
        _t2 = (val as u128) * (*&(&multiplier).value as u128) >> 32u8;
        if (!(_t2 <= 18446744073709551615u128)) abort 131075;
        _t2 as u64
    }
    public fun round(self: FixedPoint32): u64 {
        let _t2;
        let _t1;
        _t1 = floor(self) << 32u8;
        _t2 = _t1 + 2147483648;
        if (*&(&self).value < _t2) _t2 = _t1 >> 32u8 else _t2 = ceil(self);
        _t2
    }
}
