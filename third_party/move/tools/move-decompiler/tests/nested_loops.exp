
module 0x99::nested_loops {
    fun nested_for_loops() {
        let _t4;
        let _t3;
        let _t2;
        let _t1;
        let _t0;
        _t0 = 0;
        _t1 = 0;
        _t2 = false;
        'l0: loop {
            'l1: loop {
                loop {
                    if (_t2) {
                        _t1 = _t1 + 1;
                        break
                    };
                    _t2 = true;
                    break
                };
                if (!(_t1 < 10)) break 'l0;
                _t0 = _t0 + 1;
                _t3 = _t1;
                _t4 = false;
                loop {
                    loop {
                        if (_t4) {
                            _t3 = _t3 + 1;
                            break
                        };
                        _t4 = true;
                        break
                    };
                    if (!(_t3 < 10)) continue 'l1;
                    _t0 = _t0 + 1
                };
                break
            };
            break
        };
    }
    fun nested_for_while_loop_loops() {
        let _t4;
        let _t3;
        let _t2;
        let _t1;
        let _t0;
        _t0 = 0;
        _t1 = 0;
        _t2 = false;
        'l0: loop {
            'l1: loop {
                loop {
                    if (_t2) {
                        _t1 = _t1 + 1;
                        break
                    };
                    _t2 = true;
                    break
                };
                if (!(_t1 < 5)) break 'l0;
                _t0 = _t0 + 1;
                _t3 = _t1;
                'l2: loop {
                    if (!(_t3 < 10)) continue 'l1;
                    _t0 = _t0 + 1;
                    _t4 = _t3;
                    _t3 = _t3 + 1;
                    loop {
                        _t0 = _t0 + 1;
                        if (_t4 > 10) continue 'l2;
                        _t4 = _t4 + 1
                    };
                    break
                };
                break
            };
            break
        };
    }
    fun nested_for_while_loops() {
        let _t2;
        let _t1;
        let _t0;
        _t0 = 0;
        _t1 = 0;
        _t2 = false;
        'l0: loop {
            'l1: loop {
                loop {
                    if (_t2) {
                        _t1 = _t1 + 1;
                        break
                    };
                    _t2 = true;
                    break
                };
                if (!(_t1 < 5)) break 'l0;
                _t0 = _t0 + 1;
                loop {
                    if (!(_t0 < 5)) continue 'l1;
                    _t0 = _t0 + 10
                };
                break
            };
            break
        };
    }
    fun nested_loop_for_loops() {
        let _t4;
        let _t3;
        let _t2;
        let _t1;
        let _t0;
        _t0 = 0;
        _t1 = 0;
        'l0: loop {
            'l1: loop {
                _t0 = _t0 + 1;
                _t2 = 0;
                if (_t0 > 3) break 'l0;
                _t3 = 0;
                _t4 = false;
                loop {
                    loop {
                        if (_t4) {
                            _t3 = _t3 + 1;
                            break
                        };
                        _t4 = true;
                        break
                    };
                    if (!(_t3 < 5)) continue 'l1;
                    _t2 = _t2 + 1;
                    _t1 = _t1 + 1
                };
                break
            };
            break
        };
    }
    fun nested_loop_loops() {
        let _t2;
        let _t1;
        let _t0;
        _t0 = 0;
        _t1 = 0;
        'l0: loop {
            'l1: loop {
                _t0 = _t0 + 1;
                _t2 = 0;
                if (_t0 > 3) break 'l0;
                loop {
                    _t2 = _t2 + 1;
                    _t1 = _t1 + 1;
                    if (_t2 > 7) continue 'l1
                };
                break
            };
            break
        };
    }
    fun nested_loop_while_loops() {
        let _t2;
        let _t1;
        let _t0;
        _t0 = 0;
        _t1 = 0;
        'l0: loop {
            'l1: loop {
                _t0 = _t0 + 1;
                _t2 = 0;
                if (_t0 > 3) break 'l0;
                loop {
                    if (!(_t2 < 7)) continue 'l1;
                    _t2 = _t2 + 1;
                    _t1 = _t1 + 1
                };
                break
            };
            break
        };
    }
    fun nested_while_loops() {
        let _t2;
        let _t1;
        let _t0;
        _t0 = 0;
        _t1 = 0;
        'l0: loop {
            'l1: loop {
                if (!(_t0 < 3)) break 'l0;
                _t0 = _t0 + 1;
                _t2 = 0;
                loop {
                    if (!(_t2 < 7)) continue 'l1;
                    _t2 = _t2 + 1;
                    _t1 = _t1 + 1
                };
                break
            };
            break
        };
    }
    fun three_layer_for_loops() {
        let _t6;
        let _t5;
        let _t4;
        let _t3;
        let _t2;
        let _t1;
        let _t0;
        _t0 = 0;
        _t1 = 0;
        _t2 = false;
        'l0: loop {
            'l1: loop {
                loop {
                    if (_t2) {
                        _t1 = _t1 + 1;
                        break
                    };
                    _t2 = true;
                    break
                };
                if (!(_t1 < 10)) break 'l0;
                _t0 = _t0 + 1;
                _t3 = _t1;
                _t4 = false;
                'l2: loop {
                    loop {
                        if (_t4) {
                            _t3 = _t3 + 1;
                            break
                        };
                        _t4 = true;
                        break
                    };
                    if (!(_t3 < 10)) continue 'l1;
                    _t0 = _t0 + 1;
                    _t5 = _t3;
                    _t6 = false;
                    loop {
                        loop {
                            if (_t6) {
                                _t5 = _t5 + 1;
                                break
                            };
                            _t6 = true;
                            break
                        };
                        if (!(_t5 < 10)) continue 'l2;
                        _t0 = _t0 + 1
                    };
                    break
                };
                break
            };
            break
        };
    }
    fun three_layer_loop_loops() {
        let _t3;
        let _t2;
        let _t1;
        let _t0;
        _t0 = 0;
        _t1 = 0;
        'l0: loop {
            'l1: loop {
                _t0 = _t0 + 1;
                _t2 = _t1;
                if (_t1 > 10) break 'l0;
                _t1 = _t1 + 1;
                'l2: loop {
                    _t0 = _t0 + 1;
                    _t3 = _t2;
                    if (_t2 > 10) continue 'l1;
                    _t2 = _t2 + 1;
                    loop {
                        _t0 = _t0 + 1;
                        if (_t3 > 10) continue 'l2;
                        _t3 = _t3 + 1
                    };
                    break
                };
                break
            };
            break
        };
    }
    fun three_layer_while_loops() {
        let _t3;
        let _t2;
        let _t1;
        let _t0;
        _t0 = 0;
        _t1 = 0;
        'l0: loop {
            'l1: loop {
                if (!(_t1 < 10)) break 'l0;
                _t0 = _t0 + 1;
                _t2 = _t1;
                _t1 = _t1 + 1;
                'l2: loop {
                    if (!(_t2 < 10)) continue 'l1;
                    _t0 = _t0 + 1;
                    _t3 = _t2;
                    _t2 = _t2 + 1;
                    loop {
                        if (!(_t3 < 10)) continue 'l2;
                        _t0 = _t0 + 1;
                        _t3 = _t3 + 1
                    };
                    break
                };
                break
            };
            break
        };
    }
}
