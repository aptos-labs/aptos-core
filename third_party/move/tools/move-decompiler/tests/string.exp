
module 0x1::string {
    use 0x1::vector;
    use 0x1::option;
    struct String has copy, drop, store {
        bytes: vector<u8>,
    }
    public fun length(self: &String): u64 {
        vector::length<u8>(&self.bytes)
    }
    public fun bytes(self: &String): &vector<u8> {
        &self.bytes
    }
    public fun index_of(self: &String, r: &String): u64 {
        internal_index_of(&self.bytes, &r.bytes)
    }
    native fun internal_index_of(v: &vector<u8>, r: &vector<u8>): u64;
    public fun append(self: &mut String, r: String) {
        vector::append<u8>(&mut self.bytes, *&(&r).bytes);
    }
    public fun insert(self: &mut String, at: u64, o: String) {
        let _t7;
        let _t6;
        let _t4;
        let _t3;
        _t3 = &self.bytes;
        _t4 = at;
        if (_t4 <= vector::length<u8>(_t3)) _t6 = internal_is_char_boundary(_t3, at) else _t6 = false;
        if (!_t6) abort 2;
        _t7 = sub_string(/*freeze*/self, 0, at);
        append(&mut _t7, o);
        append(&mut _t7, sub_string(/*freeze*/self, at, length(/*freeze*/self)));
        *self = _t7;
    }
    native fun internal_is_char_boundary(v: &vector<u8>, i: u64): bool;
    public fun sub_string(self: &String, i: u64, j: u64): String {
        let _t7;
        let _t6;
        let _t5;
        let _t3;
        _t3 = &self.bytes;
        if (j <= vector::length<u8>(_t3)) _t5 = i <= j else _t5 = false;
        if (_t5) _t6 = internal_is_char_boundary(_t3, i) else _t6 = false;
        if (_t6) _t7 = internal_is_char_boundary(_t3, j) else _t7 = false;
        if (!_t7) abort 2;
        String{bytes: internal_sub_string(_t3, i, j)}
    }
    public fun is_empty(self: &String): bool {
        vector::is_empty<u8>(&self.bytes)
    }
    public fun append_utf8(self: &mut String, bytes: vector<u8>) {
        append(self, utf8(bytes));
    }
    public fun utf8(bytes: vector<u8>): String {
        if (!internal_check_utf8(&bytes)) abort 1;
        String{bytes: bytes}
    }
    public native fun internal_check_utf8(v: &vector<u8>): bool;
    native fun internal_sub_string(v: &vector<u8>, i: u64, j: u64): vector<u8>;
    public fun try_utf8(bytes: vector<u8>): option::Option<String> {
        let _t1;
        if (internal_check_utf8(&bytes)) _t1 = option::some<String>(String{bytes: bytes}) else _t1 = option::none<String>();
        _t1
    }
}
