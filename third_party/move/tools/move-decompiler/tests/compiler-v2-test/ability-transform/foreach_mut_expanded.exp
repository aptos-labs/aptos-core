module 0x42::m {
    fun test_for_each_mut() {
        let _t0 = vector[1, 2, 3];
        let _t1 = 0;
        let _t3 = &mut _t0;
        while (_t1 < 0x1::vector::length<u64>(&_t0)) {
            *0x1::vector::borrow_mut<u64>(_t3, _t1) = 2;
            _t1 = _t1 + 1
        };
        if (!(_t0 == vector[2, 3, 4])) abort 0;
    }
}

--- unable to recompile the decompiled code:
exiting with stackless-bytecode checks failed
error: cannot immutably borrow value which is already mutably borrowed
  ┌─ foreach_mut_expanded.move:6:47
  │
5 │         let _t3 = &mut _t0;
  │                   -------- local `_t0` previously mutably borrowed here
6 │         while (_t1 < 0x1::vector::length<u64>(&_t0)) {
  │                                               ^^^^ borrow attempted here
7 │             *0x1::vector::borrow_mut<u64>(_t3, _t1) = 2;
  │                                           --- conflicting reference `_t3` used here
