module 0x42::test {
    struct T has drop, store, key {
    }
    struct R has drop, store, key {
    }
    public entry fun test(addr: address) {
        let R{} = move_from(addr);
    }
    fun test2(): bool {
        *&(&R{}).dummy_field
    }
    public entry fun test3(addr: address) {
        let T{} = move_from(addr);
    }
    public entry fun test4(s: &signer) {
        move_to(T{}, s);
    }
}

--- unable to recompile the decompiled code:
exiting with context checking errors
error: empty struct `test::R` cannot access the field `dummy_field`
   ┌─ dummy_field.move:10:11
   │
10 │         *&(&R{}).dummy_field
   │           ^^^^^^^^^^^^^^^^^^

error: cannot use `T` with an operator which expects a value of type `&signer`
   ┌─ dummy_field.move:16:17
   │
16 │         move_to(T{}, s);
   │                 ^^^
