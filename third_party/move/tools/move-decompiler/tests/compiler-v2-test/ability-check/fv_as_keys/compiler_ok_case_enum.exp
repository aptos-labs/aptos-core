module 0x99::basic_enum {
    enum FV<T> has key {
        V1 {
            v1: |&mut T|(T) has copy + store,
        }
    }
    fun increment_by_one(x: &mut u64): u64 {
        *x = *x + 1;
        *x
    }
    fun test_fun_vec(s: &signer) {
        move_to<u64>(FV::V1<u64>{v1: |arg0| increment_by_one(arg0)}, s);
    }
}

--- unable to recompile the decompiled code:
exiting with context checking errors
error: type `u64` is missing required ability `key`
   ┌─ compiler_ok_case_enum.move:12:17
   │
12 │         move_to<u64>(FV::V1<u64>{v1: |arg0| increment_by_one(arg0)}, s);
   │                 ^^^
   │
   = required by instantiating type parameter `T:key` of function `move_to`

error: cannot use `FV<u64>` with an operator which expects a value of type `&signer`
   ┌─ compiler_ok_case_enum.move:12:22
   │
12 │         move_to<u64>(FV::V1<u64>{v1: |arg0| increment_by_one(arg0)}, s);
   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
