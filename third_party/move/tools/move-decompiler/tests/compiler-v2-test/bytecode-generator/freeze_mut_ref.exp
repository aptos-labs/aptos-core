module 0x42::freeze_mut_ref {
    struct G {
        f: u64,
    }
    struct S has drop {
    }
    public fun borrow_mut<Element>(map: &mut vector<Element>): &Element {
        /*freeze*/0x1::vector::borrow_mut<Element>(map, 0)
    }
    public fun borrow_mut2<Element>(v: &mut Element): &Element {
        /*freeze*/v
    }
    public fun borrow_mut3<Element>(v1: &mut Element, v2: &Element): &Element {
        /*freeze*/v1
    }
    public fun borrow_mut4<Element>(v: &mut Element): &Element {
        /*freeze*/v
    }
    fun t0() {
        /*freeze*/&mut 0;
    }
    fun t1(s: &mut S): &S {
        /*freeze*/s
    }
    fun t2(u1: &mut u64, u2: &mut u64): (&u64, &mut u64) {
        (/*freeze*/u1, u2)
    }
    public fun t4() {
        /*freeze*/&mut 0;
        /*freeze*/&mut 0;
    }
    public fun t5(s: &mut G) {
        0 + 1 + 1;
        &mut s.f = 0;
        /*freeze*/&mut 2;
        &mut s.f = 2;
    }
    fun t6(cond: bool, s: &mut S, other: &S) {
        if (cond) ();
    }
    fun t7(cond: bool, s: &mut S, other: &S) {
        let _t3;
        if (cond) _t3 = /*freeze*/s else _t3 = other;
    }
    fun t8(cond: bool, s: &mut S, other: &S) {
        if (cond) ();
    }
}

--- unable to recompile the decompiled code:
exiting with context checking errors
error: invalid assignment
   ┌─ freeze_mut_ref.move:34:9
   │
34 │         &mut s.f = 0;
   │         ^^^^^^^^ Invalid assignment syntax. Expected: a local, a field write, or a deconstructing assignment

error: invalid assignment
   ┌─ freeze_mut_ref.move:36:9
   │
36 │         &mut s.f = 2;
   │         ^^^^^^^^ Invalid assignment syntax. Expected: a local, a field write, or a deconstructing assignment
