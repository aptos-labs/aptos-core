module 0x815::m {
    struct MyMap has key {
        table: Table<address, ValueWrap>,
    }
    struct Table<T1, T2> has store {
        x: T1,
        y: T2,
    }
    struct ValueWrap has drop, store {
        val: u64,
    }
    fun contains<T1: drop, T2: drop>(self: &Table<T1, T2>, _key: T1): bool {
        true
    }
    fun add<T1: drop, T2: drop>(self: &mut Table<T1, T2>, _key: T1, _val: T2) {
        ()
    }
    public fun add_when_missing(key: address, val: u64) {
        let _t2 = borrow_global_mut(0x815);
        if (!contains<address,ValueWrap>(&_t2.table, key)) add<address,ValueWrap>(&mut _t2.table, key, ValueWrap{val: val});
    }
}

--- unable to recompile the decompiled code:
exiting with context checking errors
error: cannot use `u16|u32|u64|u128|u256` with an operator which expects a value of type `address`
   ┌─ bug_14471_receiver_inference.move:19:37
   │
19 │         let _t2 = borrow_global_mut(0x815);
   │                                     ^^^^^
