module 0x42::test {
    enum E1 {
        V1 {
            _0: S0,
        }
        V2 {
            _0: S1,
        }
    }
    struct S0 {
        _0: u8,
    }
    struct S1 {
        _0: bool,
        _1: S0,
    }
    fun match(x: E1) {
        let _v0 = &x;
        if (_v0 is V1) {
            let _v1 = &_v0._0;
            let E1::V1{_0: _v2} = x;
            let S0{_0: _v3} = _v2;
        } else if (_v0 is V2) {
            let _v4 = &(&_v0._0)._1;
            let E1::V2{_0: _v5} = x;
            let S1{_0: _v6, _1: _v7} = _v5;
            let S0{_0: _v8} = _v7;
        } else abort 14566554180833181697;
    }
    fun nested(x: S1) {
        let S1{_0: _v0, _1: _v1} = x;
        let S0{_0: _v2} = _v1;
    }
    fun simple(x: S0) {
        let S0{_0: _v0} = x;
    }
}

--- unable to recompile the decompiled code:
exiting with context checking errors
error: cannot select field `_0` since it has different types in variants of enum `E1`
   ┌─ bind_anonymous_field.move:20:24
   │
20 │             let _v1 = &_v0._0;
   │                        ^^^
   │
   = field `_0` has type `S1` in variant `V2` and type `S0` in variant `V1`

error: cannot select field `_0` since it has different types in variants of enum `E1`
   ┌─ bind_anonymous_field.move:24:26
   │
24 │             let _v4 = &(&_v0._0)._1;
   │                          ^^^
   │
   = field `_0` has type `S1` in variant `V2` and type `S0` in variant `V1`
