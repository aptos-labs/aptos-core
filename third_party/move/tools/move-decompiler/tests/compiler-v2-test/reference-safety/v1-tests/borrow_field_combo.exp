module 0x8675309::M {
    struct Inner has copy, drop {
        f1: u64,
        f2: u64,
    }
    struct Outer has copy, drop {
        s1: Inner,
        s2: Inner,
    }
    fun id<T>(r: &T): &T {
        r
    }
    fun id_mut<T>(r: &mut T): &mut T {
        r
    }
    fun t0(cond: bool, outer: &mut Outer, other: &mut Outer) {
        let _t14;
        let _t12;
        let _t10;
        let _t8;
        let _t6;
        let _t4;
        let _t3 = &outer.s1;
        if (cond) _t4 = _t3 else _t4 = &outer.s1;
        *_t4;
        *_t3;
        *&_t3.f1;
        *_t3;
        *_t4;
        let _t5 = &outer.s1;
        if (cond) _t6 = id<Inner>(_t5) else _t6 = id<Inner>(&outer.s1);
        *_t6;
        *_t5;
        *&_t5.f1;
        *_t5;
        *_t6;
        let _t7 = &mut outer.s1;
        if (cond) _t8 = /*freeze*/_t7 else _t8 = &other.s1;
        *_t8;
        *_t7;
        *&_t7.f1;
        *_t7;
        *_t8;
        let _t9 = &mut outer.s1;
        if (cond) _t10 = id<Inner>(/*freeze*/_t9) else _t10 = &other.s1;
        *_t10;
        *_t9;
        *&_t9.f1;
        *_t9;
        *_t10;
        let _t11 = &mut outer.s1;
        if (cond) _t12 = _t11 else _t12 = &mut outer.s2;
        *&mut _t12.f1;
        *_t12;
        *_t11;
        let _t13 = &mut outer.s1;
        if (cond) _t14 = id_mut<Inner>(_t13) else _t14 = &mut outer.s2;
        *&mut _t14.f1;
        *_t14;
        *_t13;
    }
    fun t1(cond: bool, outer: &mut Outer, other: &mut Outer) {
        let _t14;
        let _t12;
        let _t10;
        let _t8;
        let _t6;
        let _t4;
        let _t3 = &outer.s1;
        if (cond) _t4 = &_t3.f1 else _t4 = &_t3.f2;
        *_t4;
        *_t3;
        *&_t3.f1;
        *_t3;
        *_t4;
        let _t5 = &outer.s1;
        if (cond) _t6 = id<u64>(&_t5.f1) else _t6 = &&other.s1.f2;
        *_t6;
        *_t5;
        *&_t5.f1;
        *_t5;
        *_t6;
        let _t7 = &mut outer.s1;
        if (cond) _t8 = &_t7.f1 else _t8 = &&other.s1.f2;
        *_t8;
        *_t7;
        *&_t7.f1;
        *_t7;
        *_t8;
        let _t9 = &mut outer.s1;
        if (cond) _t10 = id<u64>(&_t9.f1) else _t10 = &&other.s1.f2;
        *_t10;
        *_t9;
        *&_t9.f1;
        *_t9;
        *_t10;
        let _t11 = &mut outer.s1;
        if (cond) _t12 = &mut _t11.f1 else _t12 = &mut _t11.f2;
        *_t12;
        *&mut _t11.f1;
        *_t11;
        let _t13 = &mut outer.s1;
        if (cond) _t14 = id_mut<u64>(&mut _t13.f1) else _t14 = &mut _t13.f2;
        *_t14;
        *&mut _t13.f1;
        *_t13;
    }
}

--- unable to recompile the decompiled code:
exiting with context checking errors
error: unexpected token
   ┌─ borrow_field_combo.move:77:53
   │
77 │         if (cond) _t6 = id<u64>(&_t5.f1) else _t6 = &&other.s1.f2;
   │                                                     ^^
   │                                                     │
   │                                                     Unexpected '&&'
   │                                                     Expected an expression term
