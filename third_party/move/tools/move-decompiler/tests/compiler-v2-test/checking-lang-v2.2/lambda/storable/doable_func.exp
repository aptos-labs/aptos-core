module 0x42::mod1 {
    friend fun triple(x: u64): u64 {
        x * 3
    }
}

module 0x42::mod2 {
    friend fun double(x: u64): u64 {
        x * 2
    }
}

module 0x42::mod3 {
    public fun multiply(x: u64, y: u64): u64 {
        x * y
    }
}

module 0x42::mod4 {
    public fun alt_multiply(x: u64, y: u64): u64 {
        x * y
    }
}

module 0x42::test {
    use 0x42::mod1;
    use 0x42::mod2;
    use 0x42::mod3;
    use 0x42::mod4;
    fun add_mul(x: u64, y: u64, z: u64): u64 {
        z * (x + y)
    }
    fun choose_function1(key: u64, x: u64): u64 {
        let _t2;
        if (key == 0) _t2 = |arg0| mod2::double(arg0) else if (key == 1) _t2 = |arg0| mod1::triple(arg0) else if (key == 2) _t2 = |arg0| mod3::multiply(4, arg0) else if (key == 3) _t2 = |arg0| mod4::alt_multiply(5, arg0) else if (key == 4) _t2 = |arg0| mod3::multiply(6, arg0) else if (key == 5) _t2 = |arg0| multiply3(3, 2, arg0) else if (key == 6) _t2 = |arg0| mod3::multiply(7, arg0) else if (key == 7) _t2 = |arg0| multiply3(4, 2, arg0) else if (key == 8) _t2 = |arg0| multiply3(3, 3, arg0) else if (key == 9) _t2 = |arg0| __lambda__1__choose_function1(2, 5, arg0) else if (key == 10) _t2 = |arg0| mod4::alt_multiply(11, arg0) else if (key == 11) _t2 = |arg0| __lambda__2__choose_function1(|(arg0,arg1)| mod3::multiply(arg0, arg1), arg0) else if (key == 12) _t2 = |arg0| __lambda__3__choose_function1(|arg0| mod3::multiply(12, arg0), arg0) else if (key == 14) _t2 = |arg0| __lambda__4__choose_function1(|arg0| multiply3(2, 2, arg0), arg0) else _t2 = |arg0| __lambda__6__choose_function1(|(arg0,arg1)| __lambda__5__choose_function1(arg0, arg1), arg0);
        _t2(x)
    }
    fun multiply3(x: u64, y: u64, z: u64): u64 {
        x * y * z
    }
    fun __lambda__1__choose_function1(x: u64, y: u64, z: u64): u64 {
        multiply3(x + 1, y, z)
    }
    fun __lambda__2__choose_function1(g: |(u64, u64)|(u64), x: u64): u64 {
        g(11, x)
    }
    fun __lambda__3__choose_function1(h: |u64|(u64), x: u64): u64 {
        h(x)
    }
    fun __lambda__4__choose_function1(i: |u64|(u64), z: u64): u64 {
        i(z)
    }
    fun __lambda__5__choose_function1(x: u64, y: u64): u64 {
        mod3::multiply(x, y - 1 + 1)
    }
    fun __lambda__6__choose_function1(i: |(u64, u64)|(u64), x: u64): u64 {
        i(15, x)
    }
    public fun test_functions() {
        let _t0 = 0;
        let _t1 = false;
        'l0: loop {
            loop {
                if (_t1) _t0 = _t0 + 1 else _t1 = true;
                if (!(_t0 < 15)) break 'l0;
                if (choose_function1(_t0, 3) == (_t0 + 2) * 3) continue;
                break
            };
            abort _t0
        };
    }
}

--- unable to recompile the decompiled code:
exiting with context checking errors
error: unexpected token
   ┌─ doable_func.move:35:696
   │
35 │         if (key == 0) _t2 = |arg0| mod2::double(arg0) else if (key == 1) _t2 = |arg0| mod1::triple(arg0) else if (key == 2) _t2 = |arg0| mod3::multiply(4, arg0) else if (key == 3) _t2 = |arg0| mod4::alt_multiply(5, arg0) else if (key == 4) _t2 = |arg0| mod3::multiply(6, arg0) else if (key == 5) _t2 = |arg0| multiply3(3, 2, arg0) else if (key == 6) _t2 = |arg0| mod3::multiply(7, arg0) else if (key == 7) _t2 = |arg0| multiply3(4, 2, arg0) else if (key == 8) _t2 = |arg0| multiply3(3, 3, arg0) else if (key == 9) _t2 = |arg0| __lambda__1__choose_function1(2, 5, arg0) else if (key == 10) _t2 = |arg0| mod4::alt_multiply(11, arg0) else if (key == 11) _t2 = |arg0| __lambda__2__choose_function1(|(arg0,arg1)| mod3::multiply(arg0, arg1), arg0) else if (key == 12) _t2 = |arg0| __lambda__3__choose_function1(|arg0| mod3::multiply(12, arg0), arg0) else if (key == 14) _t2 = |arg0| __lambda__4__choose_function1(|arg0| multiply3(2, 2, arg0), arg0) else _t2 = |arg0| __lambda__6__choose_function1(|(arg0,arg1)| __lambda__5__choose_function1(arg0, arg1), arg0);
   │
   ││
   │nexpected '('
   │xpected a variable or struct or variant name
