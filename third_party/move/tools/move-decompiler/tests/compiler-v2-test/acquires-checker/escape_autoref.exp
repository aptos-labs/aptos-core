module 0x42::m {
    struct Object has copy, drop {
        inner: address,
    }
    struct ObjectCore has key {
        owner: address,
    }
    fun make(): Object {
        abort 0
    }
    fun owner_correct(o: Object): address {
        *&borrow_global(*&(&o).inner).owner
    }
    fun owner_read_ref_missing(o: Object): address {
        *&borrow_global(*&(&o).inner).owner
    }
    fun will_autoref(): address {
        *&(&make()).inner
    }
}

--- unable to recompile the decompiled code:
exiting with context checking errors
error: unable to infer instantiation of type `&key + struct{owner}` (consider providing type arguments or annotating the type)
   ┌─ escape_autoref.move:12:11
   │
12 │         *&borrow_global(*&(&o).inner).owner
   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: unable to infer instantiation of type `&key + struct{owner}` (consider providing type arguments or annotating the type)
   ┌─ escape_autoref.move:15:11
   │
15 │         *&borrow_global(*&(&o).inner).owner
   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
