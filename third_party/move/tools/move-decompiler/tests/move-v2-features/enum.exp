module 0x99::enum_complex {
    enum Admin has drop {
        Superuser,
        User {
            _0: u64,
        }
    }
    enum Entity has drop {
        Person {
            id: u64,
        }
        Institution {
            id: u64,
            admin: Admin,
        }
    }
    fun admin_id(self: &Entity): u64 {
        let _v0;
        'l0: loop {
            let _v1;
            let _v2;
            if (!((self is Institution) && (&self.admin is Superuser))) {
                let _v3;
                let _v4;
                loop {
                    let _v5;
                    if (self is Institution) {
                        _v5 = &self.admin;
                        if (_v5 is User) {
                            _v2 = &_v5._0;
                            if (*_v2 > 10) break
                        }
                    };
                    loop {
                        if (self is Institution) {
                            _v5 = &self.admin;
                            if (_v5 is User) {
                                if (*&_v5._0 <= 10) break}
                        };
                        _v4 = self;
                        if (_v4 is Person) {
                            _v2 = &_v4.id;
                            if (*_v2 > 10) {
                                _v0 = *_v2;
                                break 'l0
                            }
                        };
                        if (_v4 is Institution) {
                            _v0 = *&_v4.id;
                            break 'l0
                        };
                        _v0 = 0;
                        break 'l0
                    };
                    _v4 = self;
                    loop {
                        if (_v4 is Person) {
                            _v2 = &_v4.id;
                            if (*_v2 > 10) {
                                _v3 = *_v2;
                                break
                            }
                        };
                        if (_v4 is Institution) {
                            _v3 = *&_v4.id;
                            break
                        };
                        _v3 = 0;
                        break
                    };
                    _v0 = _v3 + 5;
                    break 'l0
                };
                _v1 = *_v2;
                _v4 = self;
                loop {
                    if (_v4 is Person) {
                        _v2 = &_v4.id;
                        if (*_v2 > 10) {
                            _v3 = *_v2;
                            break
                        }
                    };
                    if (_v4 is Institution) {
                        _v3 = *&_v4.id;
                        break
                    };
                    _v3 = 0;
                    break
                };
                _v0 = _v1 + _v3;
                break
            };
            loop {
                if (self is Person) {
                    _v2 = &self.id;
                    if (*_v2 > 10) {
                        _v1 = *_v2;
                        break
                    }
                };
                if (self is Institution) {
                    _v1 = *&self.id;
                    break
                };
                _v1 = 0;
                break
            };
            _v0 = 1 + _v1;
            break
        };
        _v0
    }
}
module 0x99::enum_simple {
    enum Shape {
        Circle {
            radius: u64,
        }
        Rectangle {
            width: u64,
            height: u64,
        }
    }
    fun destroy_empty(self: Shape): bool {
        let _v0;
        let _v1 = &self;
        if (_v1 is Circle) {
            let Shape::Circle{radius: _v2} = self;
            _v0 = true
        } else if (_v1 is Rectangle) {
            let Shape::Rectangle{width: _v3, height: _v4} = self;
            _v0 = false
        } else abort 14566554180833181697;
        _v0
    }
    fun example_destroy_shapes() {
        let _v0 = Shape::Circle{radius: 0};
        let _v1 = Shape::Rectangle{width: 0, height: 0};
        let _v2 = destroy_empty(_v0);
        let _v3 = destroy_empty(_v1);
    }
}

============ recompilation succeeded ========
