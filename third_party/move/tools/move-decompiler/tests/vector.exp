
module 0x1::vector {
    public native fun empty<Element>(): vector<Element>;
    public native fun length<Element>(self: &vector<Element>): u64;
    public native fun borrow<Element>(self: &vector<Element>, i: u64): &Element;
    public native fun borrow_mut<Element>(self: &mut vector<Element>, i: u64): &mut Element;
    public native fun push_back<Element>(self: &mut vector<Element>, e: Element);
    public native fun pop_back<Element>(self: &mut vector<Element>): Element;
    public native fun destroy_empty<Element>(self: vector<Element>);
    public native fun swap<Element>(self: &mut vector<Element>, i: u64, j: u64);
    public fun contains<Element>(self: &vector<Element>, e: &Element): bool {
        let _t2;
        _t2 = 0;
        {
            'l0: loop {
                loop {
                    if (!(_t2 < length<Element>(self))) break 'l0;
                    if (borrow<Element>(self, _t2) == e) break 'l0;
                    _t2 = _t2 + 1
                };
                break
            };
            return true
        };
        false
    }
    public fun index_of<Element>(self: &vector<Element>, e: &Element): (bool, u64) {
        let _t2;
        _t2 = 0;
        {
            'l0: loop {
                loop {
                    if (!(_t2 < length<Element>(self))) break 'l0;
                    if (borrow<Element>(self, _t2) == e) break 'l0;
                    _t2 = _t2 + 1
                };
                break
            };
            return (true, _t2)
        };
        (false, 0)
    }
    public fun range(start: u64, end: u64): vector<u64> {
        range_with_step(start, end, 1)
    }
    public fun range_with_step(start: u64, end: u64, step: u64): vector<u64> {
        let _t3;
        if (!(step > 0)) abort 131075;
        _t3 = empty<u64>();
        'l0: loop {
            loop {
                if (!(start < end)) break 'l0;
                push_back<u64>(&mut _t3, start);
                start = start + step
            };
            break
        };
        _t3
    }
    public fun append<Element>(self: &mut vector<Element>, other: vector<Element>) {
        reverse<Element>(&mut other);
        reverse_append<Element>(self, other);
    }
    public fun reverse<Element>(self: &mut vector<Element>) {
        reverse_slice<Element>(self, 0, length<Element>(/*freeze*/self));
    }
    public fun reverse_append<Element>(self: &mut vector<Element>, other: vector<Element>) {
        let _t2;
        _t2 = length<Element>(&other);
        'l0: loop {
            loop {
                if (!(_t2 > 0)) break 'l0;
                push_back<Element>(self, pop_back<Element>(&mut other));
                _t2 = _t2 - 1
            };
            break
        };
        destroy_empty<Element>(other);
    }
    public fun insert<Element>(self: &mut vector<Element>, i: u64, e: Element) {
        let _t3;
        _t3 = length<Element>(/*freeze*/self);
        if (!(i <= _t3)) abort 131072;
        push_back<Element>(self, e);
        'l0: loop {
            loop {
                if (!(i < _t3)) break 'l0;
                swap<Element>(self, i, _t3);
                i = i + 1
            };
            break
        };
    }
    public fun is_empty<Element>(self: &vector<Element>): bool {
        length<Element>(self) == 0
    }
    public fun remove<Element>(self: &mut vector<Element>, i: u64): Element {
        let _t2;
        _t2 = length<Element>(/*freeze*/self);
        if (i >= _t2) abort 131072;
        'l0: loop {
            loop {
                if (!(i < _t2 - 1)) break 'l0;
                i = i + 1;
                swap<Element>(self, i, i)
            };
            break
        };
        pop_back<Element>(self)
    }
    public fun remove_value<Element>(self: &mut vector<Element>, val: &Element): vector<Element> {
        let _t3;
        let _t12;
        let _t8;
        let _t7;
        (_t7,_t8) = index_of<Element>(/*freeze*/self, val);
        loop {
            if (_t7) {
                _t12 = empty<Element>();
                push_back<Element>(&mut _t12, remove<Element>(self, _t8));
                _t3 = _t12;
                break
            };
            _t3 = empty<Element>();
            break
        };
        _t3
    }
    public fun reverse_slice<Element>(self: &mut vector<Element>, left: u64, right: u64) {
        if (!(left <= right)) abort 131073;
        'l0: loop {
            if (!(left == right)) {
                right = right - 1;
                loop {
                    if (!(left < right)) break 'l0;
                    swap<Element>(self, left, right);
                    left = left + 1;
                    right = right - 1
                }
            };
            return ()
        };
    }
    public fun rotate<Element>(self: &mut vector<Element>, rot: u64): u64 {
        rotate_slice<Element>(self, 0, rot, length<Element>(/*freeze*/self))
    }
    public fun rotate_slice<Element>(self: &mut vector<Element>, left: u64, rot: u64, right: u64): u64 {
        reverse_slice<Element>(self, left, rot);
        reverse_slice<Element>(self, rot, right);
        reverse_slice<Element>(self, left, right);
        left + (right - rot)
    }
    public fun singleton<Element>(e: Element): vector<Element> {
        let _t1;
        _t1 = empty<Element>();
        push_back<Element>(&mut _t1, e);
        _t1
    }
    public fun slice<Element: copy>(self: &vector<Element>, start: u64, end: u64): vector<Element> {
        let _t4;
        let _t3;
        loop {
            if (start <= end) {
                _t3 = end <= length<Element>(self);
                break
            };
            _t3 = false;
            break
        };
        if (!_t3) abort 131076;
        _t4 = empty<Element>();
        'l0: loop {
            loop {
                if (!(start < end)) break 'l0;
                push_back<Element>(&mut _t4, *borrow<Element>(self, start));
                start = start + 1
            };
            break
        };
        _t4
    }
    public fun swap_remove<Element>(self: &mut vector<Element>, i: u64): Element {
        if (is_empty<Element>(/*freeze*/self)) abort 131072;
        swap<Element>(self, i, length<Element>(/*freeze*/self) - 1);
        pop_back<Element>(self)
    }
    public fun trim<Element>(self: &mut vector<Element>, new_len: u64): vector<Element> {
        let _t2;
        _t2 = trim_reverse<Element>(self, new_len);
        reverse<Element>(&mut _t2);
        _t2
    }
    public fun trim_reverse<Element>(self: &mut vector<Element>, new_len: u64): vector<Element> {
        let _t3;
        let _t2;
        _t2 = length<Element>(/*freeze*/self);
        if (!(new_len <= _t2)) abort 131072;
        _t3 = empty<Element>();
        'l0: loop {
            loop {
                if (!(new_len < _t2)) break 'l0;
                push_back<Element>(&mut _t3, pop_back<Element>(self));
                _t2 = _t2 - 1
            };
            break
        };
        _t3
    }
}
