
module 0x1::option {
    use 0x1::vector;
    struct Option<Element> has copy, drop, store {
        vec: vector<Element>,
    }
    public fun borrow<Element>(self: &Option<Element>): &Element {
        if (!is_some<Element>(self)) abort 262145;
        vector::borrow<Element>(&self.vec, 0)
    }
    public fun borrow_mut<Element>(self: &mut Option<Element>): &mut Element {
        if (!is_some<Element>(/*freeze*/self)) abort 262145;
        vector::borrow_mut<Element>(&mut self.vec, 0)
    }
    public fun swap<Element>(self: &mut Option<Element>, e: Element): Element {
        let _t2;
        if (!is_some<Element>(/*freeze*/self)) abort 262145;
        _t2 = &mut self.vec;
        vector::push_back<Element>(_t2, e);
        vector::pop_back<Element>(_t2)
    }
    public fun contains<Element>(self: &Option<Element>, e_ref: &Element): bool {
        vector::contains<Element>(&self.vec, e_ref)
    }
    public fun is_some<Element>(self: &Option<Element>): bool {
        !vector::is_empty<Element>(&self.vec)
    }
    public fun borrow_with_default<Element>(self: &Option<Element>, default_ref: &Element): &Element {
        let _t3;
        let _t2;
        _t2 = &self.vec;
        if (vector::is_empty<Element>(_t2)) _t3 = default_ref else _t3 = vector::borrow<Element>(_t2, 0);
        _t3
    }
    public fun destroy_none<Element>(self: Option<Element>) {
        let _t4;
        if (!is_none<Element>(&self)) abort 262144;
        Option<Element>{vec: _t4} = self;
        vector::destroy_empty<Element>(_t4);
    }
    public fun is_none<Element>(self: &Option<Element>): bool {
        vector::is_empty<Element>(&self.vec)
    }
    public fun destroy_some<Element>(self: Option<Element>): Element {
        let _t1;
        let _t5;
        if (!is_some<Element>(&self)) abort 262145;
        Option<Element>{vec: _t5} = self;
        _t1 = _t5;
        vector::destroy_empty<Element>(_t1);
        vector::pop_back<Element>(&mut _t1)
    }
    public fun destroy_with_default<Element: drop>(self: Option<Element>, default: Element): Element {
        let _t3;
        let _t2;
        let _t5;
        Option<Element>{vec: _t5} = self;
        _t2 = _t5;
        if (vector::is_empty<Element>(/*freeze*/&mut _t2)) _t3 = default else _t3 = vector::pop_back<Element>(&mut _t2);
        _t3
    }
    public fun extract<Element>(self: &mut Option<Element>): Element {
        if (!is_some<Element>(/*freeze*/self)) abort 262145;
        vector::pop_back<Element>(&mut self.vec)
    }
    public fun fill<Element>(self: &mut Option<Element>, e: Element) {
        let _t2;
        _t2 = &mut self.vec;
        if (!vector::is_empty<Element>(/*freeze*/_t2)) abort 262144;
        vector::push_back<Element>(_t2, e);
    }
    public fun from_vec<Element>(vec: vector<Element>): Option<Element> {
        if (!(vector::length<Element>(&vec) <= 1)) abort 262146;
        Option<Element>{vec: vec}
    }
    public fun get_with_default<Element: copy + drop>(self: &Option<Element>, default: Element): Element {
        let _t3;
        let _t2;
        _t2 = &self.vec;
        if (vector::is_empty<Element>(_t2)) _t3 = default else _t3 = *vector::borrow<Element>(_t2, 0);
        _t3
    }
    public fun none<Element>(): Option<Element> {
        Option<Element>{vec: vector::empty<Element>()}
    }
    public fun some<Element>(e: Element): Option<Element> {
        Option<Element>{vec: vector::singleton<Element>(e)}
    }
    public fun swap_or_fill<Element>(self: &mut Option<Element>, e: Element): Option<Element> {
        let _t3;
        let _t2;
        _t2 = &mut self.vec;
        if (vector::is_empty<Element>(/*freeze*/_t2)) _t3 = none<Element>() else _t3 = some<Element>(vector::pop_back<Element>(_t2));
        vector::push_back<Element>(_t2, e);
        _t3
    }
    public fun to_vec<Element>(self: Option<Element>): vector<Element> {
        let _t2;
        Option<Element>{vec: _t2} = self;
        _t2
    }
}
