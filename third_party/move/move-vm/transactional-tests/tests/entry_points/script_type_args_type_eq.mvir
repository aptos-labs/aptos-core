//# publish
module 0x42.M {
    import 0x1.signer;

    struct Item has store { _dummy: bool }
    struct Cup<T> has store { _dummy: bool }
    struct Box<T> has key { _dummy: bool }

    public type_eq<T1: store, T2: store>(account: &signer): bool acquires Box {
        let sender: address;
        let r: bool;
        let b: bool;
    label b0:
        sender = signer.address_of(copy(account));
        move_to<Box<T1>>(move(account), Box<T1> { _dummy: false });
        r = exists<Box<T2>>(copy(sender));
        Box<T1> { _dummy: b } = move_from<Box<T1>>(move(sender));
        return move(r);
    }
}
// check: "Keep(EXECUTED)"

//# run --type-args u64 --signers 0x1
import 0x42.M;

main<T: store>(account: signer) {
label b0:
    assert(M.type_eq<T, u64>(&account), 100);
    assert(!M.type_eq<T, u8>(&account), 101);
    return;
}



//# run --type-args 0x42::M::Item --signers 0x2
import 0x42.M;

main<T: store>(account: signer) {
label b0:
    assert(M.type_eq<T, M.Item>(&account), 100);
    assert(!M.type_eq<T, u8>(&account), 101);
    return;
}


//# run --type-args 0x42::M::Cup<0x42::M::Cup<vector<u64>>> --signers 0x3
import 0x42.M;

main<T: store>(account: signer) {
label b0:
    assert(M.type_eq<T, M.Cup<M.Cup<vector<u64>>>>(&account), 100);
    assert(!M.type_eq<T,  M.Cup<M.Cup<vector<u8>>>>(&account), 101);
    return;
}
