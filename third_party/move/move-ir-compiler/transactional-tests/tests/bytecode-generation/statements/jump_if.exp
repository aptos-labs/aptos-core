processed 4 tasks
task 0 lines 1-22:  print-bytecode [// This is roughly equivalent to the following Move program:]
// Bytecode version v7
script
// Function definition at index 0
entry public fun main()
    local l0: u64
    ld_u64 42
    ld_u64 0
    gt
    br_true l0
    branch l1
    // @5
l0: ld_u64 1
    st_loc l0
    branch l2
l1: ld_u64 2
    st_loc l0
    // @10
    branch l2
l2: ret


task 1 lines 24-41:  print-bytecode [// This is roughly equivalent to the following Move program:]
// Bytecode version v7
script
// Function definition at index 0
entry public fun main()
    local l0: u64
    ld_u64 42
    ld_u64 0
    gt
    br_true l0
    ld_u64 2
    // @5
    st_loc l0
    branch l1
l0: ld_u64 1
    st_loc l0
l1: ret


task 2 lines 43-59:  print-bytecode [// `jump_if` statements can be sequenced, akin to "nested" `if` statements in Move.]
// Bytecode version v7
script
// Function definition at index 0
entry public fun main()
    local l0: u64
    ld_u64 0
    ld_u64 1
    lt
    br_true l0
    ld_u64 0
    // @5
    st_loc l0
    branch l1
l0: ld_u64 2
    ld_u64 1
    gt
    // @10
    br_true l2
    ld_u64 1
    st_loc l0
    branch l1
l2: ld_u64 2
    // @15
    st_loc l0
l1: ret


task 3 lines 61-74:  print-bytecode [// `return` statements can appear anywhere, including within a jump destination's block.]
// Bytecode version v7
script
// Function definition at index 0
entry public fun main()
    local l0: u64
    ld_u64 0
    ld_u64 1
    neq
    br_true l0
    ld_u64 1
    // @5
    st_loc l0
    branch l1
l0: ld_u64 2
    st_loc l0
    ret
    // @10
l1: ret


