============ initial translation from Move ================

[variant baseline]
fun ReachingDefTest::basic($t0|a: u64, $t1|b: u64): u64 {
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
  0: $t2 := copy($t0)
  1: $t3 := move($t1)
  2: $t4 := +($t2, $t3)
  3: $t5 := move($t0)
  4: $t6 := /($t4, $t5)
  5: $t7 := 1
  6: $t8 := +($t6, $t7)
  7: return $t8
}


[variant baseline]
fun ReachingDefTest::create_resource($t0|sender: &signer) {
     var $t1: &signer
     var $t2: u64
     var $t3: bool
     var $t4: 0x42::ReachingDefTest::R
  0: $t1 := move($t0)
  1: $t2 := 1
  2: $t3 := false
  3: $t4 := pack 0x42::ReachingDefTest::R($t2, $t3)
  4: move_to<0x42::ReachingDefTest::R>($t4, $t1)
  5: return ()
}

============ after pipeline `reaching_def` ================

[variant baseline]
fun ReachingDefTest::basic($t0|a: u64, $t1|b: u64): u64 {
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
  0: $t2 := copy($t0)
  1: $t3 := move($t1)
  2: $t4 := +($t0, $t1)
  3: $t5 := move($t0)
  4: $t6 := /($t4, $t0)
  5: $t7 := 1
  6: $t8 := +($t6, $t7)
  7: return $t8
}


[variant baseline]
fun ReachingDefTest::create_resource($t0|sender: &signer) {
     var $t1: &signer
     var $t2: u64
     var $t3: bool
     var $t4: 0x42::ReachingDefTest::R
  0: $t1 := move($t0)
  1: $t2 := 1
  2: $t3 := false
  3: $t4 := pack 0x42::ReachingDefTest::R($t2, $t3)
  4: move_to<0x42::ReachingDefTest::R>($t4, $t0)
  5: return ()
}
