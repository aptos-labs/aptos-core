
=== Processing m::f =====================================================
--- Source
public fun f(length: u64): u64 {
        assert!(length > 0, 1);
        assert!(length < 100, 2);
        let counter = 0;
        while (counter < length) counter += 1;
        counter
    }

--- Stackless Bytecode
public fun m::f($t0|length: u64): u64 {
     var $t1|$t3: u64
     var $t2|$t11: u64 [unused]
     var $t3: u64
     var $t4: u64
     var $t5: bool
     var $t6: u64
     var $t7: u64
     var $t8: bool
     var $t9: u64
     var $t10: u64
     var $t11: u64
     var $t12: bool
     var $t13: u64
     var $t14: u64
     var $t15: u64
     var $t16: u64
     var $t17: u64
     var $t18: u64
  0: $t3 := copy($t0)
  1: $t4 := 0
  2: $t5 := >($t3, $t4)
  3: if ($t5) goto 4 else goto 30
  4: label L1
  5: $t6 := copy($t0)
  6: $t7 := 100
  7: $t8 := <($t6, $t7)
  8: if ($t8) goto 9 else goto 27
  9: label L3
 10: $t9 := 0
 11: $t1 := $t9
 12: goto 13
 13: label L6
 14: $t10 := copy($t1)
 15: $t11 := copy($t0)
 16: $t12 := <($t10, $t11)
 17: if ($t12) goto 18 else goto 24
 18: label L5
 19: $t13 := move($t1)
 20: $t14 := 1
 21: $t15 := +($t13, $t14)
 22: $t1 := $t15
 23: goto 13
 24: label L4
 25: $t16 := move($t1)
 26: return $t16
 27: label L2
 28: $t17 := 2
 29: abort($t17)
 30: label L0
 31: $t18 := 1
 32: abort($t18)
}

--- Raw Generated AST
_t3: u64 = length;
_t4: u64 = 0;
_t5: bool = Gt(_t3, _t4);
loop {
  if (_t5) break;
  _t18: u64 = 1;
  Abort(_t18)
};
_t6: u64 = length;
_t7: u64 = 100;
_t8: bool = Lt(_t6, _t7);
loop {
  if (_t8) break;
  _t17: u64 = 2;
  Abort(_t17)
};
_t9: u64 = 0;
_t1: u64 = _t9;
loop {
  _t10: u64 = _t1;
  _t11: u64 = length;
  _t12: bool = Lt(_t10, _t11);
  if (Not(_t12)) break;
  _t13: u64 = _t1;
  _t14: u64 = 1;
  _t15: u64 = Add(_t13, _t14);
  _t1: u64 = _t15;
  continue
};
_t16: u64 = _t1;
return _t16

--- Assign-Transformed Generated AST
loop {
  if (Gt(length, 0)) break;
  Abort(1)
};
loop {
  if (Lt(length, 100)) break;
  Abort(2)
};
_t1: u64 = 0;
loop {
  if (Not(Lt(_t1, length))) break;
  _t1: u64 = Add(_t1, 1);
  continue
};
return _t1

--- If-Transformed Generated AST
if (Not(Gt(length, 0))) Abort(1);
if (Not(Lt(length, 100))) Abort(2);
_t1: u64 = 0;
loop {
  if (Not(Lt(_t1, length))) break;
  _t1: u64 = Add(_t1, 1);
  continue
};
return _t1

--- Var-Bound Generated AST
{
  let _t1: u64;
  if (Not(Gt(length, 0))) Abort(1);
  if (Not(Lt(length, 100))) Abort(2);
  _t1: u64 = 0;
  loop {
    if (Not(Lt(_t1, length))) break;
    _t1: u64 = Add(_t1, 1);
    continue
  };
  return _t1
}

=== Sourcified Output ============================================
module 0x815::m {
    public fun f(length: u64): u64 {
        let _t1;
        if (!(length > 0)) abort 1;
        if (!(length < 100)) abort 2;
        _t1 = 0;
        while (_t1 < length) _t1 = _t1 + 1;
        _t1
    }
}
