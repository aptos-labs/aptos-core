
=== Processing m::is_index_set =====================================================
--- Source
public fun is_index_set(self: &BitVector, bit_index: u64): bool {
        assert!(bit_index < vector::length(&self.bit_field), EINDEX);
        *vector::borrow(&self.bit_field, bit_index)
    }

--- Stackless Bytecode
public fun m::is_index_set($t0|self: &0x1::m::BitVector, $t1|bit_index: u64): bool {
     var $t2|$t4: u64
     var $t3|$t5: u64
     var $t4: u64
     var $t5: &0x1::m::BitVector
     var $t6: &vector<bool>
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: bool
     var $t11: &0x1::m::BitVector
     var $t12: &vector<bool>
     var $t13: u64
     var $t14: &bool
     var $t15: bool
     var $t16: &0x1::m::BitVector
     var $t17: u64
  0: $t4 := copy($t1)
  1: $t2 := $t4
  2: $t5 := copy($t0)
  3: $t6 := borrow_field<0x1::m::BitVector>.bit_field($t5)
  4: $t7 := vector::length<bool>($t6)
  5: $t3 := $t7
  6: $t8 := move($t2)
  7: $t9 := move($t3)
  8: $t10 := <($t8, $t9)
  9: if ($t10) goto 10 else goto 17
 10: label L1
 11: $t11 := move($t0)
 12: $t12 := borrow_field<0x1::m::BitVector>.bit_field($t11)
 13: $t13 := move($t1)
 14: $t14 := vector::borrow<bool>($t12, $t13)
 15: $t15 := read_ref($t14)
 16: return $t15
 17: label L0
 18: $t16 := move($t0)
 19: drop($t16)
 20: $t17 := 131072
 21: abort($t17)
}

--- Raw Generated AST
_t4: u64 = bit_index;
_t2: u64 = _t4;
_t5: &BitVector = self;
_t6: &vector<bool> = select m::BitVector.bit_field(_t5);
_t7: u64 = vector::length<bool>(_t6);
_t3: u64 = _t7;
_t8: u64 = _t2;
_t9: u64 = _t3;
_t10: bool = Lt(_t8, _t9);
loop {
  if (_t10) break;
  _t16: &BitVector = self;
  _t17: u64 = 131072;
  Abort(_t17)
};
_t11: &BitVector = self;
_t12: &vector<bool> = select m::BitVector.bit_field(_t11);
_t13: u64 = bit_index;
_t14: &bool = vector::borrow<bool>(_t12, _t13);
_t15: bool = Deref(_t14);
return _t15

--- Assign-Transformed Generated AST
loop {
  if (Lt(bit_index, vector::length<bool>(select m::BitVector.bit_field(self)))) break;
  Abort(131072)
};
return Deref(vector::borrow<bool>(select m::BitVector.bit_field(self), bit_index))

--- If-Transformed Generated AST
if (Not(Lt(bit_index, vector::length<bool>(select m::BitVector.bit_field(self))))) Abort(131072);
return Deref(vector::borrow<bool>(select m::BitVector.bit_field(self), bit_index))

--- Var-Bound Generated AST
if (Not(Lt(bit_index, vector::length<bool>(select m::BitVector.bit_field(self))))) Abort(131072);
return Deref(vector::borrow<bool>(select m::BitVector.bit_field(self), bit_index))


=== Processing m::set =====================================================
--- Source
public fun set(self: &mut BitVector, bit_index: u64) {
        assert!(bit_index < vector::length(&self.bit_field), EINDEX);
        let x = vector::borrow_mut(&mut self.bit_field, bit_index);
        *x = true;
    }

--- Stackless Bytecode
public fun m::set($t0|self: &mut 0x1::m::BitVector, $t1|bit_index: u64) {
     var $t2|$t3: u64
     var $t3|$t4: u64
     var $t4|x: &mut bool
     var $t5: u64
     var $t6: &mut 0x1::m::BitVector
     var $t7: &vector<bool>
     var $t8: u64
     var $t9: u64
     var $t10: u64
     var $t11: bool
     var $t12: &mut 0x1::m::BitVector
     var $t13: &mut vector<bool>
     var $t14: u64
     var $t15: &mut bool
     var $t16: bool
     var $t17: &mut bool
     var $t18: &mut 0x1::m::BitVector
     var $t19: u64
  0: $t5 := copy($t1)
  1: $t2 := $t5
  2: $t6 := copy($t0)
  3: $t7 := borrow_field<0x1::m::BitVector>.bit_field($t6)
  4: $t8 := vector::length<bool>($t7)
  5: $t3 := $t8
  6: $t9 := move($t2)
  7: $t10 := move($t3)
  8: $t11 := <($t9, $t10)
  9: if ($t11) goto 10 else goto 20
 10: label L1
 11: $t12 := move($t0)
 12: $t13 := borrow_field<0x1::m::BitVector>.bit_field($t12)
 13: $t14 := move($t1)
 14: $t15 := vector::borrow_mut<bool>($t13, $t14)
 15: $t4 := $t15
 16: $t16 := true
 17: $t17 := move($t4)
 18: write_ref($t17, $t16)
 19: return ()
 20: label L0
 21: $t18 := move($t0)
 22: drop($t18)
 23: $t19 := 131072
 24: abort($t19)
}

--- Raw Generated AST
_t5: u64 = bit_index;
_t2: u64 = _t5;
_t6: &mut BitVector = self;
_t7: &vector<bool> = select m::BitVector.bit_field(_t6);
_t8: u64 = vector::length<bool>(_t7);
_t3: u64 = _t8;
_t9: u64 = _t2;
_t10: u64 = _t3;
_t11: bool = Lt(_t9, _t10);
loop {
  if (_t11) break;
  _t18: &mut BitVector = self;
  _t19: u64 = 131072;
  Abort(_t19)
};
_t12: &mut BitVector = self;
_t13: &mut vector<bool> = select m::BitVector.bit_field(_t12);
_t14: u64 = bit_index;
_t15: &mut bool = vector::borrow_mut<bool>(_t13, _t14);
_t4: &mut bool = _t15;
_t16: bool = true;
_t17: &mut bool = _t4;
_t17 = _t16;
return Tuple()

--- Assign-Transformed Generated AST
loop {
  if (Lt(bit_index, vector::length<bool>(select m::BitVector.bit_field(self)))) break;
  Abort(131072)
};
vector::borrow_mut<bool>(select m::BitVector.bit_field(self), bit_index) = true;
return Tuple()

--- If-Transformed Generated AST
if (Not(Lt(bit_index, vector::length<bool>(select m::BitVector.bit_field(self))))) Abort(131072);
vector::borrow_mut<bool>(select m::BitVector.bit_field(self), bit_index) = true;
return Tuple()

--- Var-Bound Generated AST
if (Not(Lt(bit_index, vector::length<bool>(select m::BitVector.bit_field(self))))) Abort(131072);
vector::borrow_mut<bool>(select m::BitVector.bit_field(self), bit_index) = true;
return Tuple()


=== Processing m::shift_left =====================================================
--- Source
public fun shift_left(self: &mut BitVector, amount: u64) {
        if (amount >= self.length) {
            vector::for_each_mut(&mut self.bit_field, |elem| {
                *elem = false;
            });
        } else {
            let i = amount;

            while (i < self.length) {
                if (is_index_set(self, i)) set(self, i - amount)
                else unset(self, i - amount);
                i = i + 1;
            };

            i = self.length - amount;

            while (i < self.length) {
                unset(self, i);
                i = i + 1;
            };
        }
    }

--- Stackless Bytecode
public fun m::shift_left($t0|self: &mut 0x1::m::BitVector, $t1|amount: u64) {
     var $t2|$t3: u64
     var $t3|$t6: &mut vector<bool>
     var $t4|$t9: u64
     var $t5|$t10: u64
     var $t6|$t13: &mut bool
     var $t7: &mut 0x1::m::BitVector
     var $t8: &u64
     var $t9: u64
     var $t10: u64
     var $t11: u64
     var $t12: bool
     var $t13: &mut 0x1::m::BitVector
     var $t14: &mut vector<bool>
     var $t15: u64
     var $t16: u64
     var $t17: &mut vector<bool>
     var $t18: &vector<bool>
     var $t19: u64
     var $t20: u64
     var $t21: u64
     var $t22: bool
     var $t23: &mut vector<bool>
     var $t24: u64
     var $t25: &mut bool
     var $t26: bool
     var $t27: &mut bool
     var $t28: u64
     var $t29: u64
     var $t30: u64
     var $t31: &mut vector<bool>
     var $t32: u64
     var $t33: &mut 0x1::m::BitVector
     var $t34: &u64
     var $t35: u64
     var $t36: u64
     var $t37: u64
     var $t38: bool
     var $t39: &mut 0x1::m::BitVector
     var $t40: &0x1::m::BitVector
     var $t41: u64
     var $t42: bool
     var $t43: u64
     var $t44: u64
     var $t45: u64
     var $t46: &mut 0x1::m::BitVector
     var $t47: u64
     var $t48: u64
     var $t49: u64
     var $t50: u64
     var $t51: u64
     var $t52: u64
     var $t53: u64
     var $t54: &mut 0x1::m::BitVector
     var $t55: u64
     var $t56: &mut 0x1::m::BitVector
     var $t57: &u64
     var $t58: u64
     var $t59: u64
     var $t60: u64
     var $t61: &mut 0x1::m::BitVector
     var $t62: &u64
     var $t63: u64
     var $t64: u64
     var $t65: u64
     var $t66: bool
     var $t67: &mut 0x1::m::BitVector
     var $t68: u64
     var $t69: u64
     var $t70: u64
     var $t71: u64
     var $t72: &mut 0x1::m::BitVector
  0: $t7 := copy($t0)
  1: $t8 := borrow_field<0x1::m::BitVector>.length($t7)
  2: $t9 := read_ref($t8)
  3: $t2 := $t9
  4: $t10 := copy($t1)
  5: $t11 := move($t2)
  6: $t12 := >=($t10, $t11)
  7: if ($t12) goto 8 else goto 45
  8: label L1
  9: $t13 := move($t0)
 10: $t14 := borrow_field<0x1::m::BitVector>.bit_field($t13)
 11: $t3 := $t14
 12: $t15 := 0
 13: $t2 := $t15
 14: goto 15
 15: label L4
 16: $t16 := copy($t2)
 17: $t4 := $t16
 18: $t17 := copy($t3)
 19: $t18 := freeze_ref($t17)
 20: $t19 := vector::length<bool>($t18)
 21: $t5 := $t19
 22: $t20 := move($t4)
 23: $t21 := move($t5)
 24: $t22 := <($t20, $t21)
 25: if ($t22) goto 26 else goto 39
 26: label L3
 27: $t23 := copy($t3)
 28: $t24 := copy($t2)
 29: $t25 := vector::borrow_mut<bool>($t23, $t24)
 30: $t6 := $t25
 31: $t26 := false
 32: $t27 := move($t6)
 33: write_ref($t27, $t26)
 34: $t28 := move($t2)
 35: $t29 := 1
 36: $t30 := +($t28, $t29)
 37: $t2 := $t30
 38: goto 15
 39: label L2
 40: $t31 := move($t3)
 41: drop($t31)
 42: goto 43
 43: label L14
 44: return ()
 45: label L0
 46: $t32 := copy($t1)
 47: $t2 := $t32
 48: goto 49
 49: label L9
 50: $t33 := copy($t0)
 51: $t34 := borrow_field<0x1::m::BitVector>.length($t33)
 52: $t35 := read_ref($t34)
 53: $t4 := $t35
 54: $t36 := copy($t2)
 55: $t37 := move($t4)
 56: $t38 := <($t36, $t37)
 57: if ($t38) goto 58 else goto 88
 58: label L6
 59: $t39 := copy($t0)
 60: $t40 := freeze_ref($t39)
 61: $t41 := copy($t2)
 62: $t42 := m::is_index_set($t40, $t41)
 63: if ($t42) goto 64 else goto 79
 64: label L8
 65: $t43 := copy($t2)
 66: $t44 := copy($t1)
 67: $t45 := -($t43, $t44)
 68: $t4 := $t45
 69: $t46 := copy($t0)
 70: $t47 := move($t4)
 71: m::set($t46, $t47)
 72: goto 73
 73: label L10
 74: $t48 := move($t2)
 75: $t49 := 1
 76: $t50 := +($t48, $t49)
 77: $t2 := $t50
 78: goto 49
 79: label L7
 80: $t51 := copy($t2)
 81: $t52 := copy($t1)
 82: $t53 := -($t51, $t52)
 83: $t4 := $t53
 84: $t54 := copy($t0)
 85: $t55 := move($t4)
 86: m::unset($t54, $t55)
 87: goto 73
 88: label L5
 89: $t56 := copy($t0)
 90: $t57 := borrow_field<0x1::m::BitVector>.length($t56)
 91: $t58 := read_ref($t57)
 92: $t59 := move($t1)
 93: $t60 := -($t58, $t59)
 94: $t2 := $t60
 95: goto 96
 96: label L13
 97: $t61 := copy($t0)
 98: $t62 := borrow_field<0x1::m::BitVector>.length($t61)
 99: $t63 := read_ref($t62)
100: $t1 := $t63
101: $t64 := copy($t2)
102: $t65 := move($t1)
103: $t66 := <($t64, $t65)
104: if ($t66) goto 105 else goto 114
105: label L12
106: $t67 := copy($t0)
107: $t68 := copy($t2)
108: m::unset($t67, $t68)
109: $t69 := move($t2)
110: $t70 := 1
111: $t71 := +($t69, $t70)
112: $t2 := $t71
113: goto 96
114: label L11
115: $t72 := move($t0)
116: drop($t72)
117: goto 43
}

--- Raw Generated AST
_t7: &mut BitVector = self;
_t8: &u64 = select m::BitVector.length(_t7);
_t9: u64 = Deref(_t8);
_t2: u64 = _t9;
_t10: u64 = amount;
_t11: u64 = _t2;
_t12: bool = Ge(_t10, _t11);
loop {
  loop {
    loop {
      loop {
        if (Not(_t12)) break;
        _t13: &mut BitVector = self;
        _t14: &mut vector<bool> = select m::BitVector.bit_field(_t13);
        _t3: &mut vector<bool> = _t14;
        _t15: u64 = 0;
        _t2: u64 = _t15;
        break[1]
      };
      _t32: u64 = amount;
      _t2: u64 = _t32;
      break[1]
    };
    loop {
      _t16: u64 = _t2;
      _t4: u64 = _t16;
      _t17: &mut vector<bool> = _t3;
      _t18: &vector<bool> = Freeze(true)(_t17);
      _t19: u64 = vector::length<bool>(_t18);
      _t5: u64 = _t19;
      _t20: u64 = _t4;
      _t21: u64 = _t5;
      _t22: bool = Lt(_t20, _t21);
      if (Not(_t22)) break;
      _t23: &mut vector<bool> = _t3;
      _t24: u64 = _t2;
      _t25: &mut bool = vector::borrow_mut<bool>(_t23, _t24);
      _t6: &mut bool = _t25;
      _t26: bool = false;
      _t27: &mut bool = _t6;
      _t27 = _t26;
      _t28: u64 = _t2;
      _t29: u64 = 1;
      _t30: u64 = Add(_t28, _t29);
      _t2: u64 = _t30;
      continue
    };
    _t31: &mut vector<bool> = _t3;
    break[1]
  };
  loop {
    _t33: &mut BitVector = self;
    _t34: &u64 = select m::BitVector.length(_t33);
    _t35: u64 = Deref(_t34);
    _t4: u64 = _t35;
    _t36: u64 = _t2;
    _t37: u64 = _t4;
    _t38: bool = Lt(_t36, _t37);
    if (Not(_t38)) break;
    _t39: &mut BitVector = self;
    _t40: &BitVector = Freeze(true)(_t39);
    _t41: u64 = _t2;
    _t42: bool = m::is_index_set(_t40, _t41);
    loop {
      loop {
        if (Not(_t42)) break;
        _t43: u64 = _t2;
        _t44: u64 = amount;
        _t45: u64 = Sub(_t43, _t44);
        _t4: u64 = _t45;
        _t46: &mut BitVector = self;
        _t47: u64 = _t4;
        m::set(_t46, _t47);
        break[1]
      };
      _t51: u64 = _t2;
      _t52: u64 = amount;
      _t53: u64 = Sub(_t51, _t52);
      _t4: u64 = _t53;
      _t54: &mut BitVector = self;
      _t55: u64 = _t4;
      m::unset(_t54, _t55);
      break
    };
    _t48: u64 = _t2;
    _t49: u64 = 1;
    _t50: u64 = Add(_t48, _t49);
    _t2: u64 = _t50;
    continue
  };
  _t56: &mut BitVector = self;
  _t57: &u64 = select m::BitVector.length(_t56);
  _t58: u64 = Deref(_t57);
  _t59: u64 = amount;
  _t60: u64 = Sub(_t58, _t59);
  _t2: u64 = _t60;
  loop {
    _t61: &mut BitVector = self;
    _t62: &u64 = select m::BitVector.length(_t61);
    _t63: u64 = Deref(_t62);
    amount: u64 = _t63;
    _t64: u64 = _t2;
    _t65: u64 = amount;
    _t66: bool = Lt(_t64, _t65);
    if (Not(_t66)) break;
    _t67: &mut BitVector = self;
    _t68: u64 = _t2;
    m::unset(_t67, _t68);
    _t69: u64 = _t2;
    _t70: u64 = 1;
    _t71: u64 = Add(_t69, _t70);
    _t2: u64 = _t71;
    continue
  };
  _t72: &mut BitVector = self;
  break
};
return Tuple()

--- Assign-Transformed Generated AST
_t2: u64 = Deref(select m::BitVector.length(self));
loop {
  loop {
    loop {
      loop {
        if (Not(Ge(amount, _t2))) break;
        _t3: &mut vector<bool> = select m::BitVector.bit_field(self);
        _t2: u64 = 0;
        break[1]
      };
      _t2: u64 = amount;
      break[1]
    };
    loop {
      if (Not(Lt(_t2, vector::length<bool>(Freeze(true)(_t3))))) break;
      vector::borrow_mut<bool>(_t3, _t2) = false;
      _t2: u64 = Add(_t2, 1);
      continue
    };
    break[1]
  };
  loop {
    _t4: u64 = Deref(select m::BitVector.length(self));
    if (Not(Lt(_t2, _t4))) break;
    loop {
      loop {
        if (Not(m::is_index_set(Freeze(true)(self), _t2))) break;
        _t4: u64 = Sub(_t2, amount);
        m::set(self, _t4);
        break[1]
      };
      _t4: u64 = Sub(_t2, amount);
      m::unset(self, _t4);
      break
    };
    _t2: u64 = Add(_t2, 1);
    continue
  };
  _t2: u64 = Sub(Deref(select m::BitVector.length(self)), amount);
  loop {
    if (Not(Lt(_t2, Deref(select m::BitVector.length(self))))) break;
    m::unset(self, _t2);
    _t2: u64 = Add(_t2, 1);
    continue
  };
  break
};
return Tuple()

--- If-Transformed Generated AST
_t2: u64 = Deref(select m::BitVector.length(self));
loop {
  loop {
    if Ge(amount, _t2) {
      _t3: &mut vector<bool> = select m::BitVector.bit_field(self);
      _t2: u64 = 0
    } else {
      _t2: u64 = amount;
      break
    };
    loop {
      if (Not(Lt(_t2, vector::length<bool>(Freeze(true)(_t3))))) break;
      vector::borrow_mut<bool>(_t3, _t2) = false;
      _t2: u64 = Add(_t2, 1);
      continue
    };
    break[1]
  };
  loop {
    _t4: u64 = Deref(select m::BitVector.length(self));
    if (Not(Lt(_t2, _t4))) break;
    if m::is_index_set(Freeze(true)(self), _t2) {
      _t4: u64 = Sub(_t2, amount);
      m::set(self, _t4)
    } else {
      _t4: u64 = Sub(_t2, amount);
      m::unset(self, _t4)
    };
    _t2: u64 = Add(_t2, 1);
    continue
  };
  _t2: u64 = Sub(Deref(select m::BitVector.length(self)), amount);
  loop {
    if (Not(Lt(_t2, Deref(select m::BitVector.length(self))))) break;
    m::unset(self, _t2);
    _t2: u64 = Add(_t2, 1);
    continue
  };
  break
};
return Tuple()

--- Var-Bound Generated AST
{
  let _t4: u64;
  {
    let _t3: &mut vector<bool>;
    {
      let _t2: u64;
      _t2: u64 = Deref(select m::BitVector.length(self));
      loop {
        loop {
          if Ge(amount, _t2) {
            _t3: &mut vector<bool> = select m::BitVector.bit_field(self);
            _t2: u64 = 0
          } else {
            _t2: u64 = amount;
            break
          };
          loop {
            if (Not(Lt(_t2, vector::length<bool>(Freeze(true)(_t3))))) break;
            vector::borrow_mut<bool>(_t3, _t2) = false;
            _t2: u64 = Add(_t2, 1);
            continue
          };
          break[1]
        };
        loop {
          _t4: u64 = Deref(select m::BitVector.length(self));
          if (Not(Lt(_t2, _t4))) break;
          if m::is_index_set(Freeze(true)(self), _t2) {
            _t4: u64 = Sub(_t2, amount);
            m::set(self, _t4)
          } else {
            _t4: u64 = Sub(_t2, amount);
            m::unset(self, _t4)
          };
          _t2: u64 = Add(_t2, 1);
          continue
        };
        _t2: u64 = Sub(Deref(select m::BitVector.length(self)), amount);
        loop {
          if (Not(Lt(_t2, Deref(select m::BitVector.length(self))))) break;
          m::unset(self, _t2);
          _t2: u64 = Add(_t2, 1);
          continue
        };
        break
      };
      return Tuple()
    }
  }
}


=== Processing m::unset =====================================================
--- Source
public fun unset(self: &mut BitVector, bit_index: u64) {
        assert!(bit_index < vector::length(&self.bit_field), EINDEX);
        let x = vector::borrow_mut(&mut self.bit_field, bit_index);
        *x = false;
    }

--- Stackless Bytecode
public fun m::unset($t0|self: &mut 0x1::m::BitVector, $t1|bit_index: u64) {
     var $t2|$t3: u64
     var $t3|$t4: u64
     var $t4|x: &mut bool
     var $t5: u64
     var $t6: &mut 0x1::m::BitVector
     var $t7: &vector<bool>
     var $t8: u64
     var $t9: u64
     var $t10: u64
     var $t11: bool
     var $t12: &mut 0x1::m::BitVector
     var $t13: &mut vector<bool>
     var $t14: u64
     var $t15: &mut bool
     var $t16: bool
     var $t17: &mut bool
     var $t18: &mut 0x1::m::BitVector
     var $t19: u64
  0: $t5 := copy($t1)
  1: $t2 := $t5
  2: $t6 := copy($t0)
  3: $t7 := borrow_field<0x1::m::BitVector>.bit_field($t6)
  4: $t8 := vector::length<bool>($t7)
  5: $t3 := $t8
  6: $t9 := move($t2)
  7: $t10 := move($t3)
  8: $t11 := <($t9, $t10)
  9: if ($t11) goto 10 else goto 20
 10: label L1
 11: $t12 := move($t0)
 12: $t13 := borrow_field<0x1::m::BitVector>.bit_field($t12)
 13: $t14 := move($t1)
 14: $t15 := vector::borrow_mut<bool>($t13, $t14)
 15: $t4 := $t15
 16: $t16 := false
 17: $t17 := move($t4)
 18: write_ref($t17, $t16)
 19: return ()
 20: label L0
 21: $t18 := move($t0)
 22: drop($t18)
 23: $t19 := 131072
 24: abort($t19)
}

--- Raw Generated AST
_t5: u64 = bit_index;
_t2: u64 = _t5;
_t6: &mut BitVector = self;
_t7: &vector<bool> = select m::BitVector.bit_field(_t6);
_t8: u64 = vector::length<bool>(_t7);
_t3: u64 = _t8;
_t9: u64 = _t2;
_t10: u64 = _t3;
_t11: bool = Lt(_t9, _t10);
loop {
  if (_t11) break;
  _t18: &mut BitVector = self;
  _t19: u64 = 131072;
  Abort(_t19)
};
_t12: &mut BitVector = self;
_t13: &mut vector<bool> = select m::BitVector.bit_field(_t12);
_t14: u64 = bit_index;
_t15: &mut bool = vector::borrow_mut<bool>(_t13, _t14);
_t4: &mut bool = _t15;
_t16: bool = false;
_t17: &mut bool = _t4;
_t17 = _t16;
return Tuple()

--- Assign-Transformed Generated AST
loop {
  if (Lt(bit_index, vector::length<bool>(select m::BitVector.bit_field(self)))) break;
  Abort(131072)
};
vector::borrow_mut<bool>(select m::BitVector.bit_field(self), bit_index) = false;
return Tuple()

--- If-Transformed Generated AST
if (Not(Lt(bit_index, vector::length<bool>(select m::BitVector.bit_field(self))))) Abort(131072);
vector::borrow_mut<bool>(select m::BitVector.bit_field(self), bit_index) = false;
return Tuple()

--- Var-Bound Generated AST
if (Not(Lt(bit_index, vector::length<bool>(select m::BitVector.bit_field(self))))) Abort(131072);
vector::borrow_mut<bool>(select m::BitVector.bit_field(self), bit_index) = false;
return Tuple()

=== Sourcified Output ============================================
module 0x1::m {
    struct BitVector has copy, drop, store {
        length: u64,
        bit_field: vector<bool>,
    }
    public fun is_index_set(self: &BitVector, bit_index: u64): bool {
        if (!(bit_index < 0x1::vector::length<bool>(&self.bit_field))) abort 131072;
        *0x1::vector::borrow<bool>(&self.bit_field, bit_index)
    }
    public fun set(self: &mut BitVector, bit_index: u64) {
        if (!(bit_index < 0x1::vector::length<bool>(&self.bit_field))) abort 131072;
        *0x1::vector::borrow_mut<bool>(&mut self.bit_field, bit_index) = true;
    }
    public fun shift_left(self: &mut BitVector, amount: u64) {
        let _t4;
        let _t3;
        let _t2;
        _t2 = *&self.length;
        'l0: loop {
            loop {
                if (amount >= _t2) {
                    _t3 = &mut self.bit_field;
                    _t2 = 0
                } else {
                    _t2 = amount;
                    break
                };
                while (_t2 < 0x1::vector::length<bool>(/*freeze*/_t3)) {
                    *0x1::vector::borrow_mut<bool>(_t3, _t2) = false;
                    _t2 = _t2 + 1
                };
                break 'l0
            };
            loop {
                _t4 = *&self.length;
                if (!(_t2 < _t4)) break;
                if (is_index_set(/*freeze*/self, _t2)) {
                    _t4 = _t2 - amount;
                    set(self, _t4)
                } else {
                    _t4 = _t2 - amount;
                    unset(self, _t4)
                };
                _t2 = _t2 + 1
            };
            _t2 = *&self.length - amount;
            while (_t2 < *&self.length) {
                unset(self, _t2);
                _t2 = _t2 + 1
            };
            break
        };
    }
    public fun unset(self: &mut BitVector, bit_index: u64) {
        if (!(bit_index < 0x1::vector::length<bool>(&self.bit_field))) abort 131072;
        *0x1::vector::borrow_mut<bool>(&mut self.bit_field, bit_index) = false;
    }
}
