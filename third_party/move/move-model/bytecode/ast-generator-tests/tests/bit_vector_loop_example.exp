
=== Processing m::is_index_set =====================================================
--- Source
public fun is_index_set(self: &BitVector, bit_index: u64): bool {
        assert!(bit_index < vector::length(&self.bit_field), EINDEX);
        *vector::borrow(&self.bit_field, bit_index)
    }

--- Stackless Bytecode
public fun m::is_index_set($t0|self: &0x1::m::BitVector, $t1|bit_index: u64): bool {
     var $t2: u64
     var $t3: &0x1::m::BitVector
     var $t4: &vector<bool>
     var $t5: u64
     var $t6: bool
     var $t7: &0x1::m::BitVector
     var $t8: &vector<bool>
     var $t9: u64
     var $t10: &bool
     var $t11: bool
     var $t12: &0x1::m::BitVector
     var $t13: u64
  0: $t2 := copy($t1)
  1: $t3 := copy($t0)
  2: $t4 := borrow_field<0x1::m::BitVector>.bit_field($t3)
  3: $t5 := vector::length<bool>($t4)
  4: $t6 := <($t2, $t5)
  5: if ($t6) goto 6 else goto 13
  6: label L1
  7: $t7 := move($t0)
  8: $t8 := borrow_field<0x1::m::BitVector>.bit_field($t7)
  9: $t9 := move($t1)
 10: $t10 := vector::borrow<bool>($t8, $t9)
 11: $t11 := read_ref($t10)
 12: return $t11
 13: label L0
 14: $t12 := move($t0)
 15: drop($t12)
 16: $t13 := 131072
 17: abort($t13)
}

--- Raw Generated AST
_t2: u64 = bit_index;
_t3: &BitVector = self;
_t4: &vector<bool> = select m::BitVector.bit_field(_t3);
_t5: u64 = vector::length<bool>(_t4);
_t6: bool = Lt(_t2, _t5);
loop {
  if (_t6) break;
  _t12: &BitVector = self;
  _t13: u64 = 131072;
  Abort(_t13)
};
_t7: &BitVector = self;
_t8: &vector<bool> = select m::BitVector.bit_field(_t7);
_t9: u64 = bit_index;
_t10: &bool = vector::borrow<bool>(_t8, _t9);
_t11: bool = Deref(_t10);
return _t11

--- Assign-Transformed Generated AST
loop {
  if (Lt(bit_index, vector::length<bool>(select m::BitVector.bit_field(self)))) break;
  Abort(131072)
};
return Deref(vector::borrow<bool>(select m::BitVector.bit_field(self), bit_index))

--- If-Transformed Generated AST
if (Not(Lt(bit_index, vector::length<bool>(select m::BitVector.bit_field(self))))) Abort(131072);
return Deref(vector::borrow<bool>(select m::BitVector.bit_field(self), bit_index))

--- Var-Bound Generated AST
if (Not(Lt(bit_index, vector::length<bool>(select m::BitVector.bit_field(self))))) Abort(131072);
return Deref(vector::borrow<bool>(select m::BitVector.bit_field(self), bit_index))


=== Processing m::set =====================================================
--- Source
public fun set(self: &mut BitVector, bit_index: u64) {
        assert!(bit_index < vector::length(&self.bit_field), EINDEX);
        let x = vector::borrow_mut(&mut self.bit_field, bit_index);
        *x = true;
    }

--- Stackless Bytecode
public fun m::set($t0|self: &mut 0x1::m::BitVector, $t1|bit_index: u64) {
     var $t2|$t2: bool [unused]
     var $t3|x: &mut bool
     var $t4: u64
     var $t5: &mut 0x1::m::BitVector
     var $t6: &vector<bool>
     var $t7: u64
     var $t8: bool
     var $t9: &mut 0x1::m::BitVector
     var $t10: &mut vector<bool>
     var $t11: u64
     var $t12: &mut bool
     var $t13: bool
     var $t14: &mut bool
     var $t15: &mut 0x1::m::BitVector
     var $t16: u64
  0: $t4 := copy($t1)
  1: $t5 := copy($t0)
  2: $t6 := borrow_field<0x1::m::BitVector>.bit_field($t5)
  3: $t7 := vector::length<bool>($t6)
  4: $t8 := <($t4, $t7)
  5: if ($t8) goto 6 else goto 16
  6: label L1
  7: $t9 := move($t0)
  8: $t10 := borrow_field<0x1::m::BitVector>.bit_field($t9)
  9: $t11 := move($t1)
 10: $t12 := vector::borrow_mut<bool>($t10, $t11)
 11: $t3 := $t12
 12: $t13 := true
 13: $t14 := move($t3)
 14: write_ref($t14, $t13)
 15: return ()
 16: label L0
 17: $t15 := move($t0)
 18: drop($t15)
 19: $t16 := 131072
 20: abort($t16)
}

--- Raw Generated AST
_t4: u64 = bit_index;
_t5: &mut BitVector = self;
_t6: &vector<bool> = select m::BitVector.bit_field(_t5);
_t7: u64 = vector::length<bool>(_t6);
_t8: bool = Lt(_t4, _t7);
loop {
  if (_t8) break;
  _t15: &mut BitVector = self;
  _t16: u64 = 131072;
  Abort(_t16)
};
_t9: &mut BitVector = self;
_t10: &mut vector<bool> = select m::BitVector.bit_field(_t9);
_t11: u64 = bit_index;
_t12: &mut bool = vector::borrow_mut<bool>(_t10, _t11);
_t3: &mut bool = _t12;
_t13: bool = true;
_t14: &mut bool = _t3;
_t14 = _t13;
return Tuple()

--- Assign-Transformed Generated AST
loop {
  if (Lt(bit_index, vector::length<bool>(select m::BitVector.bit_field(self)))) break;
  Abort(131072)
};
vector::borrow_mut<bool>(select m::BitVector.bit_field(self), bit_index) = true;
return Tuple()

--- If-Transformed Generated AST
if (Not(Lt(bit_index, vector::length<bool>(select m::BitVector.bit_field(self))))) Abort(131072);
vector::borrow_mut<bool>(select m::BitVector.bit_field(self), bit_index) = true;
return Tuple()

--- Var-Bound Generated AST
if (Not(Lt(bit_index, vector::length<bool>(select m::BitVector.bit_field(self))))) Abort(131072);
vector::borrow_mut<bool>(select m::BitVector.bit_field(self), bit_index) = true;
return Tuple()


=== Processing m::shift_left =====================================================
--- Source
public fun shift_left(self: &mut BitVector, amount: u64) {
        if (amount >= self.length) {
            vector::for_each_mut(&mut self.bit_field, |elem| {
                *elem = false;
            });
        } else {
            let i = amount;

            while (i < self.length) {
                if (is_index_set(self, i)) set(self, i - amount)
                else unset(self, i - amount);
                i = i + 1;
            };

            i = self.length - amount;

            while (i < self.length) {
                unset(self, i);
                i = i + 1;
            };
        }
    }

--- Stackless Bytecode
public fun m::shift_left($t0|self: &mut 0x1::m::BitVector, $t1|amount: u64) {
     var $t2|$t7: &mut vector<bool>
     var $t3|$t3: u64
     var $t4|$t2: bool [unused]
     var $t5|$t14: &mut bool
     var $t6: u64
     var $t7: &mut 0x1::m::BitVector
     var $t8: &u64
     var $t9: u64
     var $t10: bool
     var $t11: &mut 0x1::m::BitVector
     var $t12: &mut vector<bool>
     var $t13: u64
     var $t14: u64
     var $t15: &mut vector<bool>
     var $t16: &vector<bool>
     var $t17: u64
     var $t18: bool
     var $t19: &mut vector<bool>
     var $t20: u64
     var $t21: &mut bool
     var $t22: bool
     var $t23: &mut bool
     var $t24: u64
     var $t25: u64
     var $t26: u64
     var $t27: &mut vector<bool>
     var $t28: u64
     var $t29: u64
     var $t30: &mut 0x1::m::BitVector
     var $t31: &u64
     var $t32: u64
     var $t33: bool
     var $t34: &mut 0x1::m::BitVector
     var $t35: &0x1::m::BitVector
     var $t36: u64
     var $t37: bool
     var $t38: &mut 0x1::m::BitVector
     var $t39: u64
     var $t40: u64
     var $t41: u64
     var $t42: u64
     var $t43: u64
     var $t44: u64
     var $t45: &mut 0x1::m::BitVector
     var $t46: u64
     var $t47: u64
     var $t48: u64
     var $t49: &mut 0x1::m::BitVector
     var $t50: &u64
     var $t51: u64
     var $t52: u64
     var $t53: u64
     var $t54: u64
     var $t55: &mut 0x1::m::BitVector
     var $t56: &u64
     var $t57: u64
     var $t58: bool
     var $t59: &mut 0x1::m::BitVector
     var $t60: u64
     var $t61: u64
     var $t62: u64
     var $t63: u64
     var $t64: &mut 0x1::m::BitVector
  0: $t6 := copy($t1)
  1: $t7 := copy($t0)
  2: $t8 := borrow_field<0x1::m::BitVector>.length($t7)
  3: $t9 := read_ref($t8)
  4: $t10 := >=($t6, $t9)
  5: if ($t10) goto 6 else goto 39
  6: label L1
  7: $t11 := move($t0)
  8: $t12 := borrow_field<0x1::m::BitVector>.bit_field($t11)
  9: $t2 := $t12
 10: $t13 := 0
 11: $t3 := $t13
 12: goto 13
 13: label L4
 14: $t14 := copy($t3)
 15: $t15 := copy($t2)
 16: $t16 := freeze_ref($t15)
 17: $t17 := vector::length<bool>($t16)
 18: $t18 := <($t14, $t17)
 19: if ($t18) goto 20 else goto 33
 20: label L3
 21: $t19 := copy($t2)
 22: $t20 := copy($t3)
 23: $t21 := vector::borrow_mut<bool>($t19, $t20)
 24: $t5 := $t21
 25: $t22 := false
 26: $t23 := move($t5)
 27: write_ref($t23, $t22)
 28: $t24 := move($t3)
 29: $t25 := 1
 30: $t26 := +($t24, $t25)
 31: $t3 := $t26
 32: goto 13
 33: label L2
 34: $t27 := move($t2)
 35: drop($t27)
 36: goto 37
 37: label L14
 38: return ()
 39: label L0
 40: $t28 := copy($t1)
 41: $t3 := $t28
 42: goto 43
 43: label L9
 44: $t29 := copy($t3)
 45: $t30 := copy($t0)
 46: $t31 := borrow_field<0x1::m::BitVector>.length($t30)
 47: $t32 := read_ref($t31)
 48: $t33 := <($t29, $t32)
 49: if ($t33) goto 50 else goto 76
 50: label L6
 51: $t34 := copy($t0)
 52: $t35 := freeze_ref($t34)
 53: $t36 := copy($t3)
 54: $t37 := m::is_index_set($t35, $t36)
 55: if ($t37) goto 56 else goto 69
 56: label L8
 57: $t38 := copy($t0)
 58: $t39 := copy($t3)
 59: $t40 := copy($t1)
 60: $t41 := -($t39, $t40)
 61: m::set($t38, $t41)
 62: goto 63
 63: label L10
 64: $t42 := move($t3)
 65: $t43 := 1
 66: $t44 := +($t42, $t43)
 67: $t3 := $t44
 68: goto 43
 69: label L7
 70: $t45 := copy($t0)
 71: $t46 := copy($t3)
 72: $t47 := copy($t1)
 73: $t48 := -($t46, $t47)
 74: m::unset($t45, $t48)
 75: goto 63
 76: label L5
 77: $t49 := copy($t0)
 78: $t50 := borrow_field<0x1::m::BitVector>.length($t49)
 79: $t51 := read_ref($t50)
 80: $t52 := move($t1)
 81: $t53 := -($t51, $t52)
 82: $t3 := $t53
 83: goto 84
 84: label L13
 85: $t54 := copy($t3)
 86: $t55 := copy($t0)
 87: $t56 := borrow_field<0x1::m::BitVector>.length($t55)
 88: $t57 := read_ref($t56)
 89: $t58 := <($t54, $t57)
 90: if ($t58) goto 91 else goto 100
 91: label L12
 92: $t59 := copy($t0)
 93: $t60 := copy($t3)
 94: m::unset($t59, $t60)
 95: $t61 := move($t3)
 96: $t62 := 1
 97: $t63 := +($t61, $t62)
 98: $t3 := $t63
 99: goto 84
100: label L11
101: $t64 := move($t0)
102: drop($t64)
103: goto 37
}

--- Raw Generated AST
_t6: u64 = amount;
_t7: &mut BitVector = self;
_t8: &u64 = select m::BitVector.length(_t7);
_t9: u64 = Deref(_t8);
_t10: bool = Ge(_t6, _t9);
loop {
  loop {
    loop {
      loop {
        if (Not(_t10)) break;
        _t11: &mut BitVector = self;
        _t12: &mut vector<bool> = select m::BitVector.bit_field(_t11);
        _t2: &mut vector<bool> = _t12;
        _t13: u64 = 0;
        _t3: u64 = _t13;
        break[1]
      };
      _t28: u64 = amount;
      _t3: u64 = _t28;
      break[1]
    };
    loop {
      _t14: u64 = _t3;
      _t15: &mut vector<bool> = _t2;
      _t16: &vector<bool> = Freeze(true)(_t15);
      _t17: u64 = vector::length<bool>(_t16);
      _t18: bool = Lt(_t14, _t17);
      if (Not(_t18)) break;
      _t19: &mut vector<bool> = _t2;
      _t20: u64 = _t3;
      _t21: &mut bool = vector::borrow_mut<bool>(_t19, _t20);
      _t5: &mut bool = _t21;
      _t22: bool = false;
      _t23: &mut bool = _t5;
      _t23 = _t22;
      _t24: u64 = _t3;
      _t25: u64 = 1;
      _t26: u64 = Add(_t24, _t25);
      _t3: u64 = _t26;
      continue
    };
    _t27: &mut vector<bool> = _t2;
    break[1]
  };
  loop {
    _t29: u64 = _t3;
    _t30: &mut BitVector = self;
    _t31: &u64 = select m::BitVector.length(_t30);
    _t32: u64 = Deref(_t31);
    _t33: bool = Lt(_t29, _t32);
    if (Not(_t33)) break;
    _t34: &mut BitVector = self;
    _t35: &BitVector = Freeze(true)(_t34);
    _t36: u64 = _t3;
    _t37: bool = m::is_index_set(_t35, _t36);
    loop {
      loop {
        if (Not(_t37)) break;
        _t38: &mut BitVector = self;
        _t39: u64 = _t3;
        _t40: u64 = amount;
        _t41: u64 = Sub(_t39, _t40);
        m::set(_t38, _t41);
        break[1]
      };
      _t45: &mut BitVector = self;
      _t46: u64 = _t3;
      _t47: u64 = amount;
      _t48: u64 = Sub(_t46, _t47);
      m::unset(_t45, _t48);
      break
    };
    _t42: u64 = _t3;
    _t43: u64 = 1;
    _t44: u64 = Add(_t42, _t43);
    _t3: u64 = _t44;
    continue
  };
  _t49: &mut BitVector = self;
  _t50: &u64 = select m::BitVector.length(_t49);
  _t51: u64 = Deref(_t50);
  _t52: u64 = amount;
  _t53: u64 = Sub(_t51, _t52);
  _t3: u64 = _t53;
  loop {
    _t54: u64 = _t3;
    _t55: &mut BitVector = self;
    _t56: &u64 = select m::BitVector.length(_t55);
    _t57: u64 = Deref(_t56);
    _t58: bool = Lt(_t54, _t57);
    if (Not(_t58)) break;
    _t59: &mut BitVector = self;
    _t60: u64 = _t3;
    m::unset(_t59, _t60);
    _t61: u64 = _t3;
    _t62: u64 = 1;
    _t63: u64 = Add(_t61, _t62);
    _t3: u64 = _t63;
    continue
  };
  _t64: &mut BitVector = self;
  break
};
return Tuple()

--- Assign-Transformed Generated AST
loop {
  loop {
    loop {
      loop {
        if (Not(Ge(amount, Deref(select m::BitVector.length(self))))) break;
        _t2: &mut vector<bool> = select m::BitVector.bit_field(self);
        _t3: u64 = 0;
        break[1]
      };
      _t3: u64 = amount;
      break[1]
    };
    loop {
      if (Not(Lt(_t3, vector::length<bool>(Freeze(true)(_t2))))) break;
      vector::borrow_mut<bool>(_t2, _t3) = false;
      _t3: u64 = Add(_t3, 1);
      continue
    };
    break[1]
  };
  loop {
    if (Not(Lt(_t3, Deref(select m::BitVector.length(self))))) break;
    loop {
      loop {
        if (Not(m::is_index_set(Freeze(true)(self), _t3))) break;
        m::set(self, Sub(_t3, amount));
        break[1]
      };
      m::unset(self, Sub(_t3, amount));
      break
    };
    _t3: u64 = Add(_t3, 1);
    continue
  };
  _t3: u64 = Sub(Deref(select m::BitVector.length(self)), amount);
  loop {
    if (Not(Lt(_t3, Deref(select m::BitVector.length(self))))) break;
    m::unset(self, _t3);
    _t3: u64 = Add(_t3, 1);
    continue
  };
  break
};
return Tuple()

--- If-Transformed Generated AST
loop {
  loop {
    if Ge(amount, Deref(select m::BitVector.length(self))) {
      _t2: &mut vector<bool> = select m::BitVector.bit_field(self);
      _t3: u64 = 0
    } else {
      _t3: u64 = amount;
      break
    };
    loop {
      if (Not(Lt(_t3, vector::length<bool>(Freeze(true)(_t2))))) break;
      vector::borrow_mut<bool>(_t2, _t3) = false;
      _t3: u64 = Add(_t3, 1);
      continue
    };
    break[1]
  };
  loop {
    if (Not(Lt(_t3, Deref(select m::BitVector.length(self))))) break;
    if m::is_index_set(Freeze(true)(self), _t3) {
      m::set(self, Sub(_t3, amount))
    } else {
      m::unset(self, Sub(_t3, amount))
    };
    _t3: u64 = Add(_t3, 1);
    continue
  };
  _t3: u64 = Sub(Deref(select m::BitVector.length(self)), amount);
  loop {
    if (Not(Lt(_t3, Deref(select m::BitVector.length(self))))) break;
    m::unset(self, _t3);
    _t3: u64 = Add(_t3, 1);
    continue
  };
  break
};
return Tuple()

--- Var-Bound Generated AST
{
  let _t3: u64;
  {
    let _t2: &mut vector<bool>;
    loop {
      loop {
        if Ge(amount, Deref(select m::BitVector.length(self))) {
          _t2: &mut vector<bool> = select m::BitVector.bit_field(self);
          _t3: u64 = 0
        } else {
          _t3: u64 = amount;
          break
        };
        loop {
          if (Not(Lt(_t3, vector::length<bool>(Freeze(true)(_t2))))) break;
          vector::borrow_mut<bool>(_t2, _t3) = false;
          _t3: u64 = Add(_t3, 1);
          continue
        };
        break[1]
      };
      loop {
        if (Not(Lt(_t3, Deref(select m::BitVector.length(self))))) break;
        if m::is_index_set(Freeze(true)(self), _t3) {
          m::set(self, Sub(_t3, amount))
        } else {
          m::unset(self, Sub(_t3, amount))
        };
        _t3: u64 = Add(_t3, 1);
        continue
      };
      _t3: u64 = Sub(Deref(select m::BitVector.length(self)), amount);
      loop {
        if (Not(Lt(_t3, Deref(select m::BitVector.length(self))))) break;
        m::unset(self, _t3);
        _t3: u64 = Add(_t3, 1);
        continue
      };
      break
    };
    return Tuple()
  }
}


=== Processing m::unset =====================================================
--- Source
public fun unset(self: &mut BitVector, bit_index: u64) {
        assert!(bit_index < vector::length(&self.bit_field), EINDEX);
        let x = vector::borrow_mut(&mut self.bit_field, bit_index);
        *x = false;
    }

--- Stackless Bytecode
public fun m::unset($t0|self: &mut 0x1::m::BitVector, $t1|bit_index: u64) {
     var $t2|$t2: bool [unused]
     var $t3|x: &mut bool
     var $t4: u64
     var $t5: &mut 0x1::m::BitVector
     var $t6: &vector<bool>
     var $t7: u64
     var $t8: bool
     var $t9: &mut 0x1::m::BitVector
     var $t10: &mut vector<bool>
     var $t11: u64
     var $t12: &mut bool
     var $t13: bool
     var $t14: &mut bool
     var $t15: &mut 0x1::m::BitVector
     var $t16: u64
  0: $t4 := copy($t1)
  1: $t5 := copy($t0)
  2: $t6 := borrow_field<0x1::m::BitVector>.bit_field($t5)
  3: $t7 := vector::length<bool>($t6)
  4: $t8 := <($t4, $t7)
  5: if ($t8) goto 6 else goto 16
  6: label L1
  7: $t9 := move($t0)
  8: $t10 := borrow_field<0x1::m::BitVector>.bit_field($t9)
  9: $t11 := move($t1)
 10: $t12 := vector::borrow_mut<bool>($t10, $t11)
 11: $t3 := $t12
 12: $t13 := false
 13: $t14 := move($t3)
 14: write_ref($t14, $t13)
 15: return ()
 16: label L0
 17: $t15 := move($t0)
 18: drop($t15)
 19: $t16 := 131072
 20: abort($t16)
}

--- Raw Generated AST
_t4: u64 = bit_index;
_t5: &mut BitVector = self;
_t6: &vector<bool> = select m::BitVector.bit_field(_t5);
_t7: u64 = vector::length<bool>(_t6);
_t8: bool = Lt(_t4, _t7);
loop {
  if (_t8) break;
  _t15: &mut BitVector = self;
  _t16: u64 = 131072;
  Abort(_t16)
};
_t9: &mut BitVector = self;
_t10: &mut vector<bool> = select m::BitVector.bit_field(_t9);
_t11: u64 = bit_index;
_t12: &mut bool = vector::borrow_mut<bool>(_t10, _t11);
_t3: &mut bool = _t12;
_t13: bool = false;
_t14: &mut bool = _t3;
_t14 = _t13;
return Tuple()

--- Assign-Transformed Generated AST
loop {
  if (Lt(bit_index, vector::length<bool>(select m::BitVector.bit_field(self)))) break;
  Abort(131072)
};
vector::borrow_mut<bool>(select m::BitVector.bit_field(self), bit_index) = false;
return Tuple()

--- If-Transformed Generated AST
if (Not(Lt(bit_index, vector::length<bool>(select m::BitVector.bit_field(self))))) Abort(131072);
vector::borrow_mut<bool>(select m::BitVector.bit_field(self), bit_index) = false;
return Tuple()

--- Var-Bound Generated AST
if (Not(Lt(bit_index, vector::length<bool>(select m::BitVector.bit_field(self))))) Abort(131072);
vector::borrow_mut<bool>(select m::BitVector.bit_field(self), bit_index) = false;
return Tuple()

=== Sourcified Output ============================================
module 0x1::m {
    struct BitVector has copy, drop, store {
        length: u64,
        bit_field: vector<bool>,
    }
    public fun is_index_set(self: &BitVector, bit_index: u64): bool {
        if (!(bit_index < 0x1::vector::length<bool>(&self.bit_field))) abort 131072;
        *0x1::vector::borrow<bool>(&self.bit_field, bit_index)
    }
    public fun set(self: &mut BitVector, bit_index: u64) {
        if (!(bit_index < 0x1::vector::length<bool>(&self.bit_field))) abort 131072;
        *0x1::vector::borrow_mut<bool>(&mut self.bit_field, bit_index) = true;
    }
    public fun shift_left(self: &mut BitVector, amount: u64) {
        let _t3;
        let _t2;
        'l0: loop {
            loop {
                if (amount >= *&self.length) {
                    _t2 = &mut self.bit_field;
                    _t3 = 0
                } else {
                    _t3 = amount;
                    break
                };
                while (_t3 < 0x1::vector::length<bool>(/*freeze*/_t2)) {
                    *0x1::vector::borrow_mut<bool>(_t2, _t3) = false;
                    _t3 = _t3 + 1
                };
                break 'l0
            };
            while (_t3 < *&self.length) {
                if (is_index_set(/*freeze*/self, _t3)) set(self, _t3 - amount) else unset(self, _t3 - amount);
                _t3 = _t3 + 1
            };
            _t3 = *&self.length - amount;
            while (_t3 < *&self.length) {
                unset(self, _t3);
                _t3 = _t3 + 1
            };
            break
        };
    }
    public fun unset(self: &mut BitVector, bit_index: u64) {
        if (!(bit_index < 0x1::vector::length<bool>(&self.bit_field))) abort 131072;
        *0x1::vector::borrow_mut<bool>(&mut self.bit_field, bit_index) = false;
    }
}
