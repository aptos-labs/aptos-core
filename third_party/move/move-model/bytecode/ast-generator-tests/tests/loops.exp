
=== Processing m::loop_1 =====================================================
--- Source
fun loop_1(c: u64): u64 {
        loop {
            c = c + 1;
            if (c % 2 == 0) continue;
            c = c + 3;
            if (c % 2 == 1) break;
        };
        c
    }

--- Stackless Bytecode
fun m::loop_1($t0|c: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: bool
     var $t9: u64
     var $t10: u64
     var $t11: u64
     var $t12: u64
     var $t13: u64
     var $t14: u64
     var $t15: u64
     var $t16: bool
     var $t17: u64
  0: label L2
  1: $t1 := move($t0)
  2: $t2 := 1
  3: $t3 := +($t1, $t2)
  4: $t0 := $t3
  5: $t4 := copy($t0)
  6: $t5 := 2
  7: $t6 := %($t4, $t5)
  8: $t7 := 0
  9: $t8 := ==($t6, $t7)
 10: if ($t8) goto 11 else goto 13
 11: label L1
 12: goto 0
 13: label L0
 14: $t9 := move($t0)
 15: $t10 := 3
 16: $t11 := +($t9, $t10)
 17: $t0 := $t11
 18: $t12 := copy($t0)
 19: $t13 := 2
 20: $t14 := %($t12, $t13)
 21: $t15 := 1
 22: $t16 := ==($t14, $t15)
 23: if ($t16) goto 24 else goto 0
 24: label L3
 25: $t17 := move($t0)
 26: return $t17
}

--- Raw Generated AST
loop {
  _t1: u64 = c;
  _t2: u64 = 1;
  _t3: u64 = Add(_t1, _t2);
  c: u64 = _t3;
  _t4: u64 = c;
  _t5: u64 = 2;
  _t6: u64 = Mod(_t4, _t5);
  _t7: u64 = 0;
  _t8: bool = Eq(_t6, _t7);
  if (_t8) continue;
  _t9: u64 = c;
  _t10: u64 = 3;
  _t11: u64 = Add(_t9, _t10);
  c: u64 = _t11;
  _t12: u64 = c;
  _t13: u64 = 2;
  _t14: u64 = Mod(_t12, _t13);
  _t15: u64 = 1;
  _t16: bool = Eq(_t14, _t15);
  if (Not(_t16)) continue;
  break
};
_t17: u64 = c;
return _t17

--- Assign-Transformed Generated AST
loop {
  c: u64 = Add(c, 1);
  if (Eq(Mod(c, 2), 0)) continue;
  c: u64 = Add(c, 3);
  if (Not(Eq(Mod(c, 2), 1))) continue;
  break
};
return c

--- If-Transformed Generated AST
loop {
  c: u64 = Add(c, 1);
  if (Eq(Mod(c, 2), 0)) continue;
  c: u64 = Add(c, 3);
  if (Not(Eq(Mod(c, 2), 1))) continue;
  break
};
return c

--- Var-Bound Generated AST
loop {
  c: u64 = Add(c, 1);
  if (Eq(Mod(c, 2), 0)) continue;
  c: u64 = Add(c, 3);
  if (Not(Eq(Mod(c, 2), 1))) continue;
  break
};
return c


=== Processing m::nested_loop =====================================================
--- Source
fun nested_loop(x: u64): u64 {
        while (x > 0) {
            while (x > 10) {
                x = x - 1;
                break;
            };
            x = x - 1;
            continue;
        };
        x
    }

--- Stackless Bytecode
fun m::nested_loop($t0|x: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: u64
     var $t6: bool
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: u64
     var $t11: u64
     var $t12: u64
     var $t13: u64
  0: label L5
  1: $t1 := copy($t0)
  2: $t2 := 0
  3: $t3 := >($t1, $t2)
  4: if ($t3) goto 5 else goto 22
  5: label L1
  6: $t4 := copy($t0)
  7: $t5 := 10
  8: $t6 := >($t4, $t5)
  9: if ($t6) goto 10 else goto 16
 10: label L2
 11: $t7 := move($t0)
 12: $t8 := 1
 13: $t9 := -($t7, $t8)
 14: $t0 := $t9
 15: goto 16
 16: label L4
 17: $t10 := move($t0)
 18: $t11 := 1
 19: $t12 := -($t10, $t11)
 20: $t0 := $t12
 21: goto 0
 22: label L0
 23: $t13 := move($t0)
 24: return $t13
}

--- Raw Generated AST
loop {
  _t1: u64 = x;
  _t2: u64 = 0;
  _t3: bool = Gt(_t1, _t2);
  if (Not(_t3)) break;
  _t4: u64 = x;
  _t5: u64 = 10;
  _t6: bool = Gt(_t4, _t5);
  loop {
    if (Not(_t6)) break;
    _t7: u64 = x;
    _t8: u64 = 1;
    _t9: u64 = Sub(_t7, _t8);
    x: u64 = _t9;
    break
  };
  _t10: u64 = x;
  _t11: u64 = 1;
  _t12: u64 = Sub(_t10, _t11);
  x: u64 = _t12;
  continue
};
_t13: u64 = x;
return _t13

--- Assign-Transformed Generated AST
loop {
  if (Not(Gt(x, 0))) break;
  loop {
    if (Not(Gt(x, 10))) break;
    x: u64 = Sub(x, 1);
    break
  };
  x: u64 = Sub(x, 1);
  continue
};
return x

--- If-Transformed Generated AST
loop {
  if (Not(Gt(x, 0))) break;
  if (Gt(x, 10)) x: u64 = Sub(x, 1);
  x: u64 = Sub(x, 1);
  continue
};
return x

--- Var-Bound Generated AST
loop {
  if (Not(Gt(x, 0))) break;
  if (Gt(x, 10)) x: u64 = Sub(x, 1);
  x: u64 = Sub(x, 1);
  continue
};
return x


=== Processing m::while_1 =====================================================
--- Source
fun while_1(c: u64) {
        while (c > 0) c = c - 1;
    }

--- Stackless Bytecode
fun m::while_1($t0|c: u64) {
     var $t1: u64
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: u64
     var $t6: u64
  0: label L2
  1: $t1 := copy($t0)
  2: $t2 := 0
  3: $t3 := >($t1, $t2)
  4: if ($t3) goto 5 else goto 11
  5: label L1
  6: $t4 := move($t0)
  7: $t5 := 1
  8: $t6 := -($t4, $t5)
  9: $t0 := $t6
 10: goto 0
 11: label L0
 12: return ()
}

--- Raw Generated AST
loop {
  _t1: u64 = c;
  _t2: u64 = 0;
  _t3: bool = Gt(_t1, _t2);
  if (Not(_t3)) break;
  _t4: u64 = c;
  _t5: u64 = 1;
  _t6: u64 = Sub(_t4, _t5);
  c: u64 = _t6;
  continue
};
return Tuple()

--- Assign-Transformed Generated AST
loop {
  if (Not(Gt(c, 0))) break;
  c: u64 = Sub(c, 1);
  continue
};
return Tuple()

--- If-Transformed Generated AST
loop {
  if (Not(Gt(c, 0))) break;
  c: u64 = Sub(c, 1);
  continue
};
return Tuple()

--- Var-Bound Generated AST
loop {
  if (Not(Gt(c, 0))) break;
  c: u64 = Sub(c, 1);
  continue
};
return Tuple()


=== Processing m::while_2 =====================================================
--- Source
fun while_2(c: u64): u64 {
        while (c > 0) {
            if (c >= 10) {
                c = c - 10
            }
        };
        c = c + 1;
        c
    }

--- Stackless Bytecode
fun m::while_2($t0|c: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: u64
     var $t6: bool
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: u64
     var $t11: u64
     var $t12: u64
  0: label L4
  1: $t1 := copy($t0)
  2: $t2 := 0
  3: $t3 := >($t1, $t2)
  4: if ($t3) goto 5 else goto 16
  5: label L1
  6: $t4 := copy($t0)
  7: $t5 := 10
  8: $t6 := >=($t4, $t5)
  9: if ($t6) goto 10 else goto 0
 10: label L2
 11: $t7 := move($t0)
 12: $t8 := 10
 13: $t9 := -($t7, $t8)
 14: $t0 := $t9
 15: goto 0
 16: label L0
 17: $t10 := move($t0)
 18: $t11 := 1
 19: $t12 := +($t10, $t11)
 20: return $t12
}

--- Raw Generated AST
loop {
  _t1: u64 = c;
  _t2: u64 = 0;
  _t3: bool = Gt(_t1, _t2);
  if (Not(_t3)) break;
  _t4: u64 = c;
  _t5: u64 = 10;
  _t6: bool = Ge(_t4, _t5);
  if (Not(_t6)) continue;
  _t7: u64 = c;
  _t8: u64 = 10;
  _t9: u64 = Sub(_t7, _t8);
  c: u64 = _t9;
  continue
};
_t10: u64 = c;
_t11: u64 = 1;
_t12: u64 = Add(_t10, _t11);
return _t12

--- Assign-Transformed Generated AST
loop {
  if (Not(Gt(c, 0))) break;
  if (Not(Ge(c, 10))) continue;
  c: u64 = Sub(c, 10);
  continue
};
return Add(c, 1)

--- If-Transformed Generated AST
loop {
  if (Not(Gt(c, 0))) break;
  if (Not(Ge(c, 10))) continue;
  c: u64 = Sub(c, 10);
  continue
};
return Add(c, 1)

--- Var-Bound Generated AST
loop {
  if (Not(Gt(c, 0))) break;
  if (Not(Ge(c, 10))) continue;
  c: u64 = Sub(c, 10);
  continue
};
return Add(c, 1)


=== Processing m::while_3 =====================================================
--- Source
fun while_3(c: u64): u64 {
        while (c > 0) {
            while (c > 10) c = c - 10;
            c = c - 1;
        };
        c
    }

--- Stackless Bytecode
fun m::while_3($t0|c: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: u64
     var $t6: bool
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: u64
     var $t11: u64
     var $t12: u64
     var $t13: u64
  0: label L5
  1: $t1 := copy($t0)
  2: $t2 := 0
  3: $t3 := >($t1, $t2)
  4: if ($t3) goto 5 else goto 24
  5: label L1
  6: goto 7
  7: label L2
  8: $t4 := copy($t0)
  9: $t5 := 10
 10: $t6 := >($t4, $t5)
 11: if ($t6) goto 12 else goto 18
 12: label L4
 13: $t7 := move($t0)
 14: $t8 := 10
 15: $t9 := -($t7, $t8)
 16: $t0 := $t9
 17: goto 7
 18: label L3
 19: $t10 := move($t0)
 20: $t11 := 1
 21: $t12 := -($t10, $t11)
 22: $t0 := $t12
 23: goto 0
 24: label L0
 25: $t13 := move($t0)
 26: return $t13
}

--- Raw Generated AST
loop {
  _t1: u64 = c;
  _t2: u64 = 0;
  _t3: bool = Gt(_t1, _t2);
  if (Not(_t3)) break;
  loop {
    _t4: u64 = c;
    _t5: u64 = 10;
    _t6: bool = Gt(_t4, _t5);
    if (Not(_t6)) break;
    _t7: u64 = c;
    _t8: u64 = 10;
    _t9: u64 = Sub(_t7, _t8);
    c: u64 = _t9;
    continue
  };
  _t10: u64 = c;
  _t11: u64 = 1;
  _t12: u64 = Sub(_t10, _t11);
  c: u64 = _t12;
  continue
};
_t13: u64 = c;
return _t13

--- Assign-Transformed Generated AST
loop {
  if (Not(Gt(c, 0))) break;
  loop {
    if (Not(Gt(c, 10))) break;
    c: u64 = Sub(c, 10);
    continue
  };
  c: u64 = Sub(c, 1);
  continue
};
return c

--- If-Transformed Generated AST
loop {
  if (Not(Gt(c, 0))) break;
  loop {
    if (Not(Gt(c, 10))) break;
    c: u64 = Sub(c, 10);
    continue
  };
  c: u64 = Sub(c, 1);
  continue
};
return c

--- Var-Bound Generated AST
loop {
  if (Not(Gt(c, 0))) break;
  loop {
    if (Not(Gt(c, 10))) break;
    c: u64 = Sub(c, 10);
    continue
  };
  c: u64 = Sub(c, 1);
  continue
};
return c

=== Sourcified Output ============================================
module 0x815::m {
    fun loop_1(c: u64): u64 {
        loop {
            c = c + 1;
            if (c % 2 == 0) continue;
            c = c + 3;
            if (!(c % 2 == 1)) continue;
            break
        };
        c
    }
    fun nested_loop(x: u64): u64 {
        while (x > 0) {
            if (x > 10) x = x - 1;
            x = x - 1
        };
        x
    }
    fun while_1(c: u64) {
        while (c > 0) c = c - 1;
    }
    fun while_2(c: u64): u64 {
        while (c > 0) {
            if (!(c >= 10)) continue;
            c = c - 10
        };
        c + 1
    }
    fun while_3(c: u64): u64 {
        while (c > 0) {
            while (c > 10) c = c - 10;
            c = c - 1
        };
        c
    }
}
