============ initial translation from Move ================

[variant baseline]
fun Test::get_and_incr($t0|addr: address): u64 {
     var $t1|r: &mut 0x42::Test::R
     var $t2: address
     var $t3: bool
     var $t4: u64
     var $t5: address
     var $t6: &mut 0x42::Test::R
     var $t7: &mut 0x42::Test::R
     var $t8: &u64
     var $t9: u64
     var $t10: &mut 0x42::Test::R
     var $t11: &u64
     var $t12: u64
     var $t13: u64
     var $t14: u64
     var $t15: &mut 0x42::Test::R
     var $t16: &mut u64
  0: $t2 := copy($t0)
  1: $t3 := exists<0x42::Test::R>($t2)
  2: if ($t3) goto 6 else goto 3
  3: label L1
  4: $t4 := 33
  5: abort($t4)
  6: label L0
  7: $t5 := move($t0)
  8: $t6 := borrow_global<0x42::Test::R>($t5)
  9: $t1 := $t6
 10: $t7 := copy($t1)
 11: $t8 := borrow_field<0x42::Test::R>.v($t7)
 12: $t9 := read_ref($t8)
 13: $t10 := copy($t1)
 14: $t11 := borrow_field<0x42::Test::R>.v($t10)
 15: $t12 := read_ref($t11)
 16: $t13 := 1
 17: $t14 := +($t12, $t13)
 18: $t15 := move($t1)
 19: $t16 := borrow_field<0x42::Test::R>.v($t15)
 20: write_ref($t16, $t14)
 21: return $t9
}


[variant baseline]
fun Test::incr_twice() {
     var $t0: address
     var $t1: u64
     var $t2: address
     var $t3: u64
  0: $t0 := 0x1
  1: $t1 := Test::get_and_incr($t0)
  2: drop($t1)
  3: $t2 := 0x1
  4: $t3 := Test::get_and_incr($t2)
  5: drop($t3)
  6: return ()
}

============ after pipeline `spec_instrumentation` ================

[variant verification]
fun Test::get_and_incr($t0|addr: address): u64 {
     var $t1|r: &mut 0x42::Test::R
     var $t2: bool
     var $t3: u64
     var $t4: num
     var $t5: &mut 0x42::Test::R
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: &mut u64
  0: assume Neq<address>($t0, 0x0)
  1: assume CanModify<0x42::Test::R>($t0)
  2: @0 := save_mem(Test::R)
  3: $t2 := exists<0x42::Test::R>($t0)
  4: if ($t2) goto 9 else goto 5
  5: label L1
  6: $t3 := 33
  7: $t4 := move($t3)
  8: goto 26
  9: label L0
     # VC: caller does not have permission to modify `Test::R` at given address at tests/spec_instrumentation/opaque_call.move:8:14+26
 10: assert CanModify<0x42::Test::R>($t0)
 11: $t5 := borrow_global<0x42::Test::R>($t0) on_abort goto 26 with $t4
 12: $t6 := get_field<0x42::Test::R>.v($t5)
 13: $t7 := get_field<0x42::Test::R>.v($t5)
 14: $t8 := 1
 15: $t9 := +($t7, $t8) on_abort goto 26 with $t4
 16: $t10 := borrow_field<0x42::Test::R>.v($t5)
 17: write_ref($t10, $t9)
 18: write_back[Reference($t5).v (u64)]($t10)
 19: write_back[0x42::Test::R@]($t5)
 20: label L2
     # VC: function does not abort under this condition at tests/spec_instrumentation/opaque_call.move:16:6+35
 21: assert Not(Not(exists[@0]<0x42::Test::R>($t0)))
     # VC: function does not abort under this condition at tests/spec_instrumentation/opaque_call.move:17:6+56
 22: assert Not(Ge(Add(select Test::R.v<0x42::Test::R>(global[@0]<0x42::Test::R>($t0)), 1), 18446744073709551615))
     # VC: post-condition does not hold at tests/spec_instrumentation/opaque_call.move:19:6+56
 23: assert Eq<u64>(select Test::R.v<0x42::Test::R>(global<0x42::Test::R>($t0)), Add(select Test::R.v<0x42::Test::R>(global[@0]<0x42::Test::R>($t0)), 1))
     # VC: post-condition does not hold at tests/spec_instrumentation/opaque_call.move:20:6+36
 24: assert Eq<u64>($t6, select Test::R.v<0x42::Test::R>(global<0x42::Test::R>($t0)))
 25: return $t6
 26: label L3
     # VC: abort not covered by any of the `aborts_if` clauses at tests/spec_instrumentation/opaque_call.move:13:2+308
 27: assert Or(Not(exists[@0]<0x42::Test::R>($t0)), Ge(Add(select Test::R.v<0x42::Test::R>(global[@0]<0x42::Test::R>($t0)), 1), 18446744073709551615))
     # VC: abort code not covered by any of the `aborts_if` or `aborts_with` clauses at tests/spec_instrumentation/opaque_call.move:13:2+308
 28: assert Or(And(Not(exists[@0]<0x42::Test::R>($t0)), Eq(33, $t4)), Ge(Add(select Test::R.v<0x42::Test::R>(global[@0]<0x42::Test::R>($t0)), 1), 18446744073709551615))
 29: abort($t4)
}


[variant verification]
fun Test::incr_twice() {
     var $t0: address
     var $t1: u64
     var $t2: bool
     var $t3: num
     var $t4: address
     var $t5: u64
     var $t6: bool
  0: @1 := save_mem(Test::R)
  1: $t0 := 0x1
     # VC: precondition does not hold at this call at tests/spec_instrumentation/opaque_call.move:15:6+22
  2: assert Neq<address>($t0, 0x0)
  3: $t1 := opaque begin: Test::get_and_incr($t0)
  4: assume Identical($t2, Or(Not(exists<0x42::Test::R>($t0)), Ge(Add(select Test::R.v<0x42::Test::R>(global<0x42::Test::R>($t0)), 1), 18446744073709551615)))
  5: if ($t2) goto 6 else goto 10
  6: label L4
  7: assume Or(And(Not(exists<0x42::Test::R>($t0)), Eq(33, $t3)), Ge(Add(select Test::R.v<0x42::Test::R>(global<0x42::Test::R>($t0)), 1), 18446744073709551615))
  8: trace_abort($t3)
  9: goto 39
 10: label L3
 11: @2 := save_mem(Test::R)
 12: modifies global<0x42::Test::R>($t0)
 13: assume WellFormed($t1)
 14: assume Eq<u64>(select Test::R.v<0x42::Test::R>(global<0x42::Test::R>($t0)), Add(select Test::R.v<0x42::Test::R>(global[@2]<0x42::Test::R>($t0)), 1))
 15: assume Eq<u64>($t1, select Test::R.v<0x42::Test::R>(global<0x42::Test::R>($t0)))
 16: $t1 := opaque end: Test::get_and_incr($t0)
 17: drop($t1)
 18: $t4 := 0x1
     # VC: precondition does not hold at this call at tests/spec_instrumentation/opaque_call.move:15:6+22
 19: assert Neq<address>($t4, 0x0)
 20: $t5 := opaque begin: Test::get_and_incr($t4)
 21: assume Identical($t6, Or(Not(exists<0x42::Test::R>($t4)), Ge(Add(select Test::R.v<0x42::Test::R>(global<0x42::Test::R>($t4)), 1), 18446744073709551615)))
 22: if ($t6) goto 23 else goto 27
 23: label L6
 24: assume Or(And(Not(exists<0x42::Test::R>($t4)), Eq(33, $t3)), Ge(Add(select Test::R.v<0x42::Test::R>(global<0x42::Test::R>($t4)), 1), 18446744073709551615))
 25: trace_abort($t3)
 26: goto 39
 27: label L5
 28: @3 := save_mem(Test::R)
 29: modifies global<0x42::Test::R>($t4)
 30: assume WellFormed($t5)
 31: assume Eq<u64>(select Test::R.v<0x42::Test::R>(global<0x42::Test::R>($t4)), Add(select Test::R.v<0x42::Test::R>(global[@3]<0x42::Test::R>($t4)), 1))
 32: assume Eq<u64>($t5, select Test::R.v<0x42::Test::R>(global<0x42::Test::R>($t4)))
 33: $t5 := opaque end: Test::get_and_incr($t4)
 34: drop($t5)
 35: label L1
     # VC: function does not abort under this condition at tests/spec_instrumentation/opaque_call.move:28:6+35
 36: assert Not(Not(exists[@1]<0x42::Test::R>(0x1)))
     # VC: post-condition does not hold at tests/spec_instrumentation/opaque_call.move:29:6+56
 37: assert Eq<u64>(select Test::R.v<0x42::Test::R>(global<0x42::Test::R>(0x1)), Add(select Test::R.v<0x42::Test::R>(global[@1]<0x42::Test::R>(0x1)), 2))
 38: return ()
 39: label L2
     # VC: abort not covered by any of the `aborts_if` clauses at tests/spec_instrumentation/opaque_call.move:27:2+123
 40: assert Not(exists[@1]<0x42::Test::R>(0x1))
     # VC: abort code not covered by any of the `aborts_if` or `aborts_with` clauses at tests/spec_instrumentation/opaque_call.move:27:2+123
 41: assert And(Not(exists[@1]<0x42::Test::R>(0x1)), Eq(33, $t3))
 42: abort($t3)
}



==== spec-instrumenter input specs ====

fun Test::get_and_incr[baseline]
spec {
  requires Neq<address>($t0, 0x0);
  aborts_if Not(exists<0x42::Test::R>($t0));
  aborts_if Ge(Add(select Test::R.v<0x42::Test::R>(global<0x42::Test::R>($t0)), 1), 18446744073709551615);
  modifies global<0x42::Test::R>($t0);
  ensures Eq<u64>(select Test::R.v<0x42::Test::R>(global<0x42::Test::R>($t0)), Add(select Test::R.v<0x42::Test::R>(Old<0x42::Test::R>(global<0x42::Test::R>($t0))), 1));
  ensures Eq<u64>(result0(), select Test::R.v<0x42::Test::R>(global<0x42::Test::R>($t0)));
}

fun Test::get_and_incr[verification]
spec {
  requires Neq<address>($t0, 0x0);
  aborts_if Not(exists<0x42::Test::R>($t0));
  aborts_if Ge(Add(select Test::R.v<0x42::Test::R>(global<0x42::Test::R>($t0)), 1), 18446744073709551615);
  modifies global<0x42::Test::R>($t0);
  ensures Eq<u64>(select Test::R.v<0x42::Test::R>(global<0x42::Test::R>($t0)), Add(select Test::R.v<0x42::Test::R>(Old<0x42::Test::R>(global<0x42::Test::R>($t0))), 1));
  ensures Eq<u64>(result0(), select Test::R.v<0x42::Test::R>(global<0x42::Test::R>($t0)));
}

fun Test::incr_twice[baseline]
spec {
  aborts_if Not(exists<0x42::Test::R>(0x1));
  ensures Eq<u64>(select Test::R.v<0x42::Test::R>(global<0x42::Test::R>(0x1)), Add(select Test::R.v<0x42::Test::R>(Old<0x42::Test::R>(global<0x42::Test::R>(0x1))), 2));
}

fun Test::incr_twice[verification]
spec {
  aborts_if Not(exists<0x42::Test::R>(0x1));
  ensures Eq<u64>(select Test::R.v<0x42::Test::R>(global<0x42::Test::R>(0x1)), Add(select Test::R.v<0x42::Test::R>(Old<0x42::Test::R>(global<0x42::Test::R>(0x1))), 2));
}
