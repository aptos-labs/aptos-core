============ initial translation from Move ================

[variant baseline]
fun Test::branching_result($t0|is_div: bool, $t1|a: u64, $t2|b: u64): u64 {
     var $t3|$t4: u64
     var $t4: bool
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: u64
     var $t11: u64
  0: $t4 := move($t0)
  1: if ($t4) goto 2 else goto 11
  2: label L1
  3: $t5 := move($t1)
  4: $t6 := move($t2)
  5: $t7 := /($t5, $t6)
  6: $t3 := $t7
  7: goto 8
  8: label L2
  9: $t8 := move($t3)
 10: return $t8
 11: label L0
 12: $t9 := move($t1)
 13: $t10 := move($t2)
 14: $t11 := *($t9, $t10)
 15: $t3 := $t11
 16: goto 8
}


[variant baseline]
fun Test::implicit_and_explicit_abort($t0|a: u64, $t1|b: u64): u64 {
     var $t2: u64
     var $t3: u64
     var $t4: bool
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
  0: $t2 := copy($t1)
  1: $t3 := 0
  2: $t4 := !=($t2, $t3)
  3: if ($t4) goto 4 else goto 7
  4: label L1
  5: $t5 := 22
  6: abort($t5)
  7: label L0
  8: $t6 := move($t0)
  9: $t7 := move($t1)
 10: $t8 := /($t6, $t7)
 11: return $t8
}


[variant baseline]
fun Test::multiple_results($t0|a: u64, $t1|b: u64): (u64, u64) {
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
  0: $t2 := copy($t0)
  1: $t3 := copy($t1)
  2: $t4 := /($t2, $t3)
  3: $t5 := move($t0)
  4: $t6 := move($t1)
  5: $t7 := %($t5, $t6)
  6: return ($t4, $t7)
}


[variant baseline]
fun Test::mut_ref_param($t0|r: &mut 0x42::Test::R): u64 {
     var $t1: &mut 0x42::Test::R
     var $t2: &u64
     var $t3: u64
     var $t4: &mut 0x42::Test::R
     var $t5: &u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: &mut 0x42::Test::R
     var $t10: &mut u64
  0: $t1 := copy($t0)
  1: $t2 := borrow_field<0x42::Test::R>.v($t1)
  2: $t3 := read_ref($t2)
  3: $t4 := copy($t0)
  4: $t5 := borrow_field<0x42::Test::R>.v($t4)
  5: $t6 := read_ref($t5)
  6: $t7 := 1
  7: $t8 := -($t6, $t7)
  8: $t9 := move($t0)
  9: $t10 := borrow_field<0x42::Test::R>.v($t9)
 10: write_ref($t10, $t8)
 11: return $t3
}


[variant baseline]
fun Test::ref_param($t0|r: &0x42::Test::R): u64 {
     var $t1: &0x42::Test::R
     var $t2: &u64
     var $t3: u64
  0: $t1 := move($t0)
  1: $t2 := borrow_field<0x42::Test::R>.v($t1)
  2: $t3 := read_ref($t2)
  3: return $t3
}


[variant baseline]
fun Test::ref_param_return_ref($t0|r: &0x42::Test::R): &u64 {
     var $t1: &0x42::Test::R
     var $t2: &u64
  0: $t1 := move($t0)
  1: $t2 := borrow_field<0x42::Test::R>.v($t1)
  2: return $t2
}


[variant baseline]
fun Test::resource_with_old($t0|val: u64) {
     var $t1|r: &mut 0x42::Test::R
     var $t2: address
     var $t3: bool
     var $t4: u64
     var $t5: address
     var $t6: &mut 0x42::Test::R
     var $t7: &mut 0x42::Test::R
     var $t8: &u64
     var $t9: u64
     var $t10: u64
     var $t11: u64
     var $t12: &mut 0x42::Test::R
     var $t13: &mut u64
  0: $t2 := 0x0
  1: $t3 := exists<0x42::Test::R>($t2)
  2: if ($t3) goto 6 else goto 3
  3: label L1
  4: $t4 := 33
  5: abort($t4)
  6: label L0
  7: $t5 := 0x0
  8: $t6 := borrow_global<0x42::Test::R>($t5)
  9: $t1 := $t6
 10: $t7 := copy($t1)
 11: $t8 := borrow_field<0x42::Test::R>.v($t7)
 12: $t9 := read_ref($t8)
 13: $t10 := move($t0)
 14: $t11 := +($t9, $t10)
 15: $t12 := move($t1)
 16: $t13 := borrow_field<0x42::Test::R>.v($t12)
 17: write_ref($t13, $t11)
 18: return ()
}

============ after pipeline `spec_instrumentation` ================

[variant verification]
fun Test::branching_result($t0|is_div: bool, $t1|a: u64, $t2|b: u64): u64 {
     var $t3|$t4: u64
     var $t4: num
  0: if ($t0) goto 1 else goto 5
  1: label L1
  2: $t3 := /($t1, $t2) on_abort goto 13 with $t4
  3: label L2
  4: goto 8
  5: label L0
  6: $t3 := *($t1, $t2) on_abort goto 13 with $t4
  7: goto 3
  8: label L3
     # VC: function does not abort under this condition at tests/spec_instrumentation/fun_spec.move:27:6+50
  9: assert Not(And($t0, Eq<u64>($t2, 0)))
     # VC: post-condition does not hold at tests/spec_instrumentation/fun_spec.move:28:6+35
 10: assert Implies($t0, Eq<u64>($t3, Div($t1, $t2)))
     # VC: post-condition does not hold at tests/spec_instrumentation/fun_spec.move:29:6+36
 11: assert Implies(Not($t0), Eq<u64>($t3, Mul($t1, $t2)))
 12: return $t3
 13: label L4
     # VC: abort not covered by any of the `aborts_if` clauses at tests/spec_instrumentation/fun_spec.move:26:2+165
 14: assert And($t0, Eq<u64>($t2, 0))
     # VC: abort code not covered by any of the `aborts_if` or `aborts_with` clauses at tests/spec_instrumentation/fun_spec.move:26:2+165
 15: assert And(And($t0, Eq<u64>($t2, 0)), Eq(-1, $t4))
 16: abort($t4)
}


[variant verification]
fun Test::implicit_and_explicit_abort($t0|a: u64, $t1|b: u64): u64 {
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: num
     var $t6: u64
  0: $t2 := 0
  1: $t3 := !=($t1, $t2)
  2: if ($t3) goto 3 else goto 7
  3: label L1
  4: $t4 := 22
  5: $t5 := move($t4)
  6: goto 14
  7: label L0
  8: $t6 := /($t0, $t1) on_abort goto 14 with $t5
  9: label L2
     # VC: function does not abort under this condition at tests/spec_instrumentation/fun_spec.move:9:6+25
 10: assert Not(Eq<u64>($t1, 0))
     # VC: function does not abort under this condition at tests/spec_instrumentation/fun_spec.move:10:6+17
 11: assert Not(Eq<u64>($t0, 0))
     # VC: post-condition does not hold at tests/spec_instrumentation/fun_spec.move:11:6+24
 12: assert Eq<u64>($t6, Div($t0, $t1))
 13: return $t6
 14: label L3
     # VC: abort not covered by any of the `aborts_if` clauses at tests/spec_instrumentation/fun_spec.move:8:2+121
 15: assert Or(Eq<u64>($t1, 0), Eq<u64>($t0, 0))
     # VC: abort code not covered by any of the `aborts_if` or `aborts_with` clauses at tests/spec_instrumentation/fun_spec.move:8:2+121
 16: assert Or(And(Eq<u64>($t1, 0), Eq(22, $t5)), Eq<u64>($t0, 0))
 17: abort($t5)
}


[variant verification]
fun Test::multiple_results($t0|a: u64, $t1|b: u64): (u64, u64) {
     var $t2: u64
     var $t3: num
     var $t4: u64
  0: $t2 := /($t0, $t1) on_abort goto 7 with $t3
  1: $t4 := %($t0, $t1) on_abort goto 7 with $t3
  2: label L1
     # VC: function does not abort under this condition at tests/spec_instrumentation/fun_spec.move:18:6+40
  3: assert Not(Eq<u64>($t1, 0))
     # VC: post-condition does not hold at tests/spec_instrumentation/fun_spec.move:19:6+26
  4: assert Eq<u64>($t2, Div($t0, $t1))
     # VC: post-condition does not hold at tests/spec_instrumentation/fun_spec.move:20:6+26
  5: assert Eq<u64>($t4, Mod($t0, $t1))
  6: return ($t2, $t4)
  7: label L2
     # VC: abort not covered by any of the `aborts_if` clauses at tests/spec_instrumentation/fun_spec.move:17:2+136
  8: assert Eq<u64>($t1, 0)
     # VC: abort code not covered by any of the `aborts_if` or `aborts_with` clauses at tests/spec_instrumentation/fun_spec.move:17:2+136
  9: assert And(Eq<u64>($t1, 0), Eq(-1, $t3))
 10: abort($t3)
}


[variant verification]
fun Test::mut_ref_param($t0|r: &mut 0x42::Test::R): u64 {
     var $t1: 0x42::Test::R
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: num
     var $t7: &mut u64
  0: $t1 := read_ref($t0)
  1: $t2 := get_field<0x42::Test::R>.v($t0)
  2: $t3 := get_field<0x42::Test::R>.v($t0)
  3: $t4 := 1
  4: $t5 := -($t3, $t4) on_abort goto 15 with $t6
  5: $t7 := borrow_field<0x42::Test::R>.v($t0)
  6: write_ref($t7, $t5)
  7: write_back[Reference($t0).v (u64)]($t7)
  8: trace_local[r]($t0)
  9: trace_local[r]($t0)
 10: label L1
     # VC: function does not abort under this condition at tests/spec_instrumentation/fun_spec.move:67:6+42
 11: assert Not(Eq<u64>(select Test::R.v<0x42::Test::R>($t1), 0))
     # VC: post-condition does not hold at tests/spec_instrumentation/fun_spec.move:68:6+27
 12: assert Eq<u64>($t2, select Test::R.v<0x42::Test::R>($t1))
     # VC: post-condition does not hold at tests/spec_instrumentation/fun_spec.move:69:6+28
 13: assert Eq<u64>(select Test::R.v<0x42::Test::R>($t0), Add(select Test::R.v<0x42::Test::R>($t1), 1))
 14: return $t2
 15: label L2
     # VC: abort not covered by any of the `aborts_if` clauses at tests/spec_instrumentation/fun_spec.move:66:2+138
 16: assert Eq<u64>(select Test::R.v<0x42::Test::R>($t1), 0)
     # VC: abort code not covered by any of the `aborts_if` or `aborts_with` clauses at tests/spec_instrumentation/fun_spec.move:66:2+138
 17: assert And(Eq<u64>(select Test::R.v<0x42::Test::R>($t1), 0), Eq(-1, $t6))
 18: abort($t6)
}


[variant verification]
fun Test::ref_param($t0|r: 0x42::Test::R): u64 {
     var $t1: u64
  0: $t1 := get_field<0x42::Test::R>.v($t0)
  1: label L1
     # VC: post-condition does not hold at tests/spec_instrumentation/fun_spec.move:51:6+22
  2: assert Eq<u64>($t1, select Test::R.v<0x42::Test::R>($t0))
  3: return $t1
}


[variant verification]
fun Test::ref_param_return_ref($t0|r: 0x42::Test::R): u64 {
     var $t1: u64
  0: $t1 := get_field<0x42::Test::R>.v($t0)
  1: label L1
     # VC: post-condition does not hold at tests/spec_instrumentation/fun_spec.move:58:6+22
  2: assert Eq<u64>($t1, select Test::R.v<0x42::Test::R>($t0))
  3: return $t1
}


[variant verification]
fun Test::resource_with_old($t0|val: u64) {
     var $t1|r: &mut 0x42::Test::R
     var $t2: address
     var $t3: bool
     var $t4: u64
     var $t5: num
     var $t6: address
     var $t7: &mut 0x42::Test::R
     var $t8: u64
     var $t9: u64
     var $t10: &mut u64
  0: assume Gt($t0, 0)
  1: assume CanModify<0x42::Test::R>(0x0)
  2: @0 := save_mem(Test::R)
  3: $t2 := 0x0
  4: $t3 := exists<0x42::Test::R>($t2)
  5: if ($t3) goto 10 else goto 6
  6: label L1
  7: $t4 := 33
  8: $t5 := move($t4)
  9: goto 25
 10: label L0
 11: $t6 := 0x0
     # VC: caller does not have permission to modify `Test::R` at given address at tests/spec_instrumentation/fun_spec.move:36:14+26
 12: assert CanModify<0x42::Test::R>($t6)
 13: $t7 := borrow_global<0x42::Test::R>($t6) on_abort goto 25 with $t5
 14: $t8 := get_field<0x42::Test::R>.v($t7)
 15: $t9 := +($t8, $t0) on_abort goto 25 with $t5
 16: $t10 := borrow_field<0x42::Test::R>.v($t7)
 17: write_ref($t10, $t9)
 18: write_back[Reference($t7).v (u64)]($t10)
 19: write_back[0x42::Test::R@]($t7)
 20: label L2
     # VC: function does not abort under this condition at tests/spec_instrumentation/fun_spec.move:41:6+35
 21: assert Not(Not(exists[@0]<0x42::Test::R>(0x0)))
     # VC: function does not abort under this condition at tests/spec_instrumentation/fun_spec.move:42:6+58
 22: assert Not(Ge(Add(select Test::R.v<0x42::Test::R>(global[@0]<0x42::Test::R>(0x0)), $t0), 18446744073709551615))
     # VC: post-condition does not hold at tests/spec_instrumentation/fun_spec.move:43:6+58
 23: assert Eq<u64>(select Test::R.v<0x42::Test::R>(global<0x42::Test::R>(0x0)), Add(select Test::R.v<0x42::Test::R>(global[@0]<0x42::Test::R>(0x0)), $t0))
 24: return ()
 25: label L3
     # VC: abort not covered by any of the `aborts_if` clauses at tests/spec_instrumentation/fun_spec.move:39:2+250
 26: assert Or(Not(exists[@0]<0x42::Test::R>(0x0)), Ge(Add(select Test::R.v<0x42::Test::R>(global[@0]<0x42::Test::R>(0x0)), $t0), 18446744073709551615))
     # VC: abort code not covered by any of the `aborts_if` or `aborts_with` clauses at tests/spec_instrumentation/fun_spec.move:39:2+250
 27: assert Or(And(Not(exists[@0]<0x42::Test::R>(0x0)), Eq(33, $t5)), Ge(Add(select Test::R.v<0x42::Test::R>(global[@0]<0x42::Test::R>(0x0)), $t0), 18446744073709551615))
 28: abort($t5)
}



==== spec-instrumenter input specs ====

fun Test::branching_result[baseline]
spec {
  aborts_if And($t0, Eq<u64>($t2, 0));
  ensures Implies($t0, Eq<u64>(result0(), Div($t1, $t2)));
  ensures Implies(Not($t0), Eq<u64>(result0(), Mul($t1, $t2)));
}

fun Test::branching_result[verification]
spec {
  aborts_if And($t0, Eq<u64>($t2, 0));
  ensures Implies($t0, Eq<u64>(result0(), Div($t1, $t2)));
  ensures Implies(Not($t0), Eq<u64>(result0(), Mul($t1, $t2)));
}

fun Test::implicit_and_explicit_abort[baseline]
spec {
  aborts_if Eq<u64>($t1, 0);
  aborts_if Eq<u64>($t0, 0);
  ensures Eq<u64>(result0(), Div($t0, $t1));
}

fun Test::implicit_and_explicit_abort[verification]
spec {
  aborts_if Eq<u64>($t1, 0);
  aborts_if Eq<u64>($t0, 0);
  ensures Eq<u64>(result0(), Div($t0, $t1));
}

fun Test::multiple_results[baseline]
spec {
  aborts_if Eq<u64>($t1, 0);
  ensures Eq<u64>(result0(), Div($t0, $t1));
  ensures Eq<u64>(result1(), Mod($t0, $t1));
}

fun Test::multiple_results[verification]
spec {
  aborts_if Eq<u64>($t1, 0);
  ensures Eq<u64>(result0(), Div($t0, $t1));
  ensures Eq<u64>(result1(), Mod($t0, $t1));
}

fun Test::mut_ref_param[baseline]
spec {
  aborts_if Eq<u64>(select Test::R.v<0x42::Test::R>($t0), 0);
  ensures Eq<u64>(result0(), Old<u64>(select Test::R.v<0x42::Test::R>($t0)));
  ensures Eq<u64>(select Test::R.v<0x42::Test::R>($t0), Add(Old<u64>(select Test::R.v<0x42::Test::R>($t0)), 1));
}

fun Test::mut_ref_param[verification]
spec {
  aborts_if Eq<u64>(select Test::R.v<0x42::Test::R>($t0), 0);
  ensures Eq<u64>(result0(), Old<u64>(select Test::R.v<0x42::Test::R>($t0)));
  ensures Eq<u64>(select Test::R.v<0x42::Test::R>($t0), Add(Old<u64>(select Test::R.v<0x42::Test::R>($t0)), 1));
}

fun Test::ref_param[baseline]
spec {
  ensures Eq<u64>(result0(), select Test::R.v<0x42::Test::R>($t0));
}

fun Test::ref_param[verification]
spec {
  ensures Eq<u64>(result0(), select Test::R.v<0x42::Test::R>($t0));
}

fun Test::ref_param_return_ref[baseline]
spec {
  ensures Eq<u64>(result0(), select Test::R.v<0x42::Test::R>($t0));
}

fun Test::ref_param_return_ref[verification]
spec {
  ensures Eq<u64>(result0(), select Test::R.v<0x42::Test::R>($t0));
}

fun Test::resource_with_old[baseline]
spec {
  requires Gt($t0, 0);
  aborts_if Not(exists<0x42::Test::R>(0x0));
  aborts_if Ge(Add(select Test::R.v<0x42::Test::R>(global<0x42::Test::R>(0x0)), $t0), 18446744073709551615);
  ensures Eq<u64>(select Test::R.v<0x42::Test::R>(global<0x42::Test::R>(0x0)), Add(select Test::R.v<0x42::Test::R>(Old<0x42::Test::R>(global<0x42::Test::R>(0x0))), $t0));
  modifies global<0x42::Test::R>(0x0);
}

fun Test::resource_with_old[verification]
spec {
  requires Gt($t0, 0);
  aborts_if Not(exists<0x42::Test::R>(0x0));
  aborts_if Ge(Add(select Test::R.v<0x42::Test::R>(global<0x42::Test::R>(0x0)), $t0), 18446744073709551615);
  ensures Eq<u64>(select Test::R.v<0x42::Test::R>(global<0x42::Test::R>(0x0)), Add(select Test::R.v<0x42::Test::R>(Old<0x42::Test::R>(global<0x42::Test::R>(0x0))), $t0));
  modifies global<0x42::Test::R>(0x0);
}
