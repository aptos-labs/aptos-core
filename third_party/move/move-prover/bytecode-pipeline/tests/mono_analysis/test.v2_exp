============ initial translation from Move ================

[variant baseline]
public fun Test::f1<#0>($t0|x1: #0): 0x123::Test::A<#0, u64> {
     var $t1: #0
     var $t2: u64
     var $t3: 0x123::Test::A<#0, u64>
  0: $t1 := move($t0)
  1: $t2 := 10
  2: $t3 := pack 0x123::Test::A<#0, u64>($t1, $t2)
  3: return $t3
}


[variant baseline]
public fun Test::f2($t0|x: u8): 0x123::Test::B<u8> {
     var $t1: u8
     var $t2: 0x123::Test::A<u8, u64>
     var $t3: 0x123::Test::B<u8>
  0: $t1 := move($t0)
  1: $t2 := Test::f1<u8>($t1)
  2: $t3 := pack 0x123::Test::B<u8>($t2)
  3: return $t3
}


[variant baseline]
public fun Test::f3<#0>($t0|x1: #0): 0x123::Test::A<#0, u64> {
     var $t1: #0
     var $t2: u64
     var $t3: 0x123::Test::A<#0, u64>
  0: $t1 := move($t0)
  1: $t2 := 1
  2: $t3 := pack 0x123::Test::A<#0, u64>($t1, $t2)
  3: return $t3
}


[variant baseline]
public fun Test::f4<#0>($t0|x1: #0): 0x123::Test::B<#0> {
     var $t1: #0
     var $t2: 0x123::Test::A<#0, u64>
     var $t3: 0x123::Test::B<#0>
  0: $t1 := move($t0)
  1: $t2 := Test::f3<#0>($t1)
  2: $t3 := pack 0x123::Test::B<#0>($t2)
  3: return $t3
}


[variant baseline]
public fun Test::f5(): 0x123::Test::B<u128> {
     var $t0: u128
     var $t1: 0x123::Test::B<u128>
  0: $t0 := 1
  1: $t1 := Test::f4<u128>($t0)
  2: return $t1
}



==== mono-analysis result ====

struct Test::A = {
  <u8, u64>
  <u128, u64>
  <#0, u64>
}
struct Test::B = {
  <u8>
  <u128>
  <#0>
}
fun Test::f1 [baseline] = {
  <u8>
}
fun Test::f4 [baseline] = {
  <u128>
}
