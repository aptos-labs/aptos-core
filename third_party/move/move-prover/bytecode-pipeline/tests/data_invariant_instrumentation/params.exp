============ initial translation from Move ================

[variant baseline]
public fun Test::test_param($t0|_simple_R: 0x42::Test::R, $t1|_ref_R: &0x42::Test::R, $t2|_simple_S: 0x42::Test::S, $t3|_mut_R: &mut 0x42::Test::R) {
     var $t4: &0x42::Test::R
     var $t5: &mut 0x42::Test::R
  0: $t4 := move($t1)
  1: drop($t4)
  2: $t5 := move($t3)
  3: drop($t5)
  4: return ()
}

============ after pipeline `data_invariant_instrumentation` ================

[variant verification]
public fun Test::test_param($t0|_simple_R: 0x42::Test::R, $t1|_ref_R: 0x42::Test::R, $t2|_simple_S: 0x42::Test::S, $t3|_mut_R: &mut 0x42::Test::R) {
  0: assume And(WellFormed($t0), And(Gt(select Test::R.x($t0), select Test::S.y<0x42::Test::S>(select Test::R.s($t0))), Gt(select Test::S.y(select Test::R.s($t0)), 0)))
  1: assume And(WellFormed($t1), And(Gt(select Test::R.x($t1), select Test::S.y<0x42::Test::S>(select Test::R.s($t1))), Gt(select Test::S.y(select Test::R.s($t1)), 0)))
  2: assume And(WellFormed($t2), Gt(select Test::S.y($t2), 0))
  3: assume And(WellFormed($t3), And(Gt(select Test::R.x($t3), select Test::S.y<0x42::Test::S>(select Test::R.s($t3))), Gt(select Test::S.y(select Test::R.s($t3)), 0)))
  4: drop($t3)
  5: trace_local[_mut_R]($t3)
     # data invariant at tests/data_invariant_instrumentation/params.move:12:9+18
     # VC: data invariant does not hold at tests/data_invariant_instrumentation/params.move:12:9+18
  6: assert Gt(select Test::R.x($t3), select Test::S.y<0x42::Test::S>(select Test::R.s($t3)))
     # data invariant at tests/data_invariant_instrumentation/params.move:16:9+16
     # VC: data invariant does not hold at tests/data_invariant_instrumentation/params.move:16:9+16
  7: assert Gt(select Test::S.y(select Test::R.s($t3)), 0)
  8: label L1
  9: return ()
}
