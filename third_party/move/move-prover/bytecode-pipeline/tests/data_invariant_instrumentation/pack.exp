============ initial translation from Move ================

[variant baseline]
public fun Test::test_pack(): 0x42::Test::R {
     var $t0|s: 0x42::Test::S
     var $t1: u64
     var $t2: 0x42::Test::S
     var $t3: u64
     var $t4: 0x42::Test::S
     var $t5: 0x42::Test::R
  0: $t1 := 1
  1: $t2 := pack 0x42::Test::S($t1)
  2: $t0 := $t2
  3: $t3 := 3
  4: $t4 := move($t0)
  5: $t5 := pack 0x42::Test::R($t3, $t4)
  6: return $t5
}

============ after pipeline `data_invariant_instrumentation` ================

[variant verification]
public fun Test::test_pack(): 0x42::Test::R {
     var $t0|s: 0x42::Test::S
     var $t1: u64
     var $t2: 0x42::Test::S
     var $t3: u64
     var $t4: 0x42::Test::R
  0: $t1 := 1
  1: $t2 := pack 0x42::Test::S($t1)
     # data invariant at tests/data_invariant_instrumentation/pack.move:16:9+16
     # VC: data invariant does not hold at tests/data_invariant_instrumentation/pack.move:16:9+16
  2: assert Gt(select Test::S.y($t2), 0)
  3: $t3 := 3
  4: $t4 := pack 0x42::Test::R($t3, $t2)
     # data invariant at tests/data_invariant_instrumentation/pack.move:12:9+18
     # VC: data invariant does not hold at tests/data_invariant_instrumentation/pack.move:12:9+18
  5: assert Gt(select Test::R.x($t4), select Test::S.y<0x42::Test::S>(select Test::R.s($t4)))
  6: label L1
  7: return $t4
}
