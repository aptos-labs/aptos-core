/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                default {}
            }
            $Abort(97)
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
        }
    }
}


!! Succeeded compiling Yul


!! Unit tests

// test of M::test_drop
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_M_test_drop" {
    code {
        mstore(0, memoryguard(160))
        A2_M_test_drop()
        return (0, 0)
        function A2_M_test_drop() {
            let $t0, $t1, $t2, $t3
            // $t0 := 33
            $t0 := 33
            // $t1 := false
            $t1 := false
            // $t2 := M::pack_S($t0, $t1)
            $t2 := A2_M_pack_S($t0, $t1)
            // $t3 := pack 0x2::M::S3($t2)
            {
                let $mem := $Malloc(32)
                $MemoryStoreU256(add($mem, 0), $t2)
                $t3 := $mem
            }
            // drop($t3)
            {
                let $field_ptr_1770153451 := $LoadU256(add($t3, 0))
                {
                    let $field_ptr_1602512591 := $LoadU256(add($field_ptr_1770153451, 0))
                    $Free($field_ptr_1602512591, 16)
                }
                $Free($field_ptr_1770153451, 41)
            }
            $Free($t3, 32)
            // return ()
        }

        function A2_M_pack_S(a, b) -> $result {
            let $t2, $t3, $t4
            // $t2 := (u128)($t0)
            $t2 := $CastU128(a)
            // $t3 := M::pack_S2($t2)
            $t3 := A2_M_pack_S2($t2)
            // $t4 := pack 0x2::M::S($t0, $t1, $t3)
            {
                let $mem := $Malloc(41)
                $MemoryStoreU64(add($mem, 32), a)
                $MemoryStoreU8(add($mem, 40), b)
                $MemoryStoreU256(add($mem, 0), $t3)
                $t4 := $mem
            }
            // return $t4
            $result := $t4
        }

        function A2_M_pack_S2(x) -> $result {
            let $t1
            // $t1 := pack 0x2::M::S2($t0)
            {
                let $mem := $Malloc(16)
                $MemoryStoreU128(add($mem, 0), x)
                $t1 := $mem
            }
            // return $t1
            $result := $t1
        }

        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $MemoryStoreU8(offs, val) {
          // Shortcut via special instruction
          mstore8(offs, val)
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $MemoryStoreU128(offs, val) {
          $MemoryStoreBytes(offs, 16, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
        function $CastU128(x) -> r {
            if gt(x, 0xffffffffffffffffffffffffffffffff) { $AbortBuiltin() }
            r := x
        }
    }
}
===> Test result of M::test_drop: Succeed(Returned) (used_gas=343): []

// test of M::test_equality
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_M_test_equality" {
    code {
        mstore(0, memoryguard(160))
        A2_M_test_equality()
        return (0, 0)
        function A2_M_test_equality() {
            let s1, s2, s3, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t13 := 101
                    $t13 := 101
                    // abort($t13)
                    $Abort($t13)
                }
                case 4 {
                    // $t3 := 23
                    $t3 := 23
                    // $t4 := false
                    $t4 := false
                    // $t5 := M::pack_S($t3, $t4)
                    $t5 := A2_M_pack_S($t3, $t4)
                    // $t6 := 23
                    $t6 := 23
                    // $t7 := false
                    $t7 := false
                    // $t8 := M::pack_S($t6, $t7)
                    $t8 := A2_M_pack_S($t6, $t7)
                    // $t9 := 24
                    $t9 := 24
                    // $t10 := false
                    $t10 := false
                    // $t11 := M::pack_S($t9, $t10)
                    $t11 := A2_M_pack_S($t9, $t10)
                    // $t12 := ==($t5, $t8)
                    $t12 := $Eq_$A2_M_S$($t5, $t8)
                    // if ($t12) goto L1 else goto L0
                    switch $t12
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t14 := !=($t5, $t11)
                    $t14 := $LogicalNot($Eq_$A2_M_S$($t5, $t11))
                    // if ($t14) goto L4 else goto L3
                    switch $t14
                    case 0  { $block := 7 }
                    default { $block := 6 }
                }
                case 6 {
                    // label L4
                    // goto L5
                    $block := 8
                }
                case 7 {
                    // label L3
                    // $t15 := 102
                    $t15 := 102
                    // abort($t15)
                    $Abort($t15)
                }
                case 8 {
                    // label L5
                    // $t16 := !=($t8, $t11)
                    $t16 := $LogicalNot($Eq_$A2_M_S$($t8, $t11))
                    // if ($t16) goto L7 else goto L6
                    switch $t16
                    case 0  { $block := 10 }
                    default { $block := 9 }
                }
                case 9 {
                    // label L7
                    // goto L8
                    $block := 11
                }
                case 10 {
                    // label L6
                    // $t17 := 103
                    $t17 := 103
                    // abort($t17)
                    $Abort($t17)
                }
                case 11 {
                    // label L8
                    // return ()
                    leave
                }
            }
        }

        function A2_M_pack_S(a, b) -> $result {
            let $t2, $t3, $t4
            // $t2 := (u128)($t0)
            $t2 := $CastU128(a)
            // $t3 := M::pack_S2($t2)
            $t3 := A2_M_pack_S2($t2)
            // $t4 := pack 0x2::M::S($t0, $t1, $t3)
            {
                let $mem := $Malloc(41)
                $MemoryStoreU64(add($mem, 32), a)
                $MemoryStoreU8(add($mem, 40), b)
                $MemoryStoreU256(add($mem, 0), $t3)
                $t4 := $mem
            }
            // return $t4
            $result := $t4
        }

        function A2_M_pack_S2(x) -> $result {
            let $t1
            // $t1 := pack 0x2::M::S2($t0)
            {
                let $mem := $Malloc(16)
                $MemoryStoreU128(add($mem, 0), x)
                $t1 := $mem
            }
            // return $t1
            $result := $t1
        }

        function $Eq_$A2_M_S$(x, y) -> res
        {
            let f_x_2 := mload(add(x, 0))
            let f_y_2 := mload(add(y, 0))
            if $LogicalNot($Eq_$A2_M_S2$(f_x_2, f_y_2)) {
              res:= false
              leave
            }
            if $Neq(mload(add(x, 32)), mload(add(y, 32))) {
              res:= false
              leave
            }
            res := true
        }
        function $Eq_$A2_M_S2$(x, y) -> res
        {
            if $Neq(mload(add(x, 0)), mload(add(y, 0))) {
              res:= false
              leave
            }
            res := true
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $MemoryStoreU8(offs, val) {
          // Shortcut via special instruction
          mstore8(offs, val)
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $MemoryStoreU128(offs, val) {
          $MemoryStoreBytes(offs, 16, val)
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $Neq(x, y) -> r {
            r := $LogicalNot(eq(x, y))
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
        function $CastU128(x) -> r {
            if gt(x, 0xffffffffffffffffffffffffffffffff) { $AbortBuiltin() }
            r := x
        }
    }
}
===> Test result of M::test_equality: Succeed(Stopped) (used_gas=2137): []

// test of M::test_pack_S
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_M_test_pack_S" {
    code {
        mstore(0, memoryguard(160))
        A2_M_test_pack_S()
        return (0, 0)
        function A2_M_test_pack_S() {
            let s, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t8 := 100
                    $t8 := 100
                    // abort($t8)
                    $Abort($t8)
                }
                case 4 {
                    // $t1 := 42
                    $t1 := 42
                    // $t2 := true
                    $t2 := true
                    // $t0 := M::pack_S($t1, $t2)
                    s := A2_M_pack_S($t1, $t2)
                    // $t3 := borrow_local($t0)
                    $t3 := $MakePtr(false, s)
                    // $t4 := borrow_field<0x2::M::S>.a($t3)
                    $t4 := $IndexPtr($t3, 32)
                    // $t5 := read_ref($t4)
                    $t5 := $LoadU64($t4)
                    // $t6 := 42
                    $t6 := 42
                    // $t7 := ==($t5, $t6)
                    $t7 := $Eq($t5, $t6)
                    // if ($t7) goto L1 else goto L0
                    switch $t7
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t9 := borrow_local($t0)
                    $t9 := $MakePtr(false, s)
                    // $t10 := borrow_field<0x2::M::S>.b($t9)
                    $t10 := $IndexPtr($t9, 40)
                    // $t11 := read_ref($t10)
                    $t11 := $LoadU8($t10)
                    // $t12 := true
                    $t12 := true
                    // $t13 := ==($t11, $t12)
                    $t13 := $Eq($t11, $t12)
                    // if ($t13) goto L4 else goto L3
                    switch $t13
                    case 0  { $block := 7 }
                    default { $block := 6 }
                }
                case 6 {
                    // label L4
                    // goto L5
                    $block := 8
                }
                case 7 {
                    // label L3
                    // $t14 := 101
                    $t14 := 101
                    // abort($t14)
                    $Abort($t14)
                }
                case 8 {
                    // label L5
                    // $t15 := borrow_local($t0)
                    $t15 := $MakePtr(false, s)
                    // $t16 := borrow_field<0x2::M::S>.c($t15)
                    {
                        $t16 := $MakePtr($IsStoragePtr($t15), $LoadU256($t15))
                    }
                    // $t17 := borrow_field<0x2::M::S2>.x($t16)
                    $t17 := $t16
                    // $t18 := read_ref($t17)
                    $t18 := $LoadU128($t17)
                    // $t19 := 42
                    $t19 := 42
                    // $t20 := ==($t18, $t19)
                    $t20 := $Eq($t18, $t19)
                    // if ($t20) goto L7 else goto L6
                    switch $t20
                    case 0  { $block := 10 }
                    default { $block := 9 }
                }
                case 9 {
                    // label L7
                    // goto L8
                    $block := 11
                }
                case 10 {
                    // label L6
                    // $t21 := 102
                    $t21 := 102
                    // abort($t21)
                    $Abort($t21)
                }
                case 11 {
                    // label L8
                    // return ()
                    leave
                }
            }
        }

        function A2_M_pack_S(a, b) -> $result {
            let $t2, $t3, $t4
            // $t2 := (u128)($t0)
            $t2 := $CastU128(a)
            // $t3 := M::pack_S2($t2)
            $t3 := A2_M_pack_S2($t2)
            // $t4 := pack 0x2::M::S($t0, $t1, $t3)
            {
                let $mem := $Malloc(41)
                $MemoryStoreU64(add($mem, 32), a)
                $MemoryStoreU8(add($mem, 40), b)
                $MemoryStoreU256(add($mem, 0), $t3)
                $t4 := $mem
            }
            // return $t4
            $result := $t4
        }

        function A2_M_pack_S2(x) -> $result {
            let $t1
            // $t1 := pack 0x2::M::S2($t0)
            {
                let $mem := $Malloc(16)
                $MemoryStoreU128(add($mem, 0), x)
                $t1 := $mem
            }
            // return $t1
            $result := $t1
        }

        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $LoadU8(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU8(offs)
          }
          default {
            val := $StorageLoadU8(offs)
          }
        }
        function $MemoryLoadU8(offs) -> val {
          val := $MemoryLoadBytes(offs, 1)
        }
        function $StorageLoadU8(offs) -> val {
          val := $StorageLoadBytes(offs, 1)
        }
        function $MemoryStoreU8(offs, val) {
          // Shortcut via special instruction
          mstore8(offs, val)
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $LoadU128(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU128(offs)
          }
          default {
            val := $StorageLoadU128(offs)
          }
        }
        function $MemoryLoadU128(offs) -> val {
          val := $MemoryLoadBytes(offs, 16)
        }
        function $StorageLoadU128(offs) -> val {
          val := $StorageLoadBytes(offs, 16)
        }
        function $MemoryStoreU128(offs, val) {
          $MemoryStoreBytes(offs, 16, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
        function $CastU128(x) -> r {
            if gt(x, 0xffffffffffffffffffffffffffffffff) { $AbortBuiltin() }
            r := x
        }
    }
}
===> Test result of M::test_pack_S: Succeed(Stopped) (used_gas=1775): []

// test of M::test_pack_S2
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_M_test_pack_S2" {
    code {
        mstore(0, memoryguard(160))
        A2_M_test_pack_S2()
        return (0, 0)
        function A2_M_test_pack_S2() {
            let s, $t1, $t2, $t3, $t4, $t5, $t6, $t7
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t7 := 100
                    $t7 := 100
                    // abort($t7)
                    $Abort($t7)
                }
                case 4 {
                    // $t1 := 42
                    $t1 := 42
                    // $t0 := M::pack_S2($t1)
                    s := A2_M_pack_S2($t1)
                    // $t2 := borrow_local($t0)
                    $t2 := $MakePtr(false, s)
                    // $t3 := borrow_field<0x2::M::S2>.x($t2)
                    $t3 := $t2
                    // $t4 := read_ref($t3)
                    $t4 := $LoadU128($t3)
                    // $t5 := 42
                    $t5 := 42
                    // $t6 := ==($t4, $t5)
                    $t6 := $Eq($t4, $t5)
                    // if ($t6) goto L1 else goto L0
                    switch $t6
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // return ()
                    leave
                }
            }
        }

        function A2_M_pack_S2(x) -> $result {
            let $t1
            // $t1 := pack 0x2::M::S2($t0)
            {
                let $mem := $Malloc(16)
                $MemoryStoreU128(add($mem, 0), x)
                $t1 := $mem
            }
            // return $t1
            $result := $t1
        }

        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $LoadU128(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU128(offs)
          }
          default {
            val := $StorageLoadU128(offs)
          }
        }
        function $MemoryLoadU128(offs) -> val {
          val := $MemoryLoadBytes(offs, 16)
        }
        function $StorageLoadU128(offs) -> val {
          val := $StorageLoadBytes(offs, 16)
        }
        function $MemoryStoreU128(offs, val) {
          $MemoryStoreBytes(offs, 16, val)
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
    }
}
===> Test result of M::test_pack_S2: Succeed(Stopped) (used_gas=471): []

// test of M::test_pack_S2_fail
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_M_test_pack_S2_fail" {
    code {
        mstore(0, memoryguard(160))
        A2_M_test_pack_S2_fail()
        return (0, 0)
        function A2_M_test_pack_S2_fail() {
            let s, $t1, $t2, $t3, $t4, $t5, $t6, $t7
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t7 := 100
                    $t7 := 100
                    // abort($t7)
                    $Abort($t7)
                }
                case 4 {
                    // $t1 := 42
                    $t1 := 42
                    // $t0 := M::pack_S2($t1)
                    s := A2_M_pack_S2($t1)
                    // $t2 := borrow_local($t0)
                    $t2 := $MakePtr(false, s)
                    // $t3 := borrow_field<0x2::M::S2>.x($t2)
                    $t3 := $t2
                    // $t4 := read_ref($t3)
                    $t4 := $LoadU128($t3)
                    // $t5 := 41
                    $t5 := 41
                    // $t6 := ==($t4, $t5)
                    $t6 := $Eq($t4, $t5)
                    // if ($t6) goto L1 else goto L0
                    switch $t6
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // return ()
                    leave
                }
            }
        }

        function A2_M_pack_S2(x) -> $result {
            let $t1
            // $t1 := pack 0x2::M::S2($t0)
            {
                let $mem := $Malloc(16)
                $MemoryStoreU128(add($mem, 0), x)
                $t1 := $mem
            }
            // return $t1
            $result := $t1
        }

        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $LoadU128(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU128(offs)
          }
          default {
            val := $StorageLoadU128(offs)
          }
        }
        function $MemoryLoadU128(offs) -> val {
          val := $MemoryLoadBytes(offs, 16)
        }
        function $StorageLoadU128(offs) -> val {
          val := $StorageLoadBytes(offs, 16)
        }
        function $MemoryStoreU128(offs, val) {
          $MemoryStoreBytes(offs, 16, val)
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
    }
}
===> Test result of M::test_pack_S2_fail: Revert(Reverted) (used_gas=396): [0, 0, 0, 0, 0, 0, 0, 100]

// test of M::test_read_S
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_M_test_read_S" {
    code {
        mstore(0, memoryguard(160))
        A2_M_test_read_S()
        return (0, 0)
        function A2_M_test_read_S() {
            let s, $t1, $t2, $t3, $t4, $t5, $t6, $t7
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t7 := 100
                    $t7 := 100
                    // abort($t7)
                    $Abort($t7)
                }
                case 4 {
                    // $t1 := 42
                    $t1 := 42
                    // $t2 := true
                    $t2 := true
                    // $t0 := M::pack_S($t1, $t2)
                    s := A2_M_pack_S($t1, $t2)
                    // $t3 := borrow_local($t0)
                    $t3 := $MakePtr(false, s)
                    // $t4 := M::read_S($t3)
                    $t4 := A2_M_read_S($t3)
                    // $t5 := 84
                    $t5 := 84
                    // $t6 := ==($t4, $t5)
                    $t6 := $Eq($t4, $t5)
                    // if ($t6) goto L1 else goto L0
                    switch $t6
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // return ()
                    leave
                }
            }
        }

        function A2_M_read_S(s) -> $result {
            let $t1, $t2, $t3, $t4, $t5, $t6, $t7
            // $t1 := borrow_field<0x2::M::S>.a($t0)
            $t1 := $IndexPtr(s, 32)
            // $t2 := read_ref($t1)
            $t2 := $LoadU64($t1)
            // $t3 := borrow_field<0x2::M::S>.c($t0)
            {
                $t3 := $MakePtr($IsStoragePtr(s), $LoadU256(s))
            }
            // $t4 := borrow_field<0x2::M::S2>.x($t3)
            $t4 := $t3
            // $t5 := read_ref($t4)
            $t5 := $LoadU128($t4)
            // $t6 := (u64)($t5)
            $t6 := $CastU64($t5)
            // $t7 := +($t2, $t6)
            $t7 := $AddU64($t2, $t6)
            // return $t7
            $result := $t7
        }

        function A2_M_pack_S(a, b) -> $result {
            let $t2, $t3, $t4
            // $t2 := (u128)($t0)
            $t2 := $CastU128(a)
            // $t3 := M::pack_S2($t2)
            $t3 := A2_M_pack_S2($t2)
            // $t4 := pack 0x2::M::S($t0, $t1, $t3)
            {
                let $mem := $Malloc(41)
                $MemoryStoreU64(add($mem, 32), a)
                $MemoryStoreU8(add($mem, 40), b)
                $MemoryStoreU256(add($mem, 0), $t3)
                $t4 := $mem
            }
            // return $t4
            $result := $t4
        }

        function A2_M_pack_S2(x) -> $result {
            let $t1
            // $t1 := pack 0x2::M::S2($t0)
            {
                let $mem := $Malloc(16)
                $MemoryStoreU128(add($mem, 0), x)
                $t1 := $mem
            }
            // return $t1
            $result := $t1
        }

        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $MemoryStoreU8(offs, val) {
          // Shortcut via special instruction
          mstore8(offs, val)
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $LoadU128(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU128(offs)
          }
          default {
            val := $StorageLoadU128(offs)
          }
        }
        function $MemoryLoadU128(offs) -> val {
          val := $MemoryLoadBytes(offs, 16)
        }
        function $StorageLoadU128(offs) -> val {
          val := $StorageLoadBytes(offs, 16)
        }
        function $MemoryStoreU128(offs, val) {
          $MemoryStoreBytes(offs, 16, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $AddU64(x, y) -> r {
            if lt(sub(0xffffffffffffffff, x), y) { $AbortBuiltin() }
            r := add(x, y)
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
        function $CastU64(x) -> r {
            if gt(x, 0xffffffffffffffff) { $AbortBuiltin() }
            r := x
        }
        function $CastU128(x) -> r {
            if gt(x, 0xffffffffffffffffffffffffffffffff) { $AbortBuiltin() }
            r := x
        }
    }
}
===> Test result of M::test_read_S: Succeed(Stopped) (used_gas=925): []

// test of M::test_read_and_write_S
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_M_test_read_and_write_S" {
    code {
        mstore(0, memoryguard(160))
        A2_M_test_read_and_write_S()
        return (0, 0)
        function A2_M_test_read_and_write_S() {
            let s, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t6 := 100
                    $t6 := 100
                    // abort($t6)
                    $Abort($t6)
                }
                case 4 {
                    // $t0 := M::read_and_write_S()
                    s := A2_M_read_and_write_S()
                    // $t1 := borrow_local($t0)
                    $t1 := $MakePtr(false, s)
                    // $t2 := borrow_field<0x2::M::S>.a($t1)
                    $t2 := $IndexPtr($t1, 32)
                    // $t3 := read_ref($t2)
                    $t3 := $LoadU64($t2)
                    // $t4 := 2
                    $t4 := 2
                    // $t5 := ==($t3, $t4)
                    $t5 := $Eq($t3, $t4)
                    // if ($t5) goto L1 else goto L0
                    switch $t5
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t7 := borrow_local($t0)
                    $t7 := $MakePtr(false, s)
                    // $t8 := borrow_field<0x2::M::S>.c($t7)
                    {
                        $t8 := $MakePtr($IsStoragePtr($t7), $LoadU256($t7))
                    }
                    // $t9 := borrow_field<0x2::M::S2>.x($t8)
                    $t9 := $t8
                    // $t10 := read_ref($t9)
                    $t10 := $LoadU128($t9)
                    // $t11 := 2
                    $t11 := 2
                    // $t12 := ==($t10, $t11)
                    $t12 := $Eq($t10, $t11)
                    // if ($t12) goto L4 else goto L3
                    switch $t12
                    case 0  { $block := 7 }
                    default { $block := 6 }
                }
                case 6 {
                    // label L4
                    // goto L5
                    $block := 8
                }
                case 7 {
                    // label L3
                    // $t13 := 101
                    $t13 := 101
                    // abort($t13)
                    $Abort($t13)
                }
                case 8 {
                    // label L5
                    // return ()
                    leave
                }
            }
        }

        function A2_M_read_and_write_S() -> $result {
            let s, x, $t2, $t3, $t4, $t5, $t6, $t7
            // $t2 := 1
            $t2 := 1
            // $t3 := false
            $t3 := false
            // $t0 := M::pack_S($t2, $t3)
            s := A2_M_pack_S($t2, $t3)
            // $t4 := borrow_local($t0)
            $t4 := $MakePtr(false, s)
            // $t5 := M::read_S($t4)
            $t5 := A2_M_read_S($t4)
            // $t6 := borrow_local($t0)
            $t6 := $MakePtr(false, s)
            // M::write_S($t6, $t5)
            A2_M_write_S($t6, $t5)
            // $t7 := move($t0)
            $t7 := s
            // return $t7
            $result := $t7
        }

        function A2_M_write_S(s, v) {
            let $t2, $t3, $t4, $t5, $t6, $t7
            // $t2 := borrow_field<0x2::M::S>.a($t0)
            $t2 := $IndexPtr(s, 32)
            // write_ref($t2, $t1)
            $StoreU64($t2, v)
            // $t3 := borrow_field<0x2::M::S>.a($t0)
            $t3 := $IndexPtr(s, 32)
            // $t4 := read_ref($t3)
            $t4 := $LoadU64($t3)
            // $t5 := (u128)($t4)
            $t5 := $CastU128($t4)
            // $t6 := borrow_field<0x2::M::S>.c($t0)
            {
                $t6 := $MakePtr($IsStoragePtr(s), $LoadU256(s))
            }
            // $t7 := borrow_field<0x2::M::S2>.x($t6)
            $t7 := $t6
            // write_ref($t7, $t5)
            $StoreU128($t7, $t5)
            // return ()
        }

        function A2_M_read_S(s) -> $result {
            let $t1, $t2, $t3, $t4, $t5, $t6, $t7
            // $t1 := borrow_field<0x2::M::S>.a($t0)
            $t1 := $IndexPtr(s, 32)
            // $t2 := read_ref($t1)
            $t2 := $LoadU64($t1)
            // $t3 := borrow_field<0x2::M::S>.c($t0)
            {
                $t3 := $MakePtr($IsStoragePtr(s), $LoadU256(s))
            }
            // $t4 := borrow_field<0x2::M::S2>.x($t3)
            $t4 := $t3
            // $t5 := read_ref($t4)
            $t5 := $LoadU128($t4)
            // $t6 := (u64)($t5)
            $t6 := $CastU64($t5)
            // $t7 := +($t2, $t6)
            $t7 := $AddU64($t2, $t6)
            // return $t7
            $result := $t7
        }

        function A2_M_pack_S(a, b) -> $result {
            let $t2, $t3, $t4
            // $t2 := (u128)($t0)
            $t2 := $CastU128(a)
            // $t3 := M::pack_S2($t2)
            $t3 := A2_M_pack_S2($t2)
            // $t4 := pack 0x2::M::S($t0, $t1, $t3)
            {
                let $mem := $Malloc(41)
                $MemoryStoreU64(add($mem, 32), a)
                $MemoryStoreU8(add($mem, 40), b)
                $MemoryStoreU256(add($mem, 0), $t3)
                $t4 := $mem
            }
            // return $t4
            $result := $t4
        }

        function A2_M_pack_S2(x) -> $result {
            let $t1
            // $t1 := pack 0x2::M::S2($t0)
            {
                let $mem := $Malloc(16)
                $MemoryStoreU128(add($mem, 0), x)
                $t1 := $mem
            }
            // return $t1
            $result := $t1
        }

        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $MemoryStoreU8(offs, val) {
          // Shortcut via special instruction
          mstore8(offs, val)
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $StoreU64(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU64(offs, val)
          }
          default {
            $StorageStoreU64(offs, val)
          }
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $StorageStoreU64(offs, val) {
          $StorageStoreBytes(offs, 8, val)
        }
        function $LoadU128(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU128(offs)
          }
          default {
            val := $StorageLoadU128(offs)
          }
        }
        function $MemoryLoadU128(offs) -> val {
          val := $MemoryLoadBytes(offs, 16)
        }
        function $StorageLoadU128(offs) -> val {
          val := $StorageLoadBytes(offs, 16)
        }
        function $StoreU128(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU128(offs, val)
          }
          default {
            $StorageStoreU128(offs, val)
          }
        }
        function $MemoryStoreU128(offs, val) {
          $MemoryStoreBytes(offs, 16, val)
        }
        function $StorageStoreU128(offs, val) {
          $StorageStoreBytes(offs, 16, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $AddU64(x, y) -> r {
            if lt(sub(0xffffffffffffffff, x), y) { $AbortBuiltin() }
            r := add(x, y)
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
        function $CastU64(x) -> r {
            if gt(x, 0xffffffffffffffff) { $AbortBuiltin() }
            r := x
        }
        function $CastU128(x) -> r {
            if gt(x, 0xffffffffffffffffffffffffffffffff) { $AbortBuiltin() }
            r := x
        }
    }
}
===> Test result of M::test_read_and_write_S: Succeed(Stopped) (used_gas=2055): []

// test of M::test_unpack
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_M_test_unpack" {
    code {
        mstore(0, memoryguard(160))
        A2_M_test_unpack()
        return (0, 0)
        function A2_M_test_unpack() {
            let s1, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t9 := 101
                    $t9 := 101
                    // abort($t9)
                    $Abort($t9)
                }
                case 4 {
                    // $t1 := 33
                    $t1 := 33
                    // $t2 := false
                    $t2 := false
                    // $t3 := M::pack_S($t1, $t2)
                    $t3 := A2_M_pack_S($t1, $t2)
                    // $t0 := M::unpack($t3)
                    s1 := A2_M_unpack($t3)
                    // $t4 := borrow_local($t0)
                    $t4 := $MakePtr(false, s1)
                    // $t5 := borrow_field<0x2::M::S2>.x($t4)
                    $t5 := $t4
                    // $t6 := read_ref($t5)
                    $t6 := $LoadU128($t5)
                    // $t7 := 33
                    $t7 := 33
                    // $t8 := ==($t6, $t7)
                    $t8 := $Eq($t6, $t7)
                    // if ($t8) goto L1 else goto L0
                    switch $t8
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // return ()
                    leave
                }
            }
        }

        function A2_M_unpack(s) -> $result {
            let c, $t2, $t3, $t4
            // ($t2, $t3, $t4) := unpack 0x2::M::S($t0)
            $t2 := $MemoryLoadU64(add(s, 32))
            $t3 := $MemoryLoadU8(add(s, 40))
            $t4 := $MemoryLoadU256(add(s, 0))
            $Free(s, 41)
            // drop($t3)
            // drop($t2)
            // return $t4
            $result := $t4
        }

        function A2_M_pack_S(a, b) -> $result {
            let $t2, $t3, $t4
            // $t2 := (u128)($t0)
            $t2 := $CastU128(a)
            // $t3 := M::pack_S2($t2)
            $t3 := A2_M_pack_S2($t2)
            // $t4 := pack 0x2::M::S($t0, $t1, $t3)
            {
                let $mem := $Malloc(41)
                $MemoryStoreU64(add($mem, 32), a)
                $MemoryStoreU8(add($mem, 40), b)
                $MemoryStoreU256(add($mem, 0), $t3)
                $t4 := $mem
            }
            // return $t4
            $result := $t4
        }

        function A2_M_pack_S2(x) -> $result {
            let $t1
            // $t1 := pack 0x2::M::S2($t0)
            {
                let $mem := $Malloc(16)
                $MemoryStoreU128(add($mem, 0), x)
                $t1 := $mem
            }
            // return $t1
            $result := $t1
        }

        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $MemoryLoadU8(offs) -> val {
          val := $MemoryLoadBytes(offs, 1)
        }
        function $MemoryStoreU8(offs, val) {
          // Shortcut via special instruction
          mstore8(offs, val)
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $LoadU128(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU128(offs)
          }
          default {
            val := $StorageLoadU128(offs)
          }
        }
        function $MemoryLoadU128(offs) -> val {
          val := $MemoryLoadBytes(offs, 16)
        }
        function $StorageLoadU128(offs) -> val {
          val := $StorageLoadBytes(offs, 16)
        }
        function $MemoryStoreU128(offs, val) {
          $MemoryStoreBytes(offs, 16, val)
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
        function $CastU128(x) -> r {
            if gt(x, 0xffffffffffffffffffffffffffffffff) { $AbortBuiltin() }
            r := x
        }
    }
}
===> Test result of M::test_unpack: Succeed(Stopped) (used_gas=591): []

// test of M::test_write_S
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_M_test_write_S" {
    code {
        mstore(0, memoryguard(160))
        A2_M_test_write_S()
        return (0, 0)
        function A2_M_test_write_S() {
            let s, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t10 := 100
                    $t10 := 100
                    // abort($t10)
                    $Abort($t10)
                }
                case 4 {
                    // $t1 := 42
                    $t1 := 42
                    // $t2 := true
                    $t2 := true
                    // $t0 := M::pack_S($t1, $t2)
                    s := A2_M_pack_S($t1, $t2)
                    // $t3 := borrow_local($t0)
                    $t3 := $MakePtr(false, s)
                    // $t4 := 43
                    $t4 := 43
                    // M::write_S($t3, $t4)
                    A2_M_write_S($t3, $t4)
                    // $t5 := borrow_local($t0)
                    $t5 := $MakePtr(false, s)
                    // $t6 := borrow_field<0x2::M::S>.a($t5)
                    $t6 := $IndexPtr($t5, 32)
                    // $t7 := read_ref($t6)
                    $t7 := $LoadU64($t6)
                    // $t8 := 43
                    $t8 := 43
                    // $t9 := ==($t7, $t8)
                    $t9 := $Eq($t7, $t8)
                    // if ($t9) goto L1 else goto L0
                    switch $t9
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t11 := borrow_local($t0)
                    $t11 := $MakePtr(false, s)
                    // $t12 := borrow_field<0x2::M::S>.c($t11)
                    {
                        $t12 := $MakePtr($IsStoragePtr($t11), $LoadU256($t11))
                    }
                    // $t13 := borrow_field<0x2::M::S2>.x($t12)
                    $t13 := $t12
                    // $t14 := read_ref($t13)
                    $t14 := $LoadU128($t13)
                    // $t15 := 43
                    $t15 := 43
                    // $t16 := ==($t14, $t15)
                    $t16 := $Eq($t14, $t15)
                    // if ($t16) goto L4 else goto L3
                    switch $t16
                    case 0  { $block := 7 }
                    default { $block := 6 }
                }
                case 6 {
                    // label L4
                    // goto L5
                    $block := 8
                }
                case 7 {
                    // label L3
                    // $t17 := 101
                    $t17 := 101
                    // abort($t17)
                    $Abort($t17)
                }
                case 8 {
                    // label L5
                    // return ()
                    leave
                }
            }
        }

        function A2_M_write_S(s, v) {
            let $t2, $t3, $t4, $t5, $t6, $t7
            // $t2 := borrow_field<0x2::M::S>.a($t0)
            $t2 := $IndexPtr(s, 32)
            // write_ref($t2, $t1)
            $StoreU64($t2, v)
            // $t3 := borrow_field<0x2::M::S>.a($t0)
            $t3 := $IndexPtr(s, 32)
            // $t4 := read_ref($t3)
            $t4 := $LoadU64($t3)
            // $t5 := (u128)($t4)
            $t5 := $CastU128($t4)
            // $t6 := borrow_field<0x2::M::S>.c($t0)
            {
                $t6 := $MakePtr($IsStoragePtr(s), $LoadU256(s))
            }
            // $t7 := borrow_field<0x2::M::S2>.x($t6)
            $t7 := $t6
            // write_ref($t7, $t5)
            $StoreU128($t7, $t5)
            // return ()
        }

        function A2_M_pack_S(a, b) -> $result {
            let $t2, $t3, $t4
            // $t2 := (u128)($t0)
            $t2 := $CastU128(a)
            // $t3 := M::pack_S2($t2)
            $t3 := A2_M_pack_S2($t2)
            // $t4 := pack 0x2::M::S($t0, $t1, $t3)
            {
                let $mem := $Malloc(41)
                $MemoryStoreU64(add($mem, 32), a)
                $MemoryStoreU8(add($mem, 40), b)
                $MemoryStoreU256(add($mem, 0), $t3)
                $t4 := $mem
            }
            // return $t4
            $result := $t4
        }

        function A2_M_pack_S2(x) -> $result {
            let $t1
            // $t1 := pack 0x2::M::S2($t0)
            {
                let $mem := $Malloc(16)
                $MemoryStoreU128(add($mem, 0), x)
                $t1 := $mem
            }
            // return $t1
            $result := $t1
        }

        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $MemoryStoreU8(offs, val) {
          // Shortcut via special instruction
          mstore8(offs, val)
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $StoreU64(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU64(offs, val)
          }
          default {
            $StorageStoreU64(offs, val)
          }
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $StorageStoreU64(offs, val) {
          $StorageStoreBytes(offs, 8, val)
        }
        function $LoadU128(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU128(offs)
          }
          default {
            val := $StorageLoadU128(offs)
          }
        }
        function $MemoryLoadU128(offs) -> val {
          val := $MemoryLoadBytes(offs, 16)
        }
        function $StorageLoadU128(offs) -> val {
          val := $StorageLoadBytes(offs, 16)
        }
        function $StoreU128(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU128(offs, val)
          }
          default {
            $StorageStoreU128(offs, val)
          }
        }
        function $MemoryStoreU128(offs, val) {
          $MemoryStoreBytes(offs, 16, val)
        }
        function $StorageStoreU128(offs, val) {
          $StorageStoreBytes(offs, 16, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
        function $CastU128(x) -> r {
            if gt(x, 0xffffffffffffffffffffffffffffffff) { $AbortBuiltin() }
            r := x
        }
    }
}
===> Test result of M::test_write_S: Succeed(Stopped) (used_gas=1637): []
