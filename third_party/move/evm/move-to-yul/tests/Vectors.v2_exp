/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "A2_Vectors" {
    code {
        codecopy(0, dataoffset("A2_Vectors_deployed"), datasize("A2_Vectors_deployed"))
        return(0, datasize("A2_Vectors_deployed"))
    }
    object "A2_Vectors_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                case 0x04ac5ead
                {
                    // test_one_elem_u64()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    A2_Vectors_test_one_elem_u64()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple__(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            $Abort(97)
            function A2_Vectors_test_one_elem_u64() {
                let $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12
                let $locals := $Malloc(32)
                let $block := 4
                for {} true {} {
                    switch $block
                    case 2 {
                        // label L1
                        // goto L2
                        $block := 5
                    }
                    case 3 {
                        // label L0
                        // $t5 := 101
                        $t5 := 101
                        // abort($t5)
                        $Abort($t5)
                    }
                    case 4 {
                        // $t0 := Vectors::one_elem_u64()
                        mstore($locals, A2_Vectors_one_elem_u64())
                        // $t1 := borrow_local($t0)
                        $t1 := $MakePtr(false, $locals)
                        // $t2 := vector::length<u64>($t1)
                        $t2 := A1_vector_length$u64$($t1)
                        // $t3 := 1
                        $t3 := 1
                        // $t4 := ==($t2, $t3)
                        $t4 := $Eq($t2, $t3)
                        // if ($t4) goto L1 else goto L0
                        switch $t4
                        case 0  { $block := 3 }
                        default { $block := 2 }
                    }
                    case 5 {
                        // label L2
                        // $t6 := borrow_local($t0)
                        $t6 := $MakePtr(false, $locals)
                        // $t7 := 0
                        $t7 := 0
                        // $t8 := vector::borrow<u64>($t6, $t7)
                        $t8 := A1_vector_borrow$u64$($t6, $t7)
                        // $t9 := read_ref($t8)
                        $t9 := $LoadU64($t8)
                        // $t10 := 42
                        $t10 := 42
                        // $t11 := ==($t9, $t10)
                        $t11 := $Eq($t9, $t10)
                        // if ($t11) goto L4 else goto L3
                        switch $t11
                        case 0  { $block := 7 }
                        default { $block := 6 }
                    }
                    case 6 {
                        // label L4
                        // goto L5
                        $block := 8
                    }
                    case 7 {
                        // label L3
                        // $t12 := 102
                        $t12 := 102
                        // abort($t12)
                        $Abort($t12)
                    }
                    case 8 {
                        // label L5
                        // return ()
                        $Free($locals, 32)
                        leave
                    }
                }
            }

            function A1_vector_borrow$u64$(v_ref, i) -> e_ptr {
                let v_offs := $LoadU256(v_ref)
                let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
                let size := $LoadU64(v_ptr)
                if $GtEq(i, size) { $AbortBuiltin() }
                e_ptr := $IndexPtr(v_ptr, add(32, mul(i, 8)))
            }
            function A1_vector_length$u64$(v_ref) -> len {
                let v_offs := $LoadU256(v_ref)
                let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
                len := $LoadU64(v_ptr)
            }
            function A2_Vectors_one_elem_u64() -> $result {
                let $t1, $t2, $t3
                let $locals := $Malloc(32)
                // $t0 := vector::empty<u64>()
                mstore($locals, A1_vector_empty$u64$())
                // $t1 := borrow_local($t0)
                $t1 := $MakePtr(false, $locals)
                // $t2 := 42
                $t2 := 42
                // vector::push_back<u64>($t1, $t2)
                A1_vector_push_back$u64$($t1, $t2)
                // $t3 := move($t0)
                $t3 := mload($locals)
                // return $t3
                $result := $t3
                $Free($locals, 32)
            }

            function A1_vector_push_back$u64$(v_ref, e) {
                let v_offs := $LoadU256(v_ref)
                let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
                let size := $LoadU64(v_ptr)
                let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 8)))
                $StoreU64(e_ptr, e)
                size := add(size, 1)
                $StoreU64(v_ptr, size)
                let capacity := $LoadU64($IndexPtr(v_ptr, 8))
                if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                    let new_v_offs := $ResizeVector(v_offs, capacity, 8)
                    $StoreU256(v_ref, new_v_offs)
                }
            }
            function A1_vector_empty$u64$() -> vector {
                vector := $Malloc(48)
                $MemoryStoreU64(add(vector, 8), 2)
            }
            function abi_encode_tuple__(headStart ) -> tail {
                tail := add(headStart, 0)
            }
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $AbortBuiltin() {
                $Abort(sub(0, 1))
            }
            function $Malloc(size) -> offs {
                offs := mload(0)
                // pad to word size
                mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
            }
            function $Free(offs, size) {
            }
            function $MakePtr(is_storage, offs) -> ptr {
              ptr := or(is_storage, shl(1, offs))
            }
            function $IsStoragePtr(ptr) -> b {
              b := and(ptr, 0x1)
            }
            function $OffsetPtr(ptr) -> offs {
              offs := shr(1, ptr)
            }
            function $MaskForSize(size) -> mask {
              mask := sub(shl(shl(3, size), 1), 1)
            }
            function $ExtractBytes(word, start, size) -> bytes {
               switch size
               case 1 {
                  // use the faster byte primitive
                  bytes := byte(start, word)
               }
               default {
                  // As we have big endian, we need to right shift the value from
                  // where the highest byte starts in the word (32 - start), minus
                  // the size.
                  let shift_bits := shl(3, sub(sub(32, start), size))
                  bytes := and(shr(shift_bits, word), $MaskForSize(size))
               }
            }
            function $InjectBytes(word, start, size, bytes) -> new_word {
               let shift_bits := shl(3, sub(sub(32, start), size))
               // Blend out the bits which we inject
               let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
               word := and(word, neg_mask)
               // Overlay the bits we inject
               new_word := or(word, shl(shift_bits, bytes))
            }
            function $ToWordOffs(offs) -> word_offs, byte_offset {
              word_offs := shr(5, offs)
              byte_offset := and(offs, 0x1F)
            }
            function $OverflowBytes(byte_offset, size) -> overflow_bytes {
              let available_bytes := sub(32, byte_offset)
              switch gt(size, available_bytes)
              case 0 {
                overflow_bytes := 0
              }
              default {
                overflow_bytes := sub(size, available_bytes)
              }
            }
            function $MemoryLoadBytes(offs, size) -> val {
              // Lower bit where the value in the higher bytes ends
              let bit_end := shl(3, sub(32, size))
              val := shr(bit_end, mload(offs))
            }
            function $MemoryStoreBytes(offs, size, val) {
              let bit_end := shl(3, sub(32, size))
              let mask := shl(bit_end, $MaskForSize(size))
              mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
            }
            function $StorageLoadBytes(offs, size) -> val {
              let word_offs, byte_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              val := $ExtractBytes(sload(key), byte_offs, size)
              let overflow_bytes := $OverflowBytes(byte_offs, size)
              if $LogicalNot(iszero(overflow_bytes)) {
                key := $StorageKey(0, add(word_offs, 1))
                let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
                val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
              }
            }
            function $StorageStoreBytes(offs, size, bytes) {
              let word_offs, byte_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              let overflow_bytes := $OverflowBytes(byte_offs, size)
              switch overflow_bytes
              case 0 {
                sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
              }
              default {
                // Shift the higher bytes to the right
                let used_bytes := sub(size, overflow_bytes)
                let higher_bytes := shr(used_bytes, bytes)
                let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
                sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
                key := $StorageKey(0, add(word_offs, 1))
                sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
              }
            }
            function $StorageKey(group, word) -> key {
              mstore(32, word)
              mstore(64, shl(224, group))
              key := keccak256(32, 36)
            }
            function $IndexPtr(ptr, offs) -> new_ptr {
              new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
            }
            function $LoadU64(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU64(offs)
              }
              default {
                val := $StorageLoadU64(offs)
              }
            }
            function $MemoryLoadU64(offs) -> val {
              val := $MemoryLoadBytes(offs, 8)
            }
            function $StorageLoadU64(offs) -> val {
              val := $StorageLoadBytes(offs, 8)
            }
            function $StoreU64(ptr, val) {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                $MemoryStoreU64(offs, val)
              }
              default {
                $StorageStoreU64(offs, val)
              }
            }
            function $MemoryStoreU64(offs, val) {
              $MemoryStoreBytes(offs, 8, val)
            }
            function $StorageStoreU64(offs, val) {
              $StorageStoreBytes(offs, 8, val)
            }
            function $LoadU256(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU256(offs)
              }
              default {
                val := $StorageLoadU256(offs)
              }
            }
            function $MemoryLoadU256(offs) -> val {
              val := $MemoryLoadBytes(offs, 32)
            }
            function $StorageLoadU256(offs) -> val {
              val := $StorageLoadBytes(offs, 32)
            }
            function $StoreU256(ptr, val) {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                $MemoryStoreU256(offs, val)
              }
              default {
                $StorageStoreU256(offs, val)
              }
            }
            function $MemoryStoreU256(offs, val) {
              $MemoryStoreBytes(offs, 32, val)
            }
            function $StorageStoreU256(offs, val) {
              $StorageStoreBytes(offs, 32, val)
            }
            function $CopyMemory(src, dst, size) {
              let num_words, overflow_bytes := $ToWordOffs(size)
              let i := 0
              for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
                mstore(add(dst, i), mload(add(src, i)))
              }
              if overflow_bytes {
                let mask := $MaskForSize(sub(32, overflow_bytes))
                let overflow_offs := mul(num_words, 32)
                let dst_word := and(mload(add(dst, overflow_offs)), mask)
                let src_word := and(mload(add(src, overflow_offs)), not(mask))
                mstore(add(dst, overflow_offs), or(dst_word, src_word))
              }
            }
            function $ResizeVector(v_offs, capacity, type_size) -> new_v_offs {
                let new_capacity := mul(capacity, 2)
                let data_size := add(32, mul(capacity, type_size))
                let new_data_size := add(32, mul(new_capacity, type_size))
                new_v_offs := $Malloc(new_data_size)
                $CopyMemory(v_offs, new_v_offs, data_size)
                // update capacity at new location
                $MemoryStoreU64(add(new_v_offs, 8), new_capacity)
                $Free(v_offs, data_size)
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
            function $GtEq(x, y) -> r {
                r := or(gt(x, y), eq(x, y))
            }
            function $Eq(x, y) -> r {
                r := eq(x, y)
            }
            function $LogicalNot(x) -> r {
                r := iszero(x)
            }
        }
    }
}


!! Succeeded compiling Yul


!! Unit tests

// test of Vectors::test_borrow_fail
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_Vectors_test_borrow_fail" {
    code {
        mstore(0, memoryguard(160))
        A2_Vectors_test_borrow_fail()
        return (0, 0)
        function A2_Vectors_test_borrow_fail() {
            let $t1, $t2, $t3, $t4, $t5, $t6, $t7
            let $locals := $Malloc(32)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t7 := 101
                    $t7 := 101
                    // abort($t7)
                    $Abort($t7)
                }
                case 4 {
                    // $t0 := Vectors::empty_vector()
                    mstore($locals, A2_Vectors_empty_vector())
                    // $t1 := borrow_local($t0)
                    $t1 := $MakePtr(false, $locals)
                    // $t2 := 0
                    $t2 := 0
                    // $t3 := vector::borrow<u64>($t1, $t2)
                    $t3 := A1_vector_borrow$u64$($t1, $t2)
                    // $t4 := read_ref($t3)
                    $t4 := $LoadU64($t3)
                    // $t5 := 0
                    $t5 := 0
                    // $t6 := ==($t4, $t5)
                    $t6 := $Eq($t4, $t5)
                    // if ($t6) goto L1 else goto L0
                    switch $t6
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // return ()
                    $Free($locals, 32)
                    leave
                }
            }
        }

        function A1_vector_borrow$u64$(v_ref, i) -> e_ptr {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            if $GtEq(i, size) { $AbortBuiltin() }
            e_ptr := $IndexPtr(v_ptr, add(32, mul(i, 8)))
        }
        function A2_Vectors_empty_vector() -> $result {
            let $t0
            // $t0 := vector::empty<u64>()
            $t0 := A1_vector_empty$u64$()
            // return $t0
            $result := $t0
        }

        function A1_vector_empty$u64$() -> vector {
            vector := $Malloc(48)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $GtEq(x, y) -> r {
            r := or(gt(x, y), eq(x, y))
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
    }
}
===> Test result of Vectors::test_borrow_fail: Revert(Reverted) (used_gas=470): [255, 255, 255, 255, 255, 255, 255, 255]

// test of Vectors::test_borrow_mut
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_Vectors_test_borrow_mut" {
    code {
        mstore(0, memoryguard(160))
        A2_Vectors_test_borrow_mut()
        return (0, 0)
        function A2_Vectors_test_borrow_mut() {
            let s1_ref, s2_ref, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21, $t22, $t23, $t24, $t25, $t26, $t27, $t28, $t29, $t30, $t31, $t32, $t33, $t34, $t35, $t36, $t37, $t38, $t39, $t40, $t41, $t42, $t43, $t44, $t45, $t46, $t47, $t48, $t49, $t50, $t51, $t52, $t53, $t54, $t55, $t56, $t57, $t58, $t59, $t60, $t61, $t62, $t63, $t64, $t65, $t66, $t67, $t68, $t69, $t70, $t71, $t72, $t73, $t74, $t75, $t76, $t77, $t78, $t79, $t80, $t81, $t82, $t83, $t84, $t85, $t86, $t87, $t88, $t89, $t90, $t91, $t92, $t93, $t94, $t95, $t96, $t97
            let $locals := $Malloc(32)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t24 := 101
                    $t24 := 101
                    // abort($t24)
                    $Abort($t24)
                }
                case 4 {
                    // $t2 := Vectors::one_elem_struct()
                    mstore($locals, A2_Vectors_one_elem_struct())
                    // $t3 := borrow_local($t2)
                    $t3 := $MakePtr(false, $locals)
                    // $t4 := 45
                    $t4 := 45
                    // $t5 := false
                    $t5 := false
                    // $t6 := 123
                    $t6 := 123
                    // $t7 := pack 0x2::Vectors::S($t4, $t5, $t6)
                    {
                        let $mem := $Malloc(25)
                        $MemoryStoreU128(add($mem, 0), $t4)
                        $MemoryStoreU8(add($mem, 24), $t5)
                        $MemoryStoreU64(add($mem, 16), $t6)
                        $t7 := $mem
                    }
                    // vector::push_back<0x2::Vectors::S>($t3, $t7)
                    A1_vector_push_back$A2_Vectors_S$($t3, $t7)
                    // $t8 := borrow_local($t2)
                    $t8 := $MakePtr(false, $locals)
                    // $t9 := 0
                    $t9 := 0
                    // $t10 := vector::borrow_mut<0x2::Vectors::S>($t8, $t9)
                    $t10 := A1_vector_borrow_mut$A2_Vectors_S$($t8, $t9)
                    // $t11 := 90
                    $t11 := 90
                    // $t12 := borrow_field<0x2::Vectors::S>.x($t10)
                    $t12 := $t10
                    // write_ref($t12, $t11)
                    $StoreU128($t12, $t11)
                    // $t13 := false
                    $t13 := false
                    // $t14 := borrow_field<0x2::Vectors::S>.y($t10)
                    $t14 := $IndexPtr($t10, 24)
                    // write_ref($t14, $t13)
                    $StoreU8($t14, $t13)
                    // $t15 := 1028
                    $t15 := 1028
                    // $t16 := borrow_field<0x2::Vectors::S>.z($t10)
                    $t16 := $IndexPtr($t10, 16)
                    // write_ref($t16, $t15)
                    $StoreU64($t16, $t15)
                    // $t17 := borrow_local($t2)
                    $t17 := $MakePtr(false, $locals)
                    // $t18 := 0
                    $t18 := 0
                    // $t19 := vector::borrow<0x2::Vectors::S>($t17, $t18)
                    $t19 := A1_vector_borrow$A2_Vectors_S$($t17, $t18)
                    // $t20 := borrow_field<0x2::Vectors::S>.x($t19)
                    $t20 := $t19
                    // $t21 := read_ref($t20)
                    $t21 := $LoadU128($t20)
                    // $t22 := 90
                    $t22 := 90
                    // $t23 := ==($t21, $t22)
                    $t23 := $Eq($t21, $t22)
                    // if ($t23) goto L1 else goto L0
                    switch $t23
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t25 := borrow_local($t2)
                    $t25 := $MakePtr(false, $locals)
                    // $t26 := 0
                    $t26 := 0
                    // $t27 := vector::borrow<0x2::Vectors::S>($t25, $t26)
                    $t27 := A1_vector_borrow$A2_Vectors_S$($t25, $t26)
                    // $t28 := borrow_field<0x2::Vectors::S>.y($t27)
                    $t28 := $IndexPtr($t27, 24)
                    // $t29 := read_ref($t28)
                    $t29 := $LoadU8($t28)
                    // $t30 := false
                    $t30 := false
                    // $t31 := ==($t29, $t30)
                    $t31 := $Eq($t29, $t30)
                    // if ($t31) goto L4 else goto L3
                    switch $t31
                    case 0  { $block := 7 }
                    default { $block := 6 }
                }
                case 6 {
                    // label L4
                    // goto L5
                    $block := 8
                }
                case 7 {
                    // label L3
                    // $t32 := 102
                    $t32 := 102
                    // abort($t32)
                    $Abort($t32)
                }
                case 8 {
                    // label L5
                    // $t33 := borrow_local($t2)
                    $t33 := $MakePtr(false, $locals)
                    // $t34 := 0
                    $t34 := 0
                    // $t35 := vector::borrow<0x2::Vectors::S>($t33, $t34)
                    $t35 := A1_vector_borrow$A2_Vectors_S$($t33, $t34)
                    // $t36 := borrow_field<0x2::Vectors::S>.z($t35)
                    $t36 := $IndexPtr($t35, 16)
                    // $t37 := read_ref($t36)
                    $t37 := $LoadU64($t36)
                    // $t38 := 1028
                    $t38 := 1028
                    // $t39 := ==($t37, $t38)
                    $t39 := $Eq($t37, $t38)
                    // if ($t39) goto L7 else goto L6
                    switch $t39
                    case 0  { $block := 10 }
                    default { $block := 9 }
                }
                case 9 {
                    // label L7
                    // goto L8
                    $block := 11
                }
                case 10 {
                    // label L6
                    // $t40 := 103
                    $t40 := 103
                    // abort($t40)
                    $Abort($t40)
                }
                case 11 {
                    // label L8
                    // $t41 := borrow_local($t2)
                    $t41 := $MakePtr(false, $locals)
                    // $t42 := 1
                    $t42 := 1
                    // $t43 := vector::borrow<0x2::Vectors::S>($t41, $t42)
                    $t43 := A1_vector_borrow$A2_Vectors_S$($t41, $t42)
                    // $t44 := borrow_field<0x2::Vectors::S>.x($t43)
                    $t44 := $t43
                    // $t45 := read_ref($t44)
                    $t45 := $LoadU128($t44)
                    // $t46 := 45
                    $t46 := 45
                    // $t47 := ==($t45, $t46)
                    $t47 := $Eq($t45, $t46)
                    // if ($t47) goto L10 else goto L9
                    switch $t47
                    case 0  { $block := 13 }
                    default { $block := 12 }
                }
                case 12 {
                    // label L10
                    // goto L11
                    $block := 14
                }
                case 13 {
                    // label L9
                    // $t48 := 104
                    $t48 := 104
                    // abort($t48)
                    $Abort($t48)
                }
                case 14 {
                    // label L11
                    // $t49 := borrow_local($t2)
                    $t49 := $MakePtr(false, $locals)
                    // $t50 := 1
                    $t50 := 1
                    // $t51 := vector::borrow<0x2::Vectors::S>($t49, $t50)
                    $t51 := A1_vector_borrow$A2_Vectors_S$($t49, $t50)
                    // $t52 := borrow_field<0x2::Vectors::S>.y($t51)
                    $t52 := $IndexPtr($t51, 24)
                    // $t53 := read_ref($t52)
                    $t53 := $LoadU8($t52)
                    // $t54 := false
                    $t54 := false
                    // $t55 := ==($t53, $t54)
                    $t55 := $Eq($t53, $t54)
                    // if ($t55) goto L13 else goto L12
                    switch $t55
                    case 0  { $block := 16 }
                    default { $block := 15 }
                }
                case 15 {
                    // label L13
                    // goto L14
                    $block := 17
                }
                case 16 {
                    // label L12
                    // $t56 := 105
                    $t56 := 105
                    // abort($t56)
                    $Abort($t56)
                }
                case 17 {
                    // label L14
                    // $t57 := borrow_local($t2)
                    $t57 := $MakePtr(false, $locals)
                    // $t58 := 1
                    $t58 := 1
                    // $t59 := vector::borrow<0x2::Vectors::S>($t57, $t58)
                    $t59 := A1_vector_borrow$A2_Vectors_S$($t57, $t58)
                    // $t60 := borrow_field<0x2::Vectors::S>.z($t59)
                    $t60 := $IndexPtr($t59, 16)
                    // $t61 := read_ref($t60)
                    $t61 := $LoadU64($t60)
                    // $t62 := 123
                    $t62 := 123
                    // $t63 := ==($t61, $t62)
                    $t63 := $Eq($t61, $t62)
                    // if ($t63) goto L16 else goto L15
                    switch $t63
                    case 0  { $block := 19 }
                    default { $block := 18 }
                }
                case 18 {
                    // label L16
                    // goto L17
                    $block := 20
                }
                case 19 {
                    // label L15
                    // $t64 := 106
                    $t64 := 106
                    // abort($t64)
                    $Abort($t64)
                }
                case 20 {
                    // label L17
                    // $t65 := borrow_local($t2)
                    $t65 := $MakePtr(false, $locals)
                    // $t66 := 1
                    $t66 := 1
                    // $t67 := vector::borrow_mut<0x2::Vectors::S>($t65, $t66)
                    $t67 := A1_vector_borrow_mut$A2_Vectors_S$($t65, $t66)
                    // $t68 := 10
                    $t68 := 10
                    // $t69 := borrow_field<0x2::Vectors::S>.x($t67)
                    $t69 := $t67
                    // write_ref($t69, $t68)
                    $StoreU128($t69, $t68)
                    // $t70 := true
                    $t70 := true
                    // $t71 := borrow_field<0x2::Vectors::S>.y($t67)
                    $t71 := $IndexPtr($t67, 24)
                    // write_ref($t71, $t70)
                    $StoreU8($t71, $t70)
                    // $t72 := 456
                    $t72 := 456
                    // $t73 := borrow_field<0x2::Vectors::S>.z($t67)
                    $t73 := $IndexPtr($t67, 16)
                    // write_ref($t73, $t72)
                    $StoreU64($t73, $t72)
                    // $t74 := borrow_local($t2)
                    $t74 := $MakePtr(false, $locals)
                    // $t75 := 1
                    $t75 := 1
                    // $t76 := vector::borrow<0x2::Vectors::S>($t74, $t75)
                    $t76 := A1_vector_borrow$A2_Vectors_S$($t74, $t75)
                    // $t77 := borrow_field<0x2::Vectors::S>.x($t76)
                    $t77 := $t76
                    // $t78 := read_ref($t77)
                    $t78 := $LoadU128($t77)
                    // $t79 := 10
                    $t79 := 10
                    // $t80 := ==($t78, $t79)
                    $t80 := $Eq($t78, $t79)
                    // if ($t80) goto L19 else goto L18
                    switch $t80
                    case 0  { $block := 22 }
                    default { $block := 21 }
                }
                case 21 {
                    // label L19
                    // goto L20
                    $block := 23
                }
                case 22 {
                    // label L18
                    // $t81 := 107
                    $t81 := 107
                    // abort($t81)
                    $Abort($t81)
                }
                case 23 {
                    // label L20
                    // $t82 := borrow_local($t2)
                    $t82 := $MakePtr(false, $locals)
                    // $t83 := 1
                    $t83 := 1
                    // $t84 := vector::borrow<0x2::Vectors::S>($t82, $t83)
                    $t84 := A1_vector_borrow$A2_Vectors_S$($t82, $t83)
                    // $t85 := borrow_field<0x2::Vectors::S>.y($t84)
                    $t85 := $IndexPtr($t84, 24)
                    // $t86 := read_ref($t85)
                    $t86 := $LoadU8($t85)
                    // $t87 := true
                    $t87 := true
                    // $t88 := ==($t86, $t87)
                    $t88 := $Eq($t86, $t87)
                    // if ($t88) goto L22 else goto L21
                    switch $t88
                    case 0  { $block := 25 }
                    default { $block := 24 }
                }
                case 24 {
                    // label L22
                    // goto L23
                    $block := 26
                }
                case 25 {
                    // label L21
                    // $t89 := 108
                    $t89 := 108
                    // abort($t89)
                    $Abort($t89)
                }
                case 26 {
                    // label L23
                    // $t90 := borrow_local($t2)
                    $t90 := $MakePtr(false, $locals)
                    // $t91 := 1
                    $t91 := 1
                    // $t92 := vector::borrow<0x2::Vectors::S>($t90, $t91)
                    $t92 := A1_vector_borrow$A2_Vectors_S$($t90, $t91)
                    // $t93 := borrow_field<0x2::Vectors::S>.z($t92)
                    $t93 := $IndexPtr($t92, 16)
                    // $t94 := read_ref($t93)
                    $t94 := $LoadU64($t93)
                    // $t95 := 456
                    $t95 := 456
                    // $t96 := ==($t94, $t95)
                    $t96 := $Eq($t94, $t95)
                    // if ($t96) goto L25 else goto L24
                    switch $t96
                    case 0  { $block := 28 }
                    default { $block := 27 }
                }
                case 27 {
                    // label L25
                    // goto L26
                    $block := 29
                }
                case 28 {
                    // label L24
                    // $t97 := 109
                    $t97 := 109
                    // abort($t97)
                    $Abort($t97)
                }
                case 29 {
                    // label L26
                    // return ()
                    $Free($locals, 32)
                    leave
                }
            }
        }

        function A1_vector_borrow$A2_Vectors_S$(v_ref, i) -> e_ptr {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            if $GtEq(i, size) { $AbortBuiltin() }
            e_ptr := $IndexPtr(v_ptr, add(32, mul(i, 32)))
            let e := $LoadU256(e_ptr)
            e_ptr := $MakePtr($IsStoragePtr(v_ref), e)
        }
        function A1_vector_borrow_mut$A2_Vectors_S$(v_ref, i) -> e_ptr {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            if $GtEq(i, size) { $AbortBuiltin() }
            e_ptr := $IndexPtr(v_ptr, add(32, mul(i, 32)))
            let e := $LoadU256(e_ptr)
            e_ptr := $MakePtr($IsStoragePtr(v_ref), e)
        }
        function A1_vector_push_back$A2_Vectors_S$(v_ref, e) {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 32)))
            $StoreU256(e_ptr, e)
            if $IsStoragePtr(e_ptr) {
                let e_offs := $OffsetPtr(e_ptr)
                let $linked_dst_490229512 := $NewLinkedStorageBase(0x1d384f08)
                $AlignedStorageStore(add($linked_dst_490229512, 0), mload(add(e, 0)))
                $Free(e, 25)
                $AlignedStorageStore(e_offs, $linked_dst_490229512)
            }
            size := add(size, 1)
            $StoreU64(v_ptr, size)
            let capacity := $LoadU64($IndexPtr(v_ptr, 8))
            if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                let new_v_offs := $ResizeVector(v_offs, capacity, 32)
                $StoreU256(v_ref, new_v_offs)
            }
        }
        function A2_Vectors_one_elem_struct() -> $result {
            let $t1, $t2, $t3, $t4, $t5, $t6
            let $locals := $Malloc(32)
            // $t0 := vector::empty<0x2::Vectors::S>()
            mstore($locals, A1_vector_empty$A2_Vectors_S$())
            // $t1 := borrow_local($t0)
            $t1 := $MakePtr(false, $locals)
            // $t2 := 42
            $t2 := 42
            // $t3 := true
            $t3 := true
            // $t4 := 789
            $t4 := 789
            // $t5 := pack 0x2::Vectors::S($t2, $t3, $t4)
            {
                let $mem := $Malloc(25)
                $MemoryStoreU128(add($mem, 0), $t2)
                $MemoryStoreU8(add($mem, 24), $t3)
                $MemoryStoreU64(add($mem, 16), $t4)
                $t5 := $mem
            }
            // vector::push_back<0x2::Vectors::S>($t1, $t5)
            A1_vector_push_back$A2_Vectors_S$($t1, $t5)
            // $t6 := move($t0)
            $t6 := mload($locals)
            // return $t6
            $result := $t6
            $Free($locals, 32)
        }

        function A1_vector_empty$A2_Vectors_S$() -> vector {
            vector := $Malloc(96)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $MakeTypeStorageBase(category, type_hash, id) -> offs {
          offs := or(shl(252, category), or(shl(220, type_hash), shl(60, id)))
        }
        function $NewLinkedStorageBase(type_hash) -> offs {
          let key := $StorageKey(1, 1)
          let handle := sload(key)
          sstore(key, add(handle, 1))
          offs := $MakeTypeStorageBase(1, type_hash, handle)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $LoadU8(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU8(offs)
          }
          default {
            val := $StorageLoadU8(offs)
          }
        }
        function $MemoryLoadU8(offs) -> val {
          val := $MemoryLoadBytes(offs, 1)
        }
        function $StorageLoadU8(offs) -> val {
          val := $StorageLoadBytes(offs, 1)
        }
        function $StoreU8(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU8(offs, val)
          }
          default {
            $StorageStoreU8(offs, val)
          }
        }
        function $MemoryStoreU8(offs, val) {
          // Shortcut via special instruction
          mstore8(offs, val)
        }
        function $StorageStoreU8(offs, val) {
          $StorageStoreBytes(offs, 1, val)
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $StoreU64(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU64(offs, val)
          }
          default {
            $StorageStoreU64(offs, val)
          }
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $StorageStoreU64(offs, val) {
          $StorageStoreBytes(offs, 8, val)
        }
        function $LoadU128(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU128(offs)
          }
          default {
            val := $StorageLoadU128(offs)
          }
        }
        function $MemoryLoadU128(offs) -> val {
          val := $MemoryLoadBytes(offs, 16)
        }
        function $StorageLoadU128(offs) -> val {
          val := $StorageLoadBytes(offs, 16)
        }
        function $StoreU128(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU128(offs, val)
          }
          default {
            $StorageStoreU128(offs, val)
          }
        }
        function $MemoryStoreU128(offs, val) {
          $MemoryStoreBytes(offs, 16, val)
        }
        function $StorageStoreU128(offs, val) {
          $StorageStoreBytes(offs, 16, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $StoreU256(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU256(offs, val)
          }
          default {
            $StorageStoreU256(offs, val)
          }
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $StorageStoreU256(offs, val) {
          $StorageStoreBytes(offs, 32, val)
        }
        function $AlignedStorageStore(offs, val) {
          let word_offs := shr(5, offs)
          sstore($StorageKey(0, word_offs), val)
        }
        function $CopyMemory(src, dst, size) {
          let num_words, overflow_bytes := $ToWordOffs(size)
          let i := 0
          for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
            mstore(add(dst, i), mload(add(src, i)))
          }
          if overflow_bytes {
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let dst_word := and(mload(add(dst, overflow_offs)), mask)
            let src_word := and(mload(add(src, overflow_offs)), not(mask))
            mstore(add(dst, overflow_offs), or(dst_word, src_word))
          }
        }
        function $ResizeVector(v_offs, capacity, type_size) -> new_v_offs {
            let new_capacity := mul(capacity, 2)
            let data_size := add(32, mul(capacity, type_size))
            let new_data_size := add(32, mul(new_capacity, type_size))
            new_v_offs := $Malloc(new_data_size)
            $CopyMemory(v_offs, new_v_offs, data_size)
            // update capacity at new location
            $MemoryStoreU64(add(new_v_offs, 8), new_capacity)
            $Free(v_offs, data_size)
        }
        function $GtEq(x, y) -> r {
            r := or(gt(x, y), eq(x, y))
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
    }
}
===> Test result of Vectors::test_borrow_mut: Succeed(Stopped) (used_gas=14880): []

// test of Vectors::test_destroy_empty
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_Vectors_test_destroy_empty" {
    code {
        mstore(0, memoryguard(160))
        A2_Vectors_test_destroy_empty()
        return (0, 0)
        function A2_Vectors_test_destroy_empty() {
            let $t0
            // $t0 := vector::empty<address>()
            $t0 := A1_vector_empty$address$()
            // vector::destroy_empty<address>($t0)
            A1_vector_destroy_empty$address$($t0)
            // return ()
        }

        function A1_vector_destroy_empty$address$(v) {
            let size := $MemoryLoadU64(v)
            if $LogicalNot(iszero(size)) { $AbortBuiltin() }
            let capacity := $MemoryLoadU64(add(v, 8))
            $Free(v, add(32, mul(capacity, 32)))
        }
        function A1_vector_empty$address$() -> vector {
            vector := $Malloc(96)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
    }
}
===> Test result of Vectors::test_destroy_empty: Succeed(Stopped) (used_gas=100): []

// test of Vectors::test_destroy_non_empty_fail
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_Vectors_test_destroy_non_empty_fail" {
    code {
        mstore(0, memoryguard(160))
        A2_Vectors_test_destroy_non_empty_fail()
        return (0, 0)
        function A2_Vectors_test_destroy_non_empty_fail() {
            let $t0
            // $t0 := Vectors::one_elem_struct()
            $t0 := A2_Vectors_one_elem_struct()
            // vector::destroy_empty<0x2::Vectors::S>($t0)
            A1_vector_destroy_empty$A2_Vectors_S$($t0)
            // return ()
        }

        function A1_vector_destroy_empty$A2_Vectors_S$(v) {
            let size := $MemoryLoadU64(v)
            if $LogicalNot(iszero(size)) { $AbortBuiltin() }
            let capacity := $MemoryLoadU64(add(v, 8))
            $Free(v, add(32, mul(capacity, 32)))
        }
        function A2_Vectors_one_elem_struct() -> $result {
            let $t1, $t2, $t3, $t4, $t5, $t6
            let $locals := $Malloc(32)
            // $t0 := vector::empty<0x2::Vectors::S>()
            mstore($locals, A1_vector_empty$A2_Vectors_S$())
            // $t1 := borrow_local($t0)
            $t1 := $MakePtr(false, $locals)
            // $t2 := 42
            $t2 := 42
            // $t3 := true
            $t3 := true
            // $t4 := 789
            $t4 := 789
            // $t5 := pack 0x2::Vectors::S($t2, $t3, $t4)
            {
                let $mem := $Malloc(25)
                $MemoryStoreU128(add($mem, 0), $t2)
                $MemoryStoreU8(add($mem, 24), $t3)
                $MemoryStoreU64(add($mem, 16), $t4)
                $t5 := $mem
            }
            // vector::push_back<0x2::Vectors::S>($t1, $t5)
            A1_vector_push_back$A2_Vectors_S$($t1, $t5)
            // $t6 := move($t0)
            $t6 := mload($locals)
            // return $t6
            $result := $t6
            $Free($locals, 32)
        }

        function A1_vector_push_back$A2_Vectors_S$(v_ref, e) {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 32)))
            $StoreU256(e_ptr, e)
            if $IsStoragePtr(e_ptr) {
                let e_offs := $OffsetPtr(e_ptr)
                let $linked_dst_490229512 := $NewLinkedStorageBase(0x1d384f08)
                $AlignedStorageStore(add($linked_dst_490229512, 0), mload(add(e, 0)))
                $Free(e, 25)
                $AlignedStorageStore(e_offs, $linked_dst_490229512)
            }
            size := add(size, 1)
            $StoreU64(v_ptr, size)
            let capacity := $LoadU64($IndexPtr(v_ptr, 8))
            if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                let new_v_offs := $ResizeVector(v_offs, capacity, 32)
                $StoreU256(v_ref, new_v_offs)
            }
        }
        function A1_vector_empty$A2_Vectors_S$() -> vector {
            vector := $Malloc(96)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $MakeTypeStorageBase(category, type_hash, id) -> offs {
          offs := or(shl(252, category), or(shl(220, type_hash), shl(60, id)))
        }
        function $NewLinkedStorageBase(type_hash) -> offs {
          let key := $StorageKey(1, 1)
          let handle := sload(key)
          sstore(key, add(handle, 1))
          offs := $MakeTypeStorageBase(1, type_hash, handle)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $MemoryStoreU8(offs, val) {
          // Shortcut via special instruction
          mstore8(offs, val)
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $StoreU64(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU64(offs, val)
          }
          default {
            $StorageStoreU64(offs, val)
          }
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $StorageStoreU64(offs, val) {
          $StorageStoreBytes(offs, 8, val)
        }
        function $MemoryStoreU128(offs, val) {
          $MemoryStoreBytes(offs, 16, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $StoreU256(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU256(offs, val)
          }
          default {
            $StorageStoreU256(offs, val)
          }
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $StorageStoreU256(offs, val) {
          $StorageStoreBytes(offs, 32, val)
        }
        function $AlignedStorageStore(offs, val) {
          let word_offs := shr(5, offs)
          sstore($StorageKey(0, word_offs), val)
        }
        function $CopyMemory(src, dst, size) {
          let num_words, overflow_bytes := $ToWordOffs(size)
          let i := 0
          for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
            mstore(add(dst, i), mload(add(src, i)))
          }
          if overflow_bytes {
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let dst_word := and(mload(add(dst, overflow_offs)), mask)
            let src_word := and(mload(add(src, overflow_offs)), not(mask))
            mstore(add(dst, overflow_offs), or(dst_word, src_word))
          }
        }
        function $ResizeVector(v_offs, capacity, type_size) -> new_v_offs {
            let new_capacity := mul(capacity, 2)
            let data_size := add(32, mul(capacity, type_size))
            let new_data_size := add(32, mul(new_capacity, type_size))
            new_v_offs := $Malloc(new_data_size)
            $CopyMemory(v_offs, new_v_offs, data_size)
            // update capacity at new location
            $MemoryStoreU64(add(new_v_offs, 8), new_capacity)
            $Free(v_offs, data_size)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
    }
}
===> Test result of Vectors::test_destroy_non_empty_fail: Revert(Reverted) (used_gas=894): [255, 255, 255, 255, 255, 255, 255, 255]

// test of Vectors::test_empty
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_Vectors_test_empty" {
    code {
        mstore(0, memoryguard(160))
        A2_Vectors_test_empty()
        return (0, 0)
        function A2_Vectors_test_empty() {
            let $t1, $t2, $t3, $t4, $t5
            let $locals := $Malloc(32)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t5 := 101
                    $t5 := 101
                    // abort($t5)
                    $Abort($t5)
                }
                case 4 {
                    // $t0 := Vectors::empty_vector()
                    mstore($locals, A2_Vectors_empty_vector())
                    // $t1 := borrow_local($t0)
                    $t1 := $MakePtr(false, $locals)
                    // $t2 := vector::length<u64>($t1)
                    $t2 := A1_vector_length$u64$($t1)
                    // $t3 := 0
                    $t3 := 0
                    // $t4 := ==($t2, $t3)
                    $t4 := $Eq($t2, $t3)
                    // if ($t4) goto L1 else goto L0
                    switch $t4
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // return ()
                    $Free($locals, 32)
                    leave
                }
            }
        }

        function A1_vector_length$u64$(v_ref) -> len {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            len := $LoadU64(v_ptr)
        }
        function A2_Vectors_empty_vector() -> $result {
            let $t0
            // $t0 := vector::empty<u64>()
            $t0 := A1_vector_empty$u64$()
            // return $t0
            $result := $t0
        }

        function A1_vector_empty$u64$() -> vector {
            vector := $Malloc(48)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
    }
}
===> Test result of Vectors::test_empty: Succeed(Stopped) (used_gas=605): []

// test of Vectors::test_nested_vector_equality
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_Vectors_test_nested_vector_equality" {
    code {
        mstore(0, memoryguard(160))
        A2_Vectors_test_nested_vector_equality()
        return (0, 0)
        function A2_Vectors_test_nested_vector_equality() {
            let $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21, $t22, $t23, $t24, $t25, $t26, $t27, $t28, $t29
            let $locals := $Malloc(64)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t5 := 101
                    $t5 := 101
                    // abort($t5)
                    $Abort($t5)
                }
                case 4 {
                    // $t0 := vector::empty<vector<u8>>()
                    mstore($locals, A1_vector_empty$vec$u8$$())
                    // $t1 := vector::empty<vector<u8>>()
                    mstore(add($locals, 32), A1_vector_empty$vec$u8$$())
                    // $t2 := copy($t0)
                    $t2 := mload($locals)
                    // $t3 := copy($t1)
                    $t3 := mload(add($locals, 32))
                    // $t4 := ==($t2, $t3)
                    $t4 := $Eq_$vec$vec$u8$$$($t2, $t3)
                    // if ($t4) goto L1 else goto L0
                    switch $t4
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t6 := borrow_local($t0)
                    $t6 := $MakePtr(false, $locals)
                    // $t7 := [97, 98, 99]
                    $t7 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(3)))
                    $MemoryStoreU64($t7, 3)
                    $MemoryStoreU64(add($t7, 8), $ClosestGreaterPowerOfTwo(3))
                    copy_literal_string_to_memory_2053440334(add($t7, 32))
                    // vector::push_back<vector<u8>>($t6, $t7)
                    A1_vector_push_back$vec$u8$$($t6, $t7)
                    // $t8 := borrow_local($t1)
                    $t8 := $MakePtr(false, add($locals, 32))
                    // $t9 := [97, 98, 99]
                    $t9 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(3)))
                    $MemoryStoreU64($t9, 3)
                    $MemoryStoreU64(add($t9, 8), $ClosestGreaterPowerOfTwo(3))
                    copy_literal_string_to_memory_2053440334(add($t9, 32))
                    // vector::push_back<vector<u8>>($t8, $t9)
                    A1_vector_push_back$vec$u8$$($t8, $t9)
                    // $t10 := copy($t0)
                    $t10 := mload($locals)
                    // $t11 := copy($t1)
                    $t11 := mload(add($locals, 32))
                    // $t12 := ==($t10, $t11)
                    $t12 := $Eq_$vec$vec$u8$$$($t10, $t11)
                    // if ($t12) goto L4 else goto L3
                    switch $t12
                    case 0  { $block := 7 }
                    default { $block := 6 }
                }
                case 6 {
                    // label L4
                    // goto L5
                    $block := 8
                }
                case 7 {
                    // label L3
                    // $t13 := 102
                    $t13 := 102
                    // abort($t13)
                    $Abort($t13)
                }
                case 8 {
                    // label L5
                    // $t14 := borrow_local($t0)
                    $t14 := $MakePtr(false, $locals)
                    // $t15 := [100, 101, 102]
                    $t15 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(3)))
                    $MemoryStoreU64($t15, 3)
                    $MemoryStoreU64(add($t15, 8), $ClosestGreaterPowerOfTwo(3))
                    copy_literal_string_to_memory_2608619572(add($t15, 32))
                    // vector::push_back<vector<u8>>($t14, $t15)
                    A1_vector_push_back$vec$u8$$($t14, $t15)
                    // $t16 := borrow_local($t1)
                    $t16 := $MakePtr(false, add($locals, 32))
                    // $t17 := [100, 101, 102]
                    $t17 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(3)))
                    $MemoryStoreU64($t17, 3)
                    $MemoryStoreU64(add($t17, 8), $ClosestGreaterPowerOfTwo(3))
                    copy_literal_string_to_memory_2608619572(add($t17, 32))
                    // vector::push_back<vector<u8>>($t16, $t17)
                    A1_vector_push_back$vec$u8$$($t16, $t17)
                    // $t18 := copy($t0)
                    $t18 := mload($locals)
                    // $t19 := copy($t1)
                    $t19 := mload(add($locals, 32))
                    // $t20 := ==($t18, $t19)
                    $t20 := $Eq_$vec$vec$u8$$$($t18, $t19)
                    // if ($t20) goto L7 else goto L6
                    switch $t20
                    case 0  { $block := 10 }
                    default { $block := 9 }
                }
                case 9 {
                    // label L7
                    // goto L8
                    $block := 11
                }
                case 10 {
                    // label L6
                    // $t21 := 103
                    $t21 := 103
                    // abort($t21)
                    $Abort($t21)
                }
                case 11 {
                    // label L8
                    // $t22 := borrow_local($t0)
                    $t22 := $MakePtr(false, $locals)
                    // $t23 := [103, 104, 105]
                    $t23 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(3)))
                    $MemoryStoreU64($t23, 3)
                    $MemoryStoreU64(add($t23, 8), $ClosestGreaterPowerOfTwo(3))
                    copy_literal_string_to_memory_4185735457(add($t23, 32))
                    // vector::push_back<vector<u8>>($t22, $t23)
                    A1_vector_push_back$vec$u8$$($t22, $t23)
                    // $t24 := borrow_local($t1)
                    $t24 := $MakePtr(false, add($locals, 32))
                    // $t25 := [103, 104, 105, 106]
                    $t25 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(4)))
                    $MemoryStoreU64($t25, 4)
                    $MemoryStoreU64(add($t25, 8), $ClosestGreaterPowerOfTwo(4))
                    copy_literal_string_to_memory_3979718947(add($t25, 32))
                    // vector::push_back<vector<u8>>($t24, $t25)
                    A1_vector_push_back$vec$u8$$($t24, $t25)
                    // $t26 := move($t0)
                    $t26 := mload($locals)
                    // $t27 := move($t1)
                    $t27 := mload(add($locals, 32))
                    // $t28 := !=($t26, $t27)
                    $t28 := $LogicalNot($Eq_$vec$vec$u8$$$($t26, $t27))
                    // if ($t28) goto L10 else goto L9
                    switch $t28
                    case 0  { $block := 13 }
                    default { $block := 12 }
                }
                case 12 {
                    // label L10
                    // goto L11
                    $block := 14
                }
                case 13 {
                    // label L9
                    // $t29 := 104
                    $t29 := 104
                    // abort($t29)
                    $Abort($t29)
                }
                case 14 {
                    // label L11
                    // return ()
                    $Free($locals, 64)
                    leave
                }
            }
        }

        function A1_vector_push_back$vec$u8$$(v_ref, e) {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 32)))
            $StoreU256(e_ptr, e)
            if $IsStoragePtr(e_ptr) {
                let e_offs := $OffsetPtr(e_ptr)
                let $linked_dst_2300595445 := $NewLinkedStorageBase(0x89204cf5)
                let $size_2300595445 := $MemoryLoadU64(e)
                let $data_size_2300595445 := mul($size_2300595445, 1)
                $AlignedStorageStore($linked_dst_2300595445, mload(e))
                let $data_src_2300595445 := add(e, 32)
                let $data_dst_2300595445 := add($linked_dst_2300595445, 32)
                for { let $offs_2300595445 := 0 } lt($offs_2300595445, $data_size_2300595445) { $offs_2300595445 := add($offs_2300595445, 32)} {
                    $AlignedStorageStore(add($data_dst_2300595445, $offs_2300595445), mload(add($data_src_2300595445, $offs_2300595445)))
                    $Free(e, add($data_size_2300595445, 32))
                }
                $AlignedStorageStore(e_offs, $linked_dst_2300595445)
            }
            size := add(size, 1)
            $StoreU64(v_ptr, size)
            let capacity := $LoadU64($IndexPtr(v_ptr, 8))
            if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                let new_v_offs := $ResizeVector(v_offs, capacity, 32)
                $StoreU256(v_ref, new_v_offs)
            }
        }
        function A1_vector_empty$vec$u8$$() -> vector {
            vector := $Malloc(96)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function $Eq_$vec$vec$u8$$$(x, y) -> res
        {
            let len_x := $MemoryLoadU64(x)
            let len_y := $MemoryLoadU64(y)
            if $Neq(len_x, len_y) {
              res:= false
              leave
            }
            for { let i := 0 } lt(i, len_x) { i := add(i, 1) }
            {
                let e_x := $MemoryLoadU256(add(32, add(x, mul(i, 32))))
                let e_y := $MemoryLoadU256(add(32, add(y, mul(i, 32))))
                if $LogicalNot($Eq_$vec$u8$$(e_x, e_y)) {
                  res:= false
                  leave
                }
            }
            res := true
        }
        function $Eq_$vec$u8$$(x, y) -> res
        {
            res := $EqVector(x, y, 1)
        }
        function copy_literal_string_to_memory_3979718947(value) {
            $MemoryStoreU8(value, 103)
            value := add(value, 1)
            $MemoryStoreU8(value, 104)
            value := add(value, 1)
            $MemoryStoreU8(value, 105)
            value := add(value, 1)
            $MemoryStoreU8(value, 106)
            value := add(value, 1)
        }
        function copy_literal_string_to_memory_4185735457(value) {
            $MemoryStoreU8(value, 103)
            value := add(value, 1)
            $MemoryStoreU8(value, 104)
            value := add(value, 1)
            $MemoryStoreU8(value, 105)
            value := add(value, 1)
        }
        function copy_literal_string_to_memory_2608619572(value) {
            $MemoryStoreU8(value, 100)
            value := add(value, 1)
            $MemoryStoreU8(value, 101)
            value := add(value, 1)
            $MemoryStoreU8(value, 102)
            value := add(value, 1)
        }
        function copy_literal_string_to_memory_2053440334(value) {
            $MemoryStoreU8(value, 97)
            value := add(value, 1)
            $MemoryStoreU8(value, 98)
            value := add(value, 1)
            $MemoryStoreU8(value, 99)
            value := add(value, 1)
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $MakeTypeStorageBase(category, type_hash, id) -> offs {
          offs := or(shl(252, category), or(shl(220, type_hash), shl(60, id)))
        }
        function $NewLinkedStorageBase(type_hash) -> offs {
          let key := $StorageKey(1, 1)
          let handle := sload(key)
          sstore(key, add(handle, 1))
          offs := $MakeTypeStorageBase(1, type_hash, handle)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $MemoryStoreU8(offs, val) {
          // Shortcut via special instruction
          mstore8(offs, val)
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $StoreU64(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU64(offs, val)
          }
          default {
            $StorageStoreU64(offs, val)
          }
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $StorageStoreU64(offs, val) {
          $StorageStoreBytes(offs, 8, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $StoreU256(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU256(offs, val)
          }
          default {
            $StorageStoreU256(offs, val)
          }
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $StorageStoreU256(offs, val) {
          $StorageStoreBytes(offs, 32, val)
        }
        function $AlignedStorageStore(offs, val) {
          let word_offs := shr(5, offs)
          sstore($StorageKey(0, word_offs), val)
        }
        function $CopyMemory(src, dst, size) {
          let num_words, overflow_bytes := $ToWordOffs(size)
          let i := 0
          for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
            mstore(add(dst, i), mload(add(src, i)))
          }
          if overflow_bytes {
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let dst_word := and(mload(add(dst, overflow_offs)), mask)
            let src_word := and(mload(add(src, overflow_offs)), not(mask))
            mstore(add(dst, overflow_offs), or(dst_word, src_word))
          }
        }
        function $ResizeVector(v_offs, capacity, type_size) -> new_v_offs {
            let new_capacity := mul(capacity, 2)
            let data_size := add(32, mul(capacity, type_size))
            let new_data_size := add(32, mul(new_capacity, type_size))
            new_v_offs := $Malloc(new_data_size)
            $CopyMemory(v_offs, new_v_offs, data_size)
            // update capacity at new location
            $MemoryStoreU64(add(new_v_offs, 8), new_capacity)
            $Free(v_offs, data_size)
        }
        function $EqVector(x, y, elem_size) -> r {
            let len_x := $MemoryLoadU64(x)
            let len_y := $MemoryLoadU64(y)
            if $Neq(len_x, len_y) {
                r := false
                leave
            }
            let data_size_bytes := mul(elem_size, len_x)
            let num_words, overflow_bytes := $ToWordOffs(data_size_bytes)
            let i := 0
            for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
                if $Neq(mload(add(x, add(i, 32))), mload(add(y, add(i, 32)))) {
                    r := false
                    leave
                }
            }
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let x_overflow := mload(add(x, add(overflow_offs, 32)))
            let y_overflow := mload(add(y, add(overflow_offs, 32)))
            r := eq(or(mask, x_overflow), or(mask, y_overflow))
        }
        function $Neq(x, y) -> r {
            r := $LogicalNot(eq(x, y))
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
        function $ClosestGreaterPowerOfTwo(x) -> r {
            r := or(r, shr(1, x))
            r := or(r, shr(2, r))
            r := or(r, shr(4, r))
            r := or(r, shr(8, r))
            r := or(r, shr(16, r))
            r := or(r, shr(32, r))
            r := add(x, 1)
        }
    }
}
===> Test result of Vectors::test_nested_vector_equality: Succeed(Stopped) (used_gas=11041): []

// test of Vectors::test_nested_vectors
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_Vectors_test_nested_vectors" {
    code {
        mstore(0, memoryguard(160))
        A2_Vectors_test_nested_vectors()
        return (0, 0)
        function A2_Vectors_test_nested_vectors() {
            let $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21, $t22, $t23, $t24, $t25, $t26, $t27, $t28, $t29, $t30, $t31, $t32, $t33, $t34, $t35, $t36, $t37, $t38, $t39, $t40, $t41, $t42, $t43, $t44, $t45, $t46, $t47, $t48, $t49, $t50, $t51, $t52, $t53, $t54, $t55, $t56, $t57, $t58, $t59, $t60, $t61, $t62, $t63, $t64, $t65, $t66, $t67, $t68, $t69, $t70, $t71, $t72, $t73, $t74, $t75, $t76, $t77, $t78, $t79, $t80, $t81, $t82, $t83, $t84, $t85, $t86, $t87, $t88, $t89
            let $locals := $Malloc(128)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t32 := 101
                    $t32 := 101
                    // abort($t32)
                    $Abort($t32)
                }
                case 4 {
                    // $t1 := vector::empty<u64>()
                    mstore($locals, A1_vector_empty$u64$())
                    // $t4 := borrow_local($t1)
                    $t4 := $MakePtr(false, $locals)
                    // $t5 := 10
                    $t5 := 10
                    // vector::push_back<u64>($t4, $t5)
                    A1_vector_push_back$u64$($t4, $t5)
                    // $t6 := borrow_local($t1)
                    $t6 := $MakePtr(false, $locals)
                    // $t7 := 11
                    $t7 := 11
                    // vector::push_back<u64>($t6, $t7)
                    A1_vector_push_back$u64$($t6, $t7)
                    // $t2 := vector::empty<u64>()
                    mstore(add($locals, 32), A1_vector_empty$u64$())
                    // $t8 := borrow_local($t2)
                    $t8 := $MakePtr(false, add($locals, 32))
                    // $t9 := 12
                    $t9 := 12
                    // vector::push_back<u64>($t8, $t9)
                    A1_vector_push_back$u64$($t8, $t9)
                    // $t10 := borrow_local($t2)
                    $t10 := $MakePtr(false, add($locals, 32))
                    // $t11 := 13
                    $t11 := 13
                    // vector::push_back<u64>($t10, $t11)
                    A1_vector_push_back$u64$($t10, $t11)
                    // $t12 := borrow_local($t2)
                    $t12 := $MakePtr(false, add($locals, 32))
                    // $t13 := 14
                    $t13 := 14
                    // vector::push_back<u64>($t12, $t13)
                    A1_vector_push_back$u64$($t12, $t13)
                    // $t3 := vector::empty<u64>()
                    mstore(add($locals, 64), A1_vector_empty$u64$())
                    // $t14 := borrow_local($t3)
                    $t14 := $MakePtr(false, add($locals, 64))
                    // $t15 := 15
                    $t15 := 15
                    // vector::push_back<u64>($t14, $t15)
                    A1_vector_push_back$u64$($t14, $t15)
                    // $t16 := borrow_local($t3)
                    $t16 := $MakePtr(false, add($locals, 64))
                    // $t17 := 16
                    $t17 := 16
                    // vector::push_back<u64>($t16, $t17)
                    A1_vector_push_back$u64$($t16, $t17)
                    // $t18 := borrow_local($t3)
                    $t18 := $MakePtr(false, add($locals, 64))
                    // $t19 := 17
                    $t19 := 17
                    // vector::push_back<u64>($t18, $t19)
                    A1_vector_push_back$u64$($t18, $t19)
                    // $t20 := borrow_local($t3)
                    $t20 := $MakePtr(false, add($locals, 64))
                    // $t21 := 18
                    $t21 := 18
                    // vector::push_back<u64>($t20, $t21)
                    A1_vector_push_back$u64$($t20, $t21)
                    // $t0 := vector::empty<vector<u64>>()
                    mstore(add($locals, 96), A1_vector_empty$vec$u64$$())
                    // $t22 := borrow_local($t0)
                    $t22 := $MakePtr(false, add($locals, 96))
                    // $t23 := move($t1)
                    $t23 := mload($locals)
                    // vector::push_back<vector<u64>>($t22, $t23)
                    A1_vector_push_back$vec$u64$$($t22, $t23)
                    // $t24 := borrow_local($t0)
                    $t24 := $MakePtr(false, add($locals, 96))
                    // $t25 := move($t2)
                    $t25 := mload(add($locals, 32))
                    // vector::push_back<vector<u64>>($t24, $t25)
                    A1_vector_push_back$vec$u64$$($t24, $t25)
                    // $t26 := borrow_local($t0)
                    $t26 := $MakePtr(false, add($locals, 96))
                    // $t27 := move($t3)
                    $t27 := mload(add($locals, 64))
                    // vector::push_back<vector<u64>>($t26, $t27)
                    A1_vector_push_back$vec$u64$$($t26, $t27)
                    // $t28 := borrow_local($t0)
                    $t28 := $MakePtr(false, add($locals, 96))
                    // $t29 := vector::length<vector<u64>>($t28)
                    $t29 := A1_vector_length$vec$u64$$($t28)
                    // $t30 := 3
                    $t30 := 3
                    // $t31 := ==($t29, $t30)
                    $t31 := $Eq($t29, $t30)
                    // if ($t31) goto L1 else goto L0
                    switch $t31
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t33 := borrow_local($t0)
                    $t33 := $MakePtr(false, add($locals, 96))
                    // $t34 := 0
                    $t34 := 0
                    // $t35 := vector::borrow<vector<u64>>($t33, $t34)
                    $t35 := A1_vector_borrow$vec$u64$$($t33, $t34)
                    // $t36 := vector::length<u64>($t35)
                    $t36 := A1_vector_length$u64$($t35)
                    // $t37 := 2
                    $t37 := 2
                    // $t38 := ==($t36, $t37)
                    $t38 := $Eq($t36, $t37)
                    // if ($t38) goto L4 else goto L3
                    switch $t38
                    case 0  { $block := 7 }
                    default { $block := 6 }
                }
                case 6 {
                    // label L4
                    // goto L5
                    $block := 8
                }
                case 7 {
                    // label L3
                    // $t39 := 102
                    $t39 := 102
                    // abort($t39)
                    $Abort($t39)
                }
                case 8 {
                    // label L5
                    // $t40 := borrow_local($t0)
                    $t40 := $MakePtr(false, add($locals, 96))
                    // $t41 := 1
                    $t41 := 1
                    // $t42 := vector::borrow<vector<u64>>($t40, $t41)
                    $t42 := A1_vector_borrow$vec$u64$$($t40, $t41)
                    // $t43 := vector::length<u64>($t42)
                    $t43 := A1_vector_length$u64$($t42)
                    // $t44 := 3
                    $t44 := 3
                    // $t45 := ==($t43, $t44)
                    $t45 := $Eq($t43, $t44)
                    // if ($t45) goto L7 else goto L6
                    switch $t45
                    case 0  { $block := 10 }
                    default { $block := 9 }
                }
                case 9 {
                    // label L7
                    // goto L8
                    $block := 11
                }
                case 10 {
                    // label L6
                    // $t46 := 103
                    $t46 := 103
                    // abort($t46)
                    $Abort($t46)
                }
                case 11 {
                    // label L8
                    // $t47 := borrow_local($t0)
                    $t47 := $MakePtr(false, add($locals, 96))
                    // $t48 := 2
                    $t48 := 2
                    // $t49 := vector::borrow<vector<u64>>($t47, $t48)
                    $t49 := A1_vector_borrow$vec$u64$$($t47, $t48)
                    // $t50 := vector::length<u64>($t49)
                    $t50 := A1_vector_length$u64$($t49)
                    // $t51 := 4
                    $t51 := 4
                    // $t52 := ==($t50, $t51)
                    $t52 := $Eq($t50, $t51)
                    // if ($t52) goto L10 else goto L9
                    switch $t52
                    case 0  { $block := 13 }
                    default { $block := 12 }
                }
                case 12 {
                    // label L10
                    // goto L11
                    $block := 14
                }
                case 13 {
                    // label L9
                    // $t53 := 104
                    $t53 := 104
                    // abort($t53)
                    $Abort($t53)
                }
                case 14 {
                    // label L11
                    // $t54 := borrow_local($t0)
                    $t54 := $MakePtr(false, add($locals, 96))
                    // $t55 := 0
                    $t55 := 0
                    // $t56 := vector::borrow<vector<u64>>($t54, $t55)
                    $t56 := A1_vector_borrow$vec$u64$$($t54, $t55)
                    // $t57 := 0
                    $t57 := 0
                    // $t58 := vector::borrow<u64>($t56, $t57)
                    $t58 := A1_vector_borrow$u64$($t56, $t57)
                    // $t59 := read_ref($t58)
                    $t59 := $LoadU64($t58)
                    // $t60 := 10
                    $t60 := 10
                    // $t61 := ==($t59, $t60)
                    $t61 := $Eq($t59, $t60)
                    // if ($t61) goto L13 else goto L12
                    switch $t61
                    case 0  { $block := 16 }
                    default { $block := 15 }
                }
                case 15 {
                    // label L13
                    // goto L14
                    $block := 17
                }
                case 16 {
                    // label L12
                    // $t62 := 105
                    $t62 := 105
                    // abort($t62)
                    $Abort($t62)
                }
                case 17 {
                    // label L14
                    // $t63 := borrow_local($t0)
                    $t63 := $MakePtr(false, add($locals, 96))
                    // $t64 := 1
                    $t64 := 1
                    // $t65 := vector::borrow<vector<u64>>($t63, $t64)
                    $t65 := A1_vector_borrow$vec$u64$$($t63, $t64)
                    // $t66 := 1
                    $t66 := 1
                    // $t67 := vector::borrow<u64>($t65, $t66)
                    $t67 := A1_vector_borrow$u64$($t65, $t66)
                    // $t68 := read_ref($t67)
                    $t68 := $LoadU64($t67)
                    // $t69 := 13
                    $t69 := 13
                    // $t70 := ==($t68, $t69)
                    $t70 := $Eq($t68, $t69)
                    // if ($t70) goto L16 else goto L15
                    switch $t70
                    case 0  { $block := 19 }
                    default { $block := 18 }
                }
                case 18 {
                    // label L16
                    // goto L17
                    $block := 20
                }
                case 19 {
                    // label L15
                    // $t71 := 105
                    $t71 := 105
                    // abort($t71)
                    $Abort($t71)
                }
                case 20 {
                    // label L17
                    // $t72 := borrow_local($t0)
                    $t72 := $MakePtr(false, add($locals, 96))
                    // $t73 := 2
                    $t73 := 2
                    // $t74 := vector::borrow<vector<u64>>($t72, $t73)
                    $t74 := A1_vector_borrow$vec$u64$$($t72, $t73)
                    // $t75 := 2
                    $t75 := 2
                    // $t76 := vector::borrow<u64>($t74, $t75)
                    $t76 := A1_vector_borrow$u64$($t74, $t75)
                    // $t77 := read_ref($t76)
                    $t77 := $LoadU64($t76)
                    // $t78 := 17
                    $t78 := 17
                    // $t79 := ==($t77, $t78)
                    $t79 := $Eq($t77, $t78)
                    // if ($t79) goto L19 else goto L18
                    switch $t79
                    case 0  { $block := 22 }
                    default { $block := 21 }
                }
                case 21 {
                    // label L19
                    // goto L20
                    $block := 23
                }
                case 22 {
                    // label L18
                    // $t80 := 105
                    $t80 := 105
                    // abort($t80)
                    $Abort($t80)
                }
                case 23 {
                    // label L20
                    // $t81 := borrow_local($t0)
                    $t81 := $MakePtr(false, add($locals, 96))
                    // $t82 := 2
                    $t82 := 2
                    // $t83 := vector::borrow<vector<u64>>($t81, $t82)
                    $t83 := A1_vector_borrow$vec$u64$$($t81, $t82)
                    // $t84 := 3
                    $t84 := 3
                    // $t85 := vector::borrow<u64>($t83, $t84)
                    $t85 := A1_vector_borrow$u64$($t83, $t84)
                    // $t86 := read_ref($t85)
                    $t86 := $LoadU64($t85)
                    // $t87 := 18
                    $t87 := 18
                    // $t88 := ==($t86, $t87)
                    $t88 := $Eq($t86, $t87)
                    // if ($t88) goto L22 else goto L21
                    switch $t88
                    case 0  { $block := 25 }
                    default { $block := 24 }
                }
                case 24 {
                    // label L22
                    // goto L23
                    $block := 26
                }
                case 25 {
                    // label L21
                    // $t89 := 105
                    $t89 := 105
                    // abort($t89)
                    $Abort($t89)
                }
                case 26 {
                    // label L23
                    // return ()
                    $Free($locals, 128)
                    leave
                }
            }
        }

        function A1_vector_borrow$u64$(v_ref, i) -> e_ptr {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            if $GtEq(i, size) { $AbortBuiltin() }
            e_ptr := $IndexPtr(v_ptr, add(32, mul(i, 8)))
        }
        function A1_vector_borrow$vec$u64$$(v_ref, i) -> e_ptr {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            if $GtEq(i, size) { $AbortBuiltin() }
            e_ptr := $IndexPtr(v_ptr, add(32, mul(i, 32)))
        }
        function A1_vector_length$u64$(v_ref) -> len {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            len := $LoadU64(v_ptr)
        }
        function A1_vector_length$vec$u64$$(v_ref) -> len {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            len := $LoadU64(v_ptr)
        }
        function A1_vector_push_back$vec$u64$$(v_ref, e) {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 32)))
            $StoreU256(e_ptr, e)
            if $IsStoragePtr(e_ptr) {
                let e_offs := $OffsetPtr(e_ptr)
                let $linked_dst_814019441 := $NewLinkedStorageBase(0x3084f371)
                let $size_814019441 := $MemoryLoadU64(e)
                let $data_size_814019441 := mul($size_814019441, 8)
                $AlignedStorageStore($linked_dst_814019441, mload(e))
                let $data_src_814019441 := add(e, 32)
                let $data_dst_814019441 := add($linked_dst_814019441, 32)
                for { let $offs_814019441 := 0 } lt($offs_814019441, $data_size_814019441) { $offs_814019441 := add($offs_814019441, 32)} {
                    $AlignedStorageStore(add($data_dst_814019441, $offs_814019441), mload(add($data_src_814019441, $offs_814019441)))
                    $Free(e, add($data_size_814019441, 32))
                }
                $AlignedStorageStore(e_offs, $linked_dst_814019441)
            }
            size := add(size, 1)
            $StoreU64(v_ptr, size)
            let capacity := $LoadU64($IndexPtr(v_ptr, 8))
            if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                let new_v_offs := $ResizeVector(v_offs, capacity, 32)
                $StoreU256(v_ref, new_v_offs)
            }
        }
        function A1_vector_empty$vec$u64$$() -> vector {
            vector := $Malloc(96)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function A1_vector_push_back$u64$(v_ref, e) {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 8)))
            $StoreU64(e_ptr, e)
            size := add(size, 1)
            $StoreU64(v_ptr, size)
            let capacity := $LoadU64($IndexPtr(v_ptr, 8))
            if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                let new_v_offs := $ResizeVector(v_offs, capacity, 8)
                $StoreU256(v_ref, new_v_offs)
            }
        }
        function A1_vector_empty$u64$() -> vector {
            vector := $Malloc(48)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $MakeTypeStorageBase(category, type_hash, id) -> offs {
          offs := or(shl(252, category), or(shl(220, type_hash), shl(60, id)))
        }
        function $NewLinkedStorageBase(type_hash) -> offs {
          let key := $StorageKey(1, 1)
          let handle := sload(key)
          sstore(key, add(handle, 1))
          offs := $MakeTypeStorageBase(1, type_hash, handle)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $StoreU64(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU64(offs, val)
          }
          default {
            $StorageStoreU64(offs, val)
          }
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $StorageStoreU64(offs, val) {
          $StorageStoreBytes(offs, 8, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $StoreU256(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU256(offs, val)
          }
          default {
            $StorageStoreU256(offs, val)
          }
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $StorageStoreU256(offs, val) {
          $StorageStoreBytes(offs, 32, val)
        }
        function $AlignedStorageStore(offs, val) {
          let word_offs := shr(5, offs)
          sstore($StorageKey(0, word_offs), val)
        }
        function $CopyMemory(src, dst, size) {
          let num_words, overflow_bytes := $ToWordOffs(size)
          let i := 0
          for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
            mstore(add(dst, i), mload(add(src, i)))
          }
          if overflow_bytes {
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let dst_word := and(mload(add(dst, overflow_offs)), mask)
            let src_word := and(mload(add(src, overflow_offs)), not(mask))
            mstore(add(dst, overflow_offs), or(dst_word, src_word))
          }
        }
        function $ResizeVector(v_offs, capacity, type_size) -> new_v_offs {
            let new_capacity := mul(capacity, 2)
            let data_size := add(32, mul(capacity, type_size))
            let new_data_size := add(32, mul(new_capacity, type_size))
            new_v_offs := $Malloc(new_data_size)
            $CopyMemory(v_offs, new_v_offs, data_size)
            // update capacity at new location
            $MemoryStoreU64(add(new_v_offs, 8), new_capacity)
            $Free(v_offs, data_size)
        }
        function $GtEq(x, y) -> r {
            r := or(gt(x, y), eq(x, y))
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
    }
}
===> Test result of Vectors::test_nested_vectors: Succeed(Stopped) (used_gas=20935): []

// test of Vectors::test_one_elem_struct
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_Vectors_test_one_elem_struct" {
    code {
        mstore(0, memoryguard(160))
        A2_Vectors_test_one_elem_struct()
        return (0, 0)
        function A2_Vectors_test_one_elem_struct() {
            let $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21, $t22, $t23, $t24, $t25, $t26, $t27, $t28, $t29
            let $locals := $Malloc(32)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t5 := 101
                    $t5 := 101
                    // abort($t5)
                    $Abort($t5)
                }
                case 4 {
                    // $t0 := Vectors::one_elem_struct()
                    mstore($locals, A2_Vectors_one_elem_struct())
                    // $t1 := borrow_local($t0)
                    $t1 := $MakePtr(false, $locals)
                    // $t2 := vector::length<0x2::Vectors::S>($t1)
                    $t2 := A1_vector_length$A2_Vectors_S$($t1)
                    // $t3 := 1
                    $t3 := 1
                    // $t4 := ==($t2, $t3)
                    $t4 := $Eq($t2, $t3)
                    // if ($t4) goto L1 else goto L0
                    switch $t4
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t6 := borrow_local($t0)
                    $t6 := $MakePtr(false, $locals)
                    // $t7 := 0
                    $t7 := 0
                    // $t8 := vector::borrow<0x2::Vectors::S>($t6, $t7)
                    $t8 := A1_vector_borrow$A2_Vectors_S$($t6, $t7)
                    // $t9 := borrow_field<0x2::Vectors::S>.x($t8)
                    $t9 := $t8
                    // $t10 := read_ref($t9)
                    $t10 := $LoadU128($t9)
                    // $t11 := 42
                    $t11 := 42
                    // $t12 := ==($t10, $t11)
                    $t12 := $Eq($t10, $t11)
                    // if ($t12) goto L4 else goto L3
                    switch $t12
                    case 0  { $block := 7 }
                    default { $block := 6 }
                }
                case 6 {
                    // label L4
                    // goto L5
                    $block := 8
                }
                case 7 {
                    // label L3
                    // $t13 := 102
                    $t13 := 102
                    // abort($t13)
                    $Abort($t13)
                }
                case 8 {
                    // label L5
                    // $t14 := borrow_local($t0)
                    $t14 := $MakePtr(false, $locals)
                    // $t15 := 0
                    $t15 := 0
                    // $t16 := vector::borrow<0x2::Vectors::S>($t14, $t15)
                    $t16 := A1_vector_borrow$A2_Vectors_S$($t14, $t15)
                    // $t17 := borrow_field<0x2::Vectors::S>.y($t16)
                    $t17 := $IndexPtr($t16, 24)
                    // $t18 := read_ref($t17)
                    $t18 := $LoadU8($t17)
                    // $t19 := true
                    $t19 := true
                    // $t20 := ==($t18, $t19)
                    $t20 := $Eq($t18, $t19)
                    // if ($t20) goto L7 else goto L6
                    switch $t20
                    case 0  { $block := 10 }
                    default { $block := 9 }
                }
                case 9 {
                    // label L7
                    // goto L8
                    $block := 11
                }
                case 10 {
                    // label L6
                    // $t21 := 103
                    $t21 := 103
                    // abort($t21)
                    $Abort($t21)
                }
                case 11 {
                    // label L8
                    // $t22 := borrow_local($t0)
                    $t22 := $MakePtr(false, $locals)
                    // $t23 := 0
                    $t23 := 0
                    // $t24 := vector::borrow<0x2::Vectors::S>($t22, $t23)
                    $t24 := A1_vector_borrow$A2_Vectors_S$($t22, $t23)
                    // $t25 := borrow_field<0x2::Vectors::S>.z($t24)
                    $t25 := $IndexPtr($t24, 16)
                    // $t26 := read_ref($t25)
                    $t26 := $LoadU64($t25)
                    // $t27 := 789
                    $t27 := 789
                    // $t28 := ==($t26, $t27)
                    $t28 := $Eq($t26, $t27)
                    // if ($t28) goto L10 else goto L9
                    switch $t28
                    case 0  { $block := 13 }
                    default { $block := 12 }
                }
                case 12 {
                    // label L10
                    // goto L11
                    $block := 14
                }
                case 13 {
                    // label L9
                    // $t29 := 104
                    $t29 := 104
                    // abort($t29)
                    $Abort($t29)
                }
                case 14 {
                    // label L11
                    // return ()
                    $Free($locals, 32)
                    leave
                }
            }
        }

        function A1_vector_borrow$A2_Vectors_S$(v_ref, i) -> e_ptr {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            if $GtEq(i, size) { $AbortBuiltin() }
            e_ptr := $IndexPtr(v_ptr, add(32, mul(i, 32)))
            let e := $LoadU256(e_ptr)
            e_ptr := $MakePtr($IsStoragePtr(v_ref), e)
        }
        function A1_vector_length$A2_Vectors_S$(v_ref) -> len {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            len := $LoadU64(v_ptr)
        }
        function A2_Vectors_one_elem_struct() -> $result {
            let $t1, $t2, $t3, $t4, $t5, $t6
            let $locals := $Malloc(32)
            // $t0 := vector::empty<0x2::Vectors::S>()
            mstore($locals, A1_vector_empty$A2_Vectors_S$())
            // $t1 := borrow_local($t0)
            $t1 := $MakePtr(false, $locals)
            // $t2 := 42
            $t2 := 42
            // $t3 := true
            $t3 := true
            // $t4 := 789
            $t4 := 789
            // $t5 := pack 0x2::Vectors::S($t2, $t3, $t4)
            {
                let $mem := $Malloc(25)
                $MemoryStoreU128(add($mem, 0), $t2)
                $MemoryStoreU8(add($mem, 24), $t3)
                $MemoryStoreU64(add($mem, 16), $t4)
                $t5 := $mem
            }
            // vector::push_back<0x2::Vectors::S>($t1, $t5)
            A1_vector_push_back$A2_Vectors_S$($t1, $t5)
            // $t6 := move($t0)
            $t6 := mload($locals)
            // return $t6
            $result := $t6
            $Free($locals, 32)
        }

        function A1_vector_push_back$A2_Vectors_S$(v_ref, e) {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 32)))
            $StoreU256(e_ptr, e)
            if $IsStoragePtr(e_ptr) {
                let e_offs := $OffsetPtr(e_ptr)
                let $linked_dst_490229512 := $NewLinkedStorageBase(0x1d384f08)
                $AlignedStorageStore(add($linked_dst_490229512, 0), mload(add(e, 0)))
                $Free(e, 25)
                $AlignedStorageStore(e_offs, $linked_dst_490229512)
            }
            size := add(size, 1)
            $StoreU64(v_ptr, size)
            let capacity := $LoadU64($IndexPtr(v_ptr, 8))
            if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                let new_v_offs := $ResizeVector(v_offs, capacity, 32)
                $StoreU256(v_ref, new_v_offs)
            }
        }
        function A1_vector_empty$A2_Vectors_S$() -> vector {
            vector := $Malloc(96)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $MakeTypeStorageBase(category, type_hash, id) -> offs {
          offs := or(shl(252, category), or(shl(220, type_hash), shl(60, id)))
        }
        function $NewLinkedStorageBase(type_hash) -> offs {
          let key := $StorageKey(1, 1)
          let handle := sload(key)
          sstore(key, add(handle, 1))
          offs := $MakeTypeStorageBase(1, type_hash, handle)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $LoadU8(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU8(offs)
          }
          default {
            val := $StorageLoadU8(offs)
          }
        }
        function $MemoryLoadU8(offs) -> val {
          val := $MemoryLoadBytes(offs, 1)
        }
        function $StorageLoadU8(offs) -> val {
          val := $StorageLoadBytes(offs, 1)
        }
        function $MemoryStoreU8(offs, val) {
          // Shortcut via special instruction
          mstore8(offs, val)
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $StoreU64(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU64(offs, val)
          }
          default {
            $StorageStoreU64(offs, val)
          }
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $StorageStoreU64(offs, val) {
          $StorageStoreBytes(offs, 8, val)
        }
        function $LoadU128(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU128(offs)
          }
          default {
            val := $StorageLoadU128(offs)
          }
        }
        function $MemoryLoadU128(offs) -> val {
          val := $MemoryLoadBytes(offs, 16)
        }
        function $StorageLoadU128(offs) -> val {
          val := $StorageLoadBytes(offs, 16)
        }
        function $MemoryStoreU128(offs, val) {
          $MemoryStoreBytes(offs, 16, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $StoreU256(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU256(offs, val)
          }
          default {
            $StorageStoreU256(offs, val)
          }
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $StorageStoreU256(offs, val) {
          $StorageStoreBytes(offs, 32, val)
        }
        function $AlignedStorageStore(offs, val) {
          let word_offs := shr(5, offs)
          sstore($StorageKey(0, word_offs), val)
        }
        function $CopyMemory(src, dst, size) {
          let num_words, overflow_bytes := $ToWordOffs(size)
          let i := 0
          for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
            mstore(add(dst, i), mload(add(src, i)))
          }
          if overflow_bytes {
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let dst_word := and(mload(add(dst, overflow_offs)), mask)
            let src_word := and(mload(add(src, overflow_offs)), not(mask))
            mstore(add(dst, overflow_offs), or(dst_word, src_word))
          }
        }
        function $ResizeVector(v_offs, capacity, type_size) -> new_v_offs {
            let new_capacity := mul(capacity, 2)
            let data_size := add(32, mul(capacity, type_size))
            let new_data_size := add(32, mul(new_capacity, type_size))
            new_v_offs := $Malloc(new_data_size)
            $CopyMemory(v_offs, new_v_offs, data_size)
            // update capacity at new location
            $MemoryStoreU64(add(new_v_offs, 8), new_capacity)
            $Free(v_offs, data_size)
        }
        function $GtEq(x, y) -> r {
            r := or(gt(x, y), eq(x, y))
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
    }
}
===> Test result of Vectors::test_one_elem_struct: Succeed(Stopped) (used_gas=4291): []

// test of Vectors::test_one_elem_u64
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_Vectors_test_one_elem_u64" {
    code {
        mstore(0, memoryguard(160))
        A2_Vectors_test_one_elem_u64()
        return (0, 0)
        function A2_Vectors_test_one_elem_u64() {
            let $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12
            let $locals := $Malloc(32)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t5 := 101
                    $t5 := 101
                    // abort($t5)
                    $Abort($t5)
                }
                case 4 {
                    // $t0 := Vectors::one_elem_u64()
                    mstore($locals, A2_Vectors_one_elem_u64())
                    // $t1 := borrow_local($t0)
                    $t1 := $MakePtr(false, $locals)
                    // $t2 := vector::length<u64>($t1)
                    $t2 := A1_vector_length$u64$($t1)
                    // $t3 := 1
                    $t3 := 1
                    // $t4 := ==($t2, $t3)
                    $t4 := $Eq($t2, $t3)
                    // if ($t4) goto L1 else goto L0
                    switch $t4
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t6 := borrow_local($t0)
                    $t6 := $MakePtr(false, $locals)
                    // $t7 := 0
                    $t7 := 0
                    // $t8 := vector::borrow<u64>($t6, $t7)
                    $t8 := A1_vector_borrow$u64$($t6, $t7)
                    // $t9 := read_ref($t8)
                    $t9 := $LoadU64($t8)
                    // $t10 := 42
                    $t10 := 42
                    // $t11 := ==($t9, $t10)
                    $t11 := $Eq($t9, $t10)
                    // if ($t11) goto L4 else goto L3
                    switch $t11
                    case 0  { $block := 7 }
                    default { $block := 6 }
                }
                case 6 {
                    // label L4
                    // goto L5
                    $block := 8
                }
                case 7 {
                    // label L3
                    // $t12 := 102
                    $t12 := 102
                    // abort($t12)
                    $Abort($t12)
                }
                case 8 {
                    // label L5
                    // return ()
                    $Free($locals, 32)
                    leave
                }
            }
        }

        function A1_vector_borrow$u64$(v_ref, i) -> e_ptr {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            if $GtEq(i, size) { $AbortBuiltin() }
            e_ptr := $IndexPtr(v_ptr, add(32, mul(i, 8)))
        }
        function A1_vector_length$u64$(v_ref) -> len {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            len := $LoadU64(v_ptr)
        }
        function A2_Vectors_one_elem_u64() -> $result {
            let $t1, $t2, $t3
            let $locals := $Malloc(32)
            // $t0 := vector::empty<u64>()
            mstore($locals, A1_vector_empty$u64$())
            // $t1 := borrow_local($t0)
            $t1 := $MakePtr(false, $locals)
            // $t2 := 42
            $t2 := 42
            // vector::push_back<u64>($t1, $t2)
            A1_vector_push_back$u64$($t1, $t2)
            // $t3 := move($t0)
            $t3 := mload($locals)
            // return $t3
            $result := $t3
            $Free($locals, 32)
        }

        function A1_vector_push_back$u64$(v_ref, e) {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 8)))
            $StoreU64(e_ptr, e)
            size := add(size, 1)
            $StoreU64(v_ptr, size)
            let capacity := $LoadU64($IndexPtr(v_ptr, 8))
            if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                let new_v_offs := $ResizeVector(v_offs, capacity, 8)
                $StoreU256(v_ref, new_v_offs)
            }
        }
        function A1_vector_empty$u64$() -> vector {
            vector := $Malloc(48)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $StoreU64(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU64(offs, val)
          }
          default {
            $StorageStoreU64(offs, val)
          }
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $StorageStoreU64(offs, val) {
          $StorageStoreBytes(offs, 8, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $StoreU256(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU256(offs, val)
          }
          default {
            $StorageStoreU256(offs, val)
          }
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $StorageStoreU256(offs, val) {
          $StorageStoreBytes(offs, 32, val)
        }
        function $CopyMemory(src, dst, size) {
          let num_words, overflow_bytes := $ToWordOffs(size)
          let i := 0
          for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
            mstore(add(dst, i), mload(add(src, i)))
          }
          if overflow_bytes {
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let dst_word := and(mload(add(dst, overflow_offs)), mask)
            let src_word := and(mload(add(src, overflow_offs)), not(mask))
            mstore(add(dst, overflow_offs), or(dst_word, src_word))
          }
        }
        function $ResizeVector(v_offs, capacity, type_size) -> new_v_offs {
            let new_capacity := mul(capacity, 2)
            let data_size := add(32, mul(capacity, type_size))
            let new_data_size := add(32, mul(new_capacity, type_size))
            new_v_offs := $Malloc(new_data_size)
            $CopyMemory(v_offs, new_v_offs, data_size)
            // update capacity at new location
            $MemoryStoreU64(add(new_v_offs, 8), new_capacity)
            $Free(v_offs, data_size)
        }
        function $GtEq(x, y) -> r {
            r := or(gt(x, y), eq(x, y))
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
    }
}
===> Test result of Vectors::test_one_elem_u64: Succeed(Stopped) (used_gas=2012): []

// test of Vectors::test_pop_back
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_Vectors_test_pop_back" {
    code {
        mstore(0, memoryguard(160))
        A2_Vectors_test_pop_back()
        return (0, 0)
        function A2_Vectors_test_pop_back() {
            let e, e_1, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21, $t22, $t23, $t24, $t25, $t26, $t27, $t28, $t29, $t30, $t31, $t32, $t33, $t34, $t35, $t36, $t37, $t38, $t39, $t40, $t41, $t42, $t43, $t44
            let $locals := $Malloc(32)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t9 := 101
                    $t9 := 101
                    // abort($t9)
                    $Abort($t9)
                }
                case 4 {
                    // $t2 := Vectors::one_elem_u64()
                    mstore($locals, A2_Vectors_one_elem_u64())
                    // $t3 := borrow_local($t2)
                    $t3 := $MakePtr(false, $locals)
                    // $t4 := 43
                    $t4 := 43
                    // vector::push_back<u64>($t3, $t4)
                    A1_vector_push_back$u64$($t3, $t4)
                    // $t5 := borrow_local($t2)
                    $t5 := $MakePtr(false, $locals)
                    // $t6 := vector::length<u64>($t5)
                    $t6 := A1_vector_length$u64$($t5)
                    // $t7 := 2
                    $t7 := 2
                    // $t8 := ==($t6, $t7)
                    $t8 := $Eq($t6, $t7)
                    // if ($t8) goto L1 else goto L0
                    switch $t8
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t10 := borrow_local($t2)
                    $t10 := $MakePtr(false, $locals)
                    // $t11 := 0
                    $t11 := 0
                    // $t12 := vector::borrow<u64>($t10, $t11)
                    $t12 := A1_vector_borrow$u64$($t10, $t11)
                    // $t13 := read_ref($t12)
                    $t13 := $LoadU64($t12)
                    // $t14 := 42
                    $t14 := 42
                    // $t15 := ==($t13, $t14)
                    $t15 := $Eq($t13, $t14)
                    // if ($t15) goto L4 else goto L3
                    switch $t15
                    case 0  { $block := 7 }
                    default { $block := 6 }
                }
                case 6 {
                    // label L4
                    // goto L5
                    $block := 8
                }
                case 7 {
                    // label L3
                    // $t16 := 102
                    $t16 := 102
                    // abort($t16)
                    $Abort($t16)
                }
                case 8 {
                    // label L5
                    // $t17 := borrow_local($t2)
                    $t17 := $MakePtr(false, $locals)
                    // $t18 := 1
                    $t18 := 1
                    // $t19 := vector::borrow<u64>($t17, $t18)
                    $t19 := A1_vector_borrow$u64$($t17, $t18)
                    // $t20 := read_ref($t19)
                    $t20 := $LoadU64($t19)
                    // $t21 := 43
                    $t21 := 43
                    // $t22 := ==($t20, $t21)
                    $t22 := $Eq($t20, $t21)
                    // if ($t22) goto L7 else goto L6
                    switch $t22
                    case 0  { $block := 10 }
                    default { $block := 9 }
                }
                case 9 {
                    // label L7
                    // goto L8
                    $block := 11
                }
                case 10 {
                    // label L6
                    // $t23 := 103
                    $t23 := 103
                    // abort($t23)
                    $Abort($t23)
                }
                case 11 {
                    // label L8
                    // $t24 := borrow_local($t2)
                    $t24 := $MakePtr(false, $locals)
                    // $t25 := vector::pop_back<u64>($t24)
                    $t25 := A1_vector_pop_back$u64$($t24)
                    // $t26 := borrow_local($t2)
                    $t26 := $MakePtr(false, $locals)
                    // $t27 := vector::length<u64>($t26)
                    $t27 := A1_vector_length$u64$($t26)
                    // $t28 := 1
                    $t28 := 1
                    // $t29 := ==($t27, $t28)
                    $t29 := $Eq($t27, $t28)
                    // if ($t29) goto L10 else goto L9
                    switch $t29
                    case 0  { $block := 13 }
                    default { $block := 12 }
                }
                case 12 {
                    // label L10
                    // goto L11
                    $block := 14
                }
                case 13 {
                    // label L9
                    // $t30 := 104
                    $t30 := 104
                    // abort($t30)
                    $Abort($t30)
                }
                case 14 {
                    // label L11
                    // $t31 := 43
                    $t31 := 43
                    // $t32 := ==($t25, $t31)
                    $t32 := $Eq($t25, $t31)
                    // if ($t32) goto L13 else goto L12
                    switch $t32
                    case 0  { $block := 16 }
                    default { $block := 15 }
                }
                case 15 {
                    // label L13
                    // goto L14
                    $block := 17
                }
                case 16 {
                    // label L12
                    // $t33 := 105
                    $t33 := 105
                    // abort($t33)
                    $Abort($t33)
                }
                case 17 {
                    // label L14
                    // $t34 := borrow_local($t2)
                    $t34 := $MakePtr(false, $locals)
                    // $t35 := vector::pop_back<u64>($t34)
                    $t35 := A1_vector_pop_back$u64$($t34)
                    // $t36 := borrow_local($t2)
                    $t36 := $MakePtr(false, $locals)
                    // $t37 := vector::length<u64>($t36)
                    $t37 := A1_vector_length$u64$($t36)
                    // $t38 := 0
                    $t38 := 0
                    // $t39 := ==($t37, $t38)
                    $t39 := $Eq($t37, $t38)
                    // if ($t39) goto L16 else goto L15
                    switch $t39
                    case 0  { $block := 19 }
                    default { $block := 18 }
                }
                case 18 {
                    // label L16
                    // goto L17
                    $block := 20
                }
                case 19 {
                    // label L15
                    // $t40 := 106
                    $t40 := 106
                    // abort($t40)
                    $Abort($t40)
                }
                case 20 {
                    // label L17
                    // $t41 := 42
                    $t41 := 42
                    // $t42 := ==($t35, $t41)
                    $t42 := $Eq($t35, $t41)
                    // if ($t42) goto L19 else goto L18
                    switch $t42
                    case 0  { $block := 22 }
                    default { $block := 21 }
                }
                case 21 {
                    // label L19
                    // goto L20
                    $block := 23
                }
                case 22 {
                    // label L18
                    // $t43 := 107
                    $t43 := 107
                    // abort($t43)
                    $Abort($t43)
                }
                case 23 {
                    // label L20
                    // $t44 := move($t2)
                    $t44 := mload($locals)
                    // vector::destroy_empty<u64>($t44)
                    A1_vector_destroy_empty$u64$($t44)
                    // return ()
                    $Free($locals, 32)
                    leave
                }
            }
        }

        function A1_vector_destroy_empty$u64$(v) {
            let size := $MemoryLoadU64(v)
            if $LogicalNot(iszero(size)) { $AbortBuiltin() }
            let capacity := $MemoryLoadU64(add(v, 8))
            $Free(v, add(32, mul(capacity, 8)))
        }
        function A1_vector_length$u64$(v_ref) -> len {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            len := $LoadU64(v_ptr)
        }
        function A1_vector_pop_back$u64$(v_ref) -> e {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            if iszero(size) { $AbortBuiltin() }
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(sub(size, 1), 8)))
            e := $LoadU64(e_ptr)
            $StoreU64(v_ptr, sub(size, 1))
        }
        function A1_vector_borrow$u64$(v_ref, i) -> e_ptr {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            if $GtEq(i, size) { $AbortBuiltin() }
            e_ptr := $IndexPtr(v_ptr, add(32, mul(i, 8)))
        }
        function A1_vector_push_back$u64$(v_ref, e) {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 8)))
            $StoreU64(e_ptr, e)
            size := add(size, 1)
            $StoreU64(v_ptr, size)
            let capacity := $LoadU64($IndexPtr(v_ptr, 8))
            if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                let new_v_offs := $ResizeVector(v_offs, capacity, 8)
                $StoreU256(v_ref, new_v_offs)
            }
        }
        function A2_Vectors_one_elem_u64() -> $result {
            let $t1, $t2, $t3
            let $locals := $Malloc(32)
            // $t0 := vector::empty<u64>()
            mstore($locals, A1_vector_empty$u64$())
            // $t1 := borrow_local($t0)
            $t1 := $MakePtr(false, $locals)
            // $t2 := 42
            $t2 := 42
            // vector::push_back<u64>($t1, $t2)
            A1_vector_push_back$u64$($t1, $t2)
            // $t3 := move($t0)
            $t3 := mload($locals)
            // return $t3
            $result := $t3
            $Free($locals, 32)
        }

        function A1_vector_empty$u64$() -> vector {
            vector := $Malloc(48)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $StoreU64(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU64(offs, val)
          }
          default {
            $StorageStoreU64(offs, val)
          }
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $StorageStoreU64(offs, val) {
          $StorageStoreBytes(offs, 8, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $StoreU256(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU256(offs, val)
          }
          default {
            $StorageStoreU256(offs, val)
          }
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $StorageStoreU256(offs, val) {
          $StorageStoreBytes(offs, 32, val)
        }
        function $CopyMemory(src, dst, size) {
          let num_words, overflow_bytes := $ToWordOffs(size)
          let i := 0
          for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
            mstore(add(dst, i), mload(add(src, i)))
          }
          if overflow_bytes {
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let dst_word := and(mload(add(dst, overflow_offs)), mask)
            let src_word := and(mload(add(src, overflow_offs)), not(mask))
            mstore(add(dst, overflow_offs), or(dst_word, src_word))
          }
        }
        function $ResizeVector(v_offs, capacity, type_size) -> new_v_offs {
            let new_capacity := mul(capacity, 2)
            let data_size := add(32, mul(capacity, type_size))
            let new_data_size := add(32, mul(new_capacity, type_size))
            new_v_offs := $Malloc(new_data_size)
            $CopyMemory(v_offs, new_v_offs, data_size)
            // update capacity at new location
            $MemoryStoreU64(add(new_v_offs, 8), new_capacity)
            $Free(v_offs, data_size)
        }
        function $GtEq(x, y) -> r {
            r := or(gt(x, y), eq(x, y))
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
    }
}
===> Test result of Vectors::test_pop_back: Succeed(Stopped) (used_gas=8729): []

// test of Vectors::test_pop_back_empty_fail
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_Vectors_test_pop_back_empty_fail" {
    code {
        mstore(0, memoryguard(160))
        A2_Vectors_test_pop_back_empty_fail()
        return (0, 0)
        function A2_Vectors_test_pop_back_empty_fail() {
            let $t1, $t2
            let $locals := $Malloc(32)
            // $t0 := vector::empty<address>()
            mstore($locals, A1_vector_empty$address$())
            // $t1 := borrow_local($t0)
            $t1 := $MakePtr(false, $locals)
            // $t2 := vector::pop_back<address>($t1)
            $t2 := A1_vector_pop_back$address$($t1)
            // drop($t2)
            // return ()
            $Free($locals, 32)
        }

        function A1_vector_pop_back$address$(v_ref) -> e {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            if iszero(size) { $AbortBuiltin() }
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(sub(size, 1), 32)))
            e := $LoadU256(e_ptr)
            $StoreU64(v_ptr, sub(size, 1))
        }
        function A1_vector_empty$address$() -> vector {
            vector := $Malloc(96)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $StoreU64(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU64(offs, val)
          }
          default {
            $StorageStoreU64(offs, val)
          }
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $StorageStoreU64(offs, val) {
          $StorageStoreBytes(offs, 8, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
    }
}
===> Test result of Vectors::test_pop_back_empty_fail: Revert(Reverted) (used_gas=324): [255, 255, 255, 255, 255, 255, 255, 255]

// test of Vectors::test_push_back
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_Vectors_test_push_back" {
    code {
        mstore(0, memoryguard(160))
        A2_Vectors_test_push_back()
        return (0, 0)
        function A2_Vectors_test_push_back() {
            let $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21, $t22, $t23, $t24, $t25, $t26, $t27, $t28, $t29, $t30, $t31, $t32, $t33, $t34, $t35, $t36, $t37, $t38, $t39, $t40, $t41, $t42, $t43, $t44, $t45, $t46, $t47, $t48, $t49, $t50, $t51, $t52, $t53, $t54, $t55, $t56, $t57, $t58, $t59, $t60, $t61, $t62, $t63, $t64, $t65, $t66, $t67, $t68, $t69, $t70, $t71, $t72, $t73, $t74, $t75, $t76, $t77, $t78, $t79, $t80, $t81, $t82, $t83, $t84, $t85, $t86, $t87, $t88, $t89, $t90, $t91, $t92, $t93, $t94, $t95, $t96
            let $locals := $Malloc(32)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t5 := 101
                    $t5 := 101
                    // abort($t5)
                    $Abort($t5)
                }
                case 4 {
                    // $t0 := Vectors::one_elem_u64()
                    mstore($locals, A2_Vectors_one_elem_u64())
                    // $t1 := borrow_local($t0)
                    $t1 := $MakePtr(false, $locals)
                    // $t2 := vector::length<u64>($t1)
                    $t2 := A1_vector_length$u64$($t1)
                    // $t3 := 1
                    $t3 := 1
                    // $t4 := ==($t2, $t3)
                    $t4 := $Eq($t2, $t3)
                    // if ($t4) goto L1 else goto L0
                    switch $t4
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t6 := borrow_local($t0)
                    $t6 := $MakePtr(false, $locals)
                    // $t7 := 0
                    $t7 := 0
                    // $t8 := vector::borrow<u64>($t6, $t7)
                    $t8 := A1_vector_borrow$u64$($t6, $t7)
                    // $t9 := read_ref($t8)
                    $t9 := $LoadU64($t8)
                    // $t10 := 42
                    $t10 := 42
                    // $t11 := ==($t9, $t10)
                    $t11 := $Eq($t9, $t10)
                    // if ($t11) goto L4 else goto L3
                    switch $t11
                    case 0  { $block := 7 }
                    default { $block := 6 }
                }
                case 6 {
                    // label L4
                    // goto L5
                    $block := 8
                }
                case 7 {
                    // label L3
                    // $t12 := 102
                    $t12 := 102
                    // abort($t12)
                    $Abort($t12)
                }
                case 8 {
                    // label L5
                    // $t13 := borrow_local($t0)
                    $t13 := $MakePtr(false, $locals)
                    // $t14 := 43
                    $t14 := 43
                    // vector::push_back<u64>($t13, $t14)
                    A1_vector_push_back$u64$($t13, $t14)
                    // $t15 := borrow_local($t0)
                    $t15 := $MakePtr(false, $locals)
                    // $t16 := vector::length<u64>($t15)
                    $t16 := A1_vector_length$u64$($t15)
                    // $t17 := 2
                    $t17 := 2
                    // $t18 := ==($t16, $t17)
                    $t18 := $Eq($t16, $t17)
                    // if ($t18) goto L7 else goto L6
                    switch $t18
                    case 0  { $block := 10 }
                    default { $block := 9 }
                }
                case 9 {
                    // label L7
                    // goto L8
                    $block := 11
                }
                case 10 {
                    // label L6
                    // $t19 := 103
                    $t19 := 103
                    // abort($t19)
                    $Abort($t19)
                }
                case 11 {
                    // label L8
                    // $t20 := borrow_local($t0)
                    $t20 := $MakePtr(false, $locals)
                    // $t21 := 0
                    $t21 := 0
                    // $t22 := vector::borrow<u64>($t20, $t21)
                    $t22 := A1_vector_borrow$u64$($t20, $t21)
                    // $t23 := read_ref($t22)
                    $t23 := $LoadU64($t22)
                    // $t24 := 42
                    $t24 := 42
                    // $t25 := ==($t23, $t24)
                    $t25 := $Eq($t23, $t24)
                    // if ($t25) goto L10 else goto L9
                    switch $t25
                    case 0  { $block := 13 }
                    default { $block := 12 }
                }
                case 12 {
                    // label L10
                    // goto L11
                    $block := 14
                }
                case 13 {
                    // label L9
                    // $t26 := 104
                    $t26 := 104
                    // abort($t26)
                    $Abort($t26)
                }
                case 14 {
                    // label L11
                    // $t27 := borrow_local($t0)
                    $t27 := $MakePtr(false, $locals)
                    // $t28 := 1
                    $t28 := 1
                    // $t29 := vector::borrow<u64>($t27, $t28)
                    $t29 := A1_vector_borrow$u64$($t27, $t28)
                    // $t30 := read_ref($t29)
                    $t30 := $LoadU64($t29)
                    // $t31 := 43
                    $t31 := 43
                    // $t32 := ==($t30, $t31)
                    $t32 := $Eq($t30, $t31)
                    // if ($t32) goto L13 else goto L12
                    switch $t32
                    case 0  { $block := 16 }
                    default { $block := 15 }
                }
                case 15 {
                    // label L13
                    // goto L14
                    $block := 17
                }
                case 16 {
                    // label L12
                    // $t33 := 105
                    $t33 := 105
                    // abort($t33)
                    $Abort($t33)
                }
                case 17 {
                    // label L14
                    // $t34 := borrow_local($t0)
                    $t34 := $MakePtr(false, $locals)
                    // $t35 := 44
                    $t35 := 44
                    // vector::push_back<u64>($t34, $t35)
                    A1_vector_push_back$u64$($t34, $t35)
                    // $t36 := borrow_local($t0)
                    $t36 := $MakePtr(false, $locals)
                    // $t37 := vector::length<u64>($t36)
                    $t37 := A1_vector_length$u64$($t36)
                    // $t38 := 3
                    $t38 := 3
                    // $t39 := ==($t37, $t38)
                    $t39 := $Eq($t37, $t38)
                    // if ($t39) goto L16 else goto L15
                    switch $t39
                    case 0  { $block := 19 }
                    default { $block := 18 }
                }
                case 18 {
                    // label L16
                    // goto L17
                    $block := 20
                }
                case 19 {
                    // label L15
                    // $t40 := 106
                    $t40 := 106
                    // abort($t40)
                    $Abort($t40)
                }
                case 20 {
                    // label L17
                    // $t41 := borrow_local($t0)
                    $t41 := $MakePtr(false, $locals)
                    // $t42 := 0
                    $t42 := 0
                    // $t43 := vector::borrow<u64>($t41, $t42)
                    $t43 := A1_vector_borrow$u64$($t41, $t42)
                    // $t44 := read_ref($t43)
                    $t44 := $LoadU64($t43)
                    // $t45 := 42
                    $t45 := 42
                    // $t46 := ==($t44, $t45)
                    $t46 := $Eq($t44, $t45)
                    // if ($t46) goto L19 else goto L18
                    switch $t46
                    case 0  { $block := 22 }
                    default { $block := 21 }
                }
                case 21 {
                    // label L19
                    // goto L20
                    $block := 23
                }
                case 22 {
                    // label L18
                    // $t47 := 107
                    $t47 := 107
                    // abort($t47)
                    $Abort($t47)
                }
                case 23 {
                    // label L20
                    // $t48 := borrow_local($t0)
                    $t48 := $MakePtr(false, $locals)
                    // $t49 := 1
                    $t49 := 1
                    // $t50 := vector::borrow<u64>($t48, $t49)
                    $t50 := A1_vector_borrow$u64$($t48, $t49)
                    // $t51 := read_ref($t50)
                    $t51 := $LoadU64($t50)
                    // $t52 := 43
                    $t52 := 43
                    // $t53 := ==($t51, $t52)
                    $t53 := $Eq($t51, $t52)
                    // if ($t53) goto L22 else goto L21
                    switch $t53
                    case 0  { $block := 25 }
                    default { $block := 24 }
                }
                case 24 {
                    // label L22
                    // goto L23
                    $block := 26
                }
                case 25 {
                    // label L21
                    // $t54 := 108
                    $t54 := 108
                    // abort($t54)
                    $Abort($t54)
                }
                case 26 {
                    // label L23
                    // $t55 := borrow_local($t0)
                    $t55 := $MakePtr(false, $locals)
                    // $t56 := 2
                    $t56 := 2
                    // $t57 := vector::borrow<u64>($t55, $t56)
                    $t57 := A1_vector_borrow$u64$($t55, $t56)
                    // $t58 := read_ref($t57)
                    $t58 := $LoadU64($t57)
                    // $t59 := 44
                    $t59 := 44
                    // $t60 := ==($t58, $t59)
                    $t60 := $Eq($t58, $t59)
                    // if ($t60) goto L25 else goto L24
                    switch $t60
                    case 0  { $block := 28 }
                    default { $block := 27 }
                }
                case 27 {
                    // label L25
                    // goto L26
                    $block := 29
                }
                case 28 {
                    // label L24
                    // $t61 := 109
                    $t61 := 109
                    // abort($t61)
                    $Abort($t61)
                }
                case 29 {
                    // label L26
                    // $t62 := borrow_local($t0)
                    $t62 := $MakePtr(false, $locals)
                    // $t63 := 45
                    $t63 := 45
                    // vector::push_back<u64>($t62, $t63)
                    A1_vector_push_back$u64$($t62, $t63)
                    // $t64 := borrow_local($t0)
                    $t64 := $MakePtr(false, $locals)
                    // $t65 := vector::length<u64>($t64)
                    $t65 := A1_vector_length$u64$($t64)
                    // $t66 := 4
                    $t66 := 4
                    // $t67 := ==($t65, $t66)
                    $t67 := $Eq($t65, $t66)
                    // if ($t67) goto L28 else goto L27
                    switch $t67
                    case 0  { $block := 31 }
                    default { $block := 30 }
                }
                case 30 {
                    // label L28
                    // goto L29
                    $block := 32
                }
                case 31 {
                    // label L27
                    // $t68 := 110
                    $t68 := 110
                    // abort($t68)
                    $Abort($t68)
                }
                case 32 {
                    // label L29
                    // $t69 := borrow_local($t0)
                    $t69 := $MakePtr(false, $locals)
                    // $t70 := 0
                    $t70 := 0
                    // $t71 := vector::borrow<u64>($t69, $t70)
                    $t71 := A1_vector_borrow$u64$($t69, $t70)
                    // $t72 := read_ref($t71)
                    $t72 := $LoadU64($t71)
                    // $t73 := 42
                    $t73 := 42
                    // $t74 := ==($t72, $t73)
                    $t74 := $Eq($t72, $t73)
                    // if ($t74) goto L31 else goto L30
                    switch $t74
                    case 0  { $block := 34 }
                    default { $block := 33 }
                }
                case 33 {
                    // label L31
                    // goto L32
                    $block := 35
                }
                case 34 {
                    // label L30
                    // $t75 := 111
                    $t75 := 111
                    // abort($t75)
                    $Abort($t75)
                }
                case 35 {
                    // label L32
                    // $t76 := borrow_local($t0)
                    $t76 := $MakePtr(false, $locals)
                    // $t77 := 1
                    $t77 := 1
                    // $t78 := vector::borrow<u64>($t76, $t77)
                    $t78 := A1_vector_borrow$u64$($t76, $t77)
                    // $t79 := read_ref($t78)
                    $t79 := $LoadU64($t78)
                    // $t80 := 43
                    $t80 := 43
                    // $t81 := ==($t79, $t80)
                    $t81 := $Eq($t79, $t80)
                    // if ($t81) goto L34 else goto L33
                    switch $t81
                    case 0  { $block := 37 }
                    default { $block := 36 }
                }
                case 36 {
                    // label L34
                    // goto L35
                    $block := 38
                }
                case 37 {
                    // label L33
                    // $t82 := 112
                    $t82 := 112
                    // abort($t82)
                    $Abort($t82)
                }
                case 38 {
                    // label L35
                    // $t83 := borrow_local($t0)
                    $t83 := $MakePtr(false, $locals)
                    // $t84 := 2
                    $t84 := 2
                    // $t85 := vector::borrow<u64>($t83, $t84)
                    $t85 := A1_vector_borrow$u64$($t83, $t84)
                    // $t86 := read_ref($t85)
                    $t86 := $LoadU64($t85)
                    // $t87 := 44
                    $t87 := 44
                    // $t88 := ==($t86, $t87)
                    $t88 := $Eq($t86, $t87)
                    // if ($t88) goto L37 else goto L36
                    switch $t88
                    case 0  { $block := 40 }
                    default { $block := 39 }
                }
                case 39 {
                    // label L37
                    // goto L38
                    $block := 41
                }
                case 40 {
                    // label L36
                    // $t89 := 113
                    $t89 := 113
                    // abort($t89)
                    $Abort($t89)
                }
                case 41 {
                    // label L38
                    // $t90 := borrow_local($t0)
                    $t90 := $MakePtr(false, $locals)
                    // $t91 := 3
                    $t91 := 3
                    // $t92 := vector::borrow<u64>($t90, $t91)
                    $t92 := A1_vector_borrow$u64$($t90, $t91)
                    // $t93 := read_ref($t92)
                    $t93 := $LoadU64($t92)
                    // $t94 := 45
                    $t94 := 45
                    // $t95 := ==($t93, $t94)
                    $t95 := $Eq($t93, $t94)
                    // if ($t95) goto L40 else goto L39
                    switch $t95
                    case 0  { $block := 43 }
                    default { $block := 42 }
                }
                case 42 {
                    // label L40
                    // goto L41
                    $block := 44
                }
                case 43 {
                    // label L39
                    // $t96 := 114
                    $t96 := 114
                    // abort($t96)
                    $Abort($t96)
                }
                case 44 {
                    // label L41
                    // return ()
                    $Free($locals, 32)
                    leave
                }
            }
        }

        function A1_vector_borrow$u64$(v_ref, i) -> e_ptr {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            if $GtEq(i, size) { $AbortBuiltin() }
            e_ptr := $IndexPtr(v_ptr, add(32, mul(i, 8)))
        }
        function A1_vector_length$u64$(v_ref) -> len {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            len := $LoadU64(v_ptr)
        }
        function A1_vector_push_back$u64$(v_ref, e) {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 8)))
            $StoreU64(e_ptr, e)
            size := add(size, 1)
            $StoreU64(v_ptr, size)
            let capacity := $LoadU64($IndexPtr(v_ptr, 8))
            if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                let new_v_offs := $ResizeVector(v_offs, capacity, 8)
                $StoreU256(v_ref, new_v_offs)
            }
        }
        function A2_Vectors_one_elem_u64() -> $result {
            let $t1, $t2, $t3
            let $locals := $Malloc(32)
            // $t0 := vector::empty<u64>()
            mstore($locals, A1_vector_empty$u64$())
            // $t1 := borrow_local($t0)
            $t1 := $MakePtr(false, $locals)
            // $t2 := 42
            $t2 := 42
            // vector::push_back<u64>($t1, $t2)
            A1_vector_push_back$u64$($t1, $t2)
            // $t3 := move($t0)
            $t3 := mload($locals)
            // return $t3
            $result := $t3
            $Free($locals, 32)
        }

        function A1_vector_empty$u64$() -> vector {
            vector := $Malloc(48)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $StoreU64(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU64(offs, val)
          }
          default {
            $StorageStoreU64(offs, val)
          }
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $StorageStoreU64(offs, val) {
          $StorageStoreBytes(offs, 8, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $StoreU256(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU256(offs, val)
          }
          default {
            $StorageStoreU256(offs, val)
          }
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $StorageStoreU256(offs, val) {
          $StorageStoreBytes(offs, 32, val)
        }
        function $CopyMemory(src, dst, size) {
          let num_words, overflow_bytes := $ToWordOffs(size)
          let i := 0
          for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
            mstore(add(dst, i), mload(add(src, i)))
          }
          if overflow_bytes {
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let dst_word := and(mload(add(dst, overflow_offs)), mask)
            let src_word := and(mload(add(src, overflow_offs)), not(mask))
            mstore(add(dst, overflow_offs), or(dst_word, src_word))
          }
        }
        function $ResizeVector(v_offs, capacity, type_size) -> new_v_offs {
            let new_capacity := mul(capacity, 2)
            let data_size := add(32, mul(capacity, type_size))
            let new_data_size := add(32, mul(new_capacity, type_size))
            new_v_offs := $Malloc(new_data_size)
            $CopyMemory(v_offs, new_v_offs, data_size)
            // update capacity at new location
            $MemoryStoreU64(add(new_v_offs, 8), new_capacity)
            $Free(v_offs, data_size)
        }
        function $GtEq(x, y) -> r {
            r := or(gt(x, y), eq(x, y))
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
    }
}
===> Test result of Vectors::test_push_back: Succeed(Stopped) (used_gas=23283): []

// test of Vectors::test_swap
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_Vectors_test_swap" {
    code {
        mstore(0, memoryguard(160))
        A2_Vectors_test_swap()
        return (0, 0)
        function A2_Vectors_test_swap() {
            let $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21, $t22, $t23, $t24, $t25, $t26, $t27, $t28, $t29, $t30, $t31, $t32, $t33, $t34, $t35, $t36, $t37, $t38, $t39, $t40, $t41, $t42, $t43, $t44, $t45, $t46, $t47, $t48, $t49
            let $locals := $Malloc(32)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t11 := 101
                    $t11 := 101
                    // abort($t11)
                    $Abort($t11)
                }
                case 4 {
                    // $t0 := Vectors::one_elem_u64()
                    mstore($locals, A2_Vectors_one_elem_u64())
                    // $t1 := borrow_local($t0)
                    $t1 := $MakePtr(false, $locals)
                    // $t2 := 43
                    $t2 := 43
                    // vector::push_back<u64>($t1, $t2)
                    A1_vector_push_back$u64$($t1, $t2)
                    // $t3 := borrow_local($t0)
                    $t3 := $MakePtr(false, $locals)
                    // $t4 := 44
                    $t4 := 44
                    // vector::push_back<u64>($t3, $t4)
                    A1_vector_push_back$u64$($t3, $t4)
                    // $t5 := borrow_local($t0)
                    $t5 := $MakePtr(false, $locals)
                    // $t6 := 0
                    $t6 := 0
                    // $t7 := vector::borrow<u64>($t5, $t6)
                    $t7 := A1_vector_borrow$u64$($t5, $t6)
                    // $t8 := read_ref($t7)
                    $t8 := $LoadU64($t7)
                    // $t9 := 42
                    $t9 := 42
                    // $t10 := ==($t8, $t9)
                    $t10 := $Eq($t8, $t9)
                    // if ($t10) goto L1 else goto L0
                    switch $t10
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t12 := borrow_local($t0)
                    $t12 := $MakePtr(false, $locals)
                    // $t13 := 1
                    $t13 := 1
                    // $t14 := vector::borrow<u64>($t12, $t13)
                    $t14 := A1_vector_borrow$u64$($t12, $t13)
                    // $t15 := read_ref($t14)
                    $t15 := $LoadU64($t14)
                    // $t16 := 43
                    $t16 := 43
                    // $t17 := ==($t15, $t16)
                    $t17 := $Eq($t15, $t16)
                    // if ($t17) goto L4 else goto L3
                    switch $t17
                    case 0  { $block := 7 }
                    default { $block := 6 }
                }
                case 6 {
                    // label L4
                    // goto L5
                    $block := 8
                }
                case 7 {
                    // label L3
                    // $t18 := 102
                    $t18 := 102
                    // abort($t18)
                    $Abort($t18)
                }
                case 8 {
                    // label L5
                    // $t19 := borrow_local($t0)
                    $t19 := $MakePtr(false, $locals)
                    // $t20 := 2
                    $t20 := 2
                    // $t21 := vector::borrow<u64>($t19, $t20)
                    $t21 := A1_vector_borrow$u64$($t19, $t20)
                    // $t22 := read_ref($t21)
                    $t22 := $LoadU64($t21)
                    // $t23 := 44
                    $t23 := 44
                    // $t24 := ==($t22, $t23)
                    $t24 := $Eq($t22, $t23)
                    // if ($t24) goto L7 else goto L6
                    switch $t24
                    case 0  { $block := 10 }
                    default { $block := 9 }
                }
                case 9 {
                    // label L7
                    // goto L8
                    $block := 11
                }
                case 10 {
                    // label L6
                    // $t25 := 103
                    $t25 := 103
                    // abort($t25)
                    $Abort($t25)
                }
                case 11 {
                    // label L8
                    // $t26 := borrow_local($t0)
                    $t26 := $MakePtr(false, $locals)
                    // $t27 := 0
                    $t27 := 0
                    // $t28 := 2
                    $t28 := 2
                    // vector::swap<u64>($t26, $t27, $t28)
                    A1_vector_swap$u64$($t26, $t27, $t28)
                    // $t29 := borrow_local($t0)
                    $t29 := $MakePtr(false, $locals)
                    // $t30 := 0
                    $t30 := 0
                    // $t31 := vector::borrow<u64>($t29, $t30)
                    $t31 := A1_vector_borrow$u64$($t29, $t30)
                    // $t32 := read_ref($t31)
                    $t32 := $LoadU64($t31)
                    // $t33 := 44
                    $t33 := 44
                    // $t34 := ==($t32, $t33)
                    $t34 := $Eq($t32, $t33)
                    // if ($t34) goto L10 else goto L9
                    switch $t34
                    case 0  { $block := 13 }
                    default { $block := 12 }
                }
                case 12 {
                    // label L10
                    // goto L11
                    $block := 14
                }
                case 13 {
                    // label L9
                    // $t35 := 104
                    $t35 := 104
                    // abort($t35)
                    $Abort($t35)
                }
                case 14 {
                    // label L11
                    // $t36 := borrow_local($t0)
                    $t36 := $MakePtr(false, $locals)
                    // $t37 := 1
                    $t37 := 1
                    // $t38 := vector::borrow<u64>($t36, $t37)
                    $t38 := A1_vector_borrow$u64$($t36, $t37)
                    // $t39 := read_ref($t38)
                    $t39 := $LoadU64($t38)
                    // $t40 := 43
                    $t40 := 43
                    // $t41 := ==($t39, $t40)
                    $t41 := $Eq($t39, $t40)
                    // if ($t41) goto L13 else goto L12
                    switch $t41
                    case 0  { $block := 16 }
                    default { $block := 15 }
                }
                case 15 {
                    // label L13
                    // goto L14
                    $block := 17
                }
                case 16 {
                    // label L12
                    // $t42 := 105
                    $t42 := 105
                    // abort($t42)
                    $Abort($t42)
                }
                case 17 {
                    // label L14
                    // $t43 := borrow_local($t0)
                    $t43 := $MakePtr(false, $locals)
                    // $t44 := 2
                    $t44 := 2
                    // $t45 := vector::borrow<u64>($t43, $t44)
                    $t45 := A1_vector_borrow$u64$($t43, $t44)
                    // $t46 := read_ref($t45)
                    $t46 := $LoadU64($t45)
                    // $t47 := 42
                    $t47 := 42
                    // $t48 := ==($t46, $t47)
                    $t48 := $Eq($t46, $t47)
                    // if ($t48) goto L16 else goto L15
                    switch $t48
                    case 0  { $block := 19 }
                    default { $block := 18 }
                }
                case 18 {
                    // label L16
                    // goto L17
                    $block := 20
                }
                case 19 {
                    // label L15
                    // $t49 := 106
                    $t49 := 106
                    // abort($t49)
                    $Abort($t49)
                }
                case 20 {
                    // label L17
                    // return ()
                    $Free($locals, 32)
                    leave
                }
            }
        }

        function A1_vector_borrow$u64$(v_ref, i) -> e_ptr {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            if $GtEq(i, size) { $AbortBuiltin() }
            e_ptr := $IndexPtr(v_ptr, add(32, mul(i, 8)))
        }
        function A1_vector_swap$u64$(v_ref, i, j) {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            if or($GtEq(i, size), $GtEq(j, size)) { $AbortBuiltin() }
            let i_ptr := $IndexPtr(v_ptr, add(32, mul(i, 8)))
            let j_ptr := $IndexPtr(v_ptr, add(32, mul(j, 8)))
            let i_val := $LoadU64(i_ptr)
            let j_val := $LoadU64(j_ptr)
            $StoreU64(i_ptr, j_val)
            $StoreU64(j_ptr, i_val)
        }
        function A1_vector_push_back$u64$(v_ref, e) {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 8)))
            $StoreU64(e_ptr, e)
            size := add(size, 1)
            $StoreU64(v_ptr, size)
            let capacity := $LoadU64($IndexPtr(v_ptr, 8))
            if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                let new_v_offs := $ResizeVector(v_offs, capacity, 8)
                $StoreU256(v_ref, new_v_offs)
            }
        }
        function A2_Vectors_one_elem_u64() -> $result {
            let $t1, $t2, $t3
            let $locals := $Malloc(32)
            // $t0 := vector::empty<u64>()
            mstore($locals, A1_vector_empty$u64$())
            // $t1 := borrow_local($t0)
            $t1 := $MakePtr(false, $locals)
            // $t2 := 42
            $t2 := 42
            // vector::push_back<u64>($t1, $t2)
            A1_vector_push_back$u64$($t1, $t2)
            // $t3 := move($t0)
            $t3 := mload($locals)
            // return $t3
            $result := $t3
            $Free($locals, 32)
        }

        function A1_vector_empty$u64$() -> vector {
            vector := $Malloc(48)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $StoreU64(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU64(offs, val)
          }
          default {
            $StorageStoreU64(offs, val)
          }
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $StorageStoreU64(offs, val) {
          $StorageStoreBytes(offs, 8, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $StoreU256(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU256(offs, val)
          }
          default {
            $StorageStoreU256(offs, val)
          }
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $StorageStoreU256(offs, val) {
          $StorageStoreBytes(offs, 32, val)
        }
        function $CopyMemory(src, dst, size) {
          let num_words, overflow_bytes := $ToWordOffs(size)
          let i := 0
          for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
            mstore(add(dst, i), mload(add(src, i)))
          }
          if overflow_bytes {
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let dst_word := and(mload(add(dst, overflow_offs)), mask)
            let src_word := and(mload(add(src, overflow_offs)), not(mask))
            mstore(add(dst, overflow_offs), or(dst_word, src_word))
          }
        }
        function $ResizeVector(v_offs, capacity, type_size) -> new_v_offs {
            let new_capacity := mul(capacity, 2)
            let data_size := add(32, mul(capacity, type_size))
            let new_data_size := add(32, mul(new_capacity, type_size))
            new_v_offs := $Malloc(new_data_size)
            $CopyMemory(v_offs, new_v_offs, data_size)
            // update capacity at new location
            $MemoryStoreU64(add(new_v_offs, 8), new_capacity)
            $Free(v_offs, data_size)
        }
        function $GtEq(x, y) -> r {
            r := or(gt(x, y), eq(x, y))
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
    }
}
===> Test result of Vectors::test_swap: Succeed(Stopped) (used_gas=8941): []

// test of Vectors::test_swap_fail
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_Vectors_test_swap_fail" {
    code {
        mstore(0, memoryguard(160))
        A2_Vectors_test_swap_fail()
        return (0, 0)
        function A2_Vectors_test_swap_fail() {
            let $t1, $t2, $t3, $t4, $t5
            let $locals := $Malloc(32)
            // $t0 := Vectors::one_elem_u64()
            mstore($locals, A2_Vectors_one_elem_u64())
            // $t1 := borrow_local($t0)
            $t1 := $MakePtr(false, $locals)
            // $t2 := 34
            $t2 := 34
            // vector::push_back<u64>($t1, $t2)
            A1_vector_push_back$u64$($t1, $t2)
            // $t3 := borrow_local($t0)
            $t3 := $MakePtr(false, $locals)
            // $t4 := 1
            $t4 := 1
            // $t5 := 2
            $t5 := 2
            // vector::swap<u64>($t3, $t4, $t5)
            A1_vector_swap$u64$($t3, $t4, $t5)
            // return ()
            $Free($locals, 32)
        }

        function A1_vector_swap$u64$(v_ref, i, j) {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            if or($GtEq(i, size), $GtEq(j, size)) { $AbortBuiltin() }
            let i_ptr := $IndexPtr(v_ptr, add(32, mul(i, 8)))
            let j_ptr := $IndexPtr(v_ptr, add(32, mul(j, 8)))
            let i_val := $LoadU64(i_ptr)
            let j_val := $LoadU64(j_ptr)
            $StoreU64(i_ptr, j_val)
            $StoreU64(j_ptr, i_val)
        }
        function A1_vector_push_back$u64$(v_ref, e) {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 8)))
            $StoreU64(e_ptr, e)
            size := add(size, 1)
            $StoreU64(v_ptr, size)
            let capacity := $LoadU64($IndexPtr(v_ptr, 8))
            if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                let new_v_offs := $ResizeVector(v_offs, capacity, 8)
                $StoreU256(v_ref, new_v_offs)
            }
        }
        function A2_Vectors_one_elem_u64() -> $result {
            let $t1, $t2, $t3
            let $locals := $Malloc(32)
            // $t0 := vector::empty<u64>()
            mstore($locals, A1_vector_empty$u64$())
            // $t1 := borrow_local($t0)
            $t1 := $MakePtr(false, $locals)
            // $t2 := 42
            $t2 := 42
            // vector::push_back<u64>($t1, $t2)
            A1_vector_push_back$u64$($t1, $t2)
            // $t3 := move($t0)
            $t3 := mload($locals)
            // return $t3
            $result := $t3
            $Free($locals, 32)
        }

        function A1_vector_empty$u64$() -> vector {
            vector := $Malloc(48)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $StoreU64(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU64(offs, val)
          }
          default {
            $StorageStoreU64(offs, val)
          }
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $StorageStoreU64(offs, val) {
          $StorageStoreBytes(offs, 8, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $StoreU256(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU256(offs, val)
          }
          default {
            $StorageStoreU256(offs, val)
          }
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $StorageStoreU256(offs, val) {
          $StorageStoreBytes(offs, 32, val)
        }
        function $CopyMemory(src, dst, size) {
          let num_words, overflow_bytes := $ToWordOffs(size)
          let i := 0
          for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
            mstore(add(dst, i), mload(add(src, i)))
          }
          if overflow_bytes {
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let dst_word := and(mload(add(dst, overflow_offs)), mask)
            let src_word := and(mload(add(src, overflow_offs)), not(mask))
            mstore(add(dst, overflow_offs), or(dst_word, src_word))
          }
        }
        function $ResizeVector(v_offs, capacity, type_size) -> new_v_offs {
            let new_capacity := mul(capacity, 2)
            let data_size := add(32, mul(capacity, type_size))
            let new_data_size := add(32, mul(new_capacity, type_size))
            new_v_offs := $Malloc(new_data_size)
            $CopyMemory(v_offs, new_v_offs, data_size)
            // update capacity at new location
            $MemoryStoreU64(add(new_v_offs, 8), new_capacity)
            $Free(v_offs, data_size)
        }
        function $GtEq(x, y) -> r {
            r := or(gt(x, y), eq(x, y))
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
    }
}
===> Test result of Vectors::test_swap_fail: Revert(Reverted) (used_gas=2289): [255, 255, 255, 255, 255, 255, 255, 255]

// test of Vectors::test_vector_equality
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_Vectors_test_vector_equality" {
    code {
        mstore(0, memoryguard(160))
        A2_Vectors_test_vector_equality()
        return (0, 0)
        function A2_Vectors_test_vector_equality() {
            let $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21, $t22, $t23, $t24, $t25, $t26, $t27, $t28, $t29, $t30, $t31, $t32
            let $locals := $Malloc(32)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t12 := 101
                    $t12 := 101
                    // abort($t12)
                    $Abort($t12)
                }
                case 4 {
                    // $t0 := vector::empty<u8>()
                    mstore($locals, A1_vector_empty$u8$())
                    // $t1 := borrow_local($t0)
                    $t1 := $MakePtr(false, $locals)
                    // $t2 := 10
                    $t2 := 10
                    // vector::push_back<u8>($t1, $t2)
                    A1_vector_push_back$u8$($t1, $t2)
                    // $t3 := borrow_local($t0)
                    $t3 := $MakePtr(false, $locals)
                    // $t4 := 11
                    $t4 := 11
                    // vector::push_back<u8>($t3, $t4)
                    A1_vector_push_back$u8$($t3, $t4)
                    // $t5 := borrow_local($t0)
                    $t5 := $MakePtr(false, $locals)
                    // $t6 := 12
                    $t6 := 12
                    // vector::push_back<u8>($t5, $t6)
                    A1_vector_push_back$u8$($t5, $t6)
                    // $t7 := borrow_local($t0)
                    $t7 := $MakePtr(false, $locals)
                    // $t8 := 13
                    $t8 := 13
                    // vector::push_back<u8>($t7, $t8)
                    A1_vector_push_back$u8$($t7, $t8)
                    // $t9 := copy($t0)
                    $t9 := mload($locals)
                    // $t10 := [10, 11, 12, 13]
                    $t10 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(4)))
                    $MemoryStoreU64($t10, 4)
                    $MemoryStoreU64(add($t10, 8), $ClosestGreaterPowerOfTwo(4))
                    copy_literal_string_to_memory_512532313(add($t10, 32))
                    // $t11 := ==($t9, $t10)
                    $t11 := $Eq_$vec$u8$$($t9, $t10)
                    // if ($t11) goto L1 else goto L0
                    switch $t11
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t13 := copy($t0)
                    $t13 := mload($locals)
                    // $t14 := [10, 11, 12, 13]
                    $t14 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(4)))
                    $MemoryStoreU64($t14, 4)
                    $MemoryStoreU64(add($t14, 8), $ClosestGreaterPowerOfTwo(4))
                    copy_literal_string_to_memory_512532313(add($t14, 32))
                    // $t15 := !=($t13, $t14)
                    $t15 := $LogicalNot($Eq_$vec$u8$$($t13, $t14))
                    // $t16 := !($t15)
                    $t16 := $LogicalNot($t15)
                    // if ($t16) goto L4 else goto L3
                    switch $t16
                    case 0  { $block := 7 }
                    default { $block := 6 }
                }
                case 6 {
                    // label L4
                    // goto L5
                    $block := 8
                }
                case 7 {
                    // label L3
                    // $t17 := 102
                    $t17 := 102
                    // abort($t17)
                    $Abort($t17)
                }
                case 8 {
                    // label L5
                    // $t18 := copy($t0)
                    $t18 := mload($locals)
                    // $t19 := [10, 11, 12]
                    $t19 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(3)))
                    $MemoryStoreU64($t19, 3)
                    $MemoryStoreU64(add($t19, 8), $ClosestGreaterPowerOfTwo(3))
                    copy_literal_string_to_memory_2815201339(add($t19, 32))
                    // $t20 := !=($t18, $t19)
                    $t20 := $LogicalNot($Eq_$vec$u8$$($t18, $t19))
                    // if ($t20) goto L7 else goto L6
                    switch $t20
                    case 0  { $block := 10 }
                    default { $block := 9 }
                }
                case 9 {
                    // label L7
                    // goto L8
                    $block := 11
                }
                case 10 {
                    // label L6
                    // $t21 := 103
                    $t21 := 103
                    // abort($t21)
                    $Abort($t21)
                }
                case 11 {
                    // label L8
                    // $t22 := copy($t0)
                    $t22 := mload($locals)
                    // $t23 := [10, 11, 12]
                    $t23 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(3)))
                    $MemoryStoreU64($t23, 3)
                    $MemoryStoreU64(add($t23, 8), $ClosestGreaterPowerOfTwo(3))
                    copy_literal_string_to_memory_2815201339(add($t23, 32))
                    // $t24 := ==($t22, $t23)
                    $t24 := $Eq_$vec$u8$$($t22, $t23)
                    // $t25 := !($t24)
                    $t25 := $LogicalNot($t24)
                    // if ($t25) goto L10 else goto L9
                    switch $t25
                    case 0  { $block := 13 }
                    default { $block := 12 }
                }
                case 12 {
                    // label L10
                    // goto L11
                    $block := 14
                }
                case 13 {
                    // label L9
                    // $t26 := 104
                    $t26 := 104
                    // abort($t26)
                    $Abort($t26)
                }
                case 14 {
                    // label L11
                    // $t27 := borrow_local($t0)
                    $t27 := $MakePtr(false, $locals)
                    // $t28 := 14
                    $t28 := 14
                    // vector::push_back<u8>($t27, $t28)
                    A1_vector_push_back$u8$($t27, $t28)
                    // $t29 := move($t0)
                    $t29 := mload($locals)
                    // $t30 := [10, 11, 12, 13, 14]
                    $t30 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(5)))
                    $MemoryStoreU64($t30, 5)
                    $MemoryStoreU64(add($t30, 8), $ClosestGreaterPowerOfTwo(5))
                    copy_literal_string_to_memory_337779769(add($t30, 32))
                    // $t31 := ==($t29, $t30)
                    $t31 := $Eq_$vec$u8$$($t29, $t30)
                    // if ($t31) goto L13 else goto L12
                    switch $t31
                    case 0  { $block := 16 }
                    default { $block := 15 }
                }
                case 15 {
                    // label L13
                    // goto L14
                    $block := 17
                }
                case 16 {
                    // label L12
                    // $t32 := 105
                    $t32 := 105
                    // abort($t32)
                    $Abort($t32)
                }
                case 17 {
                    // label L14
                    // return ()
                    $Free($locals, 32)
                    leave
                }
            }
        }

        function A1_vector_push_back$u8$(v_ref, e) {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 1)))
            $StoreU8(e_ptr, e)
            size := add(size, 1)
            $StoreU64(v_ptr, size)
            let capacity := $LoadU64($IndexPtr(v_ptr, 8))
            if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                let new_v_offs := $ResizeVector(v_offs, capacity, 1)
                $StoreU256(v_ref, new_v_offs)
            }
        }
        function A1_vector_empty$u8$() -> vector {
            vector := $Malloc(34)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function $Eq_$vec$u8$$(x, y) -> res
        {
            res := $EqVector(x, y, 1)
        }
        function copy_literal_string_to_memory_337779769(value) {
            $MemoryStoreU8(value, 10)
            value := add(value, 1)
            $MemoryStoreU8(value, 11)
            value := add(value, 1)
            $MemoryStoreU8(value, 12)
            value := add(value, 1)
            $MemoryStoreU8(value, 13)
            value := add(value, 1)
            $MemoryStoreU8(value, 14)
            value := add(value, 1)
        }
        function copy_literal_string_to_memory_2815201339(value) {
            $MemoryStoreU8(value, 10)
            value := add(value, 1)
            $MemoryStoreU8(value, 11)
            value := add(value, 1)
            $MemoryStoreU8(value, 12)
            value := add(value, 1)
        }
        function copy_literal_string_to_memory_512532313(value) {
            $MemoryStoreU8(value, 10)
            value := add(value, 1)
            $MemoryStoreU8(value, 11)
            value := add(value, 1)
            $MemoryStoreU8(value, 12)
            value := add(value, 1)
            $MemoryStoreU8(value, 13)
            value := add(value, 1)
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $StoreU8(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU8(offs, val)
          }
          default {
            $StorageStoreU8(offs, val)
          }
        }
        function $MemoryStoreU8(offs, val) {
          // Shortcut via special instruction
          mstore8(offs, val)
        }
        function $StorageStoreU8(offs, val) {
          $StorageStoreBytes(offs, 1, val)
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $StoreU64(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU64(offs, val)
          }
          default {
            $StorageStoreU64(offs, val)
          }
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $StorageStoreU64(offs, val) {
          $StorageStoreBytes(offs, 8, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $StoreU256(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU256(offs, val)
          }
          default {
            $StorageStoreU256(offs, val)
          }
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $StorageStoreU256(offs, val) {
          $StorageStoreBytes(offs, 32, val)
        }
        function $CopyMemory(src, dst, size) {
          let num_words, overflow_bytes := $ToWordOffs(size)
          let i := 0
          for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
            mstore(add(dst, i), mload(add(src, i)))
          }
          if overflow_bytes {
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let dst_word := and(mload(add(dst, overflow_offs)), mask)
            let src_word := and(mload(add(src, overflow_offs)), not(mask))
            mstore(add(dst, overflow_offs), or(dst_word, src_word))
          }
        }
        function $ResizeVector(v_offs, capacity, type_size) -> new_v_offs {
            let new_capacity := mul(capacity, 2)
            let data_size := add(32, mul(capacity, type_size))
            let new_data_size := add(32, mul(new_capacity, type_size))
            new_v_offs := $Malloc(new_data_size)
            $CopyMemory(v_offs, new_v_offs, data_size)
            // update capacity at new location
            $MemoryStoreU64(add(new_v_offs, 8), new_capacity)
            $Free(v_offs, data_size)
        }
        function $EqVector(x, y, elem_size) -> r {
            let len_x := $MemoryLoadU64(x)
            let len_y := $MemoryLoadU64(y)
            if $Neq(len_x, len_y) {
                r := false
                leave
            }
            let data_size_bytes := mul(elem_size, len_x)
            let num_words, overflow_bytes := $ToWordOffs(data_size_bytes)
            let i := 0
            for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
                if $Neq(mload(add(x, add(i, 32))), mload(add(y, add(i, 32)))) {
                    r := false
                    leave
                }
            }
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let x_overflow := mload(add(x, add(overflow_offs, 32)))
            let y_overflow := mload(add(y, add(overflow_offs, 32)))
            r := eq(or(mask, x_overflow), or(mask, y_overflow))
        }
        function $Neq(x, y) -> r {
            r := $LogicalNot(eq(x, y))
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
        function $ClosestGreaterPowerOfTwo(x) -> r {
            r := or(r, shr(1, x))
            r := or(r, shr(2, r))
            r := or(r, shr(4, r))
            r := or(r, shr(8, r))
            r := or(r, shr(16, r))
            r := or(r, shr(32, r))
            r := add(x, 1)
        }
    }
}
===> Test result of Vectors::test_vector_equality: Succeed(Stopped) (used_gas=8658): []

// test of Vectors::test_vector_equality_struct
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_Vectors_test_vector_equality_struct" {
    code {
        mstore(0, memoryguard(160))
        A2_Vectors_test_vector_equality_struct()
        return (0, 0)
        function A2_Vectors_test_vector_equality_struct() {
            let r1, r2, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21, $t22, $t23, $t24, $t25, $t26, $t27, $t28, $t29, $t30, $t31, $t32, $t33, $t34, $t35, $t36, $t37, $t38, $t39
            let $locals := $Malloc(64)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t7 := 101
                    $t7 := 101
                    // abort($t7)
                    $Abort($t7)
                }
                case 4 {
                    // $t2 := vector::empty<0x2::Vectors::R>()
                    mstore($locals, A1_vector_empty$A2_Vectors_R$())
                    // $t3 := vector::empty<0x2::Vectors::R>()
                    mstore(add($locals, 32), A1_vector_empty$A2_Vectors_R$())
                    // $t4 := copy($t2)
                    $t4 := mload($locals)
                    // $t5 := copy($t3)
                    $t5 := mload(add($locals, 32))
                    // $t6 := ==($t4, $t5)
                    $t6 := $Eq_$vec$A2_Vectors_R$$($t4, $t5)
                    // if ($t6) goto L1 else goto L0
                    switch $t6
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t8 := 42
                    $t8 := 42
                    // $t9 := true
                    $t9 := true
                    // $t10 := 9
                    $t10 := 9
                    // $t11 := pack 0x2::Vectors::S($t8, $t9, $t10)
                    {
                        let $mem := $Malloc(25)
                        $MemoryStoreU128(add($mem, 0), $t8)
                        $MemoryStoreU8(add($mem, 24), $t9)
                        $MemoryStoreU64(add($mem, 16), $t10)
                        $t11 := $mem
                    }
                    // $t12 := Vectors::one_elem_u64()
                    $t12 := A2_Vectors_one_elem_u64()
                    // $t13 := pack 0x2::Vectors::R($t11, $t12)
                    {
                        let $mem := $Malloc(64)
                        $MemoryStoreU256(add($mem, 0), $t11)
                        $MemoryStoreU256(add($mem, 32), $t12)
                        $t13 := $mem
                    }
                    // $t14 := borrow_local($t2)
                    $t14 := $MakePtr(false, $locals)
                    // vector::push_back<0x2::Vectors::R>($t14, $t13)
                    A1_vector_push_back$A2_Vectors_R$($t14, $t13)
                    // $t15 := copy($t2)
                    $t15 := mload($locals)
                    // $t16 := copy($t3)
                    $t16 := mload(add($locals, 32))
                    // $t17 := !=($t15, $t16)
                    $t17 := $LogicalNot($Eq_$vec$A2_Vectors_R$$($t15, $t16))
                    // if ($t17) goto L4 else goto L3
                    switch $t17
                    case 0  { $block := 7 }
                    default { $block := 6 }
                }
                case 6 {
                    // label L4
                    // goto L5
                    $block := 8
                }
                case 7 {
                    // label L3
                    // $t18 := 102
                    $t18 := 102
                    // abort($t18)
                    $Abort($t18)
                }
                case 8 {
                    // label L5
                    // $t19 := borrow_local($t3)
                    $t19 := $MakePtr(false, add($locals, 32))
                    // vector::push_back<0x2::Vectors::R>($t19, $t13)
                    A1_vector_push_back$A2_Vectors_R$($t19, $t13)
                    // $t20 := copy($t2)
                    $t20 := mload($locals)
                    // $t21 := copy($t3)
                    $t21 := mload(add($locals, 32))
                    // $t22 := ==($t20, $t21)
                    $t22 := $Eq_$vec$A2_Vectors_R$$($t20, $t21)
                    // if ($t22) goto L7 else goto L6
                    switch $t22
                    case 0  { $block := 10 }
                    default { $block := 9 }
                }
                case 9 {
                    // label L7
                    // goto L8
                    $block := 11
                }
                case 10 {
                    // label L6
                    // $t23 := 103
                    $t23 := 103
                    // abort($t23)
                    $Abort($t23)
                }
                case 11 {
                    // label L8
                    // $t24 := 42
                    $t24 := 42
                    // $t25 := false
                    $t25 := false
                    // $t26 := 9
                    $t26 := 9
                    // $t27 := pack 0x2::Vectors::S($t24, $t25, $t26)
                    {
                        let $mem := $Malloc(25)
                        $MemoryStoreU128(add($mem, 0), $t24)
                        $MemoryStoreU8(add($mem, 24), $t25)
                        $MemoryStoreU64(add($mem, 16), $t26)
                        $t27 := $mem
                    }
                    // $t28 := Vectors::one_elem_u64()
                    $t28 := A2_Vectors_one_elem_u64()
                    // $t29 := pack 0x2::Vectors::R($t27, $t28)
                    {
                        let $mem := $Malloc(64)
                        $MemoryStoreU256(add($mem, 0), $t27)
                        $MemoryStoreU256(add($mem, 32), $t28)
                        $t29 := $mem
                    }
                    // $t30 := borrow_local($t2)
                    $t30 := $MakePtr(false, $locals)
                    // vector::push_back<0x2::Vectors::R>($t30, $t13)
                    A1_vector_push_back$A2_Vectors_R$($t30, $t13)
                    // $t31 := copy($t2)
                    $t31 := mload($locals)
                    // $t32 := copy($t3)
                    $t32 := mload(add($locals, 32))
                    // $t33 := !=($t31, $t32)
                    $t33 := $LogicalNot($Eq_$vec$A2_Vectors_R$$($t31, $t32))
                    // if ($t33) goto L10 else goto L9
                    switch $t33
                    case 0  { $block := 13 }
                    default { $block := 12 }
                }
                case 12 {
                    // label L10
                    // goto L11
                    $block := 14
                }
                case 13 {
                    // label L9
                    // $t34 := 104
                    $t34 := 104
                    // abort($t34)
                    $Abort($t34)
                }
                case 14 {
                    // label L11
                    // $t35 := borrow_local($t3)
                    $t35 := $MakePtr(false, add($locals, 32))
                    // vector::push_back<0x2::Vectors::R>($t35, $t29)
                    A1_vector_push_back$A2_Vectors_R$($t35, $t29)
                    // $t36 := move($t2)
                    $t36 := mload($locals)
                    // $t37 := move($t3)
                    $t37 := mload(add($locals, 32))
                    // $t38 := !=($t36, $t37)
                    $t38 := $LogicalNot($Eq_$vec$A2_Vectors_R$$($t36, $t37))
                    // if ($t38) goto L13 else goto L12
                    switch $t38
                    case 0  { $block := 16 }
                    default { $block := 15 }
                }
                case 15 {
                    // label L13
                    // goto L14
                    $block := 17
                }
                case 16 {
                    // label L12
                    // $t39 := 105
                    $t39 := 105
                    // abort($t39)
                    $Abort($t39)
                }
                case 17 {
                    // label L14
                    // return ()
                    $Free($locals, 64)
                    leave
                }
            }
        }

        function A1_vector_push_back$A2_Vectors_R$(v_ref, e) {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 32)))
            $StoreU256(e_ptr, e)
            if $IsStoragePtr(e_ptr) {
                let e_offs := $OffsetPtr(e_ptr)
                let $linked_dst_1348728112 := $NewLinkedStorageBase(0x5063f530)
                {
                    let $linked_src_490229512 := mload(add(e, 0))
                    let $linked_dst_490229512 := $NewLinkedStorageBase(0x1d384f08)
                    $AlignedStorageStore(add($linked_dst_490229512, 0), mload(add($linked_src_490229512, 0)))
                    $Free($linked_src_490229512, 25)
                    $AlignedStorageStore(add($linked_dst_1348728112, 0), $linked_dst_490229512)
                }
                {
                    let $linked_src_814019441 := mload(add(e, 32))
                    let $linked_dst_814019441 := $NewLinkedStorageBase(0x3084f371)
                    let $size_814019441 := $MemoryLoadU64($linked_src_814019441)
                    let $data_size_814019441 := mul($size_814019441, 8)
                    $AlignedStorageStore($linked_dst_814019441, mload($linked_src_814019441))
                    let $data_src_814019441 := add($linked_src_814019441, 32)
                    let $data_dst_814019441 := add($linked_dst_814019441, 32)
                    for { let $offs_814019441 := 0 } lt($offs_814019441, $data_size_814019441) { $offs_814019441 := add($offs_814019441, 32)} {
                        $AlignedStorageStore(add($data_dst_814019441, $offs_814019441), mload(add($data_src_814019441, $offs_814019441)))
                        $Free($linked_src_814019441, add($data_size_814019441, 32))
                    }
                    $AlignedStorageStore(add($linked_dst_1348728112, 32), $linked_dst_814019441)
                }
                $Free(e, 64)
                $AlignedStorageStore(e_offs, $linked_dst_1348728112)
            }
            size := add(size, 1)
            $StoreU64(v_ptr, size)
            let capacity := $LoadU64($IndexPtr(v_ptr, 8))
            if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                let new_v_offs := $ResizeVector(v_offs, capacity, 32)
                $StoreU256(v_ref, new_v_offs)
            }
        }
        function A2_Vectors_one_elem_u64() -> $result {
            let $t1, $t2, $t3
            let $locals := $Malloc(32)
            // $t0 := vector::empty<u64>()
            mstore($locals, A1_vector_empty$u64$())
            // $t1 := borrow_local($t0)
            $t1 := $MakePtr(false, $locals)
            // $t2 := 42
            $t2 := 42
            // vector::push_back<u64>($t1, $t2)
            A1_vector_push_back$u64$($t1, $t2)
            // $t3 := move($t0)
            $t3 := mload($locals)
            // return $t3
            $result := $t3
            $Free($locals, 32)
        }

        function A1_vector_push_back$u64$(v_ref, e) {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 8)))
            $StoreU64(e_ptr, e)
            size := add(size, 1)
            $StoreU64(v_ptr, size)
            let capacity := $LoadU64($IndexPtr(v_ptr, 8))
            if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                let new_v_offs := $ResizeVector(v_offs, capacity, 8)
                $StoreU256(v_ref, new_v_offs)
            }
        }
        function A1_vector_empty$u64$() -> vector {
            vector := $Malloc(48)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function A1_vector_empty$A2_Vectors_R$() -> vector {
            vector := $Malloc(96)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function $Eq_$vec$A2_Vectors_R$$(x, y) -> res
        {
            let len_x := $MemoryLoadU64(x)
            let len_y := $MemoryLoadU64(y)
            if $Neq(len_x, len_y) {
              res:= false
              leave
            }
            for { let i := 0 } lt(i, len_x) { i := add(i, 1) }
            {
                let e_x := $MemoryLoadU256(add(32, add(x, mul(i, 32))))
                let e_y := $MemoryLoadU256(add(32, add(y, mul(i, 32))))
                if $LogicalNot($Eq_$A2_Vectors_R$(e_x, e_y)) {
                  res:= false
                  leave
                }
            }
            res := true
        }
        function $Eq_$A2_Vectors_R$(x, y) -> res
        {
            let f_x_0 := mload(add(x, 0))
            let f_y_0 := mload(add(y, 0))
            if $LogicalNot($Eq_$A2_Vectors_S$(f_x_0, f_y_0)) {
              res:= false
              leave
            }
            let f_x_1 := mload(add(x, 32))
            let f_y_1 := mload(add(y, 32))
            if $LogicalNot($Eq_$vec$u64$$(f_x_1, f_y_1)) {
              res:= false
              leave
            }
            res := true
        }
        function $Eq_$vec$u64$$(x, y) -> res
        {
            res := $EqVector(x, y, 8)
        }
        function $Eq_$A2_Vectors_S$(x, y) -> res
        {
            if $Neq(mload(add(x, 0)), mload(add(y, 0))) {
              res:= false
              leave
            }
            res := true
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $MakeTypeStorageBase(category, type_hash, id) -> offs {
          offs := or(shl(252, category), or(shl(220, type_hash), shl(60, id)))
        }
        function $NewLinkedStorageBase(type_hash) -> offs {
          let key := $StorageKey(1, 1)
          let handle := sload(key)
          sstore(key, add(handle, 1))
          offs := $MakeTypeStorageBase(1, type_hash, handle)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $MemoryStoreU8(offs, val) {
          // Shortcut via special instruction
          mstore8(offs, val)
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $StoreU64(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU64(offs, val)
          }
          default {
            $StorageStoreU64(offs, val)
          }
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $StorageStoreU64(offs, val) {
          $StorageStoreBytes(offs, 8, val)
        }
        function $MemoryStoreU128(offs, val) {
          $MemoryStoreBytes(offs, 16, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $StoreU256(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU256(offs, val)
          }
          default {
            $StorageStoreU256(offs, val)
          }
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $StorageStoreU256(offs, val) {
          $StorageStoreBytes(offs, 32, val)
        }
        function $AlignedStorageStore(offs, val) {
          let word_offs := shr(5, offs)
          sstore($StorageKey(0, word_offs), val)
        }
        function $CopyMemory(src, dst, size) {
          let num_words, overflow_bytes := $ToWordOffs(size)
          let i := 0
          for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
            mstore(add(dst, i), mload(add(src, i)))
          }
          if overflow_bytes {
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let dst_word := and(mload(add(dst, overflow_offs)), mask)
            let src_word := and(mload(add(src, overflow_offs)), not(mask))
            mstore(add(dst, overflow_offs), or(dst_word, src_word))
          }
        }
        function $ResizeVector(v_offs, capacity, type_size) -> new_v_offs {
            let new_capacity := mul(capacity, 2)
            let data_size := add(32, mul(capacity, type_size))
            let new_data_size := add(32, mul(new_capacity, type_size))
            new_v_offs := $Malloc(new_data_size)
            $CopyMemory(v_offs, new_v_offs, data_size)
            // update capacity at new location
            $MemoryStoreU64(add(new_v_offs, 8), new_capacity)
            $Free(v_offs, data_size)
        }
        function $EqVector(x, y, elem_size) -> r {
            let len_x := $MemoryLoadU64(x)
            let len_y := $MemoryLoadU64(y)
            if $Neq(len_x, len_y) {
                r := false
                leave
            }
            let data_size_bytes := mul(elem_size, len_x)
            let num_words, overflow_bytes := $ToWordOffs(data_size_bytes)
            let i := 0
            for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
                if $Neq(mload(add(x, add(i, 32))), mload(add(y, add(i, 32)))) {
                    r := false
                    leave
                }
            }
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let x_overflow := mload(add(x, add(overflow_offs, 32)))
            let y_overflow := mload(add(y, add(overflow_offs, 32)))
            r := eq(or(mask, x_overflow), or(mask, y_overflow))
        }
        function $Neq(x, y) -> r {
            r := $LogicalNot(eq(x, y))
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
    }
}
===> Test result of Vectors::test_vector_equality_struct: Succeed(Stopped) (used_gas=10390): []

// test of Vectors::test_vectors_in_structs
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_Vectors_test_vectors_in_structs" {
    code {
        mstore(0, memoryguard(160))
        A2_Vectors_test_vectors_in_structs()
        return (0, 0)
        function A2_Vectors_test_vectors_in_structs() {
            let r, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21, $t22, $t23, $t24, $t25, $t26, $t27, $t28, $t29, $t30, $t31, $t32, $t33, $t34, $t35, $t36, $t37, $t38, $t39, $t40, $t41, $t42, $t43, $t44, $t45, $t46, $t47, $t48, $t49, $t50, $t51, $t52, $t53, $t54, $t55, $t56, $t57, $t58, $t59, $t60, $t61, $t62, $t63, $t64, $t65, $t66, $t67, $t68, $t69, $t70, $t71, $t72
            let $locals := $Malloc(32)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t18 := 101
                    $t18 := 101
                    // abort($t18)
                    $Abort($t18)
                }
                case 4 {
                    // $t1 := vector::empty<u64>()
                    mstore($locals, A1_vector_empty$u64$())
                    // $t2 := borrow_local($t1)
                    $t2 := $MakePtr(false, $locals)
                    // $t3 := 10
                    $t3 := 10
                    // vector::push_back<u64>($t2, $t3)
                    A1_vector_push_back$u64$($t2, $t3)
                    // $t4 := borrow_local($t1)
                    $t4 := $MakePtr(false, $locals)
                    // $t5 := 11
                    $t5 := 11
                    // vector::push_back<u64>($t4, $t5)
                    A1_vector_push_back$u64$($t4, $t5)
                    // $t6 := borrow_local($t1)
                    $t6 := $MakePtr(false, $locals)
                    // $t7 := 12
                    $t7 := 12
                    // vector::push_back<u64>($t6, $t7)
                    A1_vector_push_back$u64$($t6, $t7)
                    // $t8 := 42
                    $t8 := 42
                    // $t9 := true
                    $t9 := true
                    // $t10 := 9
                    $t10 := 9
                    // $t11 := pack 0x2::Vectors::S($t8, $t9, $t10)
                    {
                        let $mem := $Malloc(25)
                        $MemoryStoreU128(add($mem, 0), $t8)
                        $MemoryStoreU8(add($mem, 24), $t9)
                        $MemoryStoreU64(add($mem, 16), $t10)
                        $t11 := $mem
                    }
                    // $t12 := move($t1)
                    $t12 := mload($locals)
                    // $t0 := pack 0x2::Vectors::R($t11, $t12)
                    {
                        let $mem := $Malloc(64)
                        $MemoryStoreU256(add($mem, 0), $t11)
                        $MemoryStoreU256(add($mem, 32), $t12)
                        r := $mem
                    }
                    // $t13 := borrow_local($t0)
                    $t13 := $MakePtr(false, r)
                    // $t14 := borrow_field<0x2::Vectors::R>.v($t13)
                    $t14 := $IndexPtr($t13, 32)
                    // $t15 := vector::length<u64>($t14)
                    $t15 := A1_vector_length$u64$($t14)
                    // $t16 := 3
                    $t16 := 3
                    // $t17 := ==($t15, $t16)
                    $t17 := $Eq($t15, $t16)
                    // if ($t17) goto L1 else goto L0
                    switch $t17
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t19 := borrow_local($t0)
                    $t19 := $MakePtr(false, r)
                    // $t20 := borrow_field<0x2::Vectors::R>.v($t19)
                    $t20 := $IndexPtr($t19, 32)
                    // $t21 := 0
                    $t21 := 0
                    // $t22 := vector::borrow<u64>($t20, $t21)
                    $t22 := A1_vector_borrow$u64$($t20, $t21)
                    // $t23 := read_ref($t22)
                    $t23 := $LoadU64($t22)
                    // $t24 := 10
                    $t24 := 10
                    // $t25 := ==($t23, $t24)
                    $t25 := $Eq($t23, $t24)
                    // if ($t25) goto L4 else goto L3
                    switch $t25
                    case 0  { $block := 7 }
                    default { $block := 6 }
                }
                case 6 {
                    // label L4
                    // goto L5
                    $block := 8
                }
                case 7 {
                    // label L3
                    // $t26 := 102
                    $t26 := 102
                    // abort($t26)
                    $Abort($t26)
                }
                case 8 {
                    // label L5
                    // $t27 := borrow_local($t0)
                    $t27 := $MakePtr(false, r)
                    // $t28 := borrow_field<0x2::Vectors::R>.v($t27)
                    $t28 := $IndexPtr($t27, 32)
                    // $t29 := 1
                    $t29 := 1
                    // $t30 := vector::borrow<u64>($t28, $t29)
                    $t30 := A1_vector_borrow$u64$($t28, $t29)
                    // $t31 := read_ref($t30)
                    $t31 := $LoadU64($t30)
                    // $t32 := 11
                    $t32 := 11
                    // $t33 := ==($t31, $t32)
                    $t33 := $Eq($t31, $t32)
                    // if ($t33) goto L7 else goto L6
                    switch $t33
                    case 0  { $block := 10 }
                    default { $block := 9 }
                }
                case 9 {
                    // label L7
                    // goto L8
                    $block := 11
                }
                case 10 {
                    // label L6
                    // $t34 := 103
                    $t34 := 103
                    // abort($t34)
                    $Abort($t34)
                }
                case 11 {
                    // label L8
                    // $t35 := borrow_local($t0)
                    $t35 := $MakePtr(false, r)
                    // $t36 := borrow_field<0x2::Vectors::R>.v($t35)
                    $t36 := $IndexPtr($t35, 32)
                    // $t37 := 2
                    $t37 := 2
                    // $t38 := vector::borrow<u64>($t36, $t37)
                    $t38 := A1_vector_borrow$u64$($t36, $t37)
                    // $t39 := read_ref($t38)
                    $t39 := $LoadU64($t38)
                    // $t40 := 12
                    $t40 := 12
                    // $t41 := ==($t39, $t40)
                    $t41 := $Eq($t39, $t40)
                    // if ($t41) goto L10 else goto L9
                    switch $t41
                    case 0  { $block := 13 }
                    default { $block := 12 }
                }
                case 12 {
                    // label L10
                    // goto L11
                    $block := 14
                }
                case 13 {
                    // label L9
                    // $t42 := 104
                    $t42 := 104
                    // abort($t42)
                    $Abort($t42)
                }
                case 14 {
                    // label L11
                    // $t43 := 41
                    $t43 := 41
                    // $t44 := borrow_local($t0)
                    $t44 := $MakePtr(false, r)
                    // $t45 := borrow_field<0x2::Vectors::R>.v($t44)
                    $t45 := $IndexPtr($t44, 32)
                    // $t46 := 1
                    $t46 := 1
                    // $t47 := vector::borrow_mut<u64>($t45, $t46)
                    $t47 := A1_vector_borrow_mut$u64$($t45, $t46)
                    // write_ref($t47, $t43)
                    $StoreU64($t47, $t43)
                    // $t48 := borrow_local($t0)
                    $t48 := $MakePtr(false, r)
                    // $t49 := borrow_field<0x2::Vectors::R>.v($t48)
                    $t49 := $IndexPtr($t48, 32)
                    // $t50 := 1
                    $t50 := 1
                    // $t51 := vector::borrow<u64>($t49, $t50)
                    $t51 := A1_vector_borrow$u64$($t49, $t50)
                    // $t52 := read_ref($t51)
                    $t52 := $LoadU64($t51)
                    // $t53 := 41
                    $t53 := 41
                    // $t54 := ==($t52, $t53)
                    $t54 := $Eq($t52, $t53)
                    // if ($t54) goto L13 else goto L12
                    switch $t54
                    case 0  { $block := 16 }
                    default { $block := 15 }
                }
                case 15 {
                    // label L13
                    // goto L14
                    $block := 17
                }
                case 16 {
                    // label L12
                    // $t55 := 105
                    $t55 := 105
                    // abort($t55)
                    $Abort($t55)
                }
                case 17 {
                    // label L14
                    // $t56 := Vectors::one_elem_u64()
                    $t56 := A2_Vectors_one_elem_u64()
                    // $t57 := borrow_local($t0)
                    $t57 := $MakePtr(false, r)
                    // $t58 := borrow_field<0x2::Vectors::R>.v($t57)
                    $t58 := $IndexPtr($t57, 32)
                    // write_ref($t58, $t56)
                    if $IsStoragePtr($t58){
                        let $storage_ptr_814019441 := $NewLinkedStorageBase(0x3084f371)
                        let $size_814019441 := $MemoryLoadU64($t56)
                        let $data_size_814019441 := mul($size_814019441, 8)
                        $AlignedStorageStore($storage_ptr_814019441, mload($t56))
                        let $data_src_814019441 := add($t56, 32)
                        let $data_dst_814019441 := add($storage_ptr_814019441, 32)
                        for { let $offs_814019441 := 0 } lt($offs_814019441, $data_size_814019441) { $offs_814019441 := add($offs_814019441, 32)} {
                            $AlignedStorageStore(add($data_dst_814019441, $offs_814019441), mload(add($data_src_814019441, $offs_814019441)))
                        }
                        $t56 := $storage_ptr_814019441
                    }
                    $StoreU256($t58, $t56)
                    // $t59 := borrow_local($t0)
                    $t59 := $MakePtr(false, r)
                    // $t60 := borrow_field<0x2::Vectors::R>.v($t59)
                    $t60 := $IndexPtr($t59, 32)
                    // $t61 := vector::length<u64>($t60)
                    $t61 := A1_vector_length$u64$($t60)
                    // $t62 := 1
                    $t62 := 1
                    // $t63 := ==($t61, $t62)
                    $t63 := $Eq($t61, $t62)
                    // if ($t63) goto L16 else goto L15
                    switch $t63
                    case 0  { $block := 19 }
                    default { $block := 18 }
                }
                case 18 {
                    // label L16
                    // goto L17
                    $block := 20
                }
                case 19 {
                    // label L15
                    // $t64 := 106
                    $t64 := 106
                    // abort($t64)
                    $Abort($t64)
                }
                case 20 {
                    // label L17
                    // $t65 := borrow_local($t0)
                    $t65 := $MakePtr(false, r)
                    // $t66 := borrow_field<0x2::Vectors::R>.v($t65)
                    $t66 := $IndexPtr($t65, 32)
                    // $t67 := 0
                    $t67 := 0
                    // $t68 := vector::borrow<u64>($t66, $t67)
                    $t68 := A1_vector_borrow$u64$($t66, $t67)
                    // $t69 := read_ref($t68)
                    $t69 := $LoadU64($t68)
                    // $t70 := 42
                    $t70 := 42
                    // $t71 := ==($t69, $t70)
                    $t71 := $Eq($t69, $t70)
                    // if ($t71) goto L19 else goto L18
                    switch $t71
                    case 0  { $block := 22 }
                    default { $block := 21 }
                }
                case 21 {
                    // label L19
                    // goto L20
                    $block := 23
                }
                case 22 {
                    // label L18
                    // $t72 := 107
                    $t72 := 107
                    // abort($t72)
                    $Abort($t72)
                }
                case 23 {
                    // label L20
                    // return ()
                    $Free($locals, 32)
                    leave
                }
            }
        }

        function A1_vector_borrow$u64$(v_ref, i) -> e_ptr {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            if $GtEq(i, size) { $AbortBuiltin() }
            e_ptr := $IndexPtr(v_ptr, add(32, mul(i, 8)))
        }
        function A1_vector_length$u64$(v_ref) -> len {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            len := $LoadU64(v_ptr)
        }
        function A2_Vectors_one_elem_u64() -> $result {
            let $t1, $t2, $t3
            let $locals := $Malloc(32)
            // $t0 := vector::empty<u64>()
            mstore($locals, A1_vector_empty$u64$())
            // $t1 := borrow_local($t0)
            $t1 := $MakePtr(false, $locals)
            // $t2 := 42
            $t2 := 42
            // vector::push_back<u64>($t1, $t2)
            A1_vector_push_back$u64$($t1, $t2)
            // $t3 := move($t0)
            $t3 := mload($locals)
            // return $t3
            $result := $t3
            $Free($locals, 32)
        }

        function A1_vector_push_back$u64$(v_ref, e) {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 8)))
            $StoreU64(e_ptr, e)
            size := add(size, 1)
            $StoreU64(v_ptr, size)
            let capacity := $LoadU64($IndexPtr(v_ptr, 8))
            if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                let new_v_offs := $ResizeVector(v_offs, capacity, 8)
                $StoreU256(v_ref, new_v_offs)
            }
        }
        function A1_vector_empty$u64$() -> vector {
            vector := $Malloc(48)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function A1_vector_borrow_mut$u64$(v_ref, i) -> e_ptr {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            if $GtEq(i, size) { $AbortBuiltin() }
            e_ptr := $IndexPtr(v_ptr, add(32, mul(i, 8)))
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $MakeTypeStorageBase(category, type_hash, id) -> offs {
          offs := or(shl(252, category), or(shl(220, type_hash), shl(60, id)))
        }
        function $NewLinkedStorageBase(type_hash) -> offs {
          let key := $StorageKey(1, 1)
          let handle := sload(key)
          sstore(key, add(handle, 1))
          offs := $MakeTypeStorageBase(1, type_hash, handle)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $MemoryStoreU8(offs, val) {
          // Shortcut via special instruction
          mstore8(offs, val)
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $StoreU64(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU64(offs, val)
          }
          default {
            $StorageStoreU64(offs, val)
          }
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $StorageStoreU64(offs, val) {
          $StorageStoreBytes(offs, 8, val)
        }
        function $MemoryStoreU128(offs, val) {
          $MemoryStoreBytes(offs, 16, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $StoreU256(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU256(offs, val)
          }
          default {
            $StorageStoreU256(offs, val)
          }
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $StorageStoreU256(offs, val) {
          $StorageStoreBytes(offs, 32, val)
        }
        function $AlignedStorageStore(offs, val) {
          let word_offs := shr(5, offs)
          sstore($StorageKey(0, word_offs), val)
        }
        function $CopyMemory(src, dst, size) {
          let num_words, overflow_bytes := $ToWordOffs(size)
          let i := 0
          for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
            mstore(add(dst, i), mload(add(src, i)))
          }
          if overflow_bytes {
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let dst_word := and(mload(add(dst, overflow_offs)), mask)
            let src_word := and(mload(add(src, overflow_offs)), not(mask))
            mstore(add(dst, overflow_offs), or(dst_word, src_word))
          }
        }
        function $ResizeVector(v_offs, capacity, type_size) -> new_v_offs {
            let new_capacity := mul(capacity, 2)
            let data_size := add(32, mul(capacity, type_size))
            let new_data_size := add(32, mul(new_capacity, type_size))
            new_v_offs := $Malloc(new_data_size)
            $CopyMemory(v_offs, new_v_offs, data_size)
            // update capacity at new location
            $MemoryStoreU64(add(new_v_offs, 8), new_capacity)
            $Free(v_offs, data_size)
        }
        function $GtEq(x, y) -> r {
            r := or(gt(x, y), eq(x, y))
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
    }
}
===> Test result of Vectors::test_vectors_in_structs: Succeed(Stopped) (used_gas=11062): []
