/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                default {}
            }
            $Abort(97)
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
        }
    }
}


!! Succeeded compiling Yul


!! Unit tests

// test of M::extract_err_data
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_M_extract_err_data" {
    code {
        mstore(0, memoryguard(160))
        A2_M_extract_err_data()
        return (0, 0)
        function A2_M_extract_err_data() {
            let v2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21
            let $locals := $Malloc(64)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t8 := 102
                    $t8 := 102
                    // abort($t8)
                    $Abort($t8)
                }
                case 4 {
                    // $t0 := vector::empty<u8>()
                    mstore($locals, A1_vector_empty$u8$())
                    // $t3 := borrow_local($t0)
                    $t3 := $MakePtr(false, $locals)
                    // $t4 := 42
                    $t4 := 42
                    // vector::push_back<u8>($t3, $t4)
                    A1_vector_push_back$u8$($t3, $t4)
                    // $t5 := move($t0)
                    $t5 := mload($locals)
                    // $t1 := M::pack_err_data<u64>($t5)
                    v2 := A2_M_pack_err_data$u64$($t5)
                    // $t6 := borrow_local($t1)
                    $t6 := $MakePtr(false, v2)
                    // $t7 := ExternalResult::is_err_data<u64>($t6)
                    $t7 := A2_ExternalResult_is_err_data$u64$($t6)
                    // if ($t7) goto L1 else goto L0
                    switch $t7
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t9 := move($t1)
                    $t9 := v2
                    // $t2 := ExternalResult::unwrap_err_data<u64>($t9)
                    mstore(add($locals, 32), A2_ExternalResult_unwrap_err_data$u64$($t9))
                    // $t10 := borrow_local($t2)
                    $t10 := $MakePtr(false, add($locals, 32))
                    // $t11 := vector::length<u8>($t10)
                    $t11 := A1_vector_length$u8$($t10)
                    // $t12 := 1
                    $t12 := 1
                    // $t13 := ==($t11, $t12)
                    $t13 := $Eq($t11, $t12)
                    // if ($t13) goto L4 else goto L3
                    switch $t13
                    case 0  { $block := 7 }
                    default { $block := 6 }
                }
                case 6 {
                    // label L4
                    // goto L5
                    $block := 8
                }
                case 7 {
                    // label L3
                    // $t14 := 103
                    $t14 := 103
                    // abort($t14)
                    $Abort($t14)
                }
                case 8 {
                    // label L5
                    // $t15 := borrow_local($t2)
                    $t15 := $MakePtr(false, add($locals, 32))
                    // $t16 := 0
                    $t16 := 0
                    // $t17 := vector::borrow<u8>($t15, $t16)
                    $t17 := A1_vector_borrow$u8$($t15, $t16)
                    // $t18 := read_ref($t17)
                    $t18 := $LoadU8($t17)
                    // $t19 := 42
                    $t19 := 42
                    // $t20 := ==($t18, $t19)
                    $t20 := $Eq($t18, $t19)
                    // if ($t20) goto L7 else goto L6
                    switch $t20
                    case 0  { $block := 10 }
                    default { $block := 9 }
                }
                case 9 {
                    // label L7
                    // goto L8
                    $block := 11
                }
                case 10 {
                    // label L6
                    // $t21 := 104
                    $t21 := 104
                    // abort($t21)
                    $Abort($t21)
                }
                case 11 {
                    // label L8
                    // return ()
                    $Free($locals, 64)
                    leave
                }
            }
        }

        function A1_vector_borrow$u8$(v_ref, i) -> e_ptr {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            if $GtEq(i, size) { $AbortBuiltin() }
            e_ptr := $IndexPtr(v_ptr, add(32, mul(i, 1)))
        }
        function A1_vector_length$u8$(v_ref) -> len {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            len := $LoadU64(v_ptr)
        }
        function A2_ExternalResult_unwrap_err_data$u64$(result) -> $result {
            let err_data, err_reason, panic_code, $t4, $t5, $t6, $t7, $t8
            // ($t4, $t5, $t6, $t7) := unpack 0x2::ExternalResult::ExternalResult<#0>($t0)
            $t4 := $MemoryLoadU256(add(result, 0))
            $t5 := $MemoryLoadU256(add(result, 32))
            $t6 := $MemoryLoadU256(add(result, 64))
            $t7 := $MemoryLoadU256(add(result, 96))
            $Free(result, 128)
            // option::destroy_none<#0>($t4)
            A1_option_destroy_none$u64$($t4)
            // option::destroy_none<vector<u8>>($t6)
            A1_option_destroy_none$vec$u8$$($t6)
            // option::destroy_none<0x2::U256::U256>($t7)
            A1_option_destroy_none$A2_U256_U256$($t7)
            // $t8 := option::destroy_some<vector<u8>>($t5)
            $t8 := A1_option_destroy_some$vec$u8$$($t5)
            // return $t8
            $result := $t8
        }

        function A1_option_destroy_some$vec$u8$$(t) -> $result {
            let elem, $t3, $t4, $t5, $t6, $t7, $t8, $t9
            let $locals := $Malloc(32)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t5 := 262145
                    $t5 := 262145
                    // abort($t5)
                    $Abort($t5)
                }
                case 4 {
                    // $t3 := borrow_local($t0)
                    $t3 := $MakePtr(false, t)
                    // $t4 := option::is_some<#0>($t3)
                    $t4 := A1_option_is_some$vec$u8$$($t3)
                    // if ($t4) goto L1 else goto L0
                    switch $t4
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t6 := move($t0)
                    $t6 := t
                    // $t2 := unpack 0x1::option::Option<#0>($t6)
                    mstore($locals, $MemoryLoadU256(add($t6, 0)))
                    $Free($t6, 32)
                    // $t7 := borrow_local($t2)
                    $t7 := $MakePtr(false, $locals)
                    // $t8 := vector::pop_back<#0>($t7)
                    $t8 := A1_vector_pop_back$vec$u8$$($t7)
                    // $t9 := move($t2)
                    $t9 := mload($locals)
                    // vector::destroy_empty<#0>($t9)
                    A1_vector_destroy_empty$vec$u8$$($t9)
                    // return $t8
                    $result := $t8
                    $Free($locals, 32)
                    leave
                }
            }
        }

        function A1_vector_destroy_empty$vec$u8$$(v) {
            let size := $MemoryLoadU64(v)
            if $LogicalNot(iszero(size)) { $AbortBuiltin() }
            let capacity := $MemoryLoadU64(add(v, 8))
            $Free(v, add(32, mul(capacity, 32)))
        }
        function A1_vector_pop_back$vec$u8$$(v_ref) -> e {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            if iszero(size) { $AbortBuiltin() }
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(sub(size, 1), 32)))
            e := $LoadU256(e_ptr)
            if $IsStoragePtr(e_ptr) {
                let e_offs := $OffsetPtr(e_ptr)
                let linked_src := $AlignedStorageLoad(e_offs)
                let $size_2300595445 := $StorageLoadU64(linked_src)
                let $capacity_2300595445 := $ClosestGreaterPowerOfTwo($size_2300595445)
                e := $Malloc(add(32, mul($capacity_2300595445, 1)))
                let $data_size_2300595445 := mul($size_2300595445, 1)
                mstore(e, $AlignedStorageLoad(linked_src))
                $MemoryStoreU64(add(e, 8), $capacity_2300595445)
                let $data_src_2300595445 := add(linked_src, 32)
                let $data_dst_2300595445 := add(e, 32)
                for { let $offs_2300595445 := 0 } lt($offs_2300595445, $data_size_2300595445) { $offs_2300595445 := add($offs_2300595445, 32)} {
                    mstore(add($data_dst_2300595445, $offs_2300595445), $AlignedStorageLoad(add($data_src_2300595445, $offs_2300595445)))
                    $AlignedStorageStore(add($data_src_2300595445, $offs_2300595445), 0)
                }
                $AlignedStorageStore(e_offs, 0)
            }
            $StoreU64(v_ptr, sub(size, 1))
        }
        function A1_option_is_some$vec$u8$$(t) -> $result {
            let $t1, $t2, $t3
            // $t1 := borrow_field<0x1::option::Option<#0>>.vec($t0)
            $t1 := t
            // $t2 := vector::is_empty<#0>($t1)
            $t2 := A1_vector_is_empty$vec$u8$$($t1)
            // $t3 := !($t2)
            $t3 := $LogicalNot($t2)
            // return $t3
            $result := $t3
        }

        function A1_vector_is_empty$vec$u8$$(v) -> $result {
            let $t1, $t2, $t3
            // $t1 := vector::length<#0>($t0)
            $t1 := A1_vector_length$vec$u8$$(v)
            // $t2 := 0
            $t2 := 0
            // $t3 := ==($t1, $t2)
            $t3 := $Eq($t1, $t2)
            // return $t3
            $result := $t3
        }

        function A1_vector_length$vec$u8$$(v_ref) -> len {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            len := $LoadU64(v_ptr)
        }
        function A1_option_destroy_none$A2_U256_U256$(t) {
            let $t1, $t2, $t3, $t4, $t5
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t3 := 262144
                    $t3 := 262144
                    // abort($t3)
                    $Abort($t3)
                }
                case 4 {
                    // $t1 := borrow_local($t0)
                    $t1 := $MakePtr(false, t)
                    // $t2 := option::is_none<#0>($t1)
                    $t2 := A1_option_is_none$A2_U256_U256$($t1)
                    // if ($t2) goto L1 else goto L0
                    switch $t2
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t4 := move($t0)
                    $t4 := t
                    // $t5 := unpack 0x1::option::Option<#0>($t4)
                    $t5 := $MemoryLoadU256(add($t4, 0))
                    $Free($t4, 32)
                    // vector::destroy_empty<#0>($t5)
                    A1_vector_destroy_empty$A2_U256_U256$($t5)
                    // return ()
                    leave
                }
            }
        }

        function A1_vector_destroy_empty$A2_U256_U256$(v) {
            let size := $MemoryLoadU64(v)
            if $LogicalNot(iszero(size)) { $AbortBuiltin() }
            let capacity := $MemoryLoadU64(add(v, 8))
            $Free(v, add(32, mul(capacity, 32)))
        }
        function A1_option_is_none$A2_U256_U256$(t) -> $result {
            let $t1, $t2
            // $t1 := borrow_field<0x1::option::Option<#0>>.vec($t0)
            $t1 := t
            // $t2 := vector::is_empty<#0>($t1)
            $t2 := A1_vector_is_empty$A2_U256_U256$($t1)
            // return $t2
            $result := $t2
        }

        function A1_vector_is_empty$A2_U256_U256$(v) -> $result {
            let $t1, $t2, $t3
            // $t1 := vector::length<#0>($t0)
            $t1 := A1_vector_length$A2_U256_U256$(v)
            // $t2 := 0
            $t2 := 0
            // $t3 := ==($t1, $t2)
            $t3 := $Eq($t1, $t2)
            // return $t3
            $result := $t3
        }

        function A1_vector_length$A2_U256_U256$(v_ref) -> len {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            len := $LoadU64(v_ptr)
        }
        function A1_option_destroy_none$vec$u8$$(t) {
            let $t1, $t2, $t3, $t4, $t5
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t3 := 262144
                    $t3 := 262144
                    // abort($t3)
                    $Abort($t3)
                }
                case 4 {
                    // $t1 := borrow_local($t0)
                    $t1 := $MakePtr(false, t)
                    // $t2 := option::is_none<#0>($t1)
                    $t2 := A1_option_is_none$vec$u8$$($t1)
                    // if ($t2) goto L1 else goto L0
                    switch $t2
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t4 := move($t0)
                    $t4 := t
                    // $t5 := unpack 0x1::option::Option<#0>($t4)
                    $t5 := $MemoryLoadU256(add($t4, 0))
                    $Free($t4, 32)
                    // vector::destroy_empty<#0>($t5)
                    A1_vector_destroy_empty$vec$u8$$($t5)
                    // return ()
                    leave
                }
            }
        }

        function A1_option_is_none$vec$u8$$(t) -> $result {
            let $t1, $t2
            // $t1 := borrow_field<0x1::option::Option<#0>>.vec($t0)
            $t1 := t
            // $t2 := vector::is_empty<#0>($t1)
            $t2 := A1_vector_is_empty$vec$u8$$($t1)
            // return $t2
            $result := $t2
        }

        function A1_option_destroy_none$u64$(t) {
            let $t1, $t2, $t3, $t4, $t5
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t3 := 262144
                    $t3 := 262144
                    // abort($t3)
                    $Abort($t3)
                }
                case 4 {
                    // $t1 := borrow_local($t0)
                    $t1 := $MakePtr(false, t)
                    // $t2 := option::is_none<#0>($t1)
                    $t2 := A1_option_is_none$u64$($t1)
                    // if ($t2) goto L1 else goto L0
                    switch $t2
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t4 := move($t0)
                    $t4 := t
                    // $t5 := unpack 0x1::option::Option<#0>($t4)
                    $t5 := $MemoryLoadU256(add($t4, 0))
                    $Free($t4, 32)
                    // vector::destroy_empty<#0>($t5)
                    A1_vector_destroy_empty$u64$($t5)
                    // return ()
                    leave
                }
            }
        }

        function A1_vector_destroy_empty$u64$(v) {
            let size := $MemoryLoadU64(v)
            if $LogicalNot(iszero(size)) { $AbortBuiltin() }
            let capacity := $MemoryLoadU64(add(v, 8))
            $Free(v, add(32, mul(capacity, 8)))
        }
        function A1_option_is_none$u64$(t) -> $result {
            let $t1, $t2
            // $t1 := borrow_field<0x1::option::Option<#0>>.vec($t0)
            $t1 := t
            // $t2 := vector::is_empty<#0>($t1)
            $t2 := A1_vector_is_empty$u64$($t1)
            // return $t2
            $result := $t2
        }

        function A1_vector_is_empty$u64$(v) -> $result {
            let $t1, $t2, $t3
            // $t1 := vector::length<#0>($t0)
            $t1 := A1_vector_length$u64$(v)
            // $t2 := 0
            $t2 := 0
            // $t3 := ==($t1, $t2)
            $t3 := $Eq($t1, $t2)
            // return $t3
            $result := $t3
        }

        function A1_vector_length$u64$(v_ref) -> len {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            len := $LoadU64(v_ptr)
        }
        function A2_ExternalResult_is_err_data$u64$(result) -> $result {
            let $t1, $t2
            // $t1 := borrow_field<0x2::ExternalResult::ExternalResult<#0>>.err_data($t0)
            {
                let $field_ptr := $IndexPtr(result, 32)
                $t1 := $MakePtr($IsStoragePtr($field_ptr), $LoadU256($field_ptr))
            }
            // $t2 := option::is_some<vector<u8>>($t1)
            $t2 := A1_option_is_some$vec$u8$$($t1)
            // return $t2
            $result := $t2
        }

        function A2_M_pack_err_data$u64$(v) -> $result {
            let $t1
            // $t1 := ExternalResult::err_data<#0>($t0)
            $t1 := A2_ExternalResult_err_data$u64$(v)
            // return $t1
            $result := $t1
        }

        function A2_ExternalResult_err_data$u64$(error) -> $result {
            let $t1, $t2, $t3, $t4, $t5
            // $t1 := option::none<#0>()
            $t1 := A1_option_none$u64$()
            // $t2 := option::some<vector<u8>>($t0)
            $t2 := A1_option_some$vec$u8$$(error)
            // $t3 := option::none<vector<u8>>()
            $t3 := A1_option_none$vec$u8$$()
            // $t4 := option::none<0x2::U256::U256>()
            $t4 := A1_option_none$A2_U256_U256$()
            // $t5 := pack 0x2::ExternalResult::ExternalResult<#0>($t1, $t2, $t3, $t4)
            {
                let $mem := $Malloc(128)
                $MemoryStoreU256(add($mem, 0), $t1)
                $MemoryStoreU256(add($mem, 32), $t2)
                $MemoryStoreU256(add($mem, 64), $t3)
                $MemoryStoreU256(add($mem, 96), $t4)
                $t5 := $mem
            }
            // return $t5
            $result := $t5
        }

        function A1_option_none$A2_U256_U256$() -> $result {
            let $t0, $t1
            // $t0 := vector::empty<#0>()
            $t0 := A1_vector_empty$A2_U256_U256$()
            // $t1 := pack 0x1::option::Option<#0>($t0)
            {
                let $mem := $Malloc(32)
                $MemoryStoreU256(add($mem, 0), $t0)
                $t1 := $mem
            }
            // return $t1
            $result := $t1
        }

        function A1_vector_empty$A2_U256_U256$() -> vector {
            vector := $Malloc(96)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function A1_option_none$vec$u8$$() -> $result {
            let $t0, $t1
            // $t0 := vector::empty<#0>()
            $t0 := A1_vector_empty$vec$u8$$()
            // $t1 := pack 0x1::option::Option<#0>($t0)
            {
                let $mem := $Malloc(32)
                $MemoryStoreU256(add($mem, 0), $t0)
                $t1 := $mem
            }
            // return $t1
            $result := $t1
        }

        function A1_vector_empty$vec$u8$$() -> vector {
            vector := $Malloc(96)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function A1_option_some$vec$u8$$(e) -> $result {
            let $t1, $t2
            // $t1 := vector::singleton<#0>($t0)
            $t1 := A1_vector_singleton$vec$u8$$(e)
            // $t2 := pack 0x1::option::Option<#0>($t1)
            {
                let $mem := $Malloc(32)
                $MemoryStoreU256(add($mem, 0), $t1)
                $t2 := $mem
            }
            // return $t2
            $result := $t2
        }

        function A1_vector_singleton$vec$u8$$(e) -> $result {
            let $t2, $t3
            let $locals := $Malloc(32)
            // $t1 := vector::empty<#0>()
            mstore($locals, A1_vector_empty$vec$u8$$())
            // $t2 := borrow_local($t1)
            $t2 := $MakePtr(false, $locals)
            // vector::push_back<#0>($t2, $t0)
            A1_vector_push_back$vec$u8$$($t2, e)
            // $t3 := move($t1)
            $t3 := mload($locals)
            // return $t3
            $result := $t3
            $Free($locals, 32)
        }

        function A1_vector_push_back$vec$u8$$(v_ref, e) {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 32)))
            $StoreU256(e_ptr, e)
            if $IsStoragePtr(e_ptr) {
                let e_offs := $OffsetPtr(e_ptr)
                let $linked_dst_2300595445 := $NewLinkedStorageBase(0x89204cf5)
                let $size_2300595445 := $MemoryLoadU64(e)
                let $data_size_2300595445 := mul($size_2300595445, 1)
                $AlignedStorageStore($linked_dst_2300595445, mload(e))
                let $data_src_2300595445 := add(e, 32)
                let $data_dst_2300595445 := add($linked_dst_2300595445, 32)
                for { let $offs_2300595445 := 0 } lt($offs_2300595445, $data_size_2300595445) { $offs_2300595445 := add($offs_2300595445, 32)} {
                    $AlignedStorageStore(add($data_dst_2300595445, $offs_2300595445), mload(add($data_src_2300595445, $offs_2300595445)))
                    $Free(e, add($data_size_2300595445, 32))
                }
                $AlignedStorageStore(e_offs, $linked_dst_2300595445)
            }
            size := add(size, 1)
            $StoreU64(v_ptr, size)
            let capacity := $LoadU64($IndexPtr(v_ptr, 8))
            if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                let new_v_offs := $ResizeVector(v_offs, capacity, 32)
                $StoreU256(v_ref, new_v_offs)
            }
        }
        function A1_option_none$u64$() -> $result {
            let $t0, $t1
            // $t0 := vector::empty<#0>()
            $t0 := A1_vector_empty$u64$()
            // $t1 := pack 0x1::option::Option<#0>($t0)
            {
                let $mem := $Malloc(32)
                $MemoryStoreU256(add($mem, 0), $t0)
                $t1 := $mem
            }
            // return $t1
            $result := $t1
        }

        function A1_vector_empty$u64$() -> vector {
            vector := $Malloc(48)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function A1_vector_push_back$u8$(v_ref, e) {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 1)))
            $StoreU8(e_ptr, e)
            size := add(size, 1)
            $StoreU64(v_ptr, size)
            let capacity := $LoadU64($IndexPtr(v_ptr, 8))
            if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                let new_v_offs := $ResizeVector(v_offs, capacity, 1)
                $StoreU256(v_ref, new_v_offs)
            }
        }
        function A1_vector_empty$u8$() -> vector {
            vector := $Malloc(34)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $MakeTypeStorageBase(category, type_hash, id) -> offs {
          offs := or(shl(252, category), or(shl(220, type_hash), shl(60, id)))
        }
        function $NewLinkedStorageBase(type_hash) -> offs {
          let key := $StorageKey(1, 1)
          let handle := sload(key)
          sstore(key, add(handle, 1))
          offs := $MakeTypeStorageBase(1, type_hash, handle)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $LoadU8(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU8(offs)
          }
          default {
            val := $StorageLoadU8(offs)
          }
        }
        function $MemoryLoadU8(offs) -> val {
          val := $MemoryLoadBytes(offs, 1)
        }
        function $StorageLoadU8(offs) -> val {
          val := $StorageLoadBytes(offs, 1)
        }
        function $StoreU8(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU8(offs, val)
          }
          default {
            $StorageStoreU8(offs, val)
          }
        }
        function $MemoryStoreU8(offs, val) {
          // Shortcut via special instruction
          mstore8(offs, val)
        }
        function $StorageStoreU8(offs, val) {
          $StorageStoreBytes(offs, 1, val)
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $StoreU64(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU64(offs, val)
          }
          default {
            $StorageStoreU64(offs, val)
          }
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $StorageStoreU64(offs, val) {
          $StorageStoreBytes(offs, 8, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $StoreU256(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU256(offs, val)
          }
          default {
            $StorageStoreU256(offs, val)
          }
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $StorageStoreU256(offs, val) {
          $StorageStoreBytes(offs, 32, val)
        }
        function $AlignedStorageLoad(offs) -> val {
          let word_offs := shr(5, offs)
          val := sload($StorageKey(0, word_offs))
        }
        function $AlignedStorageStore(offs, val) {
          let word_offs := shr(5, offs)
          sstore($StorageKey(0, word_offs), val)
        }
        function $CopyMemory(src, dst, size) {
          let num_words, overflow_bytes := $ToWordOffs(size)
          let i := 0
          for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
            mstore(add(dst, i), mload(add(src, i)))
          }
          if overflow_bytes {
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let dst_word := and(mload(add(dst, overflow_offs)), mask)
            let src_word := and(mload(add(src, overflow_offs)), not(mask))
            mstore(add(dst, overflow_offs), or(dst_word, src_word))
          }
        }
        function $ResizeVector(v_offs, capacity, type_size) -> new_v_offs {
            let new_capacity := mul(capacity, 2)
            let data_size := add(32, mul(capacity, type_size))
            let new_data_size := add(32, mul(new_capacity, type_size))
            new_v_offs := $Malloc(new_data_size)
            $CopyMemory(v_offs, new_v_offs, data_size)
            // update capacity at new location
            $MemoryStoreU64(add(new_v_offs, 8), new_capacity)
            $Free(v_offs, data_size)
        }
        function $GtEq(x, y) -> r {
            r := or(gt(x, y), eq(x, y))
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
        function $ClosestGreaterPowerOfTwo(x) -> r {
            r := or(r, shr(1, x))
            r := or(r, shr(2, r))
            r := or(r, shr(4, r))
            r := or(r, shr(8, r))
            r := or(r, shr(16, r))
            r := or(r, shr(32, r))
            r := add(x, 1)
        }
    }
}
===> Test result of M::extract_err_data: Succeed(Stopped) (used_gas=6994): []

// test of M::extract_err_reason
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_M_extract_err_reason" {
    code {
        mstore(0, memoryguard(160))
        A2_M_extract_err_reason()
        return (0, 0)
        function A2_M_extract_err_reason() {
            let v2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21
            let $locals := $Malloc(64)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t8 := 105
                    $t8 := 105
                    // abort($t8)
                    $Abort($t8)
                }
                case 4 {
                    // $t0 := vector::empty<u8>()
                    mstore($locals, A1_vector_empty$u8$())
                    // $t3 := borrow_local($t0)
                    $t3 := $MakePtr(false, $locals)
                    // $t4 := 42
                    $t4 := 42
                    // vector::push_back<u8>($t3, $t4)
                    A1_vector_push_back$u8$($t3, $t4)
                    // $t5 := move($t0)
                    $t5 := mload($locals)
                    // $t1 := M::pack_err_reason<u64>($t5)
                    v2 := A2_M_pack_err_reason$u64$($t5)
                    // $t6 := borrow_local($t1)
                    $t6 := $MakePtr(false, v2)
                    // $t7 := ExternalResult::is_err_reason<u64>($t6)
                    $t7 := A2_ExternalResult_is_err_reason$u64$($t6)
                    // if ($t7) goto L1 else goto L0
                    switch $t7
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t9 := move($t1)
                    $t9 := v2
                    // $t2 := ExternalResult::unwrap_err_reason<u64>($t9)
                    mstore(add($locals, 32), A2_ExternalResult_unwrap_err_reason$u64$($t9))
                    // $t10 := borrow_local($t2)
                    $t10 := $MakePtr(false, add($locals, 32))
                    // $t11 := vector::length<u8>($t10)
                    $t11 := A1_vector_length$u8$($t10)
                    // $t12 := 1
                    $t12 := 1
                    // $t13 := ==($t11, $t12)
                    $t13 := $Eq($t11, $t12)
                    // if ($t13) goto L4 else goto L3
                    switch $t13
                    case 0  { $block := 7 }
                    default { $block := 6 }
                }
                case 6 {
                    // label L4
                    // goto L5
                    $block := 8
                }
                case 7 {
                    // label L3
                    // $t14 := 106
                    $t14 := 106
                    // abort($t14)
                    $Abort($t14)
                }
                case 8 {
                    // label L5
                    // $t15 := borrow_local($t2)
                    $t15 := $MakePtr(false, add($locals, 32))
                    // $t16 := 0
                    $t16 := 0
                    // $t17 := vector::borrow<u8>($t15, $t16)
                    $t17 := A1_vector_borrow$u8$($t15, $t16)
                    // $t18 := read_ref($t17)
                    $t18 := $LoadU8($t17)
                    // $t19 := 42
                    $t19 := 42
                    // $t20 := ==($t18, $t19)
                    $t20 := $Eq($t18, $t19)
                    // if ($t20) goto L7 else goto L6
                    switch $t20
                    case 0  { $block := 10 }
                    default { $block := 9 }
                }
                case 9 {
                    // label L7
                    // goto L8
                    $block := 11
                }
                case 10 {
                    // label L6
                    // $t21 := 107
                    $t21 := 107
                    // abort($t21)
                    $Abort($t21)
                }
                case 11 {
                    // label L8
                    // return ()
                    $Free($locals, 64)
                    leave
                }
            }
        }

        function A1_vector_borrow$u8$(v_ref, i) -> e_ptr {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            if $GtEq(i, size) { $AbortBuiltin() }
            e_ptr := $IndexPtr(v_ptr, add(32, mul(i, 1)))
        }
        function A1_vector_length$u8$(v_ref) -> len {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            len := $LoadU64(v_ptr)
        }
        function A2_ExternalResult_unwrap_err_reason$u64$(result) -> $result {
            let err_data, err_reason, panic_code, $t4, $t5, $t6, $t7, $t8
            // ($t4, $t5, $t6, $t7) := unpack 0x2::ExternalResult::ExternalResult<#0>($t0)
            $t4 := $MemoryLoadU256(add(result, 0))
            $t5 := $MemoryLoadU256(add(result, 32))
            $t6 := $MemoryLoadU256(add(result, 64))
            $t7 := $MemoryLoadU256(add(result, 96))
            $Free(result, 128)
            // option::destroy_none<#0>($t4)
            A1_option_destroy_none$u64$($t4)
            // option::destroy_none<vector<u8>>($t5)
            A1_option_destroy_none$vec$u8$$($t5)
            // option::destroy_none<0x2::U256::U256>($t7)
            A1_option_destroy_none$A2_U256_U256$($t7)
            // $t8 := option::destroy_some<vector<u8>>($t6)
            $t8 := A1_option_destroy_some$vec$u8$$($t6)
            // return $t8
            $result := $t8
        }

        function A1_option_destroy_some$vec$u8$$(t) -> $result {
            let elem, $t3, $t4, $t5, $t6, $t7, $t8, $t9
            let $locals := $Malloc(32)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t5 := 262145
                    $t5 := 262145
                    // abort($t5)
                    $Abort($t5)
                }
                case 4 {
                    // $t3 := borrow_local($t0)
                    $t3 := $MakePtr(false, t)
                    // $t4 := option::is_some<#0>($t3)
                    $t4 := A1_option_is_some$vec$u8$$($t3)
                    // if ($t4) goto L1 else goto L0
                    switch $t4
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t6 := move($t0)
                    $t6 := t
                    // $t2 := unpack 0x1::option::Option<#0>($t6)
                    mstore($locals, $MemoryLoadU256(add($t6, 0)))
                    $Free($t6, 32)
                    // $t7 := borrow_local($t2)
                    $t7 := $MakePtr(false, $locals)
                    // $t8 := vector::pop_back<#0>($t7)
                    $t8 := A1_vector_pop_back$vec$u8$$($t7)
                    // $t9 := move($t2)
                    $t9 := mload($locals)
                    // vector::destroy_empty<#0>($t9)
                    A1_vector_destroy_empty$vec$u8$$($t9)
                    // return $t8
                    $result := $t8
                    $Free($locals, 32)
                    leave
                }
            }
        }

        function A1_vector_destroy_empty$vec$u8$$(v) {
            let size := $MemoryLoadU64(v)
            if $LogicalNot(iszero(size)) { $AbortBuiltin() }
            let capacity := $MemoryLoadU64(add(v, 8))
            $Free(v, add(32, mul(capacity, 32)))
        }
        function A1_vector_pop_back$vec$u8$$(v_ref) -> e {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            if iszero(size) { $AbortBuiltin() }
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(sub(size, 1), 32)))
            e := $LoadU256(e_ptr)
            if $IsStoragePtr(e_ptr) {
                let e_offs := $OffsetPtr(e_ptr)
                let linked_src := $AlignedStorageLoad(e_offs)
                let $size_2300595445 := $StorageLoadU64(linked_src)
                let $capacity_2300595445 := $ClosestGreaterPowerOfTwo($size_2300595445)
                e := $Malloc(add(32, mul($capacity_2300595445, 1)))
                let $data_size_2300595445 := mul($size_2300595445, 1)
                mstore(e, $AlignedStorageLoad(linked_src))
                $MemoryStoreU64(add(e, 8), $capacity_2300595445)
                let $data_src_2300595445 := add(linked_src, 32)
                let $data_dst_2300595445 := add(e, 32)
                for { let $offs_2300595445 := 0 } lt($offs_2300595445, $data_size_2300595445) { $offs_2300595445 := add($offs_2300595445, 32)} {
                    mstore(add($data_dst_2300595445, $offs_2300595445), $AlignedStorageLoad(add($data_src_2300595445, $offs_2300595445)))
                    $AlignedStorageStore(add($data_src_2300595445, $offs_2300595445), 0)
                }
                $AlignedStorageStore(e_offs, 0)
            }
            $StoreU64(v_ptr, sub(size, 1))
        }
        function A1_option_is_some$vec$u8$$(t) -> $result {
            let $t1, $t2, $t3
            // $t1 := borrow_field<0x1::option::Option<#0>>.vec($t0)
            $t1 := t
            // $t2 := vector::is_empty<#0>($t1)
            $t2 := A1_vector_is_empty$vec$u8$$($t1)
            // $t3 := !($t2)
            $t3 := $LogicalNot($t2)
            // return $t3
            $result := $t3
        }

        function A1_vector_is_empty$vec$u8$$(v) -> $result {
            let $t1, $t2, $t3
            // $t1 := vector::length<#0>($t0)
            $t1 := A1_vector_length$vec$u8$$(v)
            // $t2 := 0
            $t2 := 0
            // $t3 := ==($t1, $t2)
            $t3 := $Eq($t1, $t2)
            // return $t3
            $result := $t3
        }

        function A1_vector_length$vec$u8$$(v_ref) -> len {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            len := $LoadU64(v_ptr)
        }
        function A1_option_destroy_none$A2_U256_U256$(t) {
            let $t1, $t2, $t3, $t4, $t5
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t3 := 262144
                    $t3 := 262144
                    // abort($t3)
                    $Abort($t3)
                }
                case 4 {
                    // $t1 := borrow_local($t0)
                    $t1 := $MakePtr(false, t)
                    // $t2 := option::is_none<#0>($t1)
                    $t2 := A1_option_is_none$A2_U256_U256$($t1)
                    // if ($t2) goto L1 else goto L0
                    switch $t2
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t4 := move($t0)
                    $t4 := t
                    // $t5 := unpack 0x1::option::Option<#0>($t4)
                    $t5 := $MemoryLoadU256(add($t4, 0))
                    $Free($t4, 32)
                    // vector::destroy_empty<#0>($t5)
                    A1_vector_destroy_empty$A2_U256_U256$($t5)
                    // return ()
                    leave
                }
            }
        }

        function A1_vector_destroy_empty$A2_U256_U256$(v) {
            let size := $MemoryLoadU64(v)
            if $LogicalNot(iszero(size)) { $AbortBuiltin() }
            let capacity := $MemoryLoadU64(add(v, 8))
            $Free(v, add(32, mul(capacity, 32)))
        }
        function A1_option_is_none$A2_U256_U256$(t) -> $result {
            let $t1, $t2
            // $t1 := borrow_field<0x1::option::Option<#0>>.vec($t0)
            $t1 := t
            // $t2 := vector::is_empty<#0>($t1)
            $t2 := A1_vector_is_empty$A2_U256_U256$($t1)
            // return $t2
            $result := $t2
        }

        function A1_vector_is_empty$A2_U256_U256$(v) -> $result {
            let $t1, $t2, $t3
            // $t1 := vector::length<#0>($t0)
            $t1 := A1_vector_length$A2_U256_U256$(v)
            // $t2 := 0
            $t2 := 0
            // $t3 := ==($t1, $t2)
            $t3 := $Eq($t1, $t2)
            // return $t3
            $result := $t3
        }

        function A1_vector_length$A2_U256_U256$(v_ref) -> len {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            len := $LoadU64(v_ptr)
        }
        function A1_option_destroy_none$vec$u8$$(t) {
            let $t1, $t2, $t3, $t4, $t5
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t3 := 262144
                    $t3 := 262144
                    // abort($t3)
                    $Abort($t3)
                }
                case 4 {
                    // $t1 := borrow_local($t0)
                    $t1 := $MakePtr(false, t)
                    // $t2 := option::is_none<#0>($t1)
                    $t2 := A1_option_is_none$vec$u8$$($t1)
                    // if ($t2) goto L1 else goto L0
                    switch $t2
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t4 := move($t0)
                    $t4 := t
                    // $t5 := unpack 0x1::option::Option<#0>($t4)
                    $t5 := $MemoryLoadU256(add($t4, 0))
                    $Free($t4, 32)
                    // vector::destroy_empty<#0>($t5)
                    A1_vector_destroy_empty$vec$u8$$($t5)
                    // return ()
                    leave
                }
            }
        }

        function A1_option_is_none$vec$u8$$(t) -> $result {
            let $t1, $t2
            // $t1 := borrow_field<0x1::option::Option<#0>>.vec($t0)
            $t1 := t
            // $t2 := vector::is_empty<#0>($t1)
            $t2 := A1_vector_is_empty$vec$u8$$($t1)
            // return $t2
            $result := $t2
        }

        function A1_option_destroy_none$u64$(t) {
            let $t1, $t2, $t3, $t4, $t5
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t3 := 262144
                    $t3 := 262144
                    // abort($t3)
                    $Abort($t3)
                }
                case 4 {
                    // $t1 := borrow_local($t0)
                    $t1 := $MakePtr(false, t)
                    // $t2 := option::is_none<#0>($t1)
                    $t2 := A1_option_is_none$u64$($t1)
                    // if ($t2) goto L1 else goto L0
                    switch $t2
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t4 := move($t0)
                    $t4 := t
                    // $t5 := unpack 0x1::option::Option<#0>($t4)
                    $t5 := $MemoryLoadU256(add($t4, 0))
                    $Free($t4, 32)
                    // vector::destroy_empty<#0>($t5)
                    A1_vector_destroy_empty$u64$($t5)
                    // return ()
                    leave
                }
            }
        }

        function A1_vector_destroy_empty$u64$(v) {
            let size := $MemoryLoadU64(v)
            if $LogicalNot(iszero(size)) { $AbortBuiltin() }
            let capacity := $MemoryLoadU64(add(v, 8))
            $Free(v, add(32, mul(capacity, 8)))
        }
        function A1_option_is_none$u64$(t) -> $result {
            let $t1, $t2
            // $t1 := borrow_field<0x1::option::Option<#0>>.vec($t0)
            $t1 := t
            // $t2 := vector::is_empty<#0>($t1)
            $t2 := A1_vector_is_empty$u64$($t1)
            // return $t2
            $result := $t2
        }

        function A1_vector_is_empty$u64$(v) -> $result {
            let $t1, $t2, $t3
            // $t1 := vector::length<#0>($t0)
            $t1 := A1_vector_length$u64$(v)
            // $t2 := 0
            $t2 := 0
            // $t3 := ==($t1, $t2)
            $t3 := $Eq($t1, $t2)
            // return $t3
            $result := $t3
        }

        function A1_vector_length$u64$(v_ref) -> len {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            len := $LoadU64(v_ptr)
        }
        function A2_ExternalResult_is_err_reason$u64$(result) -> $result {
            let $t1, $t2
            // $t1 := borrow_field<0x2::ExternalResult::ExternalResult<#0>>.err_reason($t0)
            {
                let $field_ptr := $IndexPtr(result, 64)
                $t1 := $MakePtr($IsStoragePtr($field_ptr), $LoadU256($field_ptr))
            }
            // $t2 := option::is_some<vector<u8>>($t1)
            $t2 := A1_option_is_some$vec$u8$$($t1)
            // return $t2
            $result := $t2
        }

        function A2_M_pack_err_reason$u64$(v) -> $result {
            let $t1
            // $t1 := ExternalResult::err_reason<#0>($t0)
            $t1 := A2_ExternalResult_err_reason$u64$(v)
            // return $t1
            $result := $t1
        }

        function A2_ExternalResult_err_reason$u64$(error) -> $result {
            let tmp_$1, tmp_$2, tmp_$3, tmp_$4, $t5, $t6, $t7, $t8, $t9
            // $t5 := option::none<#0>()
            $t5 := A1_option_none$u64$()
            // $t6 := option::some<vector<u8>>($t0)
            $t6 := A1_option_some$vec$u8$$(error)
            // $t7 := option::none<vector<u8>>()
            $t7 := A1_option_none$vec$u8$$()
            // $t8 := option::none<0x2::U256::U256>()
            $t8 := A1_option_none$A2_U256_U256$()
            // $t9 := pack 0x2::ExternalResult::ExternalResult<#0>($t5, $t7, $t6, $t8)
            {
                let $mem := $Malloc(128)
                $MemoryStoreU256(add($mem, 0), $t5)
                $MemoryStoreU256(add($mem, 32), $t7)
                $MemoryStoreU256(add($mem, 64), $t6)
                $MemoryStoreU256(add($mem, 96), $t8)
                $t9 := $mem
            }
            // return $t9
            $result := $t9
        }

        function A1_option_none$A2_U256_U256$() -> $result {
            let $t0, $t1
            // $t0 := vector::empty<#0>()
            $t0 := A1_vector_empty$A2_U256_U256$()
            // $t1 := pack 0x1::option::Option<#0>($t0)
            {
                let $mem := $Malloc(32)
                $MemoryStoreU256(add($mem, 0), $t0)
                $t1 := $mem
            }
            // return $t1
            $result := $t1
        }

        function A1_vector_empty$A2_U256_U256$() -> vector {
            vector := $Malloc(96)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function A1_option_none$vec$u8$$() -> $result {
            let $t0, $t1
            // $t0 := vector::empty<#0>()
            $t0 := A1_vector_empty$vec$u8$$()
            // $t1 := pack 0x1::option::Option<#0>($t0)
            {
                let $mem := $Malloc(32)
                $MemoryStoreU256(add($mem, 0), $t0)
                $t1 := $mem
            }
            // return $t1
            $result := $t1
        }

        function A1_vector_empty$vec$u8$$() -> vector {
            vector := $Malloc(96)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function A1_option_some$vec$u8$$(e) -> $result {
            let $t1, $t2
            // $t1 := vector::singleton<#0>($t0)
            $t1 := A1_vector_singleton$vec$u8$$(e)
            // $t2 := pack 0x1::option::Option<#0>($t1)
            {
                let $mem := $Malloc(32)
                $MemoryStoreU256(add($mem, 0), $t1)
                $t2 := $mem
            }
            // return $t2
            $result := $t2
        }

        function A1_vector_singleton$vec$u8$$(e) -> $result {
            let $t2, $t3
            let $locals := $Malloc(32)
            // $t1 := vector::empty<#0>()
            mstore($locals, A1_vector_empty$vec$u8$$())
            // $t2 := borrow_local($t1)
            $t2 := $MakePtr(false, $locals)
            // vector::push_back<#0>($t2, $t0)
            A1_vector_push_back$vec$u8$$($t2, e)
            // $t3 := move($t1)
            $t3 := mload($locals)
            // return $t3
            $result := $t3
            $Free($locals, 32)
        }

        function A1_vector_push_back$vec$u8$$(v_ref, e) {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 32)))
            $StoreU256(e_ptr, e)
            if $IsStoragePtr(e_ptr) {
                let e_offs := $OffsetPtr(e_ptr)
                let $linked_dst_2300595445 := $NewLinkedStorageBase(0x89204cf5)
                let $size_2300595445 := $MemoryLoadU64(e)
                let $data_size_2300595445 := mul($size_2300595445, 1)
                $AlignedStorageStore($linked_dst_2300595445, mload(e))
                let $data_src_2300595445 := add(e, 32)
                let $data_dst_2300595445 := add($linked_dst_2300595445, 32)
                for { let $offs_2300595445 := 0 } lt($offs_2300595445, $data_size_2300595445) { $offs_2300595445 := add($offs_2300595445, 32)} {
                    $AlignedStorageStore(add($data_dst_2300595445, $offs_2300595445), mload(add($data_src_2300595445, $offs_2300595445)))
                    $Free(e, add($data_size_2300595445, 32))
                }
                $AlignedStorageStore(e_offs, $linked_dst_2300595445)
            }
            size := add(size, 1)
            $StoreU64(v_ptr, size)
            let capacity := $LoadU64($IndexPtr(v_ptr, 8))
            if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                let new_v_offs := $ResizeVector(v_offs, capacity, 32)
                $StoreU256(v_ref, new_v_offs)
            }
        }
        function A1_option_none$u64$() -> $result {
            let $t0, $t1
            // $t0 := vector::empty<#0>()
            $t0 := A1_vector_empty$u64$()
            // $t1 := pack 0x1::option::Option<#0>($t0)
            {
                let $mem := $Malloc(32)
                $MemoryStoreU256(add($mem, 0), $t0)
                $t1 := $mem
            }
            // return $t1
            $result := $t1
        }

        function A1_vector_empty$u64$() -> vector {
            vector := $Malloc(48)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function A1_vector_push_back$u8$(v_ref, e) {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 1)))
            $StoreU8(e_ptr, e)
            size := add(size, 1)
            $StoreU64(v_ptr, size)
            let capacity := $LoadU64($IndexPtr(v_ptr, 8))
            if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                let new_v_offs := $ResizeVector(v_offs, capacity, 1)
                $StoreU256(v_ref, new_v_offs)
            }
        }
        function A1_vector_empty$u8$() -> vector {
            vector := $Malloc(34)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $MakeTypeStorageBase(category, type_hash, id) -> offs {
          offs := or(shl(252, category), or(shl(220, type_hash), shl(60, id)))
        }
        function $NewLinkedStorageBase(type_hash) -> offs {
          let key := $StorageKey(1, 1)
          let handle := sload(key)
          sstore(key, add(handle, 1))
          offs := $MakeTypeStorageBase(1, type_hash, handle)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $LoadU8(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU8(offs)
          }
          default {
            val := $StorageLoadU8(offs)
          }
        }
        function $MemoryLoadU8(offs) -> val {
          val := $MemoryLoadBytes(offs, 1)
        }
        function $StorageLoadU8(offs) -> val {
          val := $StorageLoadBytes(offs, 1)
        }
        function $StoreU8(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU8(offs, val)
          }
          default {
            $StorageStoreU8(offs, val)
          }
        }
        function $MemoryStoreU8(offs, val) {
          // Shortcut via special instruction
          mstore8(offs, val)
        }
        function $StorageStoreU8(offs, val) {
          $StorageStoreBytes(offs, 1, val)
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $StoreU64(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU64(offs, val)
          }
          default {
            $StorageStoreU64(offs, val)
          }
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $StorageStoreU64(offs, val) {
          $StorageStoreBytes(offs, 8, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $StoreU256(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU256(offs, val)
          }
          default {
            $StorageStoreU256(offs, val)
          }
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $StorageStoreU256(offs, val) {
          $StorageStoreBytes(offs, 32, val)
        }
        function $AlignedStorageLoad(offs) -> val {
          let word_offs := shr(5, offs)
          val := sload($StorageKey(0, word_offs))
        }
        function $AlignedStorageStore(offs, val) {
          let word_offs := shr(5, offs)
          sstore($StorageKey(0, word_offs), val)
        }
        function $CopyMemory(src, dst, size) {
          let num_words, overflow_bytes := $ToWordOffs(size)
          let i := 0
          for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
            mstore(add(dst, i), mload(add(src, i)))
          }
          if overflow_bytes {
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let dst_word := and(mload(add(dst, overflow_offs)), mask)
            let src_word := and(mload(add(src, overflow_offs)), not(mask))
            mstore(add(dst, overflow_offs), or(dst_word, src_word))
          }
        }
        function $ResizeVector(v_offs, capacity, type_size) -> new_v_offs {
            let new_capacity := mul(capacity, 2)
            let data_size := add(32, mul(capacity, type_size))
            let new_data_size := add(32, mul(new_capacity, type_size))
            new_v_offs := $Malloc(new_data_size)
            $CopyMemory(v_offs, new_v_offs, data_size)
            // update capacity at new location
            $MemoryStoreU64(add(new_v_offs, 8), new_capacity)
            $Free(v_offs, data_size)
        }
        function $GtEq(x, y) -> r {
            r := or(gt(x, y), eq(x, y))
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
        function $ClosestGreaterPowerOfTwo(x) -> r {
            r := or(r, shr(1, x))
            r := or(r, shr(2, r))
            r := or(r, shr(4, r))
            r := or(r, shr(8, r))
            r := or(r, shr(16, r))
            r := or(r, shr(32, r))
            r := add(x, 1)
        }
    }
}
===> Test result of M::extract_err_reason: Succeed(Stopped) (used_gas=6988): []

// test of M::extract_panic_code
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_M_extract_panic_code" {
    code {
        mstore(0, memoryguard(160))
        A2_M_extract_panic_code()
        return (0, 0)
        function A2_M_extract_panic_code() {
            let v2, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t5 := 108
                    $t5 := 108
                    // abort($t5)
                    $Abort($t5)
                }
                case 4 {
                    // $t1 := 42
                    $t1 := 42
                    // $t2 := U256::u256_from_u128($t1)
                    $t2 := A2_U256_u256_from_u128($t1)
                    // $t0 := M::pack_panic_code<u64>($t2)
                    v2 := A2_M_pack_panic_code$u64$($t2)
                    // $t3 := borrow_local($t0)
                    $t3 := $MakePtr(false, v2)
                    // $t4 := ExternalResult::is_panic<u64>($t3)
                    $t4 := A2_ExternalResult_is_panic$u64$($t3)
                    // if ($t4) goto L1 else goto L0
                    switch $t4
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t6 := move($t0)
                    $t6 := v2
                    // $t7 := ExternalResult::unwrap_panic<u64>($t6)
                    $t7 := A2_ExternalResult_unwrap_panic$u64$($t6)
                    // $t8 := 42
                    $t8 := 42
                    // $t9 := U256::u256_from_u128($t8)
                    $t9 := A2_U256_u256_from_u128($t8)
                    // $t10 := ==($t7, $t9)
                    $t10 := $Eq($t7, $t9)
                    // if ($t10) goto L4 else goto L3
                    switch $t10
                    case 0  { $block := 7 }
                    default { $block := 6 }
                }
                case 6 {
                    // label L4
                    // goto L5
                    $block := 8
                }
                case 7 {
                    // label L3
                    // $t11 := 109
                    $t11 := 109
                    // abort($t11)
                    $Abort($t11)
                }
                case 8 {
                    // label L5
                    // return ()
                    leave
                }
            }
        }

        function A2_U256_u256_from_u128(lo) -> $result {
            let $t1, $t2
            // $t1 := 0
            $t1 := 0
            // $t2 := (u256)($t1, $t0)
            $t2 := $CastU256($t1, lo)
            // return $t2
            $result := $t2
        }

        function A2_ExternalResult_unwrap_panic$u64$(result) -> $result {
            let err_data, err_reason, panic_code, $t4, $t5, $t6, $t7, $t8
            // ($t4, $t5, $t6, $t7) := unpack 0x2::ExternalResult::ExternalResult<#0>($t0)
            $t4 := $MemoryLoadU256(add(result, 0))
            $t5 := $MemoryLoadU256(add(result, 32))
            $t6 := $MemoryLoadU256(add(result, 64))
            $t7 := $MemoryLoadU256(add(result, 96))
            $Free(result, 128)
            // option::destroy_none<#0>($t4)
            A1_option_destroy_none$u64$($t4)
            // option::destroy_none<vector<u8>>($t6)
            A1_option_destroy_none$vec$u8$$($t6)
            // option::destroy_none<vector<u8>>($t5)
            A1_option_destroy_none$vec$u8$$($t5)
            // $t8 := option::destroy_some<0x2::U256::U256>($t7)
            $t8 := A1_option_destroy_some$A2_U256_U256$($t7)
            // return $t8
            $result := $t8
        }

        function A1_option_destroy_some$A2_U256_U256$(t) -> $result {
            let elem, $t3, $t4, $t5, $t6, $t7, $t8, $t9
            let $locals := $Malloc(32)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t5 := 262145
                    $t5 := 262145
                    // abort($t5)
                    $Abort($t5)
                }
                case 4 {
                    // $t3 := borrow_local($t0)
                    $t3 := $MakePtr(false, t)
                    // $t4 := option::is_some<#0>($t3)
                    $t4 := A1_option_is_some$A2_U256_U256$($t3)
                    // if ($t4) goto L1 else goto L0
                    switch $t4
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t6 := move($t0)
                    $t6 := t
                    // $t2 := unpack 0x1::option::Option<#0>($t6)
                    mstore($locals, $MemoryLoadU256(add($t6, 0)))
                    $Free($t6, 32)
                    // $t7 := borrow_local($t2)
                    $t7 := $MakePtr(false, $locals)
                    // $t8 := vector::pop_back<#0>($t7)
                    $t8 := A1_vector_pop_back$A2_U256_U256$($t7)
                    // $t9 := move($t2)
                    $t9 := mload($locals)
                    // vector::destroy_empty<#0>($t9)
                    A1_vector_destroy_empty$A2_U256_U256$($t9)
                    // return $t8
                    $result := $t8
                    $Free($locals, 32)
                    leave
                }
            }
        }

        function A1_vector_destroy_empty$A2_U256_U256$(v) {
            let size := $MemoryLoadU64(v)
            if $LogicalNot(iszero(size)) { $AbortBuiltin() }
            let capacity := $MemoryLoadU64(add(v, 8))
            $Free(v, add(32, mul(capacity, 32)))
        }
        function A1_vector_pop_back$A2_U256_U256$(v_ref) -> e {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            if iszero(size) { $AbortBuiltin() }
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(sub(size, 1), 32)))
            e := $LoadU256(e_ptr)
            $StoreU64(v_ptr, sub(size, 1))
        }
        function A1_option_is_some$A2_U256_U256$(t) -> $result {
            let $t1, $t2, $t3
            // $t1 := borrow_field<0x1::option::Option<#0>>.vec($t0)
            $t1 := t
            // $t2 := vector::is_empty<#0>($t1)
            $t2 := A1_vector_is_empty$A2_U256_U256$($t1)
            // $t3 := !($t2)
            $t3 := $LogicalNot($t2)
            // return $t3
            $result := $t3
        }

        function A1_vector_is_empty$A2_U256_U256$(v) -> $result {
            let $t1, $t2, $t3
            // $t1 := vector::length<#0>($t0)
            $t1 := A1_vector_length$A2_U256_U256$(v)
            // $t2 := 0
            $t2 := 0
            // $t3 := ==($t1, $t2)
            $t3 := $Eq($t1, $t2)
            // return $t3
            $result := $t3
        }

        function A1_vector_length$A2_U256_U256$(v_ref) -> len {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            len := $LoadU64(v_ptr)
        }
        function A1_option_destroy_none$vec$u8$$(t) {
            let $t1, $t2, $t3, $t4, $t5
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t3 := 262144
                    $t3 := 262144
                    // abort($t3)
                    $Abort($t3)
                }
                case 4 {
                    // $t1 := borrow_local($t0)
                    $t1 := $MakePtr(false, t)
                    // $t2 := option::is_none<#0>($t1)
                    $t2 := A1_option_is_none$vec$u8$$($t1)
                    // if ($t2) goto L1 else goto L0
                    switch $t2
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t4 := move($t0)
                    $t4 := t
                    // $t5 := unpack 0x1::option::Option<#0>($t4)
                    $t5 := $MemoryLoadU256(add($t4, 0))
                    $Free($t4, 32)
                    // vector::destroy_empty<#0>($t5)
                    A1_vector_destroy_empty$vec$u8$$($t5)
                    // return ()
                    leave
                }
            }
        }

        function A1_vector_destroy_empty$vec$u8$$(v) {
            let size := $MemoryLoadU64(v)
            if $LogicalNot(iszero(size)) { $AbortBuiltin() }
            let capacity := $MemoryLoadU64(add(v, 8))
            $Free(v, add(32, mul(capacity, 32)))
        }
        function A1_option_is_none$vec$u8$$(t) -> $result {
            let $t1, $t2
            // $t1 := borrow_field<0x1::option::Option<#0>>.vec($t0)
            $t1 := t
            // $t2 := vector::is_empty<#0>($t1)
            $t2 := A1_vector_is_empty$vec$u8$$($t1)
            // return $t2
            $result := $t2
        }

        function A1_vector_is_empty$vec$u8$$(v) -> $result {
            let $t1, $t2, $t3
            // $t1 := vector::length<#0>($t0)
            $t1 := A1_vector_length$vec$u8$$(v)
            // $t2 := 0
            $t2 := 0
            // $t3 := ==($t1, $t2)
            $t3 := $Eq($t1, $t2)
            // return $t3
            $result := $t3
        }

        function A1_vector_length$vec$u8$$(v_ref) -> len {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            len := $LoadU64(v_ptr)
        }
        function A1_option_destroy_none$u64$(t) {
            let $t1, $t2, $t3, $t4, $t5
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t3 := 262144
                    $t3 := 262144
                    // abort($t3)
                    $Abort($t3)
                }
                case 4 {
                    // $t1 := borrow_local($t0)
                    $t1 := $MakePtr(false, t)
                    // $t2 := option::is_none<#0>($t1)
                    $t2 := A1_option_is_none$u64$($t1)
                    // if ($t2) goto L1 else goto L0
                    switch $t2
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t4 := move($t0)
                    $t4 := t
                    // $t5 := unpack 0x1::option::Option<#0>($t4)
                    $t5 := $MemoryLoadU256(add($t4, 0))
                    $Free($t4, 32)
                    // vector::destroy_empty<#0>($t5)
                    A1_vector_destroy_empty$u64$($t5)
                    // return ()
                    leave
                }
            }
        }

        function A1_vector_destroy_empty$u64$(v) {
            let size := $MemoryLoadU64(v)
            if $LogicalNot(iszero(size)) { $AbortBuiltin() }
            let capacity := $MemoryLoadU64(add(v, 8))
            $Free(v, add(32, mul(capacity, 8)))
        }
        function A1_option_is_none$u64$(t) -> $result {
            let $t1, $t2
            // $t1 := borrow_field<0x1::option::Option<#0>>.vec($t0)
            $t1 := t
            // $t2 := vector::is_empty<#0>($t1)
            $t2 := A1_vector_is_empty$u64$($t1)
            // return $t2
            $result := $t2
        }

        function A1_vector_is_empty$u64$(v) -> $result {
            let $t1, $t2, $t3
            // $t1 := vector::length<#0>($t0)
            $t1 := A1_vector_length$u64$(v)
            // $t2 := 0
            $t2 := 0
            // $t3 := ==($t1, $t2)
            $t3 := $Eq($t1, $t2)
            // return $t3
            $result := $t3
        }

        function A1_vector_length$u64$(v_ref) -> len {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            len := $LoadU64(v_ptr)
        }
        function A2_ExternalResult_is_panic$u64$(result) -> $result {
            let $t1, $t2
            // $t1 := borrow_field<0x2::ExternalResult::ExternalResult<#0>>.panic_code($t0)
            {
                let $field_ptr := $IndexPtr(result, 96)
                $t1 := $MakePtr($IsStoragePtr($field_ptr), $LoadU256($field_ptr))
            }
            // $t2 := option::is_some<0x2::U256::U256>($t1)
            $t2 := A1_option_is_some$A2_U256_U256$($t1)
            // return $t2
            $result := $t2
        }

        function A2_M_pack_panic_code$u64$(v) -> $result {
            let $t1
            // $t1 := ExternalResult::panic<#0>($t0)
            $t1 := A2_ExternalResult_panic$u64$(v)
            // return $t1
            $result := $t1
        }

        function A2_ExternalResult_panic$u64$(panic_code) -> $result {
            let tmp_$1, tmp_$2, tmp_$3, tmp_$4, $t5, $t6, $t7, $t8, $t9
            // $t5 := option::none<#0>()
            $t5 := A1_option_none$u64$()
            // $t6 := option::none<vector<u8>>()
            $t6 := A1_option_none$vec$u8$$()
            // $t7 := option::none<vector<u8>>()
            $t7 := A1_option_none$vec$u8$$()
            // $t8 := option::some<0x2::U256::U256>($t0)
            $t8 := A1_option_some$A2_U256_U256$(panic_code)
            // $t9 := pack 0x2::ExternalResult::ExternalResult<#0>($t5, $t7, $t6, $t8)
            {
                let $mem := $Malloc(128)
                $MemoryStoreU256(add($mem, 0), $t5)
                $MemoryStoreU256(add($mem, 32), $t7)
                $MemoryStoreU256(add($mem, 64), $t6)
                $MemoryStoreU256(add($mem, 96), $t8)
                $t9 := $mem
            }
            // return $t9
            $result := $t9
        }

        function A1_option_some$A2_U256_U256$(e) -> $result {
            let $t1, $t2
            // $t1 := vector::singleton<#0>($t0)
            $t1 := A1_vector_singleton$A2_U256_U256$(e)
            // $t2 := pack 0x1::option::Option<#0>($t1)
            {
                let $mem := $Malloc(32)
                $MemoryStoreU256(add($mem, 0), $t1)
                $t2 := $mem
            }
            // return $t2
            $result := $t2
        }

        function A1_vector_singleton$A2_U256_U256$(e) -> $result {
            let $t2, $t3
            let $locals := $Malloc(32)
            // $t1 := vector::empty<#0>()
            mstore($locals, A1_vector_empty$A2_U256_U256$())
            // $t2 := borrow_local($t1)
            $t2 := $MakePtr(false, $locals)
            // vector::push_back<#0>($t2, $t0)
            A1_vector_push_back$A2_U256_U256$($t2, e)
            // $t3 := move($t1)
            $t3 := mload($locals)
            // return $t3
            $result := $t3
            $Free($locals, 32)
        }

        function A1_vector_push_back$A2_U256_U256$(v_ref, e) {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 32)))
            $StoreU256(e_ptr, e)
            size := add(size, 1)
            $StoreU64(v_ptr, size)
            let capacity := $LoadU64($IndexPtr(v_ptr, 8))
            if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                let new_v_offs := $ResizeVector(v_offs, capacity, 32)
                $StoreU256(v_ref, new_v_offs)
            }
        }
        function A1_vector_empty$A2_U256_U256$() -> vector {
            vector := $Malloc(96)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function A1_option_none$vec$u8$$() -> $result {
            let $t0, $t1
            // $t0 := vector::empty<#0>()
            $t0 := A1_vector_empty$vec$u8$$()
            // $t1 := pack 0x1::option::Option<#0>($t0)
            {
                let $mem := $Malloc(32)
                $MemoryStoreU256(add($mem, 0), $t0)
                $t1 := $mem
            }
            // return $t1
            $result := $t1
        }

        function A1_vector_empty$vec$u8$$() -> vector {
            vector := $Malloc(96)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function A1_option_none$u64$() -> $result {
            let $t0, $t1
            // $t0 := vector::empty<#0>()
            $t0 := A1_vector_empty$u64$()
            // $t1 := pack 0x1::option::Option<#0>($t0)
            {
                let $mem := $Malloc(32)
                $MemoryStoreU256(add($mem, 0), $t0)
                $t1 := $mem
            }
            // return $t1
            $result := $t1
        }

        function A1_vector_empty$u64$() -> vector {
            vector := $Malloc(48)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $StoreU64(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU64(offs, val)
          }
          default {
            $StorageStoreU64(offs, val)
          }
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $StorageStoreU64(offs, val) {
          $StorageStoreBytes(offs, 8, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $StoreU256(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU256(offs, val)
          }
          default {
            $StorageStoreU256(offs, val)
          }
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $StorageStoreU256(offs, val) {
          $StorageStoreBytes(offs, 32, val)
        }
        function $CopyMemory(src, dst, size) {
          let num_words, overflow_bytes := $ToWordOffs(size)
          let i := 0
          for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
            mstore(add(dst, i), mload(add(src, i)))
          }
          if overflow_bytes {
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let dst_word := and(mload(add(dst, overflow_offs)), mask)
            let src_word := and(mload(add(src, overflow_offs)), not(mask))
            mstore(add(dst, overflow_offs), or(dst_word, src_word))
          }
        }
        function $ResizeVector(v_offs, capacity, type_size) -> new_v_offs {
            let new_capacity := mul(capacity, 2)
            let data_size := add(32, mul(capacity, type_size))
            let new_data_size := add(32, mul(new_capacity, type_size))
            new_v_offs := $Malloc(new_data_size)
            $CopyMemory(v_offs, new_v_offs, data_size)
            // update capacity at new location
            $MemoryStoreU64(add(new_v_offs, 8), new_capacity)
            $Free(v_offs, data_size)
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
        function $CastU256(hi, lo) -> r {
            if gt(hi, 0xffffffffffffffffffffffffffffffff) { $AbortBuiltin() }
            if gt(lo, 0xffffffffffffffffffffffffffffffff) { $AbortBuiltin() }
            r := add(shl(128, hi), lo)
        }
    }
}
===> Test result of M::extract_panic_code: Succeed(Stopped) (used_gas=5168): []

// test of M::extract_value
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_M_extract_value" {
    code {
        mstore(0, memoryguard(160))
        A2_M_extract_value()
        return (0, 0)
        function A2_M_extract_value() {
            let v2, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t4 := 100
                    $t4 := 100
                    // abort($t4)
                    $Abort($t4)
                }
                case 4 {
                    // $t1 := 100
                    $t1 := 100
                    // $t0 := M::pack_value<u64>($t1)
                    v2 := A2_M_pack_value$u64$($t1)
                    // $t2 := borrow_local($t0)
                    $t2 := $MakePtr(false, v2)
                    // $t3 := ExternalResult::is_ok<u64>($t2)
                    $t3 := A2_ExternalResult_is_ok$u64$($t2)
                    // if ($t3) goto L1 else goto L0
                    switch $t3
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t5 := move($t0)
                    $t5 := v2
                    // $t6 := ExternalResult::unwrap<u64>($t5)
                    $t6 := A2_ExternalResult_unwrap$u64$($t5)
                    // $t7 := 100
                    $t7 := 100
                    // $t8 := ==($t6, $t7)
                    $t8 := $Eq($t6, $t7)
                    // if ($t8) goto L4 else goto L3
                    switch $t8
                    case 0  { $block := 7 }
                    default { $block := 6 }
                }
                case 6 {
                    // label L4
                    // goto L5
                    $block := 8
                }
                case 7 {
                    // label L3
                    // $t9 := 101
                    $t9 := 101
                    // abort($t9)
                    $Abort($t9)
                }
                case 8 {
                    // label L5
                    // return ()
                    leave
                }
            }
        }

        function A2_ExternalResult_unwrap$u64$(result) -> $result {
            let err_data, err_reason, panic_code, value, $t5, $t6, $t7, $t8, $t9
            // ($t5, $t6, $t7, $t8) := unpack 0x2::ExternalResult::ExternalResult<#0>($t0)
            $t5 := $MemoryLoadU256(add(result, 0))
            $t6 := $MemoryLoadU256(add(result, 32))
            $t7 := $MemoryLoadU256(add(result, 64))
            $t8 := $MemoryLoadU256(add(result, 96))
            $Free(result, 128)
            // option::destroy_none<vector<u8>>($t6)
            A1_option_destroy_none$vec$u8$$($t6)
            // option::destroy_none<vector<u8>>($t7)
            A1_option_destroy_none$vec$u8$$($t7)
            // option::destroy_none<0x2::U256::U256>($t8)
            A1_option_destroy_none$A2_U256_U256$($t8)
            // $t9 := option::destroy_some<#0>($t5)
            $t9 := A1_option_destroy_some$u64$($t5)
            // return $t9
            $result := $t9
        }

        function A1_option_destroy_some$u64$(t) -> $result {
            let elem, $t3, $t4, $t5, $t6, $t7, $t8, $t9
            let $locals := $Malloc(32)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t5 := 262145
                    $t5 := 262145
                    // abort($t5)
                    $Abort($t5)
                }
                case 4 {
                    // $t3 := borrow_local($t0)
                    $t3 := $MakePtr(false, t)
                    // $t4 := option::is_some<#0>($t3)
                    $t4 := A1_option_is_some$u64$($t3)
                    // if ($t4) goto L1 else goto L0
                    switch $t4
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t6 := move($t0)
                    $t6 := t
                    // $t2 := unpack 0x1::option::Option<#0>($t6)
                    mstore($locals, $MemoryLoadU256(add($t6, 0)))
                    $Free($t6, 32)
                    // $t7 := borrow_local($t2)
                    $t7 := $MakePtr(false, $locals)
                    // $t8 := vector::pop_back<#0>($t7)
                    $t8 := A1_vector_pop_back$u64$($t7)
                    // $t9 := move($t2)
                    $t9 := mload($locals)
                    // vector::destroy_empty<#0>($t9)
                    A1_vector_destroy_empty$u64$($t9)
                    // return $t8
                    $result := $t8
                    $Free($locals, 32)
                    leave
                }
            }
        }

        function A1_vector_destroy_empty$u64$(v) {
            let size := $MemoryLoadU64(v)
            if $LogicalNot(iszero(size)) { $AbortBuiltin() }
            let capacity := $MemoryLoadU64(add(v, 8))
            $Free(v, add(32, mul(capacity, 8)))
        }
        function A1_vector_pop_back$u64$(v_ref) -> e {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            if iszero(size) { $AbortBuiltin() }
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(sub(size, 1), 8)))
            e := $LoadU64(e_ptr)
            $StoreU64(v_ptr, sub(size, 1))
        }
        function A1_option_is_some$u64$(t) -> $result {
            let $t1, $t2, $t3
            // $t1 := borrow_field<0x1::option::Option<#0>>.vec($t0)
            $t1 := t
            // $t2 := vector::is_empty<#0>($t1)
            $t2 := A1_vector_is_empty$u64$($t1)
            // $t3 := !($t2)
            $t3 := $LogicalNot($t2)
            // return $t3
            $result := $t3
        }

        function A1_vector_is_empty$u64$(v) -> $result {
            let $t1, $t2, $t3
            // $t1 := vector::length<#0>($t0)
            $t1 := A1_vector_length$u64$(v)
            // $t2 := 0
            $t2 := 0
            // $t3 := ==($t1, $t2)
            $t3 := $Eq($t1, $t2)
            // return $t3
            $result := $t3
        }

        function A1_vector_length$u64$(v_ref) -> len {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            len := $LoadU64(v_ptr)
        }
        function A1_option_destroy_none$A2_U256_U256$(t) {
            let $t1, $t2, $t3, $t4, $t5
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t3 := 262144
                    $t3 := 262144
                    // abort($t3)
                    $Abort($t3)
                }
                case 4 {
                    // $t1 := borrow_local($t0)
                    $t1 := $MakePtr(false, t)
                    // $t2 := option::is_none<#0>($t1)
                    $t2 := A1_option_is_none$A2_U256_U256$($t1)
                    // if ($t2) goto L1 else goto L0
                    switch $t2
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t4 := move($t0)
                    $t4 := t
                    // $t5 := unpack 0x1::option::Option<#0>($t4)
                    $t5 := $MemoryLoadU256(add($t4, 0))
                    $Free($t4, 32)
                    // vector::destroy_empty<#0>($t5)
                    A1_vector_destroy_empty$A2_U256_U256$($t5)
                    // return ()
                    leave
                }
            }
        }

        function A1_vector_destroy_empty$A2_U256_U256$(v) {
            let size := $MemoryLoadU64(v)
            if $LogicalNot(iszero(size)) { $AbortBuiltin() }
            let capacity := $MemoryLoadU64(add(v, 8))
            $Free(v, add(32, mul(capacity, 32)))
        }
        function A1_option_is_none$A2_U256_U256$(t) -> $result {
            let $t1, $t2
            // $t1 := borrow_field<0x1::option::Option<#0>>.vec($t0)
            $t1 := t
            // $t2 := vector::is_empty<#0>($t1)
            $t2 := A1_vector_is_empty$A2_U256_U256$($t1)
            // return $t2
            $result := $t2
        }

        function A1_vector_is_empty$A2_U256_U256$(v) -> $result {
            let $t1, $t2, $t3
            // $t1 := vector::length<#0>($t0)
            $t1 := A1_vector_length$A2_U256_U256$(v)
            // $t2 := 0
            $t2 := 0
            // $t3 := ==($t1, $t2)
            $t3 := $Eq($t1, $t2)
            // return $t3
            $result := $t3
        }

        function A1_vector_length$A2_U256_U256$(v_ref) -> len {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            len := $LoadU64(v_ptr)
        }
        function A1_option_destroy_none$vec$u8$$(t) {
            let $t1, $t2, $t3, $t4, $t5
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t3 := 262144
                    $t3 := 262144
                    // abort($t3)
                    $Abort($t3)
                }
                case 4 {
                    // $t1 := borrow_local($t0)
                    $t1 := $MakePtr(false, t)
                    // $t2 := option::is_none<#0>($t1)
                    $t2 := A1_option_is_none$vec$u8$$($t1)
                    // if ($t2) goto L1 else goto L0
                    switch $t2
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t4 := move($t0)
                    $t4 := t
                    // $t5 := unpack 0x1::option::Option<#0>($t4)
                    $t5 := $MemoryLoadU256(add($t4, 0))
                    $Free($t4, 32)
                    // vector::destroy_empty<#0>($t5)
                    A1_vector_destroy_empty$vec$u8$$($t5)
                    // return ()
                    leave
                }
            }
        }

        function A1_vector_destroy_empty$vec$u8$$(v) {
            let size := $MemoryLoadU64(v)
            if $LogicalNot(iszero(size)) { $AbortBuiltin() }
            let capacity := $MemoryLoadU64(add(v, 8))
            $Free(v, add(32, mul(capacity, 32)))
        }
        function A1_option_is_none$vec$u8$$(t) -> $result {
            let $t1, $t2
            // $t1 := borrow_field<0x1::option::Option<#0>>.vec($t0)
            $t1 := t
            // $t2 := vector::is_empty<#0>($t1)
            $t2 := A1_vector_is_empty$vec$u8$$($t1)
            // return $t2
            $result := $t2
        }

        function A1_vector_is_empty$vec$u8$$(v) -> $result {
            let $t1, $t2, $t3
            // $t1 := vector::length<#0>($t0)
            $t1 := A1_vector_length$vec$u8$$(v)
            // $t2 := 0
            $t2 := 0
            // $t3 := ==($t1, $t2)
            $t3 := $Eq($t1, $t2)
            // return $t3
            $result := $t3
        }

        function A1_vector_length$vec$u8$$(v_ref) -> len {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            len := $LoadU64(v_ptr)
        }
        function A2_ExternalResult_is_ok$u64$(result) -> $result {
            let $t1, $t2
            // $t1 := borrow_field<0x2::ExternalResult::ExternalResult<#0>>.value($t0)
            {
                $t1 := $MakePtr($IsStoragePtr(result), $LoadU256(result))
            }
            // $t2 := option::is_some<#0>($t1)
            $t2 := A1_option_is_some$u64$($t1)
            // return $t2
            $result := $t2
        }

        function A2_M_pack_value$u64$(v) -> $result {
            let $t1
            // $t1 := ExternalResult::ok<#0>($t0)
            $t1 := A2_ExternalResult_ok$u64$(v)
            // return $t1
            $result := $t1
        }

        function A2_ExternalResult_ok$u64$(value) -> $result {
            let $t1, $t2, $t3, $t4, $t5
            // $t1 := option::some<#0>($t0)
            $t1 := A1_option_some$u64$(value)
            // $t2 := option::none<vector<u8>>()
            $t2 := A1_option_none$vec$u8$$()
            // $t3 := option::none<vector<u8>>()
            $t3 := A1_option_none$vec$u8$$()
            // $t4 := option::none<0x2::U256::U256>()
            $t4 := A1_option_none$A2_U256_U256$()
            // $t5 := pack 0x2::ExternalResult::ExternalResult<#0>($t1, $t2, $t3, $t4)
            {
                let $mem := $Malloc(128)
                $MemoryStoreU256(add($mem, 0), $t1)
                $MemoryStoreU256(add($mem, 32), $t2)
                $MemoryStoreU256(add($mem, 64), $t3)
                $MemoryStoreU256(add($mem, 96), $t4)
                $t5 := $mem
            }
            // return $t5
            $result := $t5
        }

        function A1_option_none$A2_U256_U256$() -> $result {
            let $t0, $t1
            // $t0 := vector::empty<#0>()
            $t0 := A1_vector_empty$A2_U256_U256$()
            // $t1 := pack 0x1::option::Option<#0>($t0)
            {
                let $mem := $Malloc(32)
                $MemoryStoreU256(add($mem, 0), $t0)
                $t1 := $mem
            }
            // return $t1
            $result := $t1
        }

        function A1_vector_empty$A2_U256_U256$() -> vector {
            vector := $Malloc(96)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function A1_option_none$vec$u8$$() -> $result {
            let $t0, $t1
            // $t0 := vector::empty<#0>()
            $t0 := A1_vector_empty$vec$u8$$()
            // $t1 := pack 0x1::option::Option<#0>($t0)
            {
                let $mem := $Malloc(32)
                $MemoryStoreU256(add($mem, 0), $t0)
                $t1 := $mem
            }
            // return $t1
            $result := $t1
        }

        function A1_vector_empty$vec$u8$$() -> vector {
            vector := $Malloc(96)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function A1_option_some$u64$(e) -> $result {
            let $t1, $t2
            // $t1 := vector::singleton<#0>($t0)
            $t1 := A1_vector_singleton$u64$(e)
            // $t2 := pack 0x1::option::Option<#0>($t1)
            {
                let $mem := $Malloc(32)
                $MemoryStoreU256(add($mem, 0), $t1)
                $t2 := $mem
            }
            // return $t2
            $result := $t2
        }

        function A1_vector_singleton$u64$(e) -> $result {
            let $t2, $t3
            let $locals := $Malloc(32)
            // $t1 := vector::empty<#0>()
            mstore($locals, A1_vector_empty$u64$())
            // $t2 := borrow_local($t1)
            $t2 := $MakePtr(false, $locals)
            // vector::push_back<#0>($t2, $t0)
            A1_vector_push_back$u64$($t2, e)
            // $t3 := move($t1)
            $t3 := mload($locals)
            // return $t3
            $result := $t3
            $Free($locals, 32)
        }

        function A1_vector_push_back$u64$(v_ref, e) {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 8)))
            $StoreU64(e_ptr, e)
            size := add(size, 1)
            $StoreU64(v_ptr, size)
            let capacity := $LoadU64($IndexPtr(v_ptr, 8))
            if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                let new_v_offs := $ResizeVector(v_offs, capacity, 8)
                $StoreU256(v_ref, new_v_offs)
            }
        }
        function A1_vector_empty$u64$() -> vector {
            vector := $Malloc(48)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $StoreU64(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU64(offs, val)
          }
          default {
            $StorageStoreU64(offs, val)
          }
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $StorageStoreU64(offs, val) {
          $StorageStoreBytes(offs, 8, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $StoreU256(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU256(offs, val)
          }
          default {
            $StorageStoreU256(offs, val)
          }
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $StorageStoreU256(offs, val) {
          $StorageStoreBytes(offs, 32, val)
        }
        function $CopyMemory(src, dst, size) {
          let num_words, overflow_bytes := $ToWordOffs(size)
          let i := 0
          for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
            mstore(add(dst, i), mload(add(src, i)))
          }
          if overflow_bytes {
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let dst_word := and(mload(add(dst, overflow_offs)), mask)
            let src_word := and(mload(add(src, overflow_offs)), not(mask))
            mstore(add(dst, overflow_offs), or(dst_word, src_word))
          }
        }
        function $ResizeVector(v_offs, capacity, type_size) -> new_v_offs {
            let new_capacity := mul(capacity, 2)
            let data_size := add(32, mul(capacity, type_size))
            let new_data_size := add(32, mul(new_capacity, type_size))
            new_v_offs := $Malloc(new_data_size)
            $CopyMemory(v_offs, new_v_offs, data_size)
            // update capacity at new location
            $MemoryStoreU64(add(new_v_offs, 8), new_capacity)
            $Free(v_offs, data_size)
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
    }
}
===> Test result of M::extract_value: Succeed(Stopped) (used_gas=5103): []
