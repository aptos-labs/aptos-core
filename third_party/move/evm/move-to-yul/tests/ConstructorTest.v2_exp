/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "A2_ConstructorTest" {
    code {
        mstore(0, memoryguard(160))
        let program_size := datasize("A2_ConstructorTest")
        let arg_size := sub(codesize(), program_size)
        let memory_data_offset := $Malloc(arg_size)
        codecopy(memory_data_offset, program_size, arg_size)
        let param_0, param_1 := abi_decode_tuple_$uint64_uint64$_$u64_u64$_from_memory(memory_data_offset, add(memory_data_offset, arg_size))
        A2_ConstructorTest_init(param_0, param_1)
        codecopy(0, dataoffset("A2_ConstructorTest_deployed"), datasize("A2_ConstructorTest_deployed"))
        return(0, datasize("A2_ConstructorTest_deployed"))
        function A2_ConstructorTest_init(value, value2) {
            let $t3, $t4, $t5
            let $locals := $Malloc(32)
            // $t3 := 0x42
            $t3 := 0x42
            // $t2 := Evm::sign($t3)
            mstore($locals, A2_Evm_sign($t3))
            // $t4 := borrow_local($t2)
            $t4 := $MakePtr(false, $locals)
            // $t5 := pack 0x2::ConstructorTest::Balance($t0, $t1)
            {
                let $mem := $Malloc(16)
                $MemoryStoreU64(add($mem, 0), value)
                $MemoryStoreU64(add($mem, 8), value2)
                $t5 := $mem
            }
            // move_to<0x2::ConstructorTest::Balance>($t5, $t4)
            {
                let $base_offset := $MakeTypeStorageBase(0, 0x91d9463a, $LoadU256($t4))
                if $AlignedStorageLoad($base_offset) {
                  $AbortBuiltin()
                }
                $AlignedStorageStore($base_offset, true)
                {
                    let $dst := add($base_offset, 32)
                    let $src := $t5
                    $AlignedStorageStore(add($dst, 0), mload(add($src, 0)))
                    $Free($src, 16)
                }
            }
            // return ()
            $Free($locals, 32)
        }

        function A2_Evm_sign(addr) -> signer {
          signer := addr
        }
        function abi_decode_tuple_$uint64_uint64$_$u64_u64$_from_memory(headStart, dataEnd) -> value_0, value_1 {
            if slt(sub(dataEnd, headStart), 64) { $Abort(96) }
            {
                let offset := 0
                value_0 := abi_decode_uint64_from_memory(add(headStart, offset), dataEnd)
            }
            {
                let offset := 32
                value_1 := abi_decode_uint64_from_memory(add(headStart, offset), dataEnd)
            }
        }
        function abi_decode_uint64_from_memory(offset, end) -> value {
            value := mload(offset)
            validator_uint64(value)
        }
        function validator_uint64(value) {
            if iszero(eq(value, cleanup_uint64(value))) { $Abort(95) }
        }
        function cleanup_uint64(value) -> cleaned {
            cleaned := and(value, 0xffffffffffffffff)
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $MakeTypeStorageBase(category, type_hash, id) -> offs {
          offs := or(shl(252, category), or(shl(220, type_hash), shl(60, id)))
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $AlignedStorageLoad(offs) -> val {
          let word_offs := shr(5, offs)
          val := sload($StorageKey(0, word_offs))
        }
        function $AlignedStorageStore(offs, val) {
          let word_offs := shr(5, offs)
          sstore($StorageKey(0, word_offs), val)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
    }
    object "A2_ConstructorTest_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                case 0xf8a8fd6d
                {
                    // test()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let ret_0 := A2_ConstructorTest_test()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint64$_$u64$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            $Abort(97)
            function A2_ConstructorTest_test() -> $result {
                let $t0, $t1, $t2, $t3
                // $t0 := 0x42
                $t0 := 0x42
                // $t1 := borrow_global<0x2::ConstructorTest::Balance>($t0)
                {
                    let $base_offset := $MakeTypeStorageBase(0, 0x91d9463a, $t0)
                    if iszero($AlignedStorageLoad($base_offset)) {
                      $AbortBuiltin()
                    }
                    $t1 := $MakePtr(true, add($base_offset, 32))
                }
                // $t2 := borrow_field<0x2::ConstructorTest::Balance>.value($t1)
                $t2 := $t1
                // $t3 := read_ref($t2)
                $t3 := $LoadU64($t2)
                // return $t3
                $result := $t3
            }

            function abi_encode_tuple_$uint64$_$u64$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_uint64(value_0, add(headStart, 0))
            }
            function abi_encode_uint64(value, pos) {
                mstore(pos, cleanup_uint64(value))
            }
            function cleanup_uint64(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffff)
            }
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $AbortBuiltin() {
                $Abort(sub(0, 1))
            }
            function $MakePtr(is_storage, offs) -> ptr {
              ptr := or(is_storage, shl(1, offs))
            }
            function $IsStoragePtr(ptr) -> b {
              b := and(ptr, 0x1)
            }
            function $OffsetPtr(ptr) -> offs {
              offs := shr(1, ptr)
            }
            function $MaskForSize(size) -> mask {
              mask := sub(shl(shl(3, size), 1), 1)
            }
            function $ExtractBytes(word, start, size) -> bytes {
               switch size
               case 1 {
                  // use the faster byte primitive
                  bytes := byte(start, word)
               }
               default {
                  // As we have big endian, we need to right shift the value from
                  // where the highest byte starts in the word (32 - start), minus
                  // the size.
                  let shift_bits := shl(3, sub(sub(32, start), size))
                  bytes := and(shr(shift_bits, word), $MaskForSize(size))
               }
            }
            function $ToWordOffs(offs) -> word_offs, byte_offset {
              word_offs := shr(5, offs)
              byte_offset := and(offs, 0x1F)
            }
            function $OverflowBytes(byte_offset, size) -> overflow_bytes {
              let available_bytes := sub(32, byte_offset)
              switch gt(size, available_bytes)
              case 0 {
                overflow_bytes := 0
              }
              default {
                overflow_bytes := sub(size, available_bytes)
              }
            }
            function $MemoryLoadBytes(offs, size) -> val {
              // Lower bit where the value in the higher bytes ends
              let bit_end := shl(3, sub(32, size))
              val := shr(bit_end, mload(offs))
            }
            function $StorageLoadBytes(offs, size) -> val {
              let word_offs, byte_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              val := $ExtractBytes(sload(key), byte_offs, size)
              let overflow_bytes := $OverflowBytes(byte_offs, size)
              if $LogicalNot(iszero(overflow_bytes)) {
                key := $StorageKey(0, add(word_offs, 1))
                let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
                val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
              }
            }
            function $StorageKey(group, word) -> key {
              mstore(32, word)
              mstore(64, shl(224, group))
              key := keccak256(32, 36)
            }
            function $MakeTypeStorageBase(category, type_hash, id) -> offs {
              offs := or(shl(252, category), or(shl(220, type_hash), shl(60, id)))
            }
            function $LoadU64(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU64(offs)
              }
              default {
                val := $StorageLoadU64(offs)
              }
            }
            function $MemoryLoadU64(offs) -> val {
              val := $MemoryLoadBytes(offs, 8)
            }
            function $StorageLoadU64(offs) -> val {
              val := $StorageLoadBytes(offs, 8)
            }
            function $AlignedStorageLoad(offs) -> val {
              let word_offs := shr(5, offs)
              val := sload($StorageKey(0, word_offs))
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
            function $LogicalNot(x) -> r {
                r := iszero(x)
            }
        }
    }
}


!! Succeeded compiling Yul
