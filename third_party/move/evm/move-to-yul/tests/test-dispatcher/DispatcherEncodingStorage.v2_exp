/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                case 0xfb4da14d
                {
                    // test_string()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let ret_0 := A2_M_test_string()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$string$_$vec$u8$$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x1f5ac11e
                {
                    // test_vec_u64()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let ret_0, ret_1 := A2_M_test_vec_u64()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$string_uint256__$_$vec$u8$_vec$A2_U256_U256$$(memPos, ret_0, ret_1)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            $Abort(97)
            function A2_M_test_string() -> $result {
                let $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11
                let $locals := $Malloc(64)
                // $t1 := vector::empty<u8>()
                mstore($locals, A1_vector_empty$u8$())
                // $t2 := borrow_local($t1)
                $t2 := $MakePtr(false, $locals)
                // $t3 := 65
                $t3 := 65
                // vector::push_back<u8>($t2, $t3)
                A1_vector_push_back$u8$($t2, $t3)
                // $t4 := 0x42
                $t4 := 0x42
                // $t0 := Evm::sign($t4)
                mstore(add($locals, 32), A2_Evm_sign($t4))
                // $t5 := borrow_local($t0)
                $t5 := $MakePtr(false, add($locals, 32))
                // $t6 := move($t1)
                $t6 := mload($locals)
                // $t7 := pack 0x2::M::T<u8>($t6)
                {
                    let $mem := $Malloc(32)
                    $MemoryStoreU256(add($mem, 0), $t6)
                    $t7 := $mem
                }
                // move_to<0x2::M::T<u8>>($t7, $t5)
                {
                    let $base_offset := $MakeTypeStorageBase(0, 0x2e75402e, $LoadU256($t5))
                    if $AlignedStorageLoad($base_offset) {
                      $AbortBuiltin()
                    }
                    $AlignedStorageStore($base_offset, true)
                    {
                        let $dst := add($base_offset, 32)
                        let $src := $t7
                        {
                            let $linked_src_2300595445 := mload(add($src, 0))
                            let $linked_dst_2300595445 := $NewLinkedStorageBase(0x89204cf5)
                            let $size_2300595445 := $MemoryLoadU64($linked_src_2300595445)
                            let $data_size_2300595445 := mul($size_2300595445, 1)
                            $AlignedStorageStore($linked_dst_2300595445, mload($linked_src_2300595445))
                            let $data_src_2300595445 := add($linked_src_2300595445, 32)
                            let $data_dst_2300595445 := add($linked_dst_2300595445, 32)
                            for { let $offs_2300595445 := 0 } lt($offs_2300595445, $data_size_2300595445) { $offs_2300595445 := add($offs_2300595445, 32)} {
                                $AlignedStorageStore(add($data_dst_2300595445, $offs_2300595445), mload(add($data_src_2300595445, $offs_2300595445)))
                                $Free($linked_src_2300595445, add($data_size_2300595445, 32))
                            }
                            $AlignedStorageStore(add($dst, 0), $linked_dst_2300595445)
                        }
                        $Free($src, 32)
                    }
                }
                // $t8 := 0x42
                $t8 := 0x42
                // $t9 := borrow_global<0x2::M::T<u8>>($t8)
                {
                    let $base_offset := $MakeTypeStorageBase(0, 0x2e75402e, $t8)
                    if iszero($AlignedStorageLoad($base_offset)) {
                      $AbortBuiltin()
                    }
                    $t9 := $MakePtr(true, add($base_offset, 32))
                }
                // $t10 := borrow_field<0x2::M::T<u8>>.v($t9)
                $t10 := $t9
                // $t11 := read_ref($t10)
                $t11 := $LoadU256($t10)
                if $IsStoragePtr($t10){
                    let $storage_ptr_2300595445
                    let $size_2300595445 := $StorageLoadU64($t11)
                    let $capacity_2300595445 := $ClosestGreaterPowerOfTwo($size_2300595445)
                    $storage_ptr_2300595445 := $Malloc(add(32, mul($capacity_2300595445, 1)))
                    let $data_size_2300595445 := mul($size_2300595445, 1)
                    mstore($storage_ptr_2300595445, $AlignedStorageLoad($t11))
                    $MemoryStoreU64(add($storage_ptr_2300595445, 8), $capacity_2300595445)
                    let $data_src_2300595445 := add($t11, 32)
                    let $data_dst_2300595445 := add($storage_ptr_2300595445, 32)
                    for { let $offs_2300595445 := 0 } lt($offs_2300595445, $data_size_2300595445) { $offs_2300595445 := add($offs_2300595445, 32)} {
                        mstore(add($data_dst_2300595445, $offs_2300595445), $AlignedStorageLoad(add($data_src_2300595445, $offs_2300595445)))
                    }
                    $t11 := $storage_ptr_2300595445
                }
                // return $t11
                $result := $t11
                $Free($locals, 64)
            }

            function A2_M_test_vec_u64() -> $result0, $result1 {
                let $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21
                let $locals := $Malloc(96)
                // $t1 := vector::empty<u8>()
                mstore($locals, A1_vector_empty$u8$())
                // $t3 := borrow_local($t1)
                $t3 := $MakePtr(false, $locals)
                // $t4 := 65
                $t4 := 65
                // vector::push_back<u8>($t3, $t4)
                A1_vector_push_back$u8$($t3, $t4)
                // $t2 := vector::empty<0x2::U256::U256>()
                mstore(add($locals, 32), A1_vector_empty$A2_U256_U256$())
                // $t5 := borrow_local($t2)
                $t5 := $MakePtr(false, add($locals, 32))
                // $t6 := 64
                $t6 := 64
                // vector::push_back<0x2::U256::U256>($t5, $t6)
                A1_vector_push_back$A2_U256_U256$($t5, $t6)
                // $t7 := borrow_local($t2)
                $t7 := $MakePtr(false, add($locals, 32))
                // $t8 := 65
                $t8 := 65
                // vector::push_back<0x2::U256::U256>($t7, $t8)
                A1_vector_push_back$A2_U256_U256$($t7, $t8)
                // $t9 := 0x42
                $t9 := 0x42
                // $t0 := Evm::sign($t9)
                mstore(add($locals, 64), A2_Evm_sign($t9))
                // $t10 := borrow_local($t0)
                $t10 := $MakePtr(false, add($locals, 64))
                // $t11 := move($t1)
                $t11 := mload($locals)
                // $t12 := move($t2)
                $t12 := mload(add($locals, 32))
                // $t13 := pack 0x2::M::State($t11, $t12)
                {
                    let $mem := $Malloc(64)
                    $MemoryStoreU256(add($mem, 0), $t11)
                    $MemoryStoreU256(add($mem, 32), $t12)
                    $t13 := $mem
                }
                // move_to<0x2::M::State>($t13, $t10)
                {
                    let $base_offset := $MakeTypeStorageBase(0, 0x7d9cc237, $LoadU256($t10))
                    if $AlignedStorageLoad($base_offset) {
                      $AbortBuiltin()
                    }
                    $AlignedStorageStore($base_offset, true)
                    {
                        let $dst := add($base_offset, 32)
                        let $src := $t13
                        {
                            let $linked_src_2300595445 := mload(add($src, 0))
                            let $linked_dst_2300595445 := $NewLinkedStorageBase(0x89204cf5)
                            let $size_2300595445 := $MemoryLoadU64($linked_src_2300595445)
                            let $data_size_2300595445 := mul($size_2300595445, 1)
                            $AlignedStorageStore($linked_dst_2300595445, mload($linked_src_2300595445))
                            let $data_src_2300595445 := add($linked_src_2300595445, 32)
                            let $data_dst_2300595445 := add($linked_dst_2300595445, 32)
                            for { let $offs_2300595445 := 0 } lt($offs_2300595445, $data_size_2300595445) { $offs_2300595445 := add($offs_2300595445, 32)} {
                                $AlignedStorageStore(add($data_dst_2300595445, $offs_2300595445), mload(add($data_src_2300595445, $offs_2300595445)))
                                $Free($linked_src_2300595445, add($data_size_2300595445, 32))
                            }
                            $AlignedStorageStore(add($dst, 0), $linked_dst_2300595445)
                        }
                        {
                            let $linked_src_3901948120 := mload(add($src, 32))
                            let $linked_dst_3901948120 := $NewLinkedStorageBase(0xe89300d8)
                            let $size_3901948120 := $MemoryLoadU64($linked_src_3901948120)
                            let $data_size_3901948120 := mul($size_3901948120, 32)
                            $AlignedStorageStore($linked_dst_3901948120, mload($linked_src_3901948120))
                            let $data_src_3901948120 := add($linked_src_3901948120, 32)
                            let $data_dst_3901948120 := add($linked_dst_3901948120, 32)
                            for { let $offs_3901948120 := 0 } lt($offs_3901948120, $data_size_3901948120) { $offs_3901948120 := add($offs_3901948120, 32)} {
                                $AlignedStorageStore(add($data_dst_3901948120, $offs_3901948120), mload(add($data_src_3901948120, $offs_3901948120)))
                                $Free($linked_src_3901948120, add($data_size_3901948120, 32))
                            }
                            $AlignedStorageStore(add($dst, 32), $linked_dst_3901948120)
                        }
                        $Free($src, 64)
                    }
                }
                // $t14 := 0x42
                $t14 := 0x42
                // $t15 := borrow_global<0x2::M::State>($t14)
                {
                    let $base_offset := $MakeTypeStorageBase(0, 0x7d9cc237, $t14)
                    if iszero($AlignedStorageLoad($base_offset)) {
                      $AbortBuiltin()
                    }
                    $t15 := $MakePtr(true, add($base_offset, 32))
                }
                // $t16 := borrow_field<0x2::M::State>.s1($t15)
                $t16 := $t15
                // $t17 := read_ref($t16)
                $t17 := $LoadU256($t16)
                if $IsStoragePtr($t16){
                    let $storage_ptr_2300595445
                    let $size_2300595445 := $StorageLoadU64($t17)
                    let $capacity_2300595445 := $ClosestGreaterPowerOfTwo($size_2300595445)
                    $storage_ptr_2300595445 := $Malloc(add(32, mul($capacity_2300595445, 1)))
                    let $data_size_2300595445 := mul($size_2300595445, 1)
                    mstore($storage_ptr_2300595445, $AlignedStorageLoad($t17))
                    $MemoryStoreU64(add($storage_ptr_2300595445, 8), $capacity_2300595445)
                    let $data_src_2300595445 := add($t17, 32)
                    let $data_dst_2300595445 := add($storage_ptr_2300595445, 32)
                    for { let $offs_2300595445 := 0 } lt($offs_2300595445, $data_size_2300595445) { $offs_2300595445 := add($offs_2300595445, 32)} {
                        mstore(add($data_dst_2300595445, $offs_2300595445), $AlignedStorageLoad(add($data_src_2300595445, $offs_2300595445)))
                    }
                    $t17 := $storage_ptr_2300595445
                }
                // $t18 := 0x42
                $t18 := 0x42
                // $t19 := borrow_global<0x2::M::State>($t18)
                {
                    let $base_offset := $MakeTypeStorageBase(0, 0x7d9cc237, $t18)
                    if iszero($AlignedStorageLoad($base_offset)) {
                      $AbortBuiltin()
                    }
                    $t19 := $MakePtr(true, add($base_offset, 32))
                }
                // $t20 := borrow_field<0x2::M::State>.s2($t19)
                $t20 := $IndexPtr($t19, 32)
                // $t21 := read_ref($t20)
                $t21 := $LoadU256($t20)
                if $IsStoragePtr($t20){
                    let $storage_ptr_3901948120
                    let $size_3901948120 := $StorageLoadU64($t21)
                    let $capacity_3901948120 := $ClosestGreaterPowerOfTwo($size_3901948120)
                    $storage_ptr_3901948120 := $Malloc(add(32, mul($capacity_3901948120, 32)))
                    let $data_size_3901948120 := mul($size_3901948120, 32)
                    mstore($storage_ptr_3901948120, $AlignedStorageLoad($t21))
                    $MemoryStoreU64(add($storage_ptr_3901948120, 8), $capacity_3901948120)
                    let $data_src_3901948120 := add($t21, 32)
                    let $data_dst_3901948120 := add($storage_ptr_3901948120, 32)
                    for { let $offs_3901948120 := 0 } lt($offs_3901948120, $data_size_3901948120) { $offs_3901948120 := add($offs_3901948120, 32)} {
                        mstore(add($data_dst_3901948120, $offs_3901948120), $AlignedStorageLoad(add($data_src_3901948120, $offs_3901948120)))
                    }
                    $t21 := $storage_ptr_3901948120
                }
                // return ($t17, $t21)
                $result0 := $t17
                $result1 := $t21
                $Free($locals, 96)
            }

            function A2_Evm_sign(addr) -> signer {
              signer := addr
            }
            function A1_vector_push_back$A2_U256_U256$(v_ref, e) {
                let v_offs := $LoadU256(v_ref)
                let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
                let size := $LoadU64(v_ptr)
                let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 32)))
                $StoreU256(e_ptr, e)
                size := add(size, 1)
                $StoreU64(v_ptr, size)
                let capacity := $LoadU64($IndexPtr(v_ptr, 8))
                if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                    let new_v_offs := $ResizeVector(v_offs, capacity, 32)
                    $StoreU256(v_ref, new_v_offs)
                }
            }
            function A1_vector_empty$A2_U256_U256$() -> vector {
                vector := $Malloc(96)
                $MemoryStoreU64(add(vector, 8), 2)
            }
            function A1_vector_push_back$u8$(v_ref, e) {
                let v_offs := $LoadU256(v_ref)
                let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
                let size := $LoadU64(v_ptr)
                let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 1)))
                $StoreU8(e_ptr, e)
                size := add(size, 1)
                $StoreU64(v_ptr, size)
                let capacity := $LoadU64($IndexPtr(v_ptr, 8))
                if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                    let new_v_offs := $ResizeVector(v_offs, capacity, 1)
                    $StoreU256(v_ref, new_v_offs)
                }
            }
            function A1_vector_empty$u8$() -> vector {
                vector := $Malloc(34)
                $MemoryStoreU64(add(vector, 8), 2)
            }
            function abi_encode_tuple_$string_uint256__$_$vec$u8$_vec$A2_U256_U256$$(headStart ,value_0, value_1) -> tail {
                tail := add(headStart, 64)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_string(value_0,  tail)
                mstore(add(headStart, 32), sub(tail, headStart))
                tail := abi_encode_uint256___vec$A2_U256_U256$(value_1,  tail)
            }
            function abi_encode_uint256___vec$A2_U256_U256$(value, pos) -> end {
                let length := $MemoryLoadU64(value)
                mstore(pos, length)
                pos := add(pos, 0x20)
                let start := add(value, 32)
                let srcEnd := add(start, mul(length, 32))
                for { let src := start } lt(src, srcEnd) { src := add(src, 32) }
                {
                    let v := $MemoryLoadU256(src)
                    pos := abi_encode_uint256_with_updated_pos(v, pos)
                }
                end := pos
            }
            function abi_encode_uint256_with_updated_pos(value, pos) -> updated_pos{
                abi_encode_uint256(value, pos)
                updated_pos := add(pos, 32)
            }
            function abi_encode_uint256(value, pos) {
                mstore(pos, cleanup_uint256(value))
            }
            function cleanup_uint256(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
            }
            function abi_encode_string(value, pos) -> end{
                let size := $MemoryLoadU64(value)
                mstore(pos, size)
                pos := add(pos, 0x20)
                $CopyMemory(add(value, 0x20), pos, size)
                size := $RoundUp(size)
                end := add(pos, size)
            }
            function abi_encode_tuple_$string$_$vec$u8$$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_string(value_0,  tail)
            }
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $AbortBuiltin() {
                $Abort(sub(0, 1))
            }
            function $Malloc(size) -> offs {
                offs := mload(0)
                // pad to word size
                mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
            }
            function $Free(offs, size) {
            }
            function $MakePtr(is_storage, offs) -> ptr {
              ptr := or(is_storage, shl(1, offs))
            }
            function $IsStoragePtr(ptr) -> b {
              b := and(ptr, 0x1)
            }
            function $OffsetPtr(ptr) -> offs {
              offs := shr(1, ptr)
            }
            function $MaskForSize(size) -> mask {
              mask := sub(shl(shl(3, size), 1), 1)
            }
            function $ExtractBytes(word, start, size) -> bytes {
               switch size
               case 1 {
                  // use the faster byte primitive
                  bytes := byte(start, word)
               }
               default {
                  // As we have big endian, we need to right shift the value from
                  // where the highest byte starts in the word (32 - start), minus
                  // the size.
                  let shift_bits := shl(3, sub(sub(32, start), size))
                  bytes := and(shr(shift_bits, word), $MaskForSize(size))
               }
            }
            function $InjectBytes(word, start, size, bytes) -> new_word {
               let shift_bits := shl(3, sub(sub(32, start), size))
               // Blend out the bits which we inject
               let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
               word := and(word, neg_mask)
               // Overlay the bits we inject
               new_word := or(word, shl(shift_bits, bytes))
            }
            function $ToWordOffs(offs) -> word_offs, byte_offset {
              word_offs := shr(5, offs)
              byte_offset := and(offs, 0x1F)
            }
            function $OverflowBytes(byte_offset, size) -> overflow_bytes {
              let available_bytes := sub(32, byte_offset)
              switch gt(size, available_bytes)
              case 0 {
                overflow_bytes := 0
              }
              default {
                overflow_bytes := sub(size, available_bytes)
              }
            }
            function $MemoryLoadBytes(offs, size) -> val {
              // Lower bit where the value in the higher bytes ends
              let bit_end := shl(3, sub(32, size))
              val := shr(bit_end, mload(offs))
            }
            function $MemoryStoreBytes(offs, size, val) {
              let bit_end := shl(3, sub(32, size))
              let mask := shl(bit_end, $MaskForSize(size))
              mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
            }
            function $StorageLoadBytes(offs, size) -> val {
              let word_offs, byte_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              val := $ExtractBytes(sload(key), byte_offs, size)
              let overflow_bytes := $OverflowBytes(byte_offs, size)
              if $LogicalNot(iszero(overflow_bytes)) {
                key := $StorageKey(0, add(word_offs, 1))
                let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
                val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
              }
            }
            function $StorageStoreBytes(offs, size, bytes) {
              let word_offs, byte_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              let overflow_bytes := $OverflowBytes(byte_offs, size)
              switch overflow_bytes
              case 0 {
                sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
              }
              default {
                // Shift the higher bytes to the right
                let used_bytes := sub(size, overflow_bytes)
                let higher_bytes := shr(used_bytes, bytes)
                let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
                sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
                key := $StorageKey(0, add(word_offs, 1))
                sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
              }
            }
            function $StorageKey(group, word) -> key {
              mstore(32, word)
              mstore(64, shl(224, group))
              key := keccak256(32, 36)
            }
            function $MakeTypeStorageBase(category, type_hash, id) -> offs {
              offs := or(shl(252, category), or(shl(220, type_hash), shl(60, id)))
            }
            function $NewLinkedStorageBase(type_hash) -> offs {
              let key := $StorageKey(1, 1)
              let handle := sload(key)
              sstore(key, add(handle, 1))
              offs := $MakeTypeStorageBase(1, type_hash, handle)
            }
            function $IndexPtr(ptr, offs) -> new_ptr {
              new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
            }
            function $StoreU8(ptr, val) {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                $MemoryStoreU8(offs, val)
              }
              default {
                $StorageStoreU8(offs, val)
              }
            }
            function $MemoryStoreU8(offs, val) {
              // Shortcut via special instruction
              mstore8(offs, val)
            }
            function $StorageStoreU8(offs, val) {
              $StorageStoreBytes(offs, 1, val)
            }
            function $LoadU64(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU64(offs)
              }
              default {
                val := $StorageLoadU64(offs)
              }
            }
            function $MemoryLoadU64(offs) -> val {
              val := $MemoryLoadBytes(offs, 8)
            }
            function $StorageLoadU64(offs) -> val {
              val := $StorageLoadBytes(offs, 8)
            }
            function $StoreU64(ptr, val) {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                $MemoryStoreU64(offs, val)
              }
              default {
                $StorageStoreU64(offs, val)
              }
            }
            function $MemoryStoreU64(offs, val) {
              $MemoryStoreBytes(offs, 8, val)
            }
            function $StorageStoreU64(offs, val) {
              $StorageStoreBytes(offs, 8, val)
            }
            function $LoadU256(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU256(offs)
              }
              default {
                val := $StorageLoadU256(offs)
              }
            }
            function $MemoryLoadU256(offs) -> val {
              val := $MemoryLoadBytes(offs, 32)
            }
            function $StorageLoadU256(offs) -> val {
              val := $StorageLoadBytes(offs, 32)
            }
            function $StoreU256(ptr, val) {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                $MemoryStoreU256(offs, val)
              }
              default {
                $StorageStoreU256(offs, val)
              }
            }
            function $MemoryStoreU256(offs, val) {
              $MemoryStoreBytes(offs, 32, val)
            }
            function $StorageStoreU256(offs, val) {
              $StorageStoreBytes(offs, 32, val)
            }
            function $AlignedStorageLoad(offs) -> val {
              let word_offs := shr(5, offs)
              val := sload($StorageKey(0, word_offs))
            }
            function $AlignedStorageStore(offs, val) {
              let word_offs := shr(5, offs)
              sstore($StorageKey(0, word_offs), val)
            }
            function $CopyMemory(src, dst, size) {
              let num_words, overflow_bytes := $ToWordOffs(size)
              let i := 0
              for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
                mstore(add(dst, i), mload(add(src, i)))
              }
              if overflow_bytes {
                let mask := $MaskForSize(sub(32, overflow_bytes))
                let overflow_offs := mul(num_words, 32)
                let dst_word := and(mload(add(dst, overflow_offs)), mask)
                let src_word := and(mload(add(src, overflow_offs)), not(mask))
                mstore(add(dst, overflow_offs), or(dst_word, src_word))
              }
            }
            function $ResizeVector(v_offs, capacity, type_size) -> new_v_offs {
                let new_capacity := mul(capacity, 2)
                let data_size := add(32, mul(capacity, type_size))
                let new_data_size := add(32, mul(new_capacity, type_size))
                new_v_offs := $Malloc(new_data_size)
                $CopyMemory(v_offs, new_v_offs, data_size)
                // update capacity at new location
                $MemoryStoreU64(add(new_v_offs, 8), new_capacity)
                $Free(v_offs, data_size)
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
            function $LogicalNot(x) -> r {
                r := iszero(x)
            }
            function $ClosestGreaterPowerOfTwo(x) -> r {
                r := or(r, shr(1, x))
                r := or(r, shr(2, r))
                r := or(r, shr(4, r))
                r := or(r, shr(8, r))
                r := or(r, shr(16, r))
                r := or(r, shr(32, r))
                r := add(x, 1)
            }
            function $RoundUp(value) -> result {
                result := and(add(value, 31), not(31))
            }
        }
    }
}


!! Succeeded compiling Yul
