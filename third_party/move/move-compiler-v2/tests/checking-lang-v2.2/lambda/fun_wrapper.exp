// -- Model dump before bytecode pipeline
module 0x66::test {
    struct Work {
        0: |u64|u64,
    }
    private fun t1(): bool {
        {
          let work: Work = pack test::Work(closure#0test::__lambda__1__t1());
          Eq<Work>(work, closure#0test::__lambda__2__t1())
        }
    }
    private fun t2() {
        test::take_work(closure#0test::__lambda__1__t2())
    }
    private fun take_work(_work: Work) {
        Tuple()
    }
    private fun __lambda__1__t1(x: u64): u64 {
        Add<u64>(x, 1)
    }
    private fun __lambda__2__t1(x: u64): u64 {
        Add<u64>(x, 2)
    }
    private fun __lambda__1__t2(x: u64): u64 {
        Add<u64>(x, 1)
    }
} // end 0x66::test

// -- Sourcified model before bytecode pipeline
module 0x66::test {
    struct Work has drop {
        0: |u64|u64,
    }
    fun t1(): bool {
        let work = Work(|arg0| __lambda__1__t1(arg0));
        work == <<wrongly typed closure expression>>
    }
    fun t2() {
        take_work(<<wrongly typed closure expression>>)
    }
    fun take_work(_work: Work) {
    }
    fun __lambda__1__t1(x: u64): u64 {
        x + 1
    }
    fun __lambda__2__t1(x: u64): u64 {
        x + 2
    }
    fun __lambda__1__t2(x: u64): u64 {
        x + 1
    }
}
