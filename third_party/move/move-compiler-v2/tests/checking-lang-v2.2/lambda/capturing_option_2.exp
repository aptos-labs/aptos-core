
Diagnostics:
warning: capturing option values is currently not supported
   ┌─ tests/checking-lang-v2.2/lambda/capturing_option_2.move:14:67
   │
14 │         let _f: ||option::Option<u64> has copy+drop+store = || id(v);
   │                                                                   ^

// -- Model dump before first bytecode pipeline
module 0x99::m {
    use std::option;
    struct FunctionStore {
        f: ||0x1::option::Option<u64> has copy + drop + store,
    }
    struct OptionStore {
        o: 0x1::option::Option<u64>,
    }
    private entry fun entry_func() {
        {
          let v: OptionStore = pack m::OptionStore(option::none<u64>());
          {
            let _f: ||0x1::option::Option<u64> has copy + drop + store = closure#1m::id(v);
            Tuple()
          }
        }
    }
    public fun id(x: OptionStore): 0x1::option::Option<u64> {
        select m::OptionStore.o<OptionStore>(x)
    }
} // end 0x99::m

// -- Sourcified model before first bytecode pipeline
module 0x99::m {
    use std::option;
    struct FunctionStore has key {
        f: ||0x1::option::Option<u64> has copy + drop + store,
    }
    struct OptionStore has copy, drop, store {
        o: 0x1::option::Option<u64>,
    }
    entry fun entry_func() {
        let v = OptionStore{o: 0x1::option::none<u64>()};
        let _f: ||0x1::option::Option<u64> has copy + drop + store = || id(v);
    }
    public fun id(x: OptionStore): 0x1::option::Option<u64> {
        x.o
    }
}
