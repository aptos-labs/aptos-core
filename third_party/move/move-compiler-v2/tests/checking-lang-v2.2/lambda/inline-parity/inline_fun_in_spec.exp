// -- Model dump before bytecode pipeline
module 0x42::m {
    spec {
      invariant forall a: address: TypeDomain<address>(): Implies(exists<0x42::m::S>(a), m::$exec<address, bool>(|a: address| Lt(select m::S.f<0x42::m::S>({
      let (a: address): (address) = Tuple(a);
      global<0x42::m::S>(a)
    }), 10), a));
    }

    struct S {
        f: u64,
    }
    spec {
      invariant m::$exec<num, bool>(|x: num| Gt(x, 0), select m::S.f());
    }

    private fun exec<T,R>(f: |T|R with copy,x: T): R {
        {
          let r: R = (f)(x);
          spec {
            assert Eq<#1>(r, (f)($t1));
          }
          ;
          r
        }
    }
    private fun function_code_spec_block(x: u64): u64 {
        spec {
          assert m::$exec<num, bool>(closure#0m::__lambda__1__function_code_spec_block(), $t0);
        }
        ;
        Add<u64>(x, 1)
    }
    private fun function_spec_block(x: u64): u64 {
        Add<u64>(x, 1)
    }
    spec {
      ensures Eq<u64>(result0(), m::$exec<num, num>(|x: num| Add(x, 1), $t0));
    }

    private inline fun get<R>(a: address): &R {
        BorrowGlobal(Immutable)<R>(a)
    }
    private fun __lambda__1__function_code_spec_block(y: num): bool {
        Gt(y, 0)
    }
    spec fun $exec<T,R>(f: |#0|#1 with copy,x: #0): #1 {
        {
          let r: #1 = (f)(x);
          r
        }
    }
    spec fun $__lambda__1__function_code_spec_block(y: num): bool {
        Gt(y, 0)
    }
} // end 0x42::m

// -- Sourcified model before bytecode pipeline
module 0x42::m {
    struct S has copy, drop, key {
        f: u64,
    }
    /*
     spec {
      invariant m::$exec<num, bool>(|x: num| Gt(x, 0), select m::S.f());
    }

    */
    fun exec<T: copy + drop, R>(f: |T|R with copy, x: T): R {
        let r = f(x);

        /* spec {
          assert Eq<#1>(r, (f)($t1));
        }
         */
        ;
        r
    }
    fun function_code_spec_block(x: u64): u64 {

        /* spec {
          assert m::$exec<num, bool>(closure#0m::__lambda__1__function_code_spec_block(), $t0);
        }
         */
        ;
        x + 1
    }
    fun function_spec_block(x: u64): u64 {
        x + 1
    }
    inline fun get<R: key>(a: address): &R {
        borrow_global<R>(a)
    }
    fun __lambda__1__function_code_spec_block(y: num): bool {
        y > 0u256
    }
}
