// -- Model dump before bytecode pipeline
module 0x42::Test {
    struct T {
        t: S<u64>,
    }
    struct S<T1> {
        t1: T1,
    }
    private inline fun foo<T1>(self: &S<T1>,f: |&S<T1>|) {
        (f)(self)
    }
    public fun test() {
        {
          let t: S<u64> = pack Test::S<u64>(2);
          {
            let (self: &S<u64>): (&S<u64>) = Tuple(Borrow(Immutable)(t));
            {
              let (t2: &S<u64>): (&S<u64>) = Tuple(self);
              {
                let (self: &S<u64>): (&S<u64>) = Tuple(t2);
                {
                  let (_t4: &S<u64>): (&S<u64>) = Tuple(self);
                  Tuple()
                }
              };
              Tuple()
            }
          };
          Tuple()
        }
    }
} // end 0x42::Test

// -- Sourcified model before bytecode pipeline
module 0x42::Test {
    struct T has drop, key {
        t: S<u64>,
    }
    struct S<T1> has drop, store {
        t1: T1,
    }
    inline fun foo<T1>(self: &S<T1>, f: |&S<T1>|) {
        f(self)
    }
    public fun test() {
        let t = S<u64>{t1: 2};
        {
            let (self) = (&t);
            let (t2) = (self);
            {
                let (self) = (t2);
                let (_t4) = (self);
            };
        };
    }
}

============ initial bytecode ================

[variant baseline]
public fun Test::test() {
     var $t0: 0x42::Test::S<u64>
     var $t1: u64
     var $t2: &0x42::Test::S<u64>
     var $t3: &0x42::Test::S<u64>
     var $t4: &0x42::Test::S<u64>
     var $t5: &0x42::Test::S<u64>
     var $t6: &0x42::Test::S<u64>
  0: $t1 := 2
  1: $t0 := pack 0x42::Test::S<u64>($t1)
  2: $t3 := borrow_local($t0)
  3: $t2 := infer($t3)
  4: $t4 := infer($t2)
  5: $t5 := infer($t4)
  6: $t6 := infer($t5)
  7: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun Test::test() {
     var $t0: 0x42::Test::S<u64>
     var $t1: u64
     var $t2: &0x42::Test::S<u64> [unused]
     var $t3: &0x42::Test::S<u64>
     var $t4: &0x42::Test::S<u64> [unused]
     var $t5: &0x42::Test::S<u64> [unused]
     var $t6: &0x42::Test::S<u64> [unused]
     # live vars:
  0: $t1 := 2
     # live vars: $t1
  1: $t0 := pack 0x42::Test::S<u64>($t1)
     # live vars: $t0
  2: $t3 := borrow_local($t0)
     # live vars: $t3
  3: drop($t3)
     # live vars:
  4: return ()
}


============ disassembled file-format ==================
// Move bytecode v8
module 42.Test {
struct T has drop, key {
	t: S<u64>
}
struct S<T1> has drop, store {
	t1: T1
}

public test() /* def_idx: 0 */ {
L0:	t: S<u64>
L1:	$t3: &S<u64>
B0:
	0: LdU64(2)
	1: PackGeneric[0](S<u64>)
	2: StLoc[0](t: S<u64>)
	3: ImmBorrowLoc[0](t: S<u64>)
	4: Pop
	5: Ret
}
}
============ bytecode verification succeeded ========
