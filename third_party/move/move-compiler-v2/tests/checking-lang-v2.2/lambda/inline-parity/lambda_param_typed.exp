// -- Model dump before bytecode pipeline
module 0x42::LambdaParam {
    public fun inline_apply(f: |u64|u64,b: u64): u64 {
        (f)(b)
    }
    public fun inline_apply2(f: |u64|u64,b: u64): u64 {
        LambdaParam::inline_apply(f, b)
    }
    public fun inline_apply3(f: |u64|u64,b: u64): u64 {
        LambdaParam::inline_apply4(f, b)
    }
    public fun inline_apply4(_f: |u64|u64,b: u64): u64 {
        b
    }
    private fun test_lambda_symbol_param1() {
        {
          let a: u64 = LambdaParam::inline_apply2(closure#0LambdaParam::__lambda__1__test_lambda_symbol_param1(), 3);
          if Eq<u64>(a, 3) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
    private fun test_lambda_symbol_param2() {
        {
          let a: u64 = LambdaParam::inline_apply2(closure#0LambdaParam::__lambda__1__test_lambda_symbol_param2(), 3);
          if Eq<u64>(a, 3) {
            Tuple()
          } else {
            Abort(0)
          };
          {
            let b: u64 = LambdaParam::inline_apply(closure#0LambdaParam::__lambda__2__test_lambda_symbol_param2(), 3);
            if Eq<u64>(b, 3) {
              Tuple()
            } else {
              Abort(0)
            };
            {
              let b: u64 = LambdaParam::inline_apply3(closure#0LambdaParam::__lambda__3__test_lambda_symbol_param2(), 3);
              if Eq<u64>(b, 3) {
                Tuple()
              } else {
                Abort(0)
              };
              Tuple()
            }
          }
        }
    }
    private fun __lambda__1__test_lambda_symbol_param1(x: u64): u64 {
        x
    }
    private fun __lambda__1__test_lambda_symbol_param2(x: u64): u64 {
        x
    }
    private fun __lambda__2__test_lambda_symbol_param2(x: u64): u64 {
        x
    }
    private fun __lambda__3__test_lambda_symbol_param2(x: u64): u64 {
        x
    }
} // end 0x42::LambdaParam

// -- Sourcified model before bytecode pipeline
module 0x42::LambdaParam {
    public fun inline_apply(f: |u64|u64, b: u64): u64 {
        f(b)
    }
    public fun inline_apply2(f: |u64|u64, b: u64): u64 {
        inline_apply(f, b)
    }
    public fun inline_apply3(f: |u64|u64, b: u64): u64 {
        inline_apply4(f, b)
    }
    public fun inline_apply4(_f: |u64|u64, b: u64): u64 {
        b
    }
    fun test_lambda_symbol_param1() {
        let a = inline_apply2(|arg0| __lambda__1__test_lambda_symbol_param1(arg0), 3);
        if (a == 3) () else abort 0;
    }
    fun test_lambda_symbol_param2() {
        let a = inline_apply2(|arg0| __lambda__1__test_lambda_symbol_param2(arg0), 3);
        if (a == 3) () else abort 0;
        let b = inline_apply(|arg0| __lambda__2__test_lambda_symbol_param2(arg0), 3);
        if (b == 3) () else abort 0;
        let b = inline_apply3(|arg0| __lambda__3__test_lambda_symbol_param2(arg0), 3);
        if (b == 3) () else abort 0;
    }
    fun __lambda__1__test_lambda_symbol_param1(x: u64): u64 {
        x
    }
    fun __lambda__1__test_lambda_symbol_param2(x: u64): u64 {
        x
    }
    fun __lambda__2__test_lambda_symbol_param2(x: u64): u64 {
        x
    }
    fun __lambda__3__test_lambda_symbol_param2(x: u64): u64 {
        x
    }
}
