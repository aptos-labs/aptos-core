// -- Model dump before bytecode pipeline
module 0x42::Test {
    private fun foo(f: |u64|u64,g: |u64|u64,x: u64,_: u64): u64 {
        Add<u64>((f)(x), (g)(x))
    }
    public fun test() {
        if Eq<u64>(Test::foo(closure#0Test::__lambda__1__test(), closure#0Test::__lambda__2__test(), 10, 100), 13) {
          Tuple()
        } else {
          Abort(0)
        };
        Tuple()
    }
    private fun __lambda__1__test(param$0: u64): u64 {
        {
          let _: u64 = param$0;
          3
        }
    }
    private fun __lambda__2__test(param$0: u64): u64 {
        {
          let _: u64 = param$0;
          10
        }
    }
} // end 0x42::Test

// -- Sourcified model before bytecode pipeline
module 0x42::Test {
    fun foo(f: |u64|u64, g: |u64|u64, x: u64, _: u64): u64 {
        f(x) + g(x)
    }
    public fun test() {
        if (foo(|arg0| __lambda__1__test(arg0), |arg0| __lambda__2__test(arg0), 10, 100) == 13) () else abort 0;
    }
    fun __lambda__1__test(param$0: u64): u64 {
        let _ = param$0;
        3
    }
    fun __lambda__2__test(param$0: u64): u64 {
        let _ = param$0;
        10
    }
}
