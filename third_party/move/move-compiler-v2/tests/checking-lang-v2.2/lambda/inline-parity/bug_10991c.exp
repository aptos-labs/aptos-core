// -- Model dump before bytecode pipeline
module 0x42::Test {
    private fun foo(g: |(u64, u64, u64, u64)|u64,x: u64,y: u64,z: u64,q: u64): u64 {
        (g)(x, y, z, q)
    }
    public fun test() {
        if Eq<u64>(Test::foo(closure#0Test::__lambda__1__test(), 10, 100, 1000, 10000), 10100) {
          Tuple()
        } else {
          Abort(0)
        };
        Tuple()
    }
    private fun __lambda__1__test(param$0: u64,y: u64,param$2: u64,q: u64): u64 {
        {
          let _: u64 = param$2;
          {
            let _: u64 = param$0;
            Add<u64>(y, q)
          }
        }
    }
} // end 0x42::Test

// -- Sourcified model before bytecode pipeline
module 0x42::Test {
    fun foo(g: |(u64, u64, u64, u64)|u64, x: u64, y: u64, z: u64, q: u64): u64 {
        g(x, y, z, q)
    }
    public fun test() {
        if (foo(|(arg0,arg1,arg2,arg3)| __lambda__1__test(arg0, arg1, arg2, arg3), 10, 100, 1000, 10000) == 10100) () else abort 0;
    }
    fun __lambda__1__test(param$0: u64, y: u64, param$2: u64, q: u64): u64 {
        let _ = param$2;
        let _ = param$0;
        y + q
    }
}
