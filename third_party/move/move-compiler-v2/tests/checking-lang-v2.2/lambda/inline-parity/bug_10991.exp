// -- Model dump before bytecode pipeline
module 0x42::Test {
    private fun foo(f: |(u64, u64)|u64,g: |(u64, u64)|u64,x: u64,_y: u64): u64 {
        Add<u64>((f)(x, _y), (g)(x, _y))
    }
    public fun test() {
        if Eq<u64>(Test::foo(closure#0Test::__lambda__1__test(), closure#0Test::__lambda__2__test(), 10, 100), 110) {
          Tuple()
        } else {
          Abort(0)
        };
        Tuple()
    }
    private fun __lambda__1__test(x: u64,param$1: u64): u64 {
        {
          let _: u64 = param$1;
          x
        }
    }
    private fun __lambda__2__test(param$0: u64,y: u64): u64 {
        {
          let _: u64 = param$0;
          y
        }
    }
} // end 0x42::Test

// -- Sourcified model before bytecode pipeline
module 0x42::Test {
    fun foo(f: |(u64, u64)|u64, g: |(u64, u64)|u64, x: u64, _y: u64): u64 {
        f(x, _y) + g(x, _y)
    }
    public fun test() {
        if (foo(|(arg0,arg1)| __lambda__1__test(arg0, arg1), |(arg0,arg1)| __lambda__2__test(arg0, arg1), 10, 100) == 110) () else abort 0;
    }
    fun __lambda__1__test(x: u64, param$1: u64): u64 {
        let _ = param$1;
        x
    }
    fun __lambda__2__test(param$0: u64, y: u64): u64 {
        let _ = param$0;
        y
    }
}
