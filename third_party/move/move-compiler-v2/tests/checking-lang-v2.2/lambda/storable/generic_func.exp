// -- Model dump before bytecode pipeline
module 0x42::mod2 {
    struct Registry<F> {
        func: F,
    }
    public fun get_item<F>(addr: address): F
        acquires Registry(*)
     {
        select mod2::Registry.func<&Registry<F>>(BorrowGlobal(Immutable)<Registry<F>>(addr))
    }
    public fun item_exists<F>(addr: address): bool {
        exists<Registry<F>>(addr)
    }
    public fun save_item<F>(owner: &signer,f: F) {
        MoveTo<Registry<F>>(owner, pack mod2::Registry<F>(f));
        Tuple()
    }
} // end 0x42::mod2
module 0x42::mod3 {
    use std::signer;
    struct MyStruct1 {
        x: u64,
    }
    struct MyStruct2 {
        y: u8,
    }
    public fun test_item1(owner: signer) {
        mod3::test_items(owner, true);
        Tuple()
    }
    public fun test_item2(owner: signer) {
        mod3::test_items(owner, false);
        Tuple()
    }
    public fun test_items(owner: signer,use_1: bool) {
        {
          let struct1: MyStruct1 = pack mod3::MyStruct1(3);
          {
            let f1: |address|bool with copy+store = closure#0mod2::item_exists<MyStruct1>();
            {
              let f2: |address|bool with copy+store = closure#0mod2::item_exists<MyStruct2>();
              {
                let addr: address = signer::address_of(Borrow(Immutable)(owner));
                mod2::save_item<MyStruct1>(Borrow(Immutable)(owner), struct1);
                MoveTo<MyStruct1>(Borrow(Immutable)(owner), struct1);
                if use_1 {
                  mod2::save_item<|address|bool with copy+store>(Borrow(Immutable)(owner), f1);
                  Tuple()
                } else {
                  mod2::save_item<|address|bool with copy+store>(Borrow(Immutable)(owner), f2);
                  Tuple()
                };
                if mod2::item_exists<|address|bool with copy+store>(addr) {
                  Tuple()
                } else {
                  Abort(14566554180833181696)
                };
                {
                  let found_f: |address|bool with copy+store = mod2::get_item<|address|bool with copy+store>(addr);
                  if Eq<bool>(use_1, (found_f)(addr)) {
                    Tuple()
                  } else {
                    Abort(14566554180833181696)
                  };
                  Tuple()
                }
              }
            }
          }
        }
    }
} // end 0x42::mod3

// -- Sourcified model before bytecode pipeline
module 0x42::mod2 {
    struct Registry<F: copy + store> has store, key {
        func: F,
    }
    public fun get_item<F: copy + store>(addr: address): F
        acquires Registry
    {
        borrow_global<Registry<F>>(addr).func
    }
    public fun item_exists<F: copy + store>(addr: address): bool {
        exists<Registry<F>>(addr)
    }
    public fun save_item<F: copy + store>(owner: &signer, f: F) {
        move_to<Registry<F>>(owner, Registry<F>{func: f});
    }
}
module 0x42::mod3 {
    struct MyStruct1 has copy, store, key {
        x: u64,
    }
    struct MyStruct2 has copy, store, key {
        y: u8,
    }
    public fun test_item1(owner: signer) {
        test_items(owner, true);
    }
    public fun test_item2(owner: signer) {
        test_items(owner, false);
    }
    public fun test_items(owner: signer, use_1: bool) {
        let struct1 = MyStruct1{x: 3};
        let f1 = |arg0| 0x42::mod2::item_exists(arg0);
        let f2 = |arg0| 0x42::mod2::item_exists(arg0);
        let addr = 0x1::signer::address_of(&owner);
        0x42::mod2::save_item<MyStruct1>(&owner, struct1);
        move_to<MyStruct1>(&owner, struct1);
        if (use_1) {
            0x42::mod2::save_item<|address|bool with copy+store>(&owner, f1);
        } else {
            0x42::mod2::save_item<|address|bool with copy+store>(&owner, f2);
        };
        if (0x42::mod2::item_exists<|address|bool with copy+store>(addr)) () else abort 14566554180833181696;
        let found_f = 0x42::mod2::get_item<|address|bool with copy+store>(addr);
        if (use_1 == found_f(addr)) () else abort 14566554180833181696;
    }
}
