// -- Model dump before bytecode pipeline
module 0x42::m {
    struct T {
        dummy_field: bool,
    }
    struct G<T> {
        dummy_field: bool,
    }
    struct R {
        dummy_field: bool,
    }
    struct S {
        dummy_field: bool,
    }
    private fun f10(x: u64)
        reads *(m::make_up_address(x))
     {
        Tuple()
    }
    private fun f11()
        !reads *(0x42)
        !reads *(0x43)
     {
        Tuple()
    }
    private fun f12()
     {
        Tuple()
    }
    private fun f2()
        reads S(*)
     {
        Tuple()
    }
    private fun f3()
        writes S(*)
     {
        Tuple()
    }
    private fun f4()
        reads S(*)
     {
        Tuple()
    }
    private fun f5()
        reads 0x42::*(*)
     {
        Tuple()
    }
    private fun f6()
        reads 0x42::m::*(*)
     {
        Tuple()
    }
    private fun f7()
        reads *(*)
     {
        Tuple()
    }
    private fun f8()
        reads *(0x42)
     {
        Tuple()
    }
    private fun f9(a: address)
        reads *(a)
     {
        Tuple()
    }
    private fun f_multiple()
        reads R(*)
        writes T(*)
        writes S(*)
        reads G<u64>(*)
     {
        Tuple()
    }
    private fun make_up_address(_x: u64): address {
        0x42
    }
} // end 0x42::m

// -- Sourcified model before bytecode pipeline
module 0x42::m {
    struct T has store {
    }
    struct G<phantom T> has store {
    }
    struct R has store {
    }
    struct S has store {
    }
    fun f10(x: u64)
        reads *(m::make_up_address(x))
    {
    }
    fun f11()
        !reads *(0x42)
        !reads *(0x43)
    {
    }
    fun f12()
    {
    }
    fun f2()
        reads S
    {
    }
    fun f3()
        writes S
    {
    }
    fun f4()
        reads S
    {
    }
    fun f5()
        reads 0x42::*
    {
    }
    fun f6()
        reads 0x42::m::*
    {
    }
    fun f7()
        reads *
    {
    }
    fun f8()
        reads *(0x42)
    {
    }
    fun f9(a: address)
        reads *(a)
    {
    }
    fun f_multiple()
        reads R
        writes T
        writes S
        reads G<u64>
    {
    }
    fun make_up_address(_x: u64): address {
        0x42
    }
}
