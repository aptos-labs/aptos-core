============ bytecode before first stackless bytecode pipeline ================

[variant baseline]
fun m::bar($t0: &mut u64) {
  0: return ()
}


[variant baseline]
fun m::baz($t0: u64, $t1: u64) {
  0: return ()
}


[variant baseline]
public fun m::foo($t0: u64) {
     var $t1: u64
     var $t2: &mut u64
     var $t3: u64
  0: $t1 := m::one()
  1: $t2 := borrow_local($t0)
  2: m::bar($t2)
  3: $t3 := infer($t0)
  4: m::baz($t3, $t1)
  5: return ()
}


[variant baseline]
fun m::one(): u64 {
     var $t0: u64
  0: $t0 := 1
  1: return $t0
}

============ after AbortAnalysisProcessor: ================

[variant baseline]
fun m::bar($t0: &mut u64) {
     # abort state: {returns}
     # live vars: $t0
     # refs: [$t0 => #0]
     # #0
     #   <no edges>
     # #root
     #   <no edges>
     #
  0: return ()
}


[variant baseline]
fun m::baz($t0: u64, $t1: u64) {
     # abort state: {returns}
     # live vars: $t0, $t1
     # refs: []
     #
  0: return ()
}


[variant baseline]
public fun m::foo($t0: u64) {
     var $t1: u64
     var $t2: &mut u64
     var $t3: u64
     # abort state: {returns,aborts}
     # live vars: $t0
     # refs: []
     #
  0: $t1 := m::one()
     # abort state: {returns,aborts}
     # live vars: $t0, $t1
     # refs: []
     #
  1: $t2 := borrow_local($t0)
     # abort state: {returns,aborts}
     # live vars: $t0, $t1, $t2
     # refs: [$t2 => #2]
     # #2
     #   <no edges>
     # #root
     #   => (mut) #2 via [local `x`] at line 12
     #
  2: m::bar($t2)
     # abort state: {returns,aborts}
     # live vars: $t0, $t1
     # refs: []
     #
  3: $t3 := infer($t0)
     # abort state: {returns,aborts}
     # live vars: $t1, $t3
     # refs: []
     #
  4: m::baz($t3, $t1)
     # abort state: {returns}
     # live vars:
     # refs: []
     #
  5: return ()
}


[variant baseline]
fun m::one(): u64 {
     var $t0: u64
     # abort state: {returns}
     # live vars:
     # refs: []
     #
  0: $t0 := 1
     # abort state: {returns}
     # live vars: $t0
     # refs: []
     #
  1: return $t0
}

============ bytecode before second stackless bytecode pipeline ================

[variant baseline]
fun m::bar($t0: &mut u64) {
  0: return ()
}


[variant baseline]
fun m::baz($t0: u64, $t1: u64) {
  0: return ()
}


[variant baseline]
public fun m::foo($t0: u64) {
     var $t1: u64
     var $t2: &mut u64
     var $t3: u64
  0: $t1 := m::one()
  1: $t2 := borrow_local($t0)
  2: m::bar($t2)
  3: $t3 := infer($t0)
  4: m::baz($t3, $t1)
  5: return ()
}


[variant baseline]
fun m::one(): u64 {
     var $t0: u64
  0: $t0 := 1
  1: return $t0
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::bar($t0: &mut u64) {
     # live vars: $t0
  0: drop($t0)
     # live vars:
  1: return ()
}


[variant baseline]
fun m::baz($t0: u64, $t1: u64) {
     # live vars: $t0, $t1
  0: return ()
}


[variant baseline]
public fun m::foo($t0: u64) {
     var $t1: u64
     var $t2: &mut u64
     var $t3: u64
     # live vars: $t0
  0: $t1 := m::one()
     # live vars: $t0, $t1
  1: $t2 := borrow_local($t0)
     # live vars: $t0, $t1, $t2
  2: m::bar($t2)
     # live vars: $t0, $t1
  3: $t3 := move($t0)
     # live vars: $t1, $t3
  4: m::baz($t3, $t1)
     # live vars:
  5: return ()
}


[variant baseline]
fun m::one(): u64 {
     var $t0: u64
     # live vars:
  0: $t0 := 1
     # live vars: $t0
  1: return $t0
}


============ disassembled file-format ==================
// Move bytecode v8
module c0ffee.m {


bar(_x: &mut u64) /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](_x: &mut u64)
	1: Pop
	2: Ret
}
baz(_x: u64, _y: u64) /* def_idx: 1 */ {
B0:
	0: Ret
}
public foo(x: u64) /* def_idx: 2 */ {
L1:	t: u64
B0:
	0: Call one(): u64
	1: StLoc[1](t: u64)
	2: MutBorrowLoc[0](x: u64)
	3: Call bar(&mut u64)
	4: MoveLoc[0](x: u64)
	5: MoveLoc[1](t: u64)
	6: Call baz(u64, u64)
	7: Ret
}
one(): u64 /* def_idx: 3 */ {
B0:
	0: LdU64(1)
	1: Ret
}
}
============ bytecode verification succeeded ========
