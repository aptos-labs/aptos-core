============ initial bytecode ================

[variant baseline]
fun m::bar($t0: &mut u64, $t1: u64) {
  0: write_ref($t0, $t1)
  1: return ()
}


[variant baseline]
fun m::foo($t0: &u64): u64 {
     var $t1: u64
  0: $t1 := read_ref($t0)
  1: return $t1
}


[variant baseline]
public fun m::test($t0: &mut 0xc0ffee::m::S, $t1: u64) {
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: &u64
     var $t6: u64
     var $t7: &u64
     var $t8: bool
     var $t9: u64
     var $t10: &mut u64
     var $t11: u64
     var $t12: u64
     var $t13: u64
     var $t14: u64
     var $t15: u64
     var $t16: u64
  0: $t3 := infer($t1)
  1: $t5 := borrow_field<0xc0ffee::m::S>.x($t0)
  2: $t4 := read_ref($t5)
  3: $t2 := /($t3, $t4)
  4: $t7 := borrow_field<0xc0ffee::m::S>.y($t0)
  5: $t6 := m::foo($t7)
  6: label L0
  7: $t9 := infer($t2)
  8: $t8 := <($t9, $t6)
  9: if ($t8) goto 10 else goto 21
 10: label L2
 11: $t10 := borrow_field<0xc0ffee::m::S>.z($t0)
 12: $t12 := infer($t2)
 13: $t13 := 1
 14: $t11 := -($t12, $t13)
 15: m::bar($t10, $t11)
 16: $t15 := infer($t2)
 17: $t16 := 1
 18: $t14 := +($t15, $t16)
 19: $t2 := infer($t14)
 20: goto 23
 21: label L3
 22: goto 25
 23: label L4
 24: goto 6
 25: label L1
 26: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::bar($t0: &mut u64, $t1: u64) {
     # live vars: $t0, $t1
  0: write_ref($t0, $t1)
     # live vars:
  1: return ()
}


[variant baseline]
fun m::foo($t0: &u64): u64 {
     var $t1: u64
     # live vars: $t0
  0: $t1 := read_ref($t0)
     # live vars: $t1
  1: return $t1
}


[variant baseline]
public fun m::test($t0: &mut 0xc0ffee::m::S, $t1: u64) {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     var $t4: u64
     var $t5: &u64
     var $t6: u64 [unused]
     var $t7: &u64 [unused]
     var $t8: bool
     var $t9: u64
     var $t10: &mut u64
     var $t11: u64 [unused]
     var $t12: u64 [unused]
     var $t13: u64
     var $t14: u64 [unused]
     var $t15: u64 [unused]
     var $t16: u64 [unused]
     # live vars: $t0, $t1
  0: $t1 := move($t1)
     # live vars: $t0, $t1
  1: $t5 := borrow_field<0xc0ffee::m::S>.x($t0)
     # live vars: $t0, $t1, $t5
  2: $t4 := read_ref($t5)
     # live vars: $t0, $t1, $t4
  3: $t1 := /($t1, $t4)
     # live vars: $t0, $t1
  4: $t5 := borrow_field<0xc0ffee::m::S>.y($t0)
     # live vars: $t0, $t1, $t5
  5: $t4 := m::foo($t5)
     # live vars: $t0, $t1, $t4
  6: label L0
     # live vars: $t0, $t1, $t4
  7: $t9 := copy($t1)
     # live vars: $t0, $t1, $t4, $t9
  8: $t8 := <($t9, $t4)
     # live vars: $t0, $t1, $t4, $t8
  9: if ($t8) goto 10 else goto 21
     # live vars: $t0, $t1, $t4
 10: label L2
     # live vars: $t0, $t1, $t4
 11: $t10 := borrow_field<0xc0ffee::m::S>.z($t0)
     # live vars: $t0, $t1, $t4, $t10
 12: $t9 := copy($t1)
     # live vars: $t0, $t1, $t4, $t9, $t10
 13: $t13 := 1
     # live vars: $t0, $t1, $t4, $t9, $t10, $t13
 14: $t9 := -($t9, $t13)
     # live vars: $t0, $t1, $t4, $t9, $t10
 15: m::bar($t10, $t9)
     # live vars: $t0, $t1, $t4
 16: $t9 := move($t1)
     # live vars: $t0, $t4, $t9
 17: $t13 := 1
     # live vars: $t0, $t4, $t9, $t13
 18: $t9 := +($t9, $t13)
     # live vars: $t0, $t4, $t9
 19: $t1 := move($t9)
     # live vars: $t0, $t1, $t4
 20: goto 6
     # live vars: $t0, $t1, $t4
 21: label L3
     # live vars: $t0
 22: drop($t0)
     # live vars:
 23: return ()
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {
struct S {
	x: u64,
	y: u64,
	z: u64
}

bar(Arg0: &mut u64, Arg1: u64) /* def_idx: 0 */ {
B0:
	0: MoveLoc[1](Arg1: u64)
	1: MoveLoc[0](Arg0: &mut u64)
	2: WriteRef
	3: Ret
}
foo(Arg0: &u64): u64 /* def_idx: 1 */ {
B0:
	0: MoveLoc[0](Arg0: &u64)
	1: ReadRef
	2: Ret
}
public test(Arg0: &mut S, Arg1: u64) /* def_idx: 2 */ {
L2:	loc0: u64
B0:
	0: MoveLoc[1](Arg1: u64)
	1: CopyLoc[0](Arg0: &mut S)
	2: ImmBorrowField[0](S.x: u64)
	3: ReadRef
	4: Div
	5: StLoc[1](Arg1: u64)
	6: CopyLoc[0](Arg0: &mut S)
	7: ImmBorrowField[1](S.y: u64)
	8: Call foo(&u64): u64
	9: StLoc[2](loc0: u64)
B1:
	10: CopyLoc[1](Arg1: u64)
	11: CopyLoc[2](loc0: u64)
	12: Lt
	13: BrFalse(25)
B2:
	14: CopyLoc[0](Arg0: &mut S)
	15: MutBorrowField[2](S.z: u64)
	16: CopyLoc[1](Arg1: u64)
	17: LdU64(1)
	18: Sub
	19: Call bar(&mut u64, u64)
	20: MoveLoc[1](Arg1: u64)
	21: LdU64(1)
	22: Add
	23: StLoc[1](Arg1: u64)
	24: Branch(10)
B3:
	25: MoveLoc[0](Arg0: &mut S)
	26: Pop
	27: Ret
}
}
============ bytecode verification succeeded ========
