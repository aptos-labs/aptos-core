============ initial bytecode ================

[variant baseline]
fun m::foo() {
  0: return ()
}


[variant baseline]
fun m::one(): u64 {
     var $t0: u64
  0: $t0 := 1
  1: return $t0
}


[variant baseline]
public fun m::test($t0: u64) {
     var $t1: u64
     var $t2: bool
     var $t3: u64
     var $t4: u64
     var $t5: u64
  0: $t1 := m::two()
  1: $t4 := infer($t0)
  2: $t5 := m::one()
  3: $t3 := -($t4, $t5)
  4: $t2 := >($t3, $t1)
  5: if ($t2) goto 6 else goto 9
  6: label L0
  7: m::foo()
  8: goto 10
  9: label L1
 10: label L2
 11: return ()
}


[variant baseline]
fun m::two(): u64 {
     var $t0: u64
  0: $t0 := 2
  1: return $t0
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::foo() {
     # live vars:
  0: return ()
}


[variant baseline]
fun m::one(): u64 {
     var $t0: u64
     # live vars:
  0: $t0 := 1
     # live vars: $t0
  1: return $t0
}


[variant baseline]
public fun m::test($t0: u64) {
     var $t1: u64
     var $t2: bool
     var $t3: u64 [unused]
     var $t4: u64 [unused]
     var $t5: u64
     # live vars: $t0
  0: $t1 := m::two()
     # live vars: $t0, $t1
  1: $t0 := move($t0)
     # live vars: $t0, $t1
  2: $t5 := m::one()
     # live vars: $t0, $t1, $t5
  3: $t0 := -($t0, $t5)
     # live vars: $t0, $t1
  4: $t2 := >($t0, $t1)
     # live vars: $t2
  5: if ($t2) goto 8 else goto 6
     # live vars:
  6: label L3
     # live vars:
  7: goto 10
     # live vars:
  8: label L0
     # live vars:
  9: m::foo()
     # live vars:
 10: label L2
     # live vars:
 11: return ()
}


[variant baseline]
fun m::two(): u64 {
     var $t0: u64
     # live vars:
  0: $t0 := 2
     # live vars: $t0
  1: return $t0
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


foo() /* def_idx: 0 */ {
B0:
	0: Ret
}
one(): u64 /* def_idx: 1 */ {
B0:
	0: LdU64(1)
	1: Ret
}
public test(Arg0: u64) /* def_idx: 2 */ {
L1:	loc0: u64
B0:
	0: Call two(): u64
	1: StLoc[1](loc0: u64)
	2: MoveLoc[0](Arg0: u64)
	3: Call one(): u64
	4: Sub
	5: MoveLoc[1](loc0: u64)
	6: Gt
	7: BrTrue(9)
B1:
	8: Branch(10)
B2:
	9: Call foo()
B3:
	10: Ret
}
two(): u64 /* def_idx: 3 */ {
B0:
	0: LdU64(2)
	1: Ret
}
}
============ bytecode verification succeeded ========
