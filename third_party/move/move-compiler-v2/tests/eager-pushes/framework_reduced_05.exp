============ bytecode before first stackless bytecode pipeline ================

[variant baseline]
fun m::foo($t0: &signer, $t1: u64, $t2: u64) {
  0: return ()
}


[variant baseline]
public fun m::test($t0: &signer, $t1: 0xc0ffee::m::S) {
     var $t2: &signer
     var $t3: u64
     var $t4: &0xc0ffee::m::S
     var $t5: &u64
     var $t6: u64
     var $t7: &0xc0ffee::m::S
     var $t8: &u64
  0: $t2 := infer($t0)
  1: $t4 := borrow_local($t1)
  2: $t5 := borrow_field<0xc0ffee::m::S>.a($t4)
  3: $t3 := read_ref($t5)
  4: $t7 := borrow_local($t1)
  5: $t8 := borrow_field<0xc0ffee::m::S>.b($t7)
  6: $t6 := read_ref($t8)
  7: m::foo($t2, $t3, $t6)
  8: return ()
}

============ after AbortAnalysisProcessor: ================

[variant baseline]
fun m::foo($t0: &signer, $t1: u64, $t2: u64) {
     # abort state: {returns}
     # live vars: $t0, $t1, $t2
     # refs: [$t0 => #0]
     # #0
     #   <no edges>
     # #root
     #   <no edges>
     #
  0: return ()
}


[variant baseline]
public fun m::test($t0: &signer, $t1: 0xc0ffee::m::S) {
     var $t2: &signer
     var $t3: u64
     var $t4: &0xc0ffee::m::S
     var $t5: &u64
     var $t6: u64
     var $t7: &0xc0ffee::m::S
     var $t8: &u64
     # abort state: {returns,aborts}
     # live vars: $t0, $t1
     # refs: [$t0 => #0]
     # #0
     #   <no edges>
     # #root
     #   <no edges>
     #
  0: $t2 := infer($t0)
     # abort state: {returns,aborts}
     # live vars: $t1, $t2
     # refs: [$t2 => #2]
     # #2
     #   <no edges>
     # #root
     #   <no edges>
     #
  1: $t4 := borrow_local($t1)
     # abort state: {returns,aborts}
     # live vars: $t1, $t2, $t4
     # refs: [$t2 => #2, $t4 => #4]
     # #2
     #   <no edges>
     # #4
     #   <no edges>
     # #root
     #   => #4 via [local `y`] at line 10
     #
  2: $t5 := borrow_field<0xc0ffee::m::S>.a($t4)
     # abort state: {returns,aborts}
     # live vars: $t1, $t2, $t5
     # refs: [$t2 => #2, $t5 => #5]
     # #2
     #   <no edges>
     # #5
     #   <no edges>
     # #root
     #   => #5 via [local `y`, field `a`] at line 10
     #
  3: $t3 := read_ref($t5)
     # abort state: {returns,aborts}
     # live vars: $t1, $t2, $t3
     # refs: [$t2 => #2]
     # #2
     #   <no edges>
     # #root
     #   <no edges>
     #
  4: $t7 := borrow_local($t1)
     # abort state: {returns,aborts}
     # live vars: $t2, $t3, $t7
     # refs: [$t2 => #2, $t7 => #7]
     # #2
     #   <no edges>
     # #7
     #   <no edges>
     # #root
     #   => #7 via [local `y`] at line 10
     #
  5: $t8 := borrow_field<0xc0ffee::m::S>.b($t7)
     # abort state: {returns,aborts}
     # live vars: $t2, $t3, $t8
     # refs: [$t2 => #2, $t8 => #8]
     # #2
     #   <no edges>
     # #8
     #   <no edges>
     # #root
     #   => #8 via [local `y`, field `b`] at line 10
     #
  6: $t6 := read_ref($t8)
     # abort state: {returns,aborts}
     # live vars: $t2, $t3, $t6
     # refs: [$t2 => #2]
     # #2
     #   <no edges>
     # #root
     #   <no edges>
     #
  7: m::foo($t2, $t3, $t6)
     # abort state: {returns}
     # live vars:
     # refs: []
     #
  8: return ()
}

============ bytecode before second stackless bytecode pipeline ================

[variant baseline]
fun m::foo($t0: &signer, $t1: u64, $t2: u64) {
  0: return ()
}


[variant baseline]
public fun m::test($t0: &signer, $t1: 0xc0ffee::m::S) {
     var $t2: &signer
     var $t3: u64
     var $t4: &0xc0ffee::m::S
     var $t5: &u64
     var $t6: u64
     var $t7: &0xc0ffee::m::S
     var $t8: &u64
  0: $t2 := infer($t0)
  1: $t4 := borrow_local($t1)
  2: $t5 := borrow_field<0xc0ffee::m::S>.a($t4)
  3: $t3 := read_ref($t5)
  4: $t7 := borrow_local($t1)
  5: $t8 := borrow_field<0xc0ffee::m::S>.b($t7)
  6: $t6 := read_ref($t8)
  7: m::foo($t2, $t3, $t6)
  8: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::foo($t0: &signer, $t1: u64, $t2: u64) {
     # live vars: $t0, $t1, $t2
  0: drop($t0)
     # live vars:
  1: return ()
}


[variant baseline]
public fun m::test($t0: &signer, $t1: 0xc0ffee::m::S) {
     var $t2: &signer [unused]
     var $t3: u64
     var $t4: &0xc0ffee::m::S
     var $t5: &u64
     var $t6: u64
     var $t7: &0xc0ffee::m::S [unused]
     var $t8: &u64 [unused]
     # live vars: $t0, $t1
  0: $t0 := move($t0)
     # live vars: $t0, $t1
  1: $t4 := borrow_local($t1)
     # live vars: $t0, $t1, $t4
  2: $t5 := borrow_field<0xc0ffee::m::S>.a($t4)
     # live vars: $t0, $t1, $t5
  3: $t3 := read_ref($t5)
     # live vars: $t0, $t1, $t3
  4: $t4 := borrow_local($t1)
     # live vars: $t0, $t3, $t4
  5: $t5 := borrow_field<0xc0ffee::m::S>.b($t4)
     # live vars: $t0, $t3, $t5
  6: $t6 := read_ref($t5)
     # live vars: $t0, $t3, $t6
  7: m::foo($t0, $t3, $t6)
     # live vars:
  8: return ()
}


============ disassembled file-format ==================
// Move bytecode v8
module c0ffee.m {
struct S has drop {
	a: u64,
	b: u64
}

foo(_x: &signer, _y: u64, _z: u64) /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](_x: &signer)
	1: Pop
	2: Ret
}
public test(x: &signer, y: S) /* def_idx: 1 */ {
B0:
	0: MoveLoc[0](x: &signer)
	1: ImmBorrowLoc[1](y: S)
	2: ImmBorrowField[0](S.a: u64)
	3: ReadRef
	4: ImmBorrowLoc[1](y: S)
	5: ImmBorrowField[1](S.b: u64)
	6: ReadRef
	7: Call foo(&signer, u64, u64)
	8: Ret
}
}
============ bytecode verification succeeded ========
