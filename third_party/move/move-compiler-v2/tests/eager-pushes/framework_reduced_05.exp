============ initial bytecode ================

[variant baseline]
fun m::foo($t0: &signer, $t1: u64, $t2: u64) {
  0: return ()
}


[variant baseline]
public fun m::test($t0: &signer, $t1: 0xc0ffee::m::S) {
     var $t2: u64
     var $t3: &0xc0ffee::m::S
     var $t4: &u64
     var $t5: u64
     var $t6: &0xc0ffee::m::S
     var $t7: &u64
  0: $t3 := borrow_local($t1)
  1: $t4 := borrow_field<0xc0ffee::m::S>.a($t3)
  2: $t2 := read_ref($t4)
  3: $t6 := borrow_local($t1)
  4: $t7 := borrow_field<0xc0ffee::m::S>.b($t6)
  5: $t5 := read_ref($t7)
  6: m::foo($t0, $t2, $t5)
  7: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::foo($t0: &signer, $t1: u64, $t2: u64) {
     # live vars: $t0, $t1, $t2
  0: drop($t0)
     # live vars:
  1: return ()
}


[variant baseline]
public fun m::test($t0: &signer, $t1: 0xc0ffee::m::S) {
     var $t2: u64
     var $t3: &0xc0ffee::m::S
     var $t4: &u64
     var $t5: u64
     var $t6: &0xc0ffee::m::S [unused]
     var $t7: &u64 [unused]
     # live vars: $t0, $t1
  0: $t3 := borrow_local($t1)
     # live vars: $t0, $t1, $t3
  1: $t4 := borrow_field<0xc0ffee::m::S>.a($t3)
     # live vars: $t0, $t1, $t4
  2: $t2 := read_ref($t4)
     # live vars: $t0, $t1, $t2
  3: $t3 := borrow_local($t1)
     # live vars: $t0, $t2, $t3
  4: $t4 := borrow_field<0xc0ffee::m::S>.b($t3)
     # live vars: $t0, $t2, $t4
  5: $t5 := read_ref($t4)
     # live vars: $t0, $t2, $t5
  6: m::foo($t0, $t2, $t5)
     # live vars:
  7: return ()
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {
struct S has drop {
	a: u64,
	b: u64
}

foo(Arg0: &signer, Arg1: u64, Arg2: u64) /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](Arg0: &signer)
	1: Pop
	2: Ret
}
public test(Arg0: &signer, Arg1: S) /* def_idx: 1 */ {
L2:	loc0: u64
L3:	loc1: u64
B0:
	0: ImmBorrowLoc[1](Arg1: S)
	1: ImmBorrowField[0](S.a: u64)
	2: ReadRef
	3: ImmBorrowLoc[1](Arg1: S)
	4: ImmBorrowField[1](S.b: u64)
	5: ReadRef
	6: StLoc[2](loc0: u64)
	7: StLoc[3](loc1: u64)
	8: MoveLoc[0](Arg0: &signer)
	9: MoveLoc[3](loc1: u64)
	10: MoveLoc[2](loc0: u64)
	11: Call foo(&signer, u64, u64)
	12: Ret
}
}
============ bytecode verification succeeded ========
