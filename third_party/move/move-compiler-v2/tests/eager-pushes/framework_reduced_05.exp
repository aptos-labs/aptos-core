============ initial bytecode ================

[variant baseline]
fun m::foo($t0: &signer, $t1: u64, $t2: u64) {
  0: return ()
}


[variant baseline]
public fun m::test($t0: &signer, $t1: 0xc0ffee::m::S) {
     var $t2: &signer
     var $t3: u64
     var $t4: &0xc0ffee::m::S
     var $t5: &u64
     var $t6: u64
     var $t7: &0xc0ffee::m::S
     var $t8: &u64
  0: $t2 := infer($t0)
  1: $t4 := borrow_local($t1)
  2: $t5 := borrow_field<0xc0ffee::m::S>.a($t4)
  3: $t3 := read_ref($t5)
  4: $t7 := borrow_local($t1)
  5: $t8 := borrow_field<0xc0ffee::m::S>.b($t7)
  6: $t6 := read_ref($t8)
  7: m::foo($t2, $t3, $t6)
  8: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::foo($t0: &signer, $t1: u64, $t2: u64) {
     # live vars: $t0, $t1, $t2
  0: drop($t0)
     # live vars:
  1: return ()
}


[variant baseline]
public fun m::test($t0: &signer, $t1: 0xc0ffee::m::S) {
     var $t2: &signer [unused]
     var $t3: u64
     var $t4: &0xc0ffee::m::S
     var $t5: &u64
     var $t6: u64
     var $t7: &0xc0ffee::m::S [unused]
     var $t8: &u64 [unused]
     # live vars: $t0, $t1
  0: $t0 := move($t0)
     # live vars: $t0, $t1
  1: $t4 := borrow_local($t1)
     # live vars: $t0, $t1, $t4
  2: $t5 := borrow_field<0xc0ffee::m::S>.a($t4)
     # live vars: $t0, $t1, $t5
  3: $t3 := read_ref($t5)
     # live vars: $t0, $t1, $t3
  4: $t4 := borrow_local($t1)
     # live vars: $t0, $t3, $t4
  5: $t5 := borrow_field<0xc0ffee::m::S>.b($t4)
     # live vars: $t0, $t3, $t5
  6: $t6 := read_ref($t5)
     # live vars: $t0, $t3, $t6
  7: m::foo($t0, $t3, $t6)
     # live vars:
  8: return ()
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {
struct S has drop {
	a: u64,
	b: u64
}

foo(Arg0: &signer, Arg1: u64, Arg2: u64) /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](Arg0: &signer)
	1: Pop
	2: Ret
}
public test(Arg0: &signer, Arg1: S) /* def_idx: 1 */ {
B0:
	0: MoveLoc[0](Arg0: &signer)
	1: ImmBorrowLoc[1](Arg1: S)
	2: ImmBorrowField[0](S.a: u64)
	3: ReadRef
	4: ImmBorrowLoc[1](Arg1: S)
	5: ImmBorrowField[1](S.b: u64)
	6: ReadRef
	7: Call foo(&signer, u64, u64)
	8: Ret
}
}
============ bytecode verification succeeded ========
