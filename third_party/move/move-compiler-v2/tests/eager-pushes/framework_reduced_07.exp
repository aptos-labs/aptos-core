============ initial bytecode ================

[variant baseline]
fun m::bar($t0: &mut u64, $t1: u64) {
  0: write_ref($t0, $t1)
  1: return ()
}


[variant baseline]
fun m::foo($t0: &mut u64, $t1: u64): &mut u64 {
     var $t2: &mut u64
  0: write_ref($t0, $t1)
  1: $t2 := infer($t0)
  2: return $t2
}


[variant baseline]
public fun m::test($t0: &mut 0xc0ffee::m::S, $t1: u64) {
     var $t2: &mut u64
     var $t3: &mut u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: &u64
     var $t8: u64
     var $t9: u64
     var $t10: u64
     var $t11: &u64
  0: $t3 := borrow_field<0xc0ffee::m::S>.x($t0)
  1: $t5 := infer($t1)
  2: $t7 := borrow_field<0xc0ffee::m::S>.y($t0)
  3: $t6 := read_ref($t7)
  4: $t4 := /($t5, $t6)
  5: $t2 := m::foo($t3, $t4)
  6: $t9 := infer($t1)
  7: $t11 := borrow_field<0xc0ffee::m::S>.y($t0)
  8: $t10 := read_ref($t11)
  9: $t8 := /($t9, $t10)
 10: m::bar($t2, $t8)
 11: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::bar($t0: &mut u64, $t1: u64) {
     # live vars: $t0, $t1
  0: write_ref($t0, $t1)
     # live vars:
  1: return ()
}


[variant baseline]
fun m::foo($t0: &mut u64, $t1: u64): &mut u64 {
     var $t2: &mut u64 [unused]
     # live vars: $t0, $t1
  0: write_ref($t0, $t1)
     # live vars: $t0
  1: $t0 := move($t0)
     # live vars: $t0
  2: return $t0
}


[variant baseline]
public fun m::test($t0: &mut 0xc0ffee::m::S, $t1: u64) {
     var $t2: &mut u64 [unused]
     var $t3: &mut u64
     var $t4: u64 [unused]
     var $t5: u64
     var $t6: u64
     var $t7: &u64
     var $t8: u64 [unused]
     var $t9: u64 [unused]
     var $t10: u64 [unused]
     var $t11: &u64 [unused]
     # live vars: $t0, $t1
  0: $t3 := borrow_field<0xc0ffee::m::S>.x($t0)
     # live vars: $t0, $t1, $t3
  1: $t5 := copy($t1)
     # live vars: $t0, $t1, $t3, $t5
  2: $t7 := borrow_field<0xc0ffee::m::S>.y($t0)
     # live vars: $t0, $t1, $t3, $t5, $t7
  3: $t6 := read_ref($t7)
     # live vars: $t0, $t1, $t3, $t5, $t6
  4: $t5 := /($t5, $t6)
     # live vars: $t0, $t1, $t3, $t5
  5: $t3 := m::foo($t3, $t5)
     # live vars: $t0, $t1, $t3
  6: $t1 := move($t1)
     # live vars: $t0, $t1, $t3
  7: $t7 := borrow_field<0xc0ffee::m::S>.y($t0)
     # live vars: $t1, $t3, $t7
  8: $t5 := read_ref($t7)
     # live vars: $t1, $t3, $t5
  9: $t1 := /($t1, $t5)
     # live vars: $t1, $t3
 10: m::bar($t3, $t1)
     # live vars:
 11: return ()
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {
struct S {
	x: u64,
	y: u64
}

bar(Arg0: &mut u64, Arg1: u64) /* def_idx: 0 */ {
B0:
	0: MoveLoc[1](Arg1: u64)
	1: MoveLoc[0](Arg0: &mut u64)
	2: WriteRef
	3: Ret
}
foo(Arg0: &mut u64, Arg1: u64): &mut u64 /* def_idx: 1 */ {
B0:
	0: MoveLoc[1](Arg1: u64)
	1: CopyLoc[0](Arg0: &mut u64)
	2: WriteRef
	3: MoveLoc[0](Arg0: &mut u64)
	4: Ret
}
public test(Arg0: &mut S, Arg1: u64) /* def_idx: 2 */ {
B0:
	0: CopyLoc[0](Arg0: &mut S)
	1: MutBorrowField[0](S.x: u64)
	2: CopyLoc[1](Arg1: u64)
	3: CopyLoc[0](Arg0: &mut S)
	4: ImmBorrowField[1](S.y: u64)
	5: ReadRef
	6: Div
	7: Call foo(&mut u64, u64): &mut u64
	8: MoveLoc[1](Arg1: u64)
	9: MoveLoc[0](Arg0: &mut S)
	10: ImmBorrowField[1](S.y: u64)
	11: ReadRef
	12: Div
	13: Call bar(&mut u64, u64)
	14: Ret
}
}
============ bytecode verification succeeded ========
