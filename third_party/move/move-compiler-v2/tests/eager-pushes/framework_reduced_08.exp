============ initial bytecode ================

[variant baseline]
fun m::bar($t0: &u64, $t1: u64) {
  0: return ()
}


[variant baseline]
fun m::foo($t0: &u64, $t1: u64): &u64 {
     var $t2: &u64
  0: $t2 := infer($t0)
  1: return $t2
}


[variant baseline]
public fun m::test($t0: &0xc0ffee::m::S, $t1: u64) {
     var $t2: &u64
     var $t3: &u64
     var $t4: u64
     var $t5: u64
     var $t6: &u64
     var $t7: u64
     var $t8: u64
     var $t9: &u64
  0: $t3 := borrow_field<0xc0ffee::m::S>.x($t0)
  1: $t6 := borrow_field<0xc0ffee::m::S>.y($t0)
  2: $t5 := read_ref($t6)
  3: $t4 := /($t1, $t5)
  4: $t2 := m::foo($t3, $t4)
  5: $t9 := borrow_field<0xc0ffee::m::S>.y($t0)
  6: $t8 := read_ref($t9)
  7: $t7 := /($t1, $t8)
  8: m::bar($t2, $t7)
  9: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::bar($t0: &u64, $t1: u64) {
     # live vars: $t0, $t1
  0: drop($t0)
     # live vars:
  1: return ()
}


[variant baseline]
fun m::foo($t0: &u64, $t1: u64): &u64 {
     var $t2: &u64 [unused]
     # live vars: $t0, $t1
  0: return $t0
}


[variant baseline]
public fun m::test($t0: &0xc0ffee::m::S, $t1: u64) {
     var $t2: &u64 [unused]
     var $t3: &u64
     var $t4: u64 [unused]
     var $t5: u64
     var $t6: &u64
     var $t7: u64 [unused]
     var $t8: u64 [unused]
     var $t9: &u64 [unused]
     # live vars: $t0, $t1
  0: $t3 := borrow_field<0xc0ffee::m::S>.x($t0)
     # live vars: $t0, $t1, $t3
  1: $t6 := borrow_field<0xc0ffee::m::S>.y($t0)
     # live vars: $t0, $t1, $t3, $t6
  2: $t5 := read_ref($t6)
     # live vars: $t0, $t1, $t3, $t5
  3: $t5 := /($t1, $t5)
     # live vars: $t0, $t1, $t3, $t5
  4: $t3 := m::foo($t3, $t5)
     # live vars: $t0, $t1, $t3
  5: $t6 := borrow_field<0xc0ffee::m::S>.y($t0)
     # live vars: $t1, $t3, $t6
  6: $t5 := read_ref($t6)
     # live vars: $t1, $t3, $t5
  7: $t1 := /($t1, $t5)
     # live vars: $t1, $t3
  8: m::bar($t3, $t1)
     # live vars:
  9: return ()
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {
struct S {
	x: u64,
	y: u64
}

bar(Arg0: &u64, Arg1: u64) /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](Arg0: &u64)
	1: Pop
	2: Ret
}
foo(Arg0: &u64, Arg1: u64): &u64 /* def_idx: 1 */ {
B0:
	0: MoveLoc[0](Arg0: &u64)
	1: Ret
}
public test(Arg0: &S, Arg1: u64) /* def_idx: 2 */ {
L2:	loc0: u64
B0:
	0: CopyLoc[0](Arg0: &S)
	1: ImmBorrowField[0](S.x: u64)
	2: CopyLoc[0](Arg0: &S)
	3: ImmBorrowField[1](S.y: u64)
	4: ReadRef
	5: StLoc[2](loc0: u64)
	6: CopyLoc[1](Arg1: u64)
	7: MoveLoc[2](loc0: u64)
	8: Div
	9: Call foo(&u64, u64): &u64
	10: MoveLoc[0](Arg0: &S)
	11: ImmBorrowField[1](S.y: u64)
	12: ReadRef
	13: StLoc[2](loc0: u64)
	14: MoveLoc[1](Arg1: u64)
	15: MoveLoc[2](loc0: u64)
	16: Div
	17: Call bar(&u64, u64)
	18: Ret
}
}
============ bytecode verification succeeded ========
