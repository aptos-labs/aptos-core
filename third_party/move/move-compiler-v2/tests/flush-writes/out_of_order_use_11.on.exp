============ after FlushWritesProcessor: ================

[variant baseline]
fun m::consume_2($t0: u64, $t1: u64) {
     # live vars: $t0, $t1
  0: return ()
}


[variant baseline]
fun m::one_one(): (u64, u64) {
     var $t0: u64
     var $t1: u64
     # live vars:
  0: $t0 := 1
     # live vars: $t0
  1: $t1 := 1
     # live vars: $t0, $t1
  2: return ($t0, $t1)
}


[variant baseline]
public fun m::test() {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64 [unused]
     var $t5: u64 [unused]
     # live vars:
  0: ($t0, $t1) := m::one_one()
     # live vars: $t0, $t1
  1: ($t2, $t3) := m::one_one()
     # live vars: $t0, $t1, $t2, $t3
  2: $t1 := move($t1)
     # live vars: $t0, $t1, $t2, $t3
  3: m::consume_2($t1, $t2)
     # live vars: $t0, $t3
  4: $t0 := move($t0)
     # live vars: $t0, $t3
  5: m::consume_2($t0, $t3)
     # live vars:
  6: return ()
}


============ disassembled file-format ==================
// Move bytecode v8
module c0ffee.m {


consume_2(_a: u64, _b: u64) /* def_idx: 0 */ {
B0:
	0: Ret
}
one_one(): u64 * u64 /* def_idx: 1 */ {
B0:
	0: LdU64(1)
	1: LdU64(1)
	2: Ret
}
public test() /* def_idx: 2 */ {
L0:	d: u64
L1:	c: u64
L2:	b: u64
B0:
	0: Call one_one(): u64 * u64
	1: Call one_one(): u64 * u64
	2: StLoc[0](d: u64)
	3: Call consume_2(u64, u64)
	4: MoveLoc[0](d: u64)
	5: Call consume_2(u64, u64)
	6: Ret
}
}
============ bytecode verification succeeded ========
