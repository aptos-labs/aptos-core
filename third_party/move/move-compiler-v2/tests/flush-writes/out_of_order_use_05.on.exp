============ after FlushWritesProcessor: ================

[variant baseline]
fun m::consume($t0: u64, $t1: u64, $t2: u64, $t3: u64, $t4: u64, $t5: u64) {
     # live vars: $t0, $t1, $t2, $t3, $t4, $t5
  0: return ()
}


[variant baseline]
fun m::one(): u64 {
     var $t0: u64
     # live vars:
  0: $t0 := 1
     # live vars: $t0
  1: return $t0
}


[variant baseline]
fun m::test() {
     var $t0: u64
     var $t1: u64
     var $t2: u64 [unused]
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     # flush: $t0
     # live vars:
  0: $t0 := m::one()
     # live vars: $t0
  1: $t1 := m::one()
     # live vars: $t0, $t1
  2: $t0 := move($t0)
     # live vars: $t0, $t1
  3: $t3 := m::one()
     # live vars: $t0, $t1, $t3
  4: $t4 := m::one()
     # live vars: $t0, $t1, $t3, $t4
  5: $t5 := m::one()
     # live vars: $t0, $t1, $t3, $t4, $t5
  6: $t6 := m::one()
     # live vars: $t0, $t1, $t3, $t4, $t5, $t6
  7: m::consume($t1, $t0, $t3, $t4, $t5, $t6)
     # live vars:
  8: return ()
}


============ disassembled file-format ==================
// Move bytecode v8
module c0ffee.m {


consume(_a: u64, _b: u64, _c: u64, _d: u64, _e: u64, _f: u64) /* def_idx: 0 */ {
B0:
	0: Ret
}
one(): u64 /* def_idx: 1 */ {
B0:
	0: LdU64(1)
	1: Ret
}
test() /* def_idx: 2 */ {
L0:	a: u64
B0:
	0: Call one(): u64
	1: StLoc[0](a: u64)
	2: Call one(): u64
	3: MoveLoc[0](a: u64)
	4: Call one(): u64
	5: Call one(): u64
	6: Call one(): u64
	7: Call one(): u64
	8: Call consume(u64, u64, u64, u64, u64, u64)
	9: Ret
}
}
============ bytecode verification succeeded ========
