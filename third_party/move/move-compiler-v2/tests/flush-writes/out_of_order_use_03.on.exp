============ after FlushWritesProcessor: ================

[variant baseline]
fun m::consume($t0: u64, $t1: u64, $t2: u64) {
     # live vars: $t0, $t1, $t2
  0: return ()
}


[variant baseline]
fun m::one_one(): (u64, u64) {
     var $t0: u64
     var $t1: u64
     # live vars:
  0: $t0 := 1
     # live vars: $t0
  1: $t1 := 1
     # live vars: $t0, $t1
  2: return ($t0, $t1)
}


[variant baseline]
public fun m::test() {
     var $t0: u64
     var $t1: u64
     var $t2: u64 [unused]
     var $t3: u64
     # flush: $t0
     # live vars:
  0: ($t0, $t1) := m::one_one()
     # live vars: $t0, $t1
  1: $t3 := copy($t0)
     # live vars: $t0, $t1, $t3
  2: m::consume($t1, $t3, $t0)
     # live vars:
  3: return ()
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


consume(Arg0: u64, Arg1: u64, Arg2: u64) /* def_idx: 0 */ {
B0:
	0: Ret
}
one_one(): u64 * u64 /* def_idx: 1 */ {
B0:
	0: LdU64(1)
	1: LdU64(1)
	2: Ret
}
public test() /* def_idx: 2 */ {
L0:	loc0: u64
L1:	loc1: u64
L2:	loc2: u64
B0:
	0: Call one_one(): u64 * u64
	1: StLoc[0](loc0: u64)
	2: StLoc[1](loc1: u64)
	3: CopyLoc[1](loc1: u64)
	4: StLoc[2](loc2: u64)
	5: MoveLoc[0](loc0: u64)
	6: MoveLoc[2](loc2: u64)
	7: MoveLoc[1](loc1: u64)
	8: Call consume(u64, u64, u64)
	9: Ret
}
}
============ bytecode verification succeeded ========
