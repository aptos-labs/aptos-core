============ after FlushWritesProcessor: ================

[variant baseline]
fun m::consume($t0: u64, $t1: &u64) {
     # live vars: $t0, $t1
  0: drop($t1)
     # live vars:
  1: return ()
}


[variant baseline]
fun m::one(): u64 {
     var $t0: u64
     # live vars:
  0: $t0 := 1
     # live vars: $t0
  1: return $t0
}


[variant baseline]
public fun m::test($t0: vector<u64>) {
     var $t1: u64
     var $t2: &vector<u64> [unused]
     var $t3: &vector<u64>
     var $t4: u64
     var $t5: bool
     var $t6: u64
     var $t7: u64
     var $t8: &u64 [unused]
     var $t9: &u64
     var $t10: &vector<u64>
     var $t11: &u64 [unused]
     var $t12: u64 [unused]
     var $t13: u64 [unused]
     var $t14: u64 [unused]
     var $t15: u64 [unused]
     # flush: $t1
     # live vars: $t0
  0: $t1 := m::one()
     # flush: $t3
     # live vars: $t0, $t1
  1: $t3 := borrow_local($t0)
     # flush: $t4
     # live vars: $t1, $t3
  2: $t4 := 0
     # live vars: $t1, $t3, $t4
  3: label L0
     # live vars: $t1, $t3, $t4
  4: $t6 := copy($t4)
     # live vars: $t1, $t3, $t4, $t6
  5: $t7 := vector::length<u64>($t3)
     # live vars: $t1, $t3, $t4, $t6, $t7
  6: $t5 := <($t6, $t7)
     # live vars: $t1, $t3, $t4, $t5
  7: if ($t5) goto 8 else goto 18
     # live vars: $t1, $t3, $t4
  8: label L2
     # live vars: $t1, $t3, $t4
  9: $t10 := copy($t3)
     # flush: $t9
     # live vars: $t1, $t3, $t4, $t10
 10: $t9 := vector::borrow<u64>($t10, $t4)
     # live vars: $t1, $t3, $t4, $t9
 11: $t6 := copy($t1)
     # live vars: $t1, $t3, $t4, $t6, $t9
 12: m::consume($t6, $t9)
     # live vars: $t1, $t3, $t4
 13: $t6 := move($t4)
     # live vars: $t1, $t3, $t6
 14: $t7 := 1
     # live vars: $t1, $t3, $t6, $t7
 15: $t6 := +($t6, $t7)
     # flush: $t4
     # live vars: $t1, $t3, $t6
 16: $t4 := move($t6)
     # live vars: $t1, $t3, $t4
 17: goto 3
     # live vars: $t1, $t3, $t4
 18: label L3
     # live vars: $t3
 19: drop($t3)
     # live vars:
 20: return ()
}


============ disassembled file-format ==================
// Move bytecode v8
module c0ffee.m {


consume(_a: u64, _b: &u64) /* def_idx: 0 */ {
B0:
	0: MoveLoc[1](_b: &u64)
	1: Pop
	2: Ret
}
one(): u64 /* def_idx: 1 */ {
B0:
	0: LdU64(1)
	1: Ret
}
public test(v: vector<u64>) /* def_idx: 2 */ {
L1:	x: u64
L2:	$t3: &vector<u64>
L3:	i: u64
L4:	$t9: &u64
B0:
	0: Call one(): u64
	1: StLoc[1](x: u64)
	2: ImmBorrowLoc[0](v: vector<u64>)
	3: StLoc[2]($t3: &vector<u64>)
	4: LdU64(0)
	5: StLoc[3](i: u64)
B1:
	6: CopyLoc[3](i: u64)
	7: CopyLoc[2]($t3: &vector<u64>)
	8: VecLen(2)
	9: Lt
	10: BrFalse(23)
B2:
	11: CopyLoc[2]($t3: &vector<u64>)
	12: CopyLoc[3](i: u64)
	13: VecImmBorrow(2)
	14: StLoc[4]($t9: &u64)
	15: CopyLoc[1](x: u64)
	16: MoveLoc[4]($t9: &u64)
	17: Call consume(u64, &u64)
	18: MoveLoc[3](i: u64)
	19: LdU64(1)
	20: Add
	21: StLoc[3](i: u64)
	22: Branch(6)
B3:
	23: MoveLoc[2]($t3: &vector<u64>)
	24: Pop
	25: Ret
}
}
============ bytecode verification succeeded ========
