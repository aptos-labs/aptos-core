============ after FlushWritesProcessor: ================

[variant baseline]
fun m::consume_1($t0: u64) {
     # live vars: $t0
  0: return ()
}


[variant baseline]
fun m::consume_2($t0: u64, $t1: u64) {
     # live vars: $t0, $t1
  0: return ()
}


[variant baseline]
fun m::one(): u64 {
     var $t0: u64
     # live vars:
  0: $t0 := 1
     # live vars: $t0
  1: return $t0
}


[variant baseline]
public fun m::test($t0: u64) {
     var $t1: u64
     var $t2: u64
     var $t3: u64 [unused]
     # live vars: $t0
  0: $t1 := m::one()
     # live vars: $t0, $t1
  1: $t2 := m::one()
     # live vars: $t0, $t1, $t2
  2: m::consume_1($t0)
     # live vars: $t1, $t2
  3: $t1 := move($t1)
     # live vars: $t1, $t2
  4: m::consume_2($t1, $t2)
     # live vars:
  5: return ()
}


============ disassembled file-format ==================
// Move bytecode v8
module c0ffee.m {


consume_1(_a: u64) /* def_idx: 0 */ {
B0:
	0: Ret
}
consume_2(_a: u64, _b: u64) /* def_idx: 1 */ {
B0:
	0: Ret
}
one(): u64 /* def_idx: 2 */ {
B0:
	0: LdU64(1)
	1: Ret
}
public test(a: u64) /* def_idx: 3 */ {
L1:	c: u64
L2:	b: u64
B0:
	0: Call one(): u64
	1: Call one(): u64
	2: MoveLoc[0](a: u64)
	3: Call consume_1(u64)
	4: Call consume_2(u64, u64)
	5: Ret
}
}
============ bytecode verification succeeded ========
