// -- Model dump before bytecode pipeline
module 0x42::mod1 {
    friend fun triple(x: u64): u64 {
        Mul<u64>(x, 3)
    }
} // end 0x42::mod1
module 0x42::mod2 {
    friend fun double(x: u64): u64 {
        Mul<u64>(x, 2)
    }
} // end 0x42::mod2
module 0x42::mod3 {
    public fun multiply(x: u64,y: u64): u64 {
        Mul<u64>(x, y)
    }
} // end 0x42::mod3
module 0x42::mod4 {
    public fun alt_multiply(x: u64,y: u64): u64 {
        Mul<u64>(x, y)
    }
} // end 0x42::mod4
module 0x42::test {
    use 0x42::mod1; // resolved as: 0x42::mod1
    use 0x42::mod2; // resolved as: 0x42::mod2
    use 0x42::mod3; // resolved as: 0x42::mod3
    use 0x42::mod4::{alt_multiply}; // resolved as: 0x42::mod4
    private fun add_mul(x: u64,y: u64,z: u64): u64 {
        Mul<u64>(z, Add<u64>(x, y))
    }
    private fun choose_function1(key: u64,x: u64): u64 {
        {
          let f: |u64|u64 = if Eq<u64>(key, 0) {
            mod2::double
          } else {
            if Eq<u64>(key, 1) {
              mod1::triple
            } else {
              if Eq<u64>(key, 2) {
                closure#1mod3::multiply(4)
              } else {
                if Eq<u64>(key, 3) {
                  closure#1mod4::alt_multiply(5)
                } else {
                  if Eq<u64>(key, 4) {
                    closure#1mod3::multiply(6)
                  } else {
                    if Eq<u64>(key, 5) {
                      closure#11test::multiply3(3, 2)
                    } else {
                      if Eq<u64>(key, 6) {
                        closure#1mod3::multiply(7)
                      } else {
                        if Eq<u64>(key, 7) {
                          closure#11test::multiply3(4, 2)
                        } else {
                          if Eq<u64>(key, 8) {
                            closure#11test::multiply3(3, 3)
                          } else {
                            if Eq<u64>(key, 9) {
                              closure#11test::multiply3(3, 5)
                            } else {
                              if Eq<u64>(key, 10) {
                                closure#1mod4::alt_multiply(11)
                              } else {
                                if Eq<u64>(key, 11) {
                                  {
                                    let g: |(u64, u64)|u64 = closure#0mod3::multiply();
                                    closure#1test::choose_function1$lambda$1(g)
                                  }
                                } else {
                                  if Eq<u64>(key, 12) {
                                    {
                                      let h: |u64|u64 = closure#1mod3::multiply(12);
                                      closure#1test::choose_function1$lambda$2(h)
                                    }
                                  } else {
                                    if Eq<u64>(key, 14) {
                                      {
                                        let i: |u64|u64 = closure#11test::multiply3(2, 2);
                                        closure#1test::choose_function1$lambda$3(i)
                                      }
                                    } else {
                                      {
                                        let i: |(u64, u64)|u64 = closure#0test::choose_function1$lambda$4();
                                        closure#1test::choose_function1$lambda$5(i)
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
          (f)(x)
        }
    }
    private fun multiply3(x: u64,y: u64,z: u64): u64 {
        Mul<u64>(Mul<u64>(x, y), z)
    }
    public fun test_functions() {
        {
          let i: u64 = 0;
          {
            let __update_iter_flag: bool = false;
            loop {
              if true {
                if __update_iter_flag {
                  i: u64 = Add<u64>(i, 1)
                } else {
                  __update_iter_flag: bool = true
                };
                if Lt<u64>(i, 15) {
                  {
                    let y: u64 = test::choose_function1(i, 3);
                    if Eq<u64>(y, Mul<u64>(Add<u64>(i, 2), 3)) {
                      Tuple()
                    } else {
                      Abort(i)
                    };
                    Tuple()
                  }
                } else {
                  break
                };
                Tuple()
              } else {
                break
              }
            };
            Tuple()
          }
        }
    }
    private fun choose_function1$lambda$1(g: |(u64, u64)|u64,x: u64): u64 {
        (g)(11, x)
    }
    private fun choose_function1$lambda$2(h: |u64|u64,x: u64): u64 {
        (h)(x)
    }
    private fun choose_function1$lambda$3(i: |u64|u64,z: u64): u64 {
        (i)(z)
    }
    private fun choose_function1$lambda$4(x: u64,y: u64): u64 {
        {
          let q: u64 = Sub<u64>(y, 1);
          mod3::multiply(x, Add<u64>(q, 1))
        }
    }
    private fun choose_function1$lambda$5(i: |(u64, u64)|u64,x: u64): u64 {
        (i)(15, x)
    }
} // end 0x42::test

// -- Sourcified model before bytecode pipeline
module 0x42::mod1 {
    friend 0x42::test;
    friend fun triple(x: u64): u64 {
        x * 3
    }
}
module 0x42::mod2 {
    friend 0x42::test;
    friend fun double(x: u64): u64 {
        x * 2
    }
}
module 0x42::mod3 {
    public fun multiply(x: u64, y: u64): u64 {
        x * y
    }
}
module 0x42::mod4 {
    public fun alt_multiply(x: u64, y: u64): u64 {
        x * y
    }
}
module 0x42::test {
    use 0x42::mod1;
    use 0x42::mod2;
    use 0x42::mod3;
    use 0x42::mod4;
    fun add_mul(x: u64, y: u64, z: u64): u64 {
        z * (x + y)
    }
    fun choose_function1(key: u64, x: u64): u64 {
        let f = if (key == 0) mod2::double else if (key == 1) mod1::triple else if (key == 2) |arg0| mod3::multiply(4, arg0) else if (key == 3) |arg0| mod4::alt_multiply(5, arg0) else if (key == 4) |arg0| mod3::multiply(6, arg0) else if (key == 5) |arg0| multiply3(3, 2, arg0) else if (key == 6) |arg0| mod3::multiply(7, arg0) else if (key == 7) |arg0| multiply3(4, 2, arg0) else if (key == 8) |arg0| multiply3(3, 3, arg0) else if (key == 9) |arg0| multiply3(3, 5, arg0) else if (key == 10) |arg0| mod4::alt_multiply(11, arg0) else if (key == 11) {
            let g = |(arg0,arg1)| mod3::multiply(arg0, arg1);
            |arg0| choose_function1$lambda$1(g, arg0)
        } else if (key == 12) {
            let h = |arg0| mod3::multiply(12, arg0);
            |arg0| choose_function1$lambda$2(h, arg0)
        } else if (key == 14) {
            let i = |arg0| multiply3(2, 2, arg0);
            |arg0| choose_function1$lambda$3(i, arg0)
        } else {
            let i = |(arg0,arg1)| choose_function1$lambda$4(arg0, arg1);
            |arg0| choose_function1$lambda$5(i, arg0)
        };
        f(x)
    }
    fun multiply3(x: u64, y: u64, z: u64): u64 {
        x * y * z
    }
    public fun test_functions() {
        let i = 0;
        let __update_iter_flag = false;
        while (true) {
            if (__update_iter_flag) i = i + 1 else __update_iter_flag = true;
            if (i < 15) {
                let y = choose_function1(i, 3);
                if (y == (i + 2) * 3) () else abort i;
            } else break;
        };
    }
    fun choose_function1$lambda$1(g: |(u64, u64)|u64, x: u64): u64 {
        g(11, x)
    }
    fun choose_function1$lambda$2(h: |u64|u64, x: u64): u64 {
        h(x)
    }
    fun choose_function1$lambda$3(i: |u64|u64, z: u64): u64 {
        i(z)
    }
    fun choose_function1$lambda$4(x: u64, y: u64): u64 {
        let q = y - 1;
        mod3::multiply(x, q + 1)
    }
    fun choose_function1$lambda$5(i: |(u64, u64)|u64, x: u64): u64 {
        i(15, x)
    }
}


Diagnostics:
error: Function-typed values not yet implemented except as parameters to calls to inline functions
   ┌─ tests/lambda/storable/doable_func.move:39:17
   │
39 │                 mod2::double
   │                 ^^^^^^^^^^^^

error: Function-typed values not yet implemented except as parameters to calls to inline functions
   ┌─ tests/lambda/storable/doable_func.move:41:17
   │
41 │                 mod1::triple
   │                 ^^^^^^^^^^^^

error: Function-typed values not yet implemented except as parameters to calls to inline functions
   ┌─ tests/lambda/storable/doable_func.move:43:17
   │
43 │                 |x| mod3::multiply(4, x)
   │                 ^^^^^^^^^^^^^^^^^^^^^^^^

error: Function-typed values not yet implemented except as parameters to calls to inline functions
   ┌─ tests/lambda/storable/doable_func.move:46:17
   │
46 │                 |y| alt_multiply(x, y)
   │                 ^^^^^^^^^^^^^^^^^^^^^^

error: Function-typed values not yet implemented except as parameters to calls to inline functions
   ┌─ tests/lambda/storable/doable_func.move:49:17
   │
49 │                 |y| mod3::multiply(x, y)
   │                 ^^^^^^^^^^^^^^^^^^^^^^^^

error: Function-typed values not yet implemented except as parameters to calls to inline functions
   ┌─ tests/lambda/storable/doable_func.move:51:17
   │
51 │                 |x| multiply3(3, 2, x)
   │                 ^^^^^^^^^^^^^^^^^^^^^^

error: Function-typed values not yet implemented except as parameters to calls to inline functions
   ┌─ tests/lambda/storable/doable_func.move:53:17
   │
53 │                 |x| mod3::multiply(7, x)
   │                 ^^^^^^^^^^^^^^^^^^^^^^^^

error: Function-typed values not yet implemented except as parameters to calls to inline functions
   ┌─ tests/lambda/storable/doable_func.move:55:17
   │
55 │                 |x| { multiply3(4, 2, x) }
   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: Function-typed values not yet implemented except as parameters to calls to inline functions
   ┌─ tests/lambda/storable/doable_func.move:57:17
   │
57 │                 |x| multiply3(3, 3, x)
   │                 ^^^^^^^^^^^^^^^^^^^^^^

error: Function-typed values not yet implemented except as parameters to calls to inline functions
   ┌─ tests/lambda/storable/doable_func.move:61:17
   │
61 │                 |z| multiply3(x + 1, y, z)
   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: Function-typed values not yet implemented except as parameters to calls to inline functions
   ┌─ tests/lambda/storable/doable_func.move:64:17
   │
64 │                 |x| alt_multiply(z, x)
   │                 ^^^^^^^^^^^^^^^^^^^^^^

error: Function-typed values not yet implemented except as parameters to calls to inline functions
   ┌─ tests/lambda/storable/doable_func.move:66:25
   │
66 │                 let g = |x, y| mod3::multiply(x, y);
   │                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: Calls to function values other than inline function parameters not yet implemented
   ┌─ tests/lambda/storable/doable_func.move:67:21
   │
67 │                 |x| g(11, x)
   │                     ^^^^^^^^

error: Function-typed values not yet implemented except as parameters to calls to inline functions
   ┌─ tests/lambda/storable/doable_func.move:67:17
   │
67 │                 |x| g(11, x)
   │                 ^^^^^^^^^^^^

error: Function-typed values not yet implemented except as parameters to calls to inline functions
   ┌─ tests/lambda/storable/doable_func.move:69:25
   │
69 │                 let h = |x| mod3::multiply(12, x);
   │                         ^^^^^^^^^^^^^^^^^^^^^^^^^

error: Calls to function values other than inline function parameters not yet implemented
   ┌─ tests/lambda/storable/doable_func.move:70:23
   │
70 │                 |x| { h(x) }
   │                       ^^^^

error: Function-typed values not yet implemented except as parameters to calls to inline functions
   ┌─ tests/lambda/storable/doable_func.move:70:17
   │
70 │                 |x| { h(x) }
   │                 ^^^^^^^^^^^^

error: Function-typed values not yet implemented except as parameters to calls to inline functions
   ┌─ tests/lambda/storable/doable_func.move:72:25
   │
72 │                 let i = |x| multiply3(2, 2, x);
   │                         ^^^^^^^^^^^^^^^^^^^^^^

error: Calls to function values other than inline function parameters not yet implemented
   ┌─ tests/lambda/storable/doable_func.move:73:21
   │
73 │                 |z| i(z)
   │                     ^^^^

error: Function-typed values not yet implemented except as parameters to calls to inline functions
   ┌─ tests/lambda/storable/doable_func.move:73:17
   │
73 │                 |z| i(z)
   │                 ^^^^^^^^

error: Function-typed values not yet implemented except as parameters to calls to inline functions
   ┌─ tests/lambda/storable/doable_func.move:75:25
   │
75 │                 let i = |x, y| { let q = y - 1; 0x42::mod3::multiply(x, q + 1)  };
   │                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: Calls to function values other than inline function parameters not yet implemented
   ┌─ tests/lambda/storable/doable_func.move:76:21
   │
76 │                 |x| i(15, x)
   │                     ^^^^^^^^

error: Function-typed values not yet implemented except as parameters to calls to inline functions
   ┌─ tests/lambda/storable/doable_func.move:76:17
   │
76 │                 |x| i(15, x)
   │                 ^^^^^^^^^^^^

error: Calls to function values other than inline function parameters not yet implemented
   ┌─ tests/lambda/storable/doable_func.move:78:9
   │
78 │         f(x)
   │         ^^^^
