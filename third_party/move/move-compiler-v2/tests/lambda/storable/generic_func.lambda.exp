// -- Model dump before env processor pipeline:
module 0x42::mod2 {
    struct Registry<F> {
        func: F,
    }
    public fun get_item<F>(addr: address): F
        acquires Registry(*)
     {
        select mod2::Registry.func<&Registry<F>>(BorrowGlobal(Immutable)<Registry<F>>(addr))
    }
    public fun item_exists<F>(addr: address): bool {
        exists<Registry<F>>(addr)
    }
    public fun save_item<F>(owner: &signer,f: F) {
        MoveTo<Registry<F>>(owner, pack mod2::Registry<F>(f));
        Tuple()
    }
} // end 0x42::mod2
module 0x42::mod3 {
    use std::signer;
    struct MyStruct1 {
        x: u64,
    }
    struct MyStruct2 {
        y: u8,
    }
    public fun test_item1(owner: signer) {
        mod3::test_items(owner, true);
        Tuple()
    }
    public fun test_item2(owner: signer) {
        mod3::test_items(owner, false);
        Tuple()
    }
    public fun test_items(owner: signer,use_1: bool) {
        {
          let struct1: MyStruct1 = pack mod3::MyStruct1(3);
          {
            let f1: |address|bool with copy+store =  move|addr: address| mod2::item_exists<MyStruct1>(addr) with copy, drop, store;
            {
              let f2: |address|bool with copy+store =  move|addr: address| mod2::item_exists<MyStruct2>(addr) with copy, drop, store;
              {
                let addr: address = signer::address_of(Borrow(Immutable)(owner));
                mod2::save_item<MyStruct1>(Borrow(Immutable)(owner), struct1);
                MoveTo<MyStruct1>(Borrow(Immutable)(owner), struct1);
                if use_1 {
                  mod2::save_item<|address|bool with copy+store>(Borrow(Immutable)(owner), f1);
                  Tuple()
                } else {
                  mod2::save_item<|address|bool with copy+store>(Borrow(Immutable)(owner), f2);
                  Tuple()
                };
                if mod2::item_exists<|address|bool with copy+store>(addr) {
                  Tuple()
                } else {
                  Abort(14566554180833181696)
                };
                {
                  let found_f: |address|bool with copy+store = mod2::get_item<|address|bool with copy+store>(addr);
                  if Eq<bool>(use_1, (found_f)(addr)) {
                    Tuple()
                  } else {
                    Abort(14566554180833181696)
                  };
                  Tuple()
                }
              }
            }
          }
        }
    }
} // end 0x42::mod3


// -- Model dump after env processor unused checks:
module 0x42::mod2 {
    struct Registry<F> {
        func: F,
    }
    public fun get_item<F>(addr: address): F
        acquires Registry(*)
     {
        select mod2::Registry.func<&Registry<F>>(BorrowGlobal(Immutable)<Registry<F>>(addr))
    }
    public fun item_exists<F>(addr: address): bool {
        exists<Registry<F>>(addr)
    }
    public fun save_item<F>(owner: &signer,f: F) {
        MoveTo<Registry<F>>(owner, pack mod2::Registry<F>(f));
        Tuple()
    }
} // end 0x42::mod2
module 0x42::mod3 {
    use std::signer;
    struct MyStruct1 {
        x: u64,
    }
    struct MyStruct2 {
        y: u8,
    }
    public fun test_item1(owner: signer) {
        mod3::test_items(owner, true);
        Tuple()
    }
    public fun test_item2(owner: signer) {
        mod3::test_items(owner, false);
        Tuple()
    }
    public fun test_items(owner: signer,use_1: bool) {
        {
          let struct1: MyStruct1 = pack mod3::MyStruct1(3);
          {
            let f1: |address|bool with copy+store =  move|addr: address| mod2::item_exists<MyStruct1>(addr) with copy, drop, store;
            {
              let f2: |address|bool with copy+store =  move|addr: address| mod2::item_exists<MyStruct2>(addr) with copy, drop, store;
              {
                let addr: address = signer::address_of(Borrow(Immutable)(owner));
                mod2::save_item<MyStruct1>(Borrow(Immutable)(owner), struct1);
                MoveTo<MyStruct1>(Borrow(Immutable)(owner), struct1);
                if use_1 {
                  mod2::save_item<|address|bool with copy+store>(Borrow(Immutable)(owner), f1);
                  Tuple()
                } else {
                  mod2::save_item<|address|bool with copy+store>(Borrow(Immutable)(owner), f2);
                  Tuple()
                };
                if mod2::item_exists<|address|bool with copy+store>(addr) {
                  Tuple()
                } else {
                  Abort(14566554180833181696)
                };
                {
                  let found_f: |address|bool with copy+store = mod2::get_item<|address|bool with copy+store>(addr);
                  if Eq<bool>(use_1, (found_f)(addr)) {
                    Tuple()
                  } else {
                    Abort(14566554180833181696)
                  };
                  Tuple()
                }
              }
            }
          }
        }
    }
} // end 0x42::mod3


// -- Model dump after env processor type parameter check:
module 0x42::mod2 {
    struct Registry<F> {
        func: F,
    }
    public fun get_item<F>(addr: address): F
        acquires Registry(*)
     {
        select mod2::Registry.func<&Registry<F>>(BorrowGlobal(Immutable)<Registry<F>>(addr))
    }
    public fun item_exists<F>(addr: address): bool {
        exists<Registry<F>>(addr)
    }
    public fun save_item<F>(owner: &signer,f: F) {
        MoveTo<Registry<F>>(owner, pack mod2::Registry<F>(f));
        Tuple()
    }
} // end 0x42::mod2
module 0x42::mod3 {
    use std::signer;
    struct MyStruct1 {
        x: u64,
    }
    struct MyStruct2 {
        y: u8,
    }
    public fun test_item1(owner: signer) {
        mod3::test_items(owner, true);
        Tuple()
    }
    public fun test_item2(owner: signer) {
        mod3::test_items(owner, false);
        Tuple()
    }
    public fun test_items(owner: signer,use_1: bool) {
        {
          let struct1: MyStruct1 = pack mod3::MyStruct1(3);
          {
            let f1: |address|bool with copy+store =  move|addr: address| mod2::item_exists<MyStruct1>(addr) with copy, drop, store;
            {
              let f2: |address|bool with copy+store =  move|addr: address| mod2::item_exists<MyStruct2>(addr) with copy, drop, store;
              {
                let addr: address = signer::address_of(Borrow(Immutable)(owner));
                mod2::save_item<MyStruct1>(Borrow(Immutable)(owner), struct1);
                MoveTo<MyStruct1>(Borrow(Immutable)(owner), struct1);
                if use_1 {
                  mod2::save_item<|address|bool with copy+store>(Borrow(Immutable)(owner), f1);
                  Tuple()
                } else {
                  mod2::save_item<|address|bool with copy+store>(Borrow(Immutable)(owner), f2);
                  Tuple()
                };
                if mod2::item_exists<|address|bool with copy+store>(addr) {
                  Tuple()
                } else {
                  Abort(14566554180833181696)
                };
                {
                  let found_f: |address|bool with copy+store = mod2::get_item<|address|bool with copy+store>(addr);
                  if Eq<bool>(use_1, (found_f)(addr)) {
                    Tuple()
                  } else {
                    Abort(14566554180833181696)
                  };
                  Tuple()
                }
              }
            }
          }
        }
    }
} // end 0x42::mod3


// -- Model dump after env processor check recursive struct definition:
module 0x42::mod2 {
    struct Registry<F> {
        func: F,
    }
    public fun get_item<F>(addr: address): F
        acquires Registry(*)
     {
        select mod2::Registry.func<&Registry<F>>(BorrowGlobal(Immutable)<Registry<F>>(addr))
    }
    public fun item_exists<F>(addr: address): bool {
        exists<Registry<F>>(addr)
    }
    public fun save_item<F>(owner: &signer,f: F) {
        MoveTo<Registry<F>>(owner, pack mod2::Registry<F>(f));
        Tuple()
    }
} // end 0x42::mod2
module 0x42::mod3 {
    use std::signer;
    struct MyStruct1 {
        x: u64,
    }
    struct MyStruct2 {
        y: u8,
    }
    public fun test_item1(owner: signer) {
        mod3::test_items(owner, true);
        Tuple()
    }
    public fun test_item2(owner: signer) {
        mod3::test_items(owner, false);
        Tuple()
    }
    public fun test_items(owner: signer,use_1: bool) {
        {
          let struct1: MyStruct1 = pack mod3::MyStruct1(3);
          {
            let f1: |address|bool with copy+store =  move|addr: address| mod2::item_exists<MyStruct1>(addr) with copy, drop, store;
            {
              let f2: |address|bool with copy+store =  move|addr: address| mod2::item_exists<MyStruct2>(addr) with copy, drop, store;
              {
                let addr: address = signer::address_of(Borrow(Immutable)(owner));
                mod2::save_item<MyStruct1>(Borrow(Immutable)(owner), struct1);
                MoveTo<MyStruct1>(Borrow(Immutable)(owner), struct1);
                if use_1 {
                  mod2::save_item<|address|bool with copy+store>(Borrow(Immutable)(owner), f1);
                  Tuple()
                } else {
                  mod2::save_item<|address|bool with copy+store>(Borrow(Immutable)(owner), f2);
                  Tuple()
                };
                if mod2::item_exists<|address|bool with copy+store>(addr) {
                  Tuple()
                } else {
                  Abort(14566554180833181696)
                };
                {
                  let found_f: |address|bool with copy+store = mod2::get_item<|address|bool with copy+store>(addr);
                  if Eq<bool>(use_1, (found_f)(addr)) {
                    Tuple()
                  } else {
                    Abort(14566554180833181696)
                  };
                  Tuple()
                }
              }
            }
          }
        }
    }
} // end 0x42::mod3


// -- Model dump after env processor check cyclic type instantiation:
module 0x42::mod2 {
    struct Registry<F> {
        func: F,
    }
    public fun get_item<F>(addr: address): F
        acquires Registry(*)
     {
        select mod2::Registry.func<&Registry<F>>(BorrowGlobal(Immutable)<Registry<F>>(addr))
    }
    public fun item_exists<F>(addr: address): bool {
        exists<Registry<F>>(addr)
    }
    public fun save_item<F>(owner: &signer,f: F) {
        MoveTo<Registry<F>>(owner, pack mod2::Registry<F>(f));
        Tuple()
    }
} // end 0x42::mod2
module 0x42::mod3 {
    use std::signer;
    struct MyStruct1 {
        x: u64,
    }
    struct MyStruct2 {
        y: u8,
    }
    public fun test_item1(owner: signer) {
        mod3::test_items(owner, true);
        Tuple()
    }
    public fun test_item2(owner: signer) {
        mod3::test_items(owner, false);
        Tuple()
    }
    public fun test_items(owner: signer,use_1: bool) {
        {
          let struct1: MyStruct1 = pack mod3::MyStruct1(3);
          {
            let f1: |address|bool with copy+store =  move|addr: address| mod2::item_exists<MyStruct1>(addr) with copy, drop, store;
            {
              let f2: |address|bool with copy+store =  move|addr: address| mod2::item_exists<MyStruct2>(addr) with copy, drop, store;
              {
                let addr: address = signer::address_of(Borrow(Immutable)(owner));
                mod2::save_item<MyStruct1>(Borrow(Immutable)(owner), struct1);
                MoveTo<MyStruct1>(Borrow(Immutable)(owner), struct1);
                if use_1 {
                  mod2::save_item<|address|bool with copy+store>(Borrow(Immutable)(owner), f1);
                  Tuple()
                } else {
                  mod2::save_item<|address|bool with copy+store>(Borrow(Immutable)(owner), f2);
                  Tuple()
                };
                if mod2::item_exists<|address|bool with copy+store>(addr) {
                  Tuple()
                } else {
                  Abort(14566554180833181696)
                };
                {
                  let found_f: |address|bool with copy+store = mod2::get_item<|address|bool with copy+store>(addr);
                  if Eq<bool>(use_1, (found_f)(addr)) {
                    Tuple()
                  } else {
                    Abort(14566554180833181696)
                  };
                  Tuple()
                }
              }
            }
          }
        }
    }
} // end 0x42::mod3


// -- Model dump after env processor unused struct params check:
module 0x42::mod2 {
    struct Registry<F> {
        func: F,
    }
    public fun get_item<F>(addr: address): F
        acquires Registry(*)
     {
        select mod2::Registry.func<&Registry<F>>(BorrowGlobal(Immutable)<Registry<F>>(addr))
    }
    public fun item_exists<F>(addr: address): bool {
        exists<Registry<F>>(addr)
    }
    public fun save_item<F>(owner: &signer,f: F) {
        MoveTo<Registry<F>>(owner, pack mod2::Registry<F>(f));
        Tuple()
    }
} // end 0x42::mod2
module 0x42::mod3 {
    use std::signer;
    struct MyStruct1 {
        x: u64,
    }
    struct MyStruct2 {
        y: u8,
    }
    public fun test_item1(owner: signer) {
        mod3::test_items(owner, true);
        Tuple()
    }
    public fun test_item2(owner: signer) {
        mod3::test_items(owner, false);
        Tuple()
    }
    public fun test_items(owner: signer,use_1: bool) {
        {
          let struct1: MyStruct1 = pack mod3::MyStruct1(3);
          {
            let f1: |address|bool with copy+store =  move|addr: address| mod2::item_exists<MyStruct1>(addr) with copy, drop, store;
            {
              let f2: |address|bool with copy+store =  move|addr: address| mod2::item_exists<MyStruct2>(addr) with copy, drop, store;
              {
                let addr: address = signer::address_of(Borrow(Immutable)(owner));
                mod2::save_item<MyStruct1>(Borrow(Immutable)(owner), struct1);
                MoveTo<MyStruct1>(Borrow(Immutable)(owner), struct1);
                if use_1 {
                  mod2::save_item<|address|bool with copy+store>(Borrow(Immutable)(owner), f1);
                  Tuple()
                } else {
                  mod2::save_item<|address|bool with copy+store>(Borrow(Immutable)(owner), f2);
                  Tuple()
                };
                if mod2::item_exists<|address|bool with copy+store>(addr) {
                  Tuple()
                } else {
                  Abort(14566554180833181696)
                };
                {
                  let found_f: |address|bool with copy+store = mod2::get_item<|address|bool with copy+store>(addr);
                  if Eq<bool>(use_1, (found_f)(addr)) {
                    Tuple()
                  } else {
                    Abort(14566554180833181696)
                  };
                  Tuple()
                }
              }
            }
          }
        }
    }
} // end 0x42::mod3


// -- Model dump after env processor access and use check before inlining:
module 0x42::mod2 {
    struct Registry<F> {
        func: F,
    }
    public fun get_item<F>(addr: address): F
        acquires Registry(*)
     {
        select mod2::Registry.func<&Registry<F>>(BorrowGlobal(Immutable)<Registry<F>>(addr))
    }
    public fun item_exists<F>(addr: address): bool {
        exists<Registry<F>>(addr)
    }
    public fun save_item<F>(owner: &signer,f: F) {
        MoveTo<Registry<F>>(owner, pack mod2::Registry<F>(f));
        Tuple()
    }
} // end 0x42::mod2
module 0x42::mod3 {
    use std::signer;
    struct MyStruct1 {
        x: u64,
    }
    struct MyStruct2 {
        y: u8,
    }
    public fun test_item1(owner: signer) {
        mod3::test_items(owner, true);
        Tuple()
    }
    public fun test_item2(owner: signer) {
        mod3::test_items(owner, false);
        Tuple()
    }
    public fun test_items(owner: signer,use_1: bool) {
        {
          let struct1: MyStruct1 = pack mod3::MyStruct1(3);
          {
            let f1: |address|bool with copy+store =  move|addr: address| mod2::item_exists<MyStruct1>(addr) with copy, drop, store;
            {
              let f2: |address|bool with copy+store =  move|addr: address| mod2::item_exists<MyStruct2>(addr) with copy, drop, store;
              {
                let addr: address = signer::address_of(Borrow(Immutable)(owner));
                mod2::save_item<MyStruct1>(Borrow(Immutable)(owner), struct1);
                MoveTo<MyStruct1>(Borrow(Immutable)(owner), struct1);
                if use_1 {
                  mod2::save_item<|address|bool with copy+store>(Borrow(Immutable)(owner), f1);
                  Tuple()
                } else {
                  mod2::save_item<|address|bool with copy+store>(Borrow(Immutable)(owner), f2);
                  Tuple()
                };
                if mod2::item_exists<|address|bool with copy+store>(addr) {
                  Tuple()
                } else {
                  Abort(14566554180833181696)
                };
                {
                  let found_f: |address|bool with copy+store = mod2::get_item<|address|bool with copy+store>(addr);
                  if Eq<bool>(use_1, (found_f)(addr)) {
                    Tuple()
                  } else {
                    Abort(14566554180833181696)
                  };
                  Tuple()
                }
              }
            }
          }
        }
    }
} // end 0x42::mod3


// -- Model dump after env processor inlining:
module 0x42::mod2 {
    struct Registry<F> {
        func: F,
    }
    public fun get_item<F>(addr: address): F
        acquires Registry(*)
     {
        select mod2::Registry.func<&Registry<F>>(BorrowGlobal(Immutable)<Registry<F>>(addr))
    }
    public fun item_exists<F>(addr: address): bool {
        exists<Registry<F>>(addr)
    }
    public fun save_item<F>(owner: &signer,f: F) {
        MoveTo<Registry<F>>(owner, pack mod2::Registry<F>(f));
        Tuple()
    }
} // end 0x42::mod2
module 0x42::mod3 {
    use std::signer;
    struct MyStruct1 {
        x: u64,
    }
    struct MyStruct2 {
        y: u8,
    }
    public fun test_item1(owner: signer) {
        mod3::test_items(owner, true);
        Tuple()
    }
    public fun test_item2(owner: signer) {
        mod3::test_items(owner, false);
        Tuple()
    }
    public fun test_items(owner: signer,use_1: bool) {
        {
          let struct1: MyStruct1 = pack mod3::MyStruct1(3);
          {
            let f1: |address|bool with copy+store =  move|addr: address| mod2::item_exists<MyStruct1>(addr) with copy, drop, store;
            {
              let f2: |address|bool with copy+store =  move|addr: address| mod2::item_exists<MyStruct2>(addr) with copy, drop, store;
              {
                let addr: address = signer::address_of(Borrow(Immutable)(owner));
                mod2::save_item<MyStruct1>(Borrow(Immutable)(owner), struct1);
                MoveTo<MyStruct1>(Borrow(Immutable)(owner), struct1);
                if use_1 {
                  mod2::save_item<|address|bool with copy+store>(Borrow(Immutable)(owner), f1);
                  Tuple()
                } else {
                  mod2::save_item<|address|bool with copy+store>(Borrow(Immutable)(owner), f2);
                  Tuple()
                };
                if mod2::item_exists<|address|bool with copy+store>(addr) {
                  Tuple()
                } else {
                  Abort(14566554180833181696)
                };
                {
                  let found_f: |address|bool with copy+store = mod2::get_item<|address|bool with copy+store>(addr);
                  if Eq<bool>(use_1, (found_f)(addr)) {
                    Tuple()
                  } else {
                    Abort(14566554180833181696)
                  };
                  Tuple()
                }
              }
            }
          }
        }
    }
} // end 0x42::mod3


// -- Model dump after env processor access and use check after inlining:
module 0x42::mod2 {
    struct Registry<F> {
        func: F,
    }
    public fun get_item<F>(addr: address): F
        acquires Registry(*)
     {
        select mod2::Registry.func<&Registry<F>>(BorrowGlobal(Immutable)<Registry<F>>(addr))
    }
    public fun item_exists<F>(addr: address): bool {
        exists<Registry<F>>(addr)
    }
    public fun save_item<F>(owner: &signer,f: F) {
        MoveTo<Registry<F>>(owner, pack mod2::Registry<F>(f));
        Tuple()
    }
} // end 0x42::mod2
module 0x42::mod3 {
    use std::signer;
    struct MyStruct1 {
        x: u64,
    }
    struct MyStruct2 {
        y: u8,
    }
    public fun test_item1(owner: signer) {
        mod3::test_items(owner, true);
        Tuple()
    }
    public fun test_item2(owner: signer) {
        mod3::test_items(owner, false);
        Tuple()
    }
    public fun test_items(owner: signer,use_1: bool) {
        {
          let struct1: MyStruct1 = pack mod3::MyStruct1(3);
          {
            let f1: |address|bool with copy+store =  move|addr: address| mod2::item_exists<MyStruct1>(addr) with copy, drop, store;
            {
              let f2: |address|bool with copy+store =  move|addr: address| mod2::item_exists<MyStruct2>(addr) with copy, drop, store;
              {
                let addr: address = signer::address_of(Borrow(Immutable)(owner));
                mod2::save_item<MyStruct1>(Borrow(Immutable)(owner), struct1);
                MoveTo<MyStruct1>(Borrow(Immutable)(owner), struct1);
                if use_1 {
                  mod2::save_item<|address|bool with copy+store>(Borrow(Immutable)(owner), f1);
                  Tuple()
                } else {
                  mod2::save_item<|address|bool with copy+store>(Borrow(Immutable)(owner), f2);
                  Tuple()
                };
                if mod2::item_exists<|address|bool with copy+store>(addr) {
                  Tuple()
                } else {
                  Abort(14566554180833181696)
                };
                {
                  let found_f: |address|bool with copy+store = mod2::get_item<|address|bool with copy+store>(addr);
                  if Eq<bool>(use_1, (found_f)(addr)) {
                    Tuple()
                  } else {
                    Abort(14566554180833181696)
                  };
                  Tuple()
                }
              }
            }
          }
        }
    }
} // end 0x42::mod3


// -- Model dump after env processor acquires check:
module 0x42::mod2 {
    struct Registry<F> {
        func: F,
    }
    public fun get_item<F>(addr: address): F
        acquires Registry(*)
     {
        select mod2::Registry.func<&Registry<F>>(BorrowGlobal(Immutable)<Registry<F>>(addr))
    }
    public fun item_exists<F>(addr: address): bool {
        exists<Registry<F>>(addr)
    }
    public fun save_item<F>(owner: &signer,f: F) {
        MoveTo<Registry<F>>(owner, pack mod2::Registry<F>(f));
        Tuple()
    }
} // end 0x42::mod2
module 0x42::mod3 {
    use std::signer;
    struct MyStruct1 {
        x: u64,
    }
    struct MyStruct2 {
        y: u8,
    }
    public fun test_item1(owner: signer) {
        mod3::test_items(owner, true);
        Tuple()
    }
    public fun test_item2(owner: signer) {
        mod3::test_items(owner, false);
        Tuple()
    }
    public fun test_items(owner: signer,use_1: bool) {
        {
          let struct1: MyStruct1 = pack mod3::MyStruct1(3);
          {
            let f1: |address|bool with copy+store =  move|addr: address| mod2::item_exists<MyStruct1>(addr) with copy, drop, store;
            {
              let f2: |address|bool with copy+store =  move|addr: address| mod2::item_exists<MyStruct2>(addr) with copy, drop, store;
              {
                let addr: address = signer::address_of(Borrow(Immutable)(owner));
                mod2::save_item<MyStruct1>(Borrow(Immutable)(owner), struct1);
                MoveTo<MyStruct1>(Borrow(Immutable)(owner), struct1);
                if use_1 {
                  mod2::save_item<|address|bool with copy+store>(Borrow(Immutable)(owner), f1);
                  Tuple()
                } else {
                  mod2::save_item<|address|bool with copy+store>(Borrow(Immutable)(owner), f2);
                  Tuple()
                };
                if mod2::item_exists<|address|bool with copy+store>(addr) {
                  Tuple()
                } else {
                  Abort(14566554180833181696)
                };
                {
                  let found_f: |address|bool with copy+store = mod2::get_item<|address|bool with copy+store>(addr);
                  if Eq<bool>(use_1, (found_f)(addr)) {
                    Tuple()
                  } else {
                    Abort(14566554180833181696)
                  };
                  Tuple()
                }
              }
            }
          }
        }
    }
} // end 0x42::mod3


// -- Model dump after env processor simplifier:
module 0x42::mod2 {
    struct Registry<F> {
        func: F,
    }
    public fun get_item<F>(addr: address): F
        acquires Registry(*)
     {
        select mod2::Registry.func<&Registry<F>>(BorrowGlobal(Immutable)<Registry<F>>(addr))
    }
    public fun item_exists<F>(addr: address): bool {
        exists<Registry<F>>(addr)
    }
    public fun save_item<F>(owner: &signer,f: F) {
        MoveTo<Registry<F>>(owner, pack mod2::Registry<F>(f));
        Tuple()
    }
} // end 0x42::mod2
module 0x42::mod3 {
    use std::signer;
    struct MyStruct1 {
        x: u64,
    }
    struct MyStruct2 {
        y: u8,
    }
    public fun test_item1(owner: signer) {
        mod3::test_items(owner, true);
        Tuple()
    }
    public fun test_item2(owner: signer) {
        mod3::test_items(owner, false);
        Tuple()
    }
    public fun test_items(owner: signer,use_1: bool) {
        {
          let struct1: MyStruct1 = pack mod3::MyStruct1(3);
          {
            let f1: |address|bool with copy+store =  move|addr: address| mod2::item_exists<MyStruct1>(addr) with copy, drop, store;
            {
              let f2: |address|bool with copy+store =  move|addr: address| mod2::item_exists<MyStruct2>(addr) with copy, drop, store;
              {
                let addr: address = signer::address_of(Borrow(Immutable)(owner));
                mod2::save_item<MyStruct1>(Borrow(Immutable)(owner), struct1);
                MoveTo<MyStruct1>(Borrow(Immutable)(owner), struct1);
                if use_1 {
                  mod2::save_item<|address|bool with copy+store>(Borrow(Immutable)(owner), f1);
                  Tuple()
                } else {
                  mod2::save_item<|address|bool with copy+store>(Borrow(Immutable)(owner), f2);
                  Tuple()
                };
                if mod2::item_exists<|address|bool with copy+store>(addr) {
                  Tuple()
                } else {
                  Abort(14566554180833181696)
                };
                {
                  let found_f: |address|bool with copy+store = mod2::get_item<|address|bool with copy+store>(addr);
                  if Eq<bool>(use_1, (found_f)(addr)) {
                    Tuple()
                  } else {
                    Abort(14566554180833181696)
                  };
                  Tuple()
                }
              }
            }
          }
        }
    }
} // end 0x42::mod3


// -- Model dump after env processor lambda-lifting:
module 0x42::mod2 {
    struct Registry<F> {
        func: F,
    }
    public fun get_item<F>(addr: address): F
        acquires Registry(*)
     {
        select mod2::Registry.func<&Registry<F>>(BorrowGlobal(Immutable)<Registry<F>>(addr))
    }
    public fun item_exists<F>(addr: address): bool {
        exists<Registry<F>>(addr)
    }
    public fun save_item<F>(owner: &signer,f: F) {
        MoveTo<Registry<F>>(owner, pack mod2::Registry<F>(f));
        Tuple()
    }
} // end 0x42::mod2
module 0x42::mod3 {
    use std::signer;
    struct MyStruct1 {
        x: u64,
    }
    struct MyStruct2 {
        y: u8,
    }
    public fun test_item1(owner: signer) {
        mod3::test_items(owner, true);
        Tuple()
    }
    public fun test_item2(owner: signer) {
        mod3::test_items(owner, false);
        Tuple()
    }
    public fun test_items(owner: signer,use_1: bool) {
        {
          let struct1: MyStruct1 = pack mod3::MyStruct1(3);
          {
            let f1: |address|bool with copy+store = mod2::item_exists;
            {
              let f2: |address|bool with copy+store = mod2::item_exists;
              {
                let addr: address = signer::address_of(Borrow(Immutable)(owner));
                mod2::save_item<MyStruct1>(Borrow(Immutable)(owner), struct1);
                MoveTo<MyStruct1>(Borrow(Immutable)(owner), struct1);
                if use_1 {
                  mod2::save_item<|address|bool with copy+store>(Borrow(Immutable)(owner), f1);
                  Tuple()
                } else {
                  mod2::save_item<|address|bool with copy+store>(Borrow(Immutable)(owner), f2);
                  Tuple()
                };
                if mod2::item_exists<|address|bool with copy+store>(addr) {
                  Tuple()
                } else {
                  Abort(14566554180833181696)
                };
                {
                  let found_f: |address|bool with copy+store = mod2::get_item<|address|bool with copy+store>(addr);
                  if Eq<bool>(use_1, (found_f)(addr)) {
                    Tuple()
                  } else {
                    Abort(14566554180833181696)
                  };
                  Tuple()
                }
              }
            }
          }
        }
    }
} // end 0x42::mod3


// -- Model dump after env processor specification checker:
module 0x42::mod2 {
    struct Registry<F> {
        func: F,
    }
    public fun get_item<F>(addr: address): F
        acquires Registry(*)
     {
        select mod2::Registry.func<&Registry<F>>(BorrowGlobal(Immutable)<Registry<F>>(addr))
    }
    public fun item_exists<F>(addr: address): bool {
        exists<Registry<F>>(addr)
    }
    public fun save_item<F>(owner: &signer,f: F) {
        MoveTo<Registry<F>>(owner, pack mod2::Registry<F>(f));
        Tuple()
    }
} // end 0x42::mod2
module 0x42::mod3 {
    use std::signer;
    struct MyStruct1 {
        x: u64,
    }
    struct MyStruct2 {
        y: u8,
    }
    public fun test_item1(owner: signer) {
        mod3::test_items(owner, true);
        Tuple()
    }
    public fun test_item2(owner: signer) {
        mod3::test_items(owner, false);
        Tuple()
    }
    public fun test_items(owner: signer,use_1: bool) {
        {
          let struct1: MyStruct1 = pack mod3::MyStruct1(3);
          {
            let f1: |address|bool with copy+store = mod2::item_exists;
            {
              let f2: |address|bool with copy+store = mod2::item_exists;
              {
                let addr: address = signer::address_of(Borrow(Immutable)(owner));
                mod2::save_item<MyStruct1>(Borrow(Immutable)(owner), struct1);
                MoveTo<MyStruct1>(Borrow(Immutable)(owner), struct1);
                if use_1 {
                  mod2::save_item<|address|bool with copy+store>(Borrow(Immutable)(owner), f1);
                  Tuple()
                } else {
                  mod2::save_item<|address|bool with copy+store>(Borrow(Immutable)(owner), f2);
                  Tuple()
                };
                if mod2::item_exists<|address|bool with copy+store>(addr) {
                  Tuple()
                } else {
                  Abort(14566554180833181696)
                };
                {
                  let found_f: |address|bool with copy+store = mod2::get_item<|address|bool with copy+store>(addr);
                  if Eq<bool>(use_1, (found_f)(addr)) {
                    Tuple()
                  } else {
                    Abort(14566554180833181696)
                  };
                  Tuple()
                }
              }
            }
          }
        }
    }
} // end 0x42::mod3


// -- Model dump after env processor specification rewriter:
module 0x42::mod2 {
    struct Registry<F> {
        func: F,
    }
    public fun get_item<F>(addr: address): F
        acquires Registry(*)
     {
        select mod2::Registry.func<&Registry<F>>(BorrowGlobal(Immutable)<Registry<F>>(addr))
    }
    public fun item_exists<F>(addr: address): bool {
        exists<Registry<F>>(addr)
    }
    public fun save_item<F>(owner: &signer,f: F) {
        MoveTo<Registry<F>>(owner, pack mod2::Registry<F>(f));
        Tuple()
    }
} // end 0x42::mod2
module 0x42::mod3 {
    use std::signer;
    struct MyStruct1 {
        x: u64,
    }
    struct MyStruct2 {
        y: u8,
    }
    public fun test_item1(owner: signer) {
        mod3::test_items(owner, true);
        Tuple()
    }
    public fun test_item2(owner: signer) {
        mod3::test_items(owner, false);
        Tuple()
    }
    public fun test_items(owner: signer,use_1: bool) {
        {
          let struct1: MyStruct1 = pack mod3::MyStruct1(3);
          {
            let f1: |address|bool with copy+store = mod2::item_exists;
            {
              let f2: |address|bool with copy+store = mod2::item_exists;
              {
                let addr: address = signer::address_of(Borrow(Immutable)(owner));
                mod2::save_item<MyStruct1>(Borrow(Immutable)(owner), struct1);
                MoveTo<MyStruct1>(Borrow(Immutable)(owner), struct1);
                if use_1 {
                  mod2::save_item<|address|bool with copy+store>(Borrow(Immutable)(owner), f1);
                  Tuple()
                } else {
                  mod2::save_item<|address|bool with copy+store>(Borrow(Immutable)(owner), f2);
                  Tuple()
                };
                if mod2::item_exists<|address|bool with copy+store>(addr) {
                  Tuple()
                } else {
                  Abort(14566554180833181696)
                };
                {
                  let found_f: |address|bool with copy+store = mod2::get_item<|address|bool with copy+store>(addr);
                  if Eq<bool>(use_1, (found_f)(addr)) {
                    Tuple()
                  } else {
                    Abort(14566554180833181696)
                  };
                  Tuple()
                }
              }
            }
          }
        }
    }
} // end 0x42::mod3



Diagnostics:
error: Function-typed values not yet implemented except as parameters to calls to inline functions
   ┌─ tests/lambda/storable/generic_func.move:36:30
   │
36 │         let f1 = move |addr| 0x42::mod2::item_exists<MyStruct1>(addr) with store+copy;
   │                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: Function-typed values not yet implemented except as parameters to calls to inline functions
   ┌─ tests/lambda/storable/generic_func.move:37:30
   │
37 │         let f2 = move |addr| 0x42::mod2::item_exists<MyStruct2>(addr) with store+copy;
   │                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: Calls to function values other than inline function parameters not yet implemented
   ┌─ tests/lambda/storable/generic_func.move:57:26
   │
57 │         assert!(use_1 == found_f(addr));
   │                          ^^^^^^^^^^^^^
