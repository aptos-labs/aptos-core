// -- Model dump before bytecode pipeline
module 0x42::mod2 {
    struct Registry<F> {
        func: F,
    }
    public fun get_item<F>(addr: address): F
        acquires Registry(*)
     {
        select mod2::Registry.func<&Registry<F>>(BorrowGlobal(Immutable)<Registry<F>>(addr))
    }
    public fun item_exists<F>(addr: address): bool {
        exists<Registry<F>>(addr)
    }
    public fun save_item<F>(owner: &signer,f: F) {
        MoveTo<Registry<F>>(owner, pack mod2::Registry<F>(f));
        Tuple()
    }
} // end 0x42::mod2
module 0x42::mod3 {
    use std::signer;
    struct MyStruct1 {
        x: u64,
    }
    struct MyStruct2 {
        y: u8,
    }
    public fun test_item1(owner: signer) {
        mod3::test_items(owner, true);
        Tuple()
    }
    public fun test_item2(owner: signer) {
        mod3::test_items(owner, false);
        Tuple()
    }
    public fun test_items(owner: signer,use_1: bool) {
        {
          let struct1: MyStruct1 = pack mod3::MyStruct1(3);
          {
            let f1: |address|bool with copy+store = closure#0mod2::item_exists<MyStruct1>();
            {
              let f2: |address|bool with copy+store = closure#0mod2::item_exists<MyStruct2>();
              {
                let addr: address = signer::address_of(Borrow(Immutable)(owner));
                mod2::save_item<MyStruct1>(Borrow(Immutable)(owner), struct1);
                MoveTo<MyStruct1>(Borrow(Immutable)(owner), struct1);
                if use_1 {
                  mod2::save_item<|address|bool with copy+store>(Borrow(Immutable)(owner), f1);
                  Tuple()
                } else {
                  mod2::save_item<|address|bool with copy+store>(Borrow(Immutable)(owner), f2);
                  Tuple()
                };
                if mod2::item_exists<|address|bool with copy+store>(addr) {
                  Tuple()
                } else {
                  Abort(14566554180833181696)
                };
                {
                  let found_f: |address|bool with copy+store = mod2::get_item<|address|bool with copy+store>(addr);
                  if Eq<bool>(use_1, (found_f)(addr)) {
                    Tuple()
                  } else {
                    Abort(14566554180833181696)
                  };
                  Tuple()
                }
              }
            }
          }
        }
    }
} // end 0x42::mod3

// -- Sourcified model before bytecode pipeline
module 0x42::mod2 {
    struct Registry<F: copy + store> has store, key {
        func: F,
    }
    public fun get_item<F: copy + store>(addr: address): F
        acquires Registry
    {
        borrow_global<Registry<F>>(addr).func
    }
    public fun item_exists<F: copy + store>(addr: address): bool {
        exists<Registry<F>>(addr)
    }
    public fun save_item<F: copy + store>(owner: &signer, f: F) {
        move_to<Registry<F>>(owner, Registry<F>{func: f});
    }
}
module 0x42::mod3 {
    struct MyStruct1 has copy, store, key {
        x: u64,
    }
    struct MyStruct2 has copy, store, key {
        y: u8,
    }
    public fun test_item1(owner: signer) {
        test_items(owner, true);
    }
    public fun test_item2(owner: signer) {
        test_items(owner, false);
    }
    public fun test_items(owner: signer, use_1: bool) {
        let struct1 = MyStruct1{x: 3};
        let f1 = |arg0| 0x42::mod2::item_exists(arg0);
        let f2 = |arg0| 0x42::mod2::item_exists(arg0);
        let addr = 0x1::signer::address_of(&owner);
        0x42::mod2::save_item<MyStruct1>(&owner, struct1);
        move_to<MyStruct1>(&owner, struct1);
        if (use_1) {
            0x42::mod2::save_item<|address|bool with copy+store>(&owner, f1);
        } else {
            0x42::mod2::save_item<|address|bool with copy+store>(&owner, f2);
        };
        if (0x42::mod2::item_exists<|address|bool with copy+store>(addr)) () else abort 14566554180833181696;
        let found_f = 0x42::mod2::get_item<|address|bool with copy+store>(addr);
        if (use_1 == found_f(addr)) () else abort 14566554180833181696;
    }
}

============ initial bytecode ================

[variant baseline]
public fun mod2::get_item<#0>($t0: address): #0 {
     var $t1: #0
     var $t2: &0x42::mod2::Registry<#0>
     var $t3: &#0
  0: $t2 := borrow_global<0x42::mod2::Registry<#0>>($t0)
  1: $t3 := borrow_field<0x42::mod2::Registry<#0>>.func($t2)
  2: $t1 := read_ref($t3)
  3: return $t1
}


[variant baseline]
public fun mod2::item_exists<#0>($t0: address): bool {
     var $t1: bool
  0: $t1 := exists<0x42::mod2::Registry<#0>>($t0)
  1: return $t1
}


[variant baseline]
public fun mod2::save_item<#0>($t0: &signer, $t1: #0) {
     var $t2: &signer
     var $t3: 0x42::mod2::Registry<#0>
  0: $t2 := infer($t0)
  1: $t3 := pack 0x42::mod2::Registry<#0>($t1)
  2: move_to<0x42::mod2::Registry<#0>>($t2, $t3)
  3: return ()
}


[variant baseline]
public fun mod3::test_item1($t0: signer) {
     var $t1: signer
     var $t2: bool
  0: $t1 := infer($t0)
  1: $t2 := true
  2: mod3::test_items($t1, $t2)
  3: return ()
}


[variant baseline]
public fun mod3::test_item2($t0: signer) {
     var $t1: signer
     var $t2: bool
  0: $t1 := infer($t0)
  1: $t2 := false
  2: mod3::test_items($t1, $t2)
  3: return ()
}


[variant baseline]
public fun mod3::test_items($t0: signer, $t1: bool) {
     var $t2: 0x42::mod3::MyStruct1
     var $t3: u64
     var $t4: |address|bool with copy+store
     var $t5: |address|bool with copy+store
     var $t6: address
     var $t7: &signer
     var $t8: &signer
     var $t9: &signer
     var $t10: &signer
     var $t11: &signer
     var $t12: bool
     var $t13: u64
     var $t14: |address|bool with copy+store
     var $t15: bool
     var $t16: bool
     var $t17: bool
     var $t18: address
     var $t19: u64
  0: $t3 := 3
  1: $t2 := pack 0x42::mod3::MyStruct1($t3)
  2: $t4 := closure#0 mod2::item_exists<0x42::mod3::MyStruct1>()
  3: $t5 := closure#0 mod2::item_exists<0x42::mod3::MyStruct2>()
  4: $t7 := borrow_local($t0)
  5: $t6 := signer::address_of($t7)
  6: $t8 := borrow_local($t0)
  7: mod2::save_item<0x42::mod3::MyStruct1>($t8, $t2)
  8: $t9 := borrow_local($t0)
  9: move_to<0x42::mod3::MyStruct1>($t9, $t2)
 10: if ($t1) goto 11 else goto 15
 11: label L0
 12: $t10 := borrow_local($t0)
 13: mod2::save_item<|address|bool with copy+store>($t10, $t4)
 14: goto 18
 15: label L1
 16: $t11 := borrow_local($t0)
 17: mod2::save_item<|address|bool with copy+store>($t11, $t5)
 18: label L2
 19: $t12 := mod2::item_exists<|address|bool with copy+store>($t6)
 20: if ($t12) goto 21 else goto 23
 21: label L3
 22: goto 26
 23: label L4
 24: $t13 := 14566554180833181696
 25: abort($t13)
 26: label L5
 27: $t14 := mod2::get_item<|address|bool with copy+store>($t6)
 28: $t16 := infer($t1)
 29: $t18 := infer($t6)
 30: $t17 := invoke($t18, $t14)
 31: $t15 := ==($t16, $t17)
 32: if ($t15) goto 33 else goto 35
 33: label L6
 34: goto 38
 35: label L7
 36: $t19 := 14566554180833181696
 37: abort($t19)
 38: label L8
 39: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun mod2::get_item<#0>($t0: address): #0 {
     var $t1: #0
     var $t2: &0x42::mod2::Registry<#0>
     var $t3: &#0
     # live vars: $t0
  0: $t2 := borrow_global<0x42::mod2::Registry<#0>>($t0)
     # live vars: $t2
  1: $t3 := borrow_field<0x42::mod2::Registry<#0>>.func($t2)
     # live vars: $t3
  2: $t1 := read_ref($t3)
     # live vars: $t1
  3: return $t1
}


[variant baseline]
public fun mod2::item_exists<#0>($t0: address): bool {
     var $t1: bool
     # live vars: $t0
  0: $t1 := exists<0x42::mod2::Registry<#0>>($t0)
     # live vars: $t1
  1: return $t1
}


[variant baseline]
public fun mod2::save_item<#0>($t0: &signer, $t1: #0) {
     var $t2: &signer [unused]
     var $t3: 0x42::mod2::Registry<#0>
     # live vars: $t0, $t1
  0: $t0 := move($t0)
     # live vars: $t0, $t1
  1: $t3 := pack 0x42::mod2::Registry<#0>($t1)
     # live vars: $t0, $t3
  2: move_to<0x42::mod2::Registry<#0>>($t0, $t3)
     # live vars:
  3: return ()
}


[variant baseline]
public fun mod3::test_item1($t0: signer) {
     var $t1: signer [unused]
     var $t2: bool
     # live vars: $t0
  0: $t0 := move($t0)
     # live vars: $t0
  1: $t2 := true
     # live vars: $t0, $t2
  2: mod3::test_items($t0, $t2)
     # live vars:
  3: return ()
}


[variant baseline]
public fun mod3::test_item2($t0: signer) {
     var $t1: signer [unused]
     var $t2: bool
     # live vars: $t0
  0: $t0 := move($t0)
     # live vars: $t0
  1: $t2 := false
     # live vars: $t0, $t2
  2: mod3::test_items($t0, $t2)
     # live vars:
  3: return ()
}


[variant baseline]
public fun mod3::test_items($t0: signer, $t1: bool) {
     var $t2: 0x42::mod3::MyStruct1
     var $t3: u64
     var $t4: |address|bool with copy+store
     var $t5: |address|bool with copy+store
     var $t6: address
     var $t7: &signer
     var $t8: &signer [unused]
     var $t9: &signer [unused]
     var $t10: &signer [unused]
     var $t11: &signer [unused]
     var $t12: bool
     var $t13: u64 [unused]
     var $t14: |address|bool with copy+store
     var $t15: bool [unused]
     var $t16: bool [unused]
     var $t17: bool
     var $t18: address
     var $t19: u64 [unused]
     # live vars: $t0, $t1
  0: $t3 := 3
     # live vars: $t0, $t1, $t3
  1: $t2 := pack 0x42::mod3::MyStruct1($t3)
     # live vars: $t0, $t1, $t2
  2: $t4 := closure#0 mod2::item_exists<0x42::mod3::MyStruct1>()
     # live vars: $t0, $t1, $t2, $t4
  3: $t5 := closure#0 mod2::item_exists<0x42::mod3::MyStruct2>()
     # live vars: $t0, $t1, $t2, $t4, $t5
  4: $t7 := borrow_local($t0)
     # live vars: $t0, $t1, $t2, $t4, $t5, $t7
  5: $t6 := signer::address_of($t7)
     # live vars: $t0, $t1, $t2, $t4, $t5, $t6
  6: $t7 := borrow_local($t0)
     # live vars: $t0, $t1, $t2, $t4, $t5, $t6, $t7
  7: mod2::save_item<0x42::mod3::MyStruct1>($t7, $t2)
     # live vars: $t0, $t1, $t2, $t4, $t5, $t6
  8: $t7 := borrow_local($t0)
     # live vars: $t0, $t1, $t2, $t4, $t5, $t6, $t7
  9: move_to<0x42::mod3::MyStruct1>($t7, $t2)
     # live vars: $t0, $t1, $t4, $t5, $t6
 10: if ($t1) goto 11 else goto 32
     # live vars: $t0, $t1, $t4, $t5, $t6
 11: label L0
     # live vars: $t0, $t1, $t4, $t6
 12: $t7 := borrow_local($t0)
     # live vars: $t1, $t4, $t6, $t7
 13: mod2::save_item<|address|bool with copy+store>($t7, $t4)
     # live vars: $t1, $t6
 14: label L2
     # live vars: $t1, $t6
 15: $t12 := mod2::item_exists<|address|bool with copy+store>($t6)
     # live vars: $t1, $t6, $t12
 16: if ($t12) goto 17 else goto 29
     # live vars: $t1, $t6
 17: label L3
     # live vars: $t1, $t6
 18: $t14 := mod2::get_item<|address|bool with copy+store>($t6)
     # live vars: $t1, $t6, $t14
 19: $t12 := move($t1)
     # live vars: $t6, $t12, $t14
 20: $t18 := move($t6)
     # live vars: $t12, $t14, $t18
 21: $t17 := invoke($t18, $t14)
     # live vars: $t12, $t17
 22: $t12 := ==($t12, $t17)
     # live vars: $t12
 23: if ($t12) goto 24 else goto 26
     # live vars:
 24: label L6
     # live vars:
 25: return ()
     # live vars:
 26: label L7
     # live vars:
 27: $t3 := 14566554180833181696
     # live vars: $t3
 28: abort($t3)
     # live vars: $t1, $t6
 29: label L4
     # live vars:
 30: $t3 := 14566554180833181696
     # live vars: $t3
 31: abort($t3)
     # live vars: $t0, $t1, $t4, $t5, $t6
 32: label L1
     # live vars: $t0, $t1, $t5, $t6
 33: $t7 := borrow_local($t0)
     # live vars: $t1, $t5, $t6, $t7
 34: mod2::save_item<|address|bool with copy+store>($t7, $t5)
     # live vars: $t1, $t6
 35: goto 14
}


============ disassembled file-format ==================
// Move bytecode v8
module 42.mod2 {
struct Registry<F: copy + store> has store, key {
	func: F
}

public get_item<F: copy + store>(addr: address): F /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](addr: address)
	1: ImmBorrowGlobalGeneric[0](Registry<F>)
	2: ImmBorrowFieldGeneric[0](Registry.func: F)
	3: ReadRef
	4: Ret
}
public item_exists<F: copy + store>(addr: address): bool /* def_idx: 1 */ {
B0:
	0: MoveLoc[0](addr: address)
	1: ExistsGeneric[0](Registry<F>)
	2: Ret
}
public save_item<F: copy + store>(owner: &signer, f: F) /* def_idx: 2 */ {
B0:
	0: MoveLoc[0](owner: &signer)
	1: MoveLoc[1](f: F)
	2: PackGeneric[0](Registry<F>)
	3: MoveToGeneric[0](Registry<F>)
	4: Ret
}
}// Move bytecode v8
module 42.mod3 {
use 0000000000000000000000000000000000000000000000000000000000000042::mod2;
use 0000000000000000000000000000000000000000000000000000000000000001::signer;


struct MyStruct1 has copy, store, key {
	x: u64
}
struct MyStruct2 has copy, store, key {
	y: u8
}

public test_item1(owner: signer) /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](owner: signer)
	1: LdTrue
	2: Call test_items(signer, bool)
	3: Ret
}
public test_item2(owner: signer) /* def_idx: 1 */ {
B0:
	0: MoveLoc[0](owner: signer)
	1: LdFalse
	2: Call test_items(signer, bool)
	3: Ret
}
public test_items(owner: signer, use_1: bool) /* def_idx: 2 */ {
L2:	struct1: MyStruct1
L3:	f1: |address|bool has copy + drop + store
L4:	f2: |address|bool has copy + drop + store
L5:	addr: address
L6:	found_f: |address|bool has copy + store
B0:
	0: LdU64(3)
	1: Pack[0](MyStruct1)
	2: StLoc[2](struct1: MyStruct1)
	3: PackClosureGeneric#0 mod2::item_exists<MyStruct1>(address): bool
	4: StLoc[3](f1: |address|bool has copy + drop + store)
	5: PackClosureGeneric#0 mod2::item_exists<MyStruct2>(address): bool
	6: StLoc[4](f2: |address|bool has copy + drop + store)
	7: ImmBorrowLoc[0](owner: signer)
	8: Call signer::address_of(&signer): address
	9: StLoc[5](addr: address)
	10: ImmBorrowLoc[0](owner: signer)
	11: CopyLoc[2](struct1: MyStruct1)
	12: Call mod2::save_item<MyStruct1>(&signer, MyStruct1)
	13: ImmBorrowLoc[0](owner: signer)
	14: MoveLoc[2](struct1: MyStruct1)
	15: MoveTo[0](MyStruct1)
	16: CopyLoc[1](use_1: bool)
	17: BrFalse(38)
B1:
	18: ImmBorrowLoc[0](owner: signer)
	19: MoveLoc[3](f1: |address|bool has copy + drop + store)
	20: Call mod2::save_item<|address|bool has copy + drop + store>(&signer, |address|bool has copy + drop + store)
B2:
	21: CopyLoc[5](addr: address)
	22: Call mod2::item_exists<|address|bool has copy + store>(address): bool
	23: BrFalse(36)
B3:
	24: CopyLoc[5](addr: address)
	25: Call mod2::get_item<|address|bool has copy + store>(address): |address|bool has copy + store
	26: StLoc[6](found_f: |address|bool has copy + store)
	27: MoveLoc[1](use_1: bool)
	28: MoveLoc[5](addr: address)
	29: MoveLoc[6](found_f: |address|bool has copy + store)
	30: CallClosure(|address|bool has copy + store)
	31: Eq
	32: BrFalse(34)
B4:
	33: Ret
B5:
	34: LdU64(14566554180833181696)
	35: Abort
B6:
	36: LdU64(14566554180833181696)
	37: Abort
B7:
	38: ImmBorrowLoc[0](owner: signer)
	39: MoveLoc[4](f2: |address|bool has copy + drop + store)
	40: Call mod2::save_item<|address|bool has copy + drop + store>(&signer, |address|bool has copy + drop + store)
	41: Branch(21)
}
}
============ bytecode verification succeeded ========
