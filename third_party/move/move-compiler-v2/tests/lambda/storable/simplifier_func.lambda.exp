// -- Model dump before bytecode pipeline
module 0x42::mod1 {
    struct S {
        x: u64,
    }
    public fun triple(x: u64): u64 {
        {
          let _f: |u64|u64 = closure#0mod1::__lambda__1__triple();
          Mul<u64>(x, 3)
        }
    }
    private fun __lambda__1__triple(x: u64): u64 {
        {
          let _t: S = pack mod1::S(3);
          x
        }
    }
} // end 0x42::mod1

// -- Sourcified model before bytecode pipeline
module 0x42::mod1 {
    struct S has drop {
        x: u64,
    }
    public fun triple(x: u64): u64 {
        let _f = |arg0| __lambda__1__triple(arg0);
        x * 3
    }
    fun __lambda__1__triple(x: u64): u64 {
        let _t = S{x: 3};
        x
    }
}

============ initial bytecode ================

[variant baseline]
public fun mod1::triple($t0: u64): u64 {
     var $t1: u64
     var $t2: |u64|u64
     var $t3: u64
     var $t4: u64
  0: $t2 := closure#0 mod1::__lambda__1__triple()
  1: $t3 := infer($t0)
  2: $t4 := 3
  3: $t1 := *($t3, $t4)
  4: return $t1
}


[variant baseline]
fun mod1::__lambda__1__triple($t0: u64): u64 {
     var $t1: u64
     var $t2: 0x42::mod1::S
     var $t3: u64
  0: $t3 := 3
  1: $t2 := pack 0x42::mod1::S($t3)
  2: $t1 := infer($t0)
  3: return $t1
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun mod1::triple($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: |u64|u64
     var $t3: u64 [unused]
     var $t4: u64
     # live vars: $t0
  0: $t2 := closure#0 mod1::__lambda__1__triple()
     # live vars: $t0
  1: $t0 := move($t0)
     # live vars: $t0
  2: $t4 := 3
     # live vars: $t0, $t4
  3: $t0 := *($t0, $t4)
     # live vars: $t0
  4: return $t0
}


[variant baseline]
fun mod1::__lambda__1__triple($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: 0x42::mod1::S
     var $t3: u64
     # live vars: $t0
  0: $t3 := 3
     # live vars: $t0, $t3
  1: $t2 := pack 0x42::mod1::S($t3)
     # live vars: $t0
  2: return $t0
}


============ disassembled file-format ==================
// Move bytecode v8
module 42.mod1 {
struct S has drop {
	x: u64
}

public triple(x: u64): u64 /* def_idx: 0 */ {
B0:
	0: PackClosure#0 __lambda__1__triple(u64): u64
	1: Pop
	2: MoveLoc[0](x: u64)
	3: LdU64(3)
	4: Mul
	5: Ret
}
__lambda__1__triple(x: u64): u64 /* def_idx: 1 */ {
B0:
	0: LdU64(3)
	1: Pack[0](S)
	2: Pop
	3: MoveLoc[0](x: u64)
	4: Ret
}
}
============ bytecode verification succeeded ========
