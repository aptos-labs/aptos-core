// -- Model dump before env processor pipeline:
module 0x42::mod1 {
    struct S {
        x: u64,
    }
    public fun triple(x: u64): u64 {
        {
          let f: |u64|u64 with copy+store = |x: u64| {
            let t: S = pack mod1::S(3);
            x
          };
          Mul<u64>(x, 3)
        }
    }
} // end 0x42::mod1


// -- Model dump after env processor unused checks:
module 0x42::mod1 {
    struct S {
        x: u64,
    }
    public fun triple(x: u64): u64 {
        {
          let f: |u64|u64 with copy+store = |x: u64| {
            let t: S = pack mod1::S(3);
            x
          };
          Mul<u64>(x, 3)
        }
    }
} // end 0x42::mod1


// -- Model dump after env processor type parameter check:
module 0x42::mod1 {
    struct S {
        x: u64,
    }
    public fun triple(x: u64): u64 {
        {
          let f: |u64|u64 with copy+store = |x: u64| {
            let t: S = pack mod1::S(3);
            x
          };
          Mul<u64>(x, 3)
        }
    }
} // end 0x42::mod1


// -- Model dump after env processor check recursive struct definition:
module 0x42::mod1 {
    struct S {
        x: u64,
    }
    public fun triple(x: u64): u64 {
        {
          let f: |u64|u64 with copy+store = |x: u64| {
            let t: S = pack mod1::S(3);
            x
          };
          Mul<u64>(x, 3)
        }
    }
} // end 0x42::mod1


// -- Model dump after env processor check cyclic type instantiation:
module 0x42::mod1 {
    struct S {
        x: u64,
    }
    public fun triple(x: u64): u64 {
        {
          let f: |u64|u64 with copy+store = |x: u64| {
            let t: S = pack mod1::S(3);
            x
          };
          Mul<u64>(x, 3)
        }
    }
} // end 0x42::mod1


// -- Model dump after env processor unused struct params check:
module 0x42::mod1 {
    struct S {
        x: u64,
    }
    public fun triple(x: u64): u64 {
        {
          let f: |u64|u64 with copy+store = |x: u64| {
            let t: S = pack mod1::S(3);
            x
          };
          Mul<u64>(x, 3)
        }
    }
} // end 0x42::mod1


// -- Model dump after env processor access and use check before inlining:
module 0x42::mod1 {
    struct S {
        x: u64,
    }
    public fun triple(x: u64): u64 {
        {
          let f: |u64|u64 with copy+store = |x: u64| {
            let t: S = pack mod1::S(3);
            x
          };
          Mul<u64>(x, 3)
        }
    }
} // end 0x42::mod1


// -- Model dump after env processor inlining:
module 0x42::mod1 {
    struct S {
        x: u64,
    }
    public fun triple(x: u64): u64 {
        {
          let f: |u64|u64 with copy+store = |x: u64| {
            let t: S = pack mod1::S(3);
            x
          };
          Mul<u64>(x, 3)
        }
    }
} // end 0x42::mod1


// -- Model dump after env processor access and use check after inlining:
module 0x42::mod1 {
    struct S {
        x: u64,
    }
    public fun triple(x: u64): u64 {
        {
          let f: |u64|u64 with copy+store = |x: u64| {
            let t: S = pack mod1::S(3);
            x
          };
          Mul<u64>(x, 3)
        }
    }
} // end 0x42::mod1


// -- Model dump after env processor acquires check:
module 0x42::mod1 {
    struct S {
        x: u64,
    }
    public fun triple(x: u64): u64 {
        {
          let f: |u64|u64 with copy+store = |x: u64| {
            let t: S = pack mod1::S(3);
            x
          };
          Mul<u64>(x, 3)
        }
    }
} // end 0x42::mod1


// -- Model dump after env processor simplifier:
module 0x42::mod1 {
    struct S {
        x: u64,
    }
    public fun triple(x: u64): u64 {
        {
          let f: |u64|u64 with copy+store = |x: u64| {
            let t: S = pack mod1::S(3);
            x
          };
          Mul<u64>(x, 3)
        }
    }
} // end 0x42::mod1



Diagnostics:
warning: Unused local variable `f`. Consider removing or prefixing with an underscore: `_f`
  ┌─ tests/lambda/storable/simplifier_func.move:7:13
  │
7 │         let f = |x: u64| { let t = S { x: 3 }; x };
  │             ^

warning: Unused local variable `t`. Consider removing or prefixing with an underscore: `_t`
  ┌─ tests/lambda/storable/simplifier_func.move:7:32
  │
7 │         let f = |x: u64| { let t = S { x: 3 }; x };
  │                                ^

error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
  ┌─ tests/lambda/storable/simplifier_func.move:7:17
  │
7 │         let f = |x: u64| { let t = S { x: 3 }; x };
  │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
