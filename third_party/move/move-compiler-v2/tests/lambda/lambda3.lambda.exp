// -- Model dump before env processor pipeline:
module 0x8675309::M {
    public fun lambda_not_allowed() {
        {
          let _x: |u64|u64 with copy+store = |i: u64| Add<u64>(i, 1);
          Tuple()
        }
    }
} // end 0x8675309::M


// -- Model dump after env processor unused checks:
module 0x8675309::M {
    public fun lambda_not_allowed() {
        {
          let _x: |u64|u64 with copy+store = |i: u64| Add<u64>(i, 1);
          Tuple()
        }
    }
} // end 0x8675309::M


// -- Model dump after env processor type parameter check:
module 0x8675309::M {
    public fun lambda_not_allowed() {
        {
          let _x: |u64|u64 with copy+store = |i: u64| Add<u64>(i, 1);
          Tuple()
        }
    }
} // end 0x8675309::M


// -- Model dump after env processor check recursive struct definition:
module 0x8675309::M {
    public fun lambda_not_allowed() {
        {
          let _x: |u64|u64 with copy+store = |i: u64| Add<u64>(i, 1);
          Tuple()
        }
    }
} // end 0x8675309::M


// -- Model dump after env processor check cyclic type instantiation:
module 0x8675309::M {
    public fun lambda_not_allowed() {
        {
          let _x: |u64|u64 with copy+store = |i: u64| Add<u64>(i, 1);
          Tuple()
        }
    }
} // end 0x8675309::M


// -- Model dump after env processor unused struct params check:
module 0x8675309::M {
    public fun lambda_not_allowed() {
        {
          let _x: |u64|u64 with copy+store = |i: u64| Add<u64>(i, 1);
          Tuple()
        }
    }
} // end 0x8675309::M


// -- Model dump after env processor access and use check before inlining:
module 0x8675309::M {
    public fun lambda_not_allowed() {
        {
          let _x: |u64|u64 with copy+store = |i: u64| Add<u64>(i, 1);
          Tuple()
        }
    }
} // end 0x8675309::M


// -- Model dump after env processor inlining:
module 0x8675309::M {
    public fun lambda_not_allowed() {
        {
          let _x: |u64|u64 with copy+store = |i: u64| Add<u64>(i, 1);
          Tuple()
        }
    }
} // end 0x8675309::M


// -- Model dump after env processor access and use check after inlining:
module 0x8675309::M {
    public fun lambda_not_allowed() {
        {
          let _x: |u64|u64 with copy+store = |i: u64| Add<u64>(i, 1);
          Tuple()
        }
    }
} // end 0x8675309::M


// -- Model dump after env processor acquires check:
module 0x8675309::M {
    public fun lambda_not_allowed() {
        {
          let _x: |u64|u64 with copy+store = |i: u64| Add<u64>(i, 1);
          Tuple()
        }
    }
} // end 0x8675309::M


// -- Model dump after env processor simplifier:
module 0x8675309::M {
    public fun lambda_not_allowed() {
        {
          let _x: |u64|u64 with copy+store = |i: u64| Add<u64>(i, 1);
          Tuple()
        }
    }
} // end 0x8675309::M



Diagnostics:
error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
   ┌─ tests/lambda/lambda3.move:77:18
   │
77 │         let _x = |i| i + 1; // expected lambda not allowed
   │                  ^^^^^^^^^
