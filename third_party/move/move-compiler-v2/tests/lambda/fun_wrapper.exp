// -- Model dump before bytecode pipeline
module 0x66::test {
    struct Work {
        0: |u64|u64,
    }
    private fun t1(): bool {
        {
          let work: Work = pack test::Work(closure#0test::__lambda__1__t1());
          Eq<Work>(work, closure#0test::__lambda__2__t1())
        }
    }
    private fun t2() {
        test::take_work(closure#0test::__lambda__1__t2())
    }
    private fun take_work(_work: Work) {
        Tuple()
    }
    private fun __lambda__1__t1(x: u64): u64 {
        Add<u64>(x, 1)
    }
    private fun __lambda__2__t1(x: u64): u64 {
        Add<u64>(x, 2)
    }
    private fun __lambda__1__t2(x: u64): u64 {
        Add<u64>(x, 1)
    }
} // end 0x66::test

// -- Sourcified model before bytecode pipeline
module 0x66::test {
    struct Work has drop {
        0: |u64|u64,
    }
    fun t1(): bool {
        let work = Work(|arg0| __lambda__1__t1(arg0));
        work == <<wrongly typed closure expression>>
    }
    fun t2() {
        take_work(<<wrongly typed closure expression>>)
    }
    fun take_work(_work: Work) {
    }
    fun __lambda__1__t1(x: u64): u64 {
        x + 1
    }
    fun __lambda__2__t1(x: u64): u64 {
        x + 2
    }
    fun __lambda__1__t2(x: u64): u64 {
        x + 1
    }
}

============ initial bytecode ================

[variant baseline]
fun test::t1(): bool {
     var $t0: bool
     var $t1: 0x66::test::Work
     var $t2: |u64|u64
     var $t3: 0x66::test::Work
     var $t4: 0x66::test::Work
     var $t5: |u64|u64
  0: $t2 := closure#0 test::__lambda__1__t1()
  1: $t1 := pack 0x66::test::Work($t2)
  2: $t3 := infer($t1)
  3: $t5 := closure#0 test::__lambda__2__t1()
  4: $t4 := pack 0x66::test::Work($t5)
  5: $t0 := ==($t3, $t4)
  6: return $t0
}


[variant baseline]
fun test::t2() {
     var $t0: 0x66::test::Work
     var $t1: |u64|u64
  0: $t1 := closure#0 test::__lambda__1__t2()
  1: $t0 := pack 0x66::test::Work($t1)
  2: test::take_work($t0)
  3: return ()
}


[variant baseline]
fun test::take_work($t0: 0x66::test::Work) {
  0: return ()
}


[variant baseline]
fun test::__lambda__1__t1($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
  0: $t2 := infer($t0)
  1: $t3 := 1
  2: $t1 := +($t2, $t3)
  3: return $t1
}


[variant baseline]
fun test::__lambda__2__t1($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
  0: $t2 := infer($t0)
  1: $t3 := 2
  2: $t1 := +($t2, $t3)
  3: return $t1
}


[variant baseline]
fun test::__lambda__1__t2($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
  0: $t2 := infer($t0)
  1: $t3 := 1
  2: $t1 := +($t2, $t3)
  3: return $t1
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun test::t1(): bool {
     var $t0: bool
     var $t1: 0x66::test::Work
     var $t2: |u64|u64
     var $t3: 0x66::test::Work [unused]
     var $t4: 0x66::test::Work
     var $t5: |u64|u64 [unused]
     # live vars:
  0: $t2 := closure#0 test::__lambda__1__t1()
     # live vars: $t2
  1: $t1 := pack 0x66::test::Work($t2)
     # live vars: $t1
  2: $t1 := move($t1)
     # live vars: $t1
  3: $t2 := closure#0 test::__lambda__2__t1()
     # live vars: $t1, $t2
  4: $t4 := pack 0x66::test::Work($t2)
     # live vars: $t1, $t4
  5: $t0 := ==($t1, $t4)
     # live vars: $t0
  6: return $t0
}


[variant baseline]
fun test::t2() {
     var $t0: 0x66::test::Work
     var $t1: |u64|u64
     # live vars:
  0: $t1 := closure#0 test::__lambda__1__t2()
     # live vars: $t1
  1: $t0 := pack 0x66::test::Work($t1)
     # live vars: $t0
  2: test::take_work($t0)
     # live vars:
  3: return ()
}


[variant baseline]
fun test::take_work($t0: 0x66::test::Work) {
     # live vars: $t0
  0: return ()
}


[variant baseline]
fun test::__lambda__1__t1($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: u64 [unused]
     var $t3: u64
     # live vars: $t0
  0: $t0 := move($t0)
     # live vars: $t0
  1: $t3 := 1
     # live vars: $t0, $t3
  2: $t0 := +($t0, $t3)
     # live vars: $t0
  3: return $t0
}


[variant baseline]
fun test::__lambda__2__t1($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: u64 [unused]
     var $t3: u64
     # live vars: $t0
  0: $t0 := move($t0)
     # live vars: $t0
  1: $t3 := 2
     # live vars: $t0, $t3
  2: $t0 := +($t0, $t3)
     # live vars: $t0
  3: return $t0
}


[variant baseline]
fun test::__lambda__1__t2($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: u64 [unused]
     var $t3: u64
     # live vars: $t0
  0: $t0 := move($t0)
     # live vars: $t0
  1: $t3 := 1
     # live vars: $t0, $t3
  2: $t0 := +($t0, $t3)
     # live vars: $t0
  3: return $t0
}


============ disassembled file-format ==================
// Move bytecode v8
module 66.test {
struct Work has drop {
	_0: |u64|u64 has drop
}

t1(): bool /* def_idx: 0 */ {
B0:
	0: PackClosure#0 __lambda__1__t1(u64): u64
	1: Pack[0](Work)
	2: PackClosure#0 __lambda__2__t1(u64): u64
	3: Pack[0](Work)
	4: Eq
	5: Ret
}
t2() /* def_idx: 1 */ {
B0:
	0: PackClosure#0 __lambda__1__t2(u64): u64
	1: Pack[0](Work)
	2: Call take_work(Work)
	3: Ret
}
take_work(_work: Work) /* def_idx: 2 */ {
B0:
	0: Ret
}
__lambda__1__t1(x: u64): u64 /* def_idx: 3 */ {
B0:
	0: MoveLoc[0](x: u64)
	1: LdU64(1)
	2: Add
	3: Ret
}
__lambda__2__t1(x: u64): u64 /* def_idx: 4 */ {
B0:
	0: MoveLoc[0](x: u64)
	1: LdU64(2)
	2: Add
	3: Ret
}
__lambda__1__t2(x: u64): u64 /* def_idx: 5 */ {
B0:
	0: MoveLoc[0](x: u64)
	1: LdU64(1)
	2: Add
	3: Ret
}
}
============ bytecode verification succeeded ========
