// -- Model dump before env processor pipeline:
module 0x42::m {
    struct S<T> {
        x: T,
    }
    private fun id<T>(self: S<T>): S<T> {
        self
    }
    private fun inlined<T>(f: |S<T>|S<T>,s: S<T>) {
        (f)(s);
        Tuple()
    }
    private fun receiver<T>(self: S<T>,y: T) {
        select m::S.x<S<T>>(self) = y;
        Tuple()
    }
    private fun receiver_more_generics<T,R>(self: S<T>,_y: R) {
        Tuple()
    }
    private fun receiver_needs_type_args<T,R>(self: S<T>,_y: T) {
        Abort(1)
    }
    private fun receiver_ref<T>(self: &S<T>,_y: T) {
        Tuple()
    }
    private fun receiver_ref_mut<T>(self: &mut S<T>,y: T) {
        select m::S.x<&mut S<T>>(self) = y
    }
    private fun test_call_styles(s: S<u64>,x: u64) {
        m::receiver<u64>(s, x);
        m::receiver_ref<u64>(Borrow(Immutable)(s), x);
        m::receiver_ref_mut<u64>(Borrow(Mutable)(s), x);
        m::receiver_more_generics<u64, u64>(s, 22);
        m::receiver_needs_type_args<u64, u8>(s, x);
        Tuple()
    }
    private fun test_receiver_inference(s: S<u64>) {
        m::inlined<u64>(|s: S<u64>| m::id<u64>(s), s)
    }
} // end 0x42::m


// -- Model dump after env processor unused checks:
module 0x42::m {
    struct S<T> {
        x: T,
    }
    private fun id<T>(self: S<T>): S<T> {
        self
    }
    private fun inlined<T>(f: |S<T>|S<T>,s: S<T>) {
        (f)(s);
        Tuple()
    }
    private fun receiver<T>(self: S<T>,y: T) {
        select m::S.x<S<T>>(self) = y;
        Tuple()
    }
    private fun receiver_more_generics<T,R>(self: S<T>,_y: R) {
        Tuple()
    }
    private fun receiver_needs_type_args<T,R>(self: S<T>,_y: T) {
        Abort(1)
    }
    private fun receiver_ref<T>(self: &S<T>,_y: T) {
        Tuple()
    }
    private fun receiver_ref_mut<T>(self: &mut S<T>,y: T) {
        select m::S.x<&mut S<T>>(self) = y
    }
    private fun test_call_styles(s: S<u64>,x: u64) {
        m::receiver<u64>(s, x);
        m::receiver_ref<u64>(Borrow(Immutable)(s), x);
        m::receiver_ref_mut<u64>(Borrow(Mutable)(s), x);
        m::receiver_more_generics<u64, u64>(s, 22);
        m::receiver_needs_type_args<u64, u8>(s, x);
        Tuple()
    }
    private fun test_receiver_inference(s: S<u64>) {
        m::inlined<u64>(|s: S<u64>| m::id<u64>(s), s)
    }
} // end 0x42::m


// -- Model dump after env processor type parameter check:
module 0x42::m {
    struct S<T> {
        x: T,
    }
    private fun id<T>(self: S<T>): S<T> {
        self
    }
    private fun inlined<T>(f: |S<T>|S<T>,s: S<T>) {
        (f)(s);
        Tuple()
    }
    private fun receiver<T>(self: S<T>,y: T) {
        select m::S.x<S<T>>(self) = y;
        Tuple()
    }
    private fun receiver_more_generics<T,R>(self: S<T>,_y: R) {
        Tuple()
    }
    private fun receiver_needs_type_args<T,R>(self: S<T>,_y: T) {
        Abort(1)
    }
    private fun receiver_ref<T>(self: &S<T>,_y: T) {
        Tuple()
    }
    private fun receiver_ref_mut<T>(self: &mut S<T>,y: T) {
        select m::S.x<&mut S<T>>(self) = y
    }
    private fun test_call_styles(s: S<u64>,x: u64) {
        m::receiver<u64>(s, x);
        m::receiver_ref<u64>(Borrow(Immutable)(s), x);
        m::receiver_ref_mut<u64>(Borrow(Mutable)(s), x);
        m::receiver_more_generics<u64, u64>(s, 22);
        m::receiver_needs_type_args<u64, u8>(s, x);
        Tuple()
    }
    private fun test_receiver_inference(s: S<u64>) {
        m::inlined<u64>(|s: S<u64>| m::id<u64>(s), s)
    }
} // end 0x42::m


// -- Model dump after env processor check recursive struct definition:
module 0x42::m {
    struct S<T> {
        x: T,
    }
    private fun id<T>(self: S<T>): S<T> {
        self
    }
    private fun inlined<T>(f: |S<T>|S<T>,s: S<T>) {
        (f)(s);
        Tuple()
    }
    private fun receiver<T>(self: S<T>,y: T) {
        select m::S.x<S<T>>(self) = y;
        Tuple()
    }
    private fun receiver_more_generics<T,R>(self: S<T>,_y: R) {
        Tuple()
    }
    private fun receiver_needs_type_args<T,R>(self: S<T>,_y: T) {
        Abort(1)
    }
    private fun receiver_ref<T>(self: &S<T>,_y: T) {
        Tuple()
    }
    private fun receiver_ref_mut<T>(self: &mut S<T>,y: T) {
        select m::S.x<&mut S<T>>(self) = y
    }
    private fun test_call_styles(s: S<u64>,x: u64) {
        m::receiver<u64>(s, x);
        m::receiver_ref<u64>(Borrow(Immutable)(s), x);
        m::receiver_ref_mut<u64>(Borrow(Mutable)(s), x);
        m::receiver_more_generics<u64, u64>(s, 22);
        m::receiver_needs_type_args<u64, u8>(s, x);
        Tuple()
    }
    private fun test_receiver_inference(s: S<u64>) {
        m::inlined<u64>(|s: S<u64>| m::id<u64>(s), s)
    }
} // end 0x42::m


// -- Model dump after env processor check cyclic type instantiation:
module 0x42::m {
    struct S<T> {
        x: T,
    }
    private fun id<T>(self: S<T>): S<T> {
        self
    }
    private fun inlined<T>(f: |S<T>|S<T>,s: S<T>) {
        (f)(s);
        Tuple()
    }
    private fun receiver<T>(self: S<T>,y: T) {
        select m::S.x<S<T>>(self) = y;
        Tuple()
    }
    private fun receiver_more_generics<T,R>(self: S<T>,_y: R) {
        Tuple()
    }
    private fun receiver_needs_type_args<T,R>(self: S<T>,_y: T) {
        Abort(1)
    }
    private fun receiver_ref<T>(self: &S<T>,_y: T) {
        Tuple()
    }
    private fun receiver_ref_mut<T>(self: &mut S<T>,y: T) {
        select m::S.x<&mut S<T>>(self) = y
    }
    private fun test_call_styles(s: S<u64>,x: u64) {
        m::receiver<u64>(s, x);
        m::receiver_ref<u64>(Borrow(Immutable)(s), x);
        m::receiver_ref_mut<u64>(Borrow(Mutable)(s), x);
        m::receiver_more_generics<u64, u64>(s, 22);
        m::receiver_needs_type_args<u64, u8>(s, x);
        Tuple()
    }
    private fun test_receiver_inference(s: S<u64>) {
        m::inlined<u64>(|s: S<u64>| m::id<u64>(s), s)
    }
} // end 0x42::m


// -- Model dump after env processor unused struct params check:
module 0x42::m {
    struct S<T> {
        x: T,
    }
    private fun id<T>(self: S<T>): S<T> {
        self
    }
    private fun inlined<T>(f: |S<T>|S<T>,s: S<T>) {
        (f)(s);
        Tuple()
    }
    private fun receiver<T>(self: S<T>,y: T) {
        select m::S.x<S<T>>(self) = y;
        Tuple()
    }
    private fun receiver_more_generics<T,R>(self: S<T>,_y: R) {
        Tuple()
    }
    private fun receiver_needs_type_args<T,R>(self: S<T>,_y: T) {
        Abort(1)
    }
    private fun receiver_ref<T>(self: &S<T>,_y: T) {
        Tuple()
    }
    private fun receiver_ref_mut<T>(self: &mut S<T>,y: T) {
        select m::S.x<&mut S<T>>(self) = y
    }
    private fun test_call_styles(s: S<u64>,x: u64) {
        m::receiver<u64>(s, x);
        m::receiver_ref<u64>(Borrow(Immutable)(s), x);
        m::receiver_ref_mut<u64>(Borrow(Mutable)(s), x);
        m::receiver_more_generics<u64, u64>(s, 22);
        m::receiver_needs_type_args<u64, u8>(s, x);
        Tuple()
    }
    private fun test_receiver_inference(s: S<u64>) {
        m::inlined<u64>(|s: S<u64>| m::id<u64>(s), s)
    }
} // end 0x42::m


// -- Model dump after env processor access and use check before inlining:
module 0x42::m {
    struct S<T> {
        x: T,
    }
    private fun id<T>(self: S<T>): S<T> {
        self
    }
    private fun inlined<T>(f: |S<T>|S<T>,s: S<T>) {
        (f)(s);
        Tuple()
    }
    private fun receiver<T>(self: S<T>,y: T) {
        select m::S.x<S<T>>(self) = y;
        Tuple()
    }
    private fun receiver_more_generics<T,R>(self: S<T>,_y: R) {
        Tuple()
    }
    private fun receiver_needs_type_args<T,R>(self: S<T>,_y: T) {
        Abort(1)
    }
    private fun receiver_ref<T>(self: &S<T>,_y: T) {
        Tuple()
    }
    private fun receiver_ref_mut<T>(self: &mut S<T>,y: T) {
        select m::S.x<&mut S<T>>(self) = y
    }
    private fun test_call_styles(s: S<u64>,x: u64) {
        m::receiver<u64>(s, x);
        m::receiver_ref<u64>(Borrow(Immutable)(s), x);
        m::receiver_ref_mut<u64>(Borrow(Mutable)(s), x);
        m::receiver_more_generics<u64, u64>(s, 22);
        m::receiver_needs_type_args<u64, u8>(s, x);
        Tuple()
    }
    private fun test_receiver_inference(s: S<u64>) {
        m::inlined<u64>(|s: S<u64>| m::id<u64>(s), s)
    }
} // end 0x42::m


// -- Model dump after env processor inlining:
module 0x42::m {
    struct S<T> {
        x: T,
    }
    private fun id<T>(self: S<T>): S<T> {
        self
    }
    private fun inlined<T>(f: |S<T>|S<T>,s: S<T>) {
        (f)(s);
        Tuple()
    }
    private fun receiver<T>(self: S<T>,y: T) {
        select m::S.x<S<T>>(self) = y;
        Tuple()
    }
    private fun receiver_more_generics<T,R>(self: S<T>,_y: R) {
        Tuple()
    }
    private fun receiver_needs_type_args<T,R>(self: S<T>,_y: T) {
        Abort(1)
    }
    private fun receiver_ref<T>(self: &S<T>,_y: T) {
        Tuple()
    }
    private fun receiver_ref_mut<T>(self: &mut S<T>,y: T) {
        select m::S.x<&mut S<T>>(self) = y
    }
    private fun test_call_styles(s: S<u64>,x: u64) {
        m::receiver<u64>(s, x);
        m::receiver_ref<u64>(Borrow(Immutable)(s), x);
        m::receiver_ref_mut<u64>(Borrow(Mutable)(s), x);
        m::receiver_more_generics<u64, u64>(s, 22);
        m::receiver_needs_type_args<u64, u8>(s, x);
        Tuple()
    }
    private fun test_receiver_inference(s: S<u64>) {
        m::inlined<u64>(|s: S<u64>| m::id<u64>(s), s)
    }
} // end 0x42::m


// -- Model dump after env processor access and use check after inlining:
module 0x42::m {
    struct S<T> {
        x: T,
    }
    private fun id<T>(self: S<T>): S<T> {
        self
    }
    private fun inlined<T>(f: |S<T>|S<T>,s: S<T>) {
        (f)(s);
        Tuple()
    }
    private fun receiver<T>(self: S<T>,y: T) {
        select m::S.x<S<T>>(self) = y;
        Tuple()
    }
    private fun receiver_more_generics<T,R>(self: S<T>,_y: R) {
        Tuple()
    }
    private fun receiver_needs_type_args<T,R>(self: S<T>,_y: T) {
        Abort(1)
    }
    private fun receiver_ref<T>(self: &S<T>,_y: T) {
        Tuple()
    }
    private fun receiver_ref_mut<T>(self: &mut S<T>,y: T) {
        select m::S.x<&mut S<T>>(self) = y
    }
    private fun test_call_styles(s: S<u64>,x: u64) {
        m::receiver<u64>(s, x);
        m::receiver_ref<u64>(Borrow(Immutable)(s), x);
        m::receiver_ref_mut<u64>(Borrow(Mutable)(s), x);
        m::receiver_more_generics<u64, u64>(s, 22);
        m::receiver_needs_type_args<u64, u8>(s, x);
        Tuple()
    }
    private fun test_receiver_inference(s: S<u64>) {
        m::inlined<u64>(|s: S<u64>| m::id<u64>(s), s)
    }
} // end 0x42::m


// -- Model dump after env processor acquires check:
module 0x42::m {
    struct S<T> {
        x: T,
    }
    private fun id<T>(self: S<T>): S<T> {
        self
    }
    private fun inlined<T>(f: |S<T>|S<T>,s: S<T>) {
        (f)(s);
        Tuple()
    }
    private fun receiver<T>(self: S<T>,y: T) {
        select m::S.x<S<T>>(self) = y;
        Tuple()
    }
    private fun receiver_more_generics<T,R>(self: S<T>,_y: R) {
        Tuple()
    }
    private fun receiver_needs_type_args<T,R>(self: S<T>,_y: T) {
        Abort(1)
    }
    private fun receiver_ref<T>(self: &S<T>,_y: T) {
        Tuple()
    }
    private fun receiver_ref_mut<T>(self: &mut S<T>,y: T) {
        select m::S.x<&mut S<T>>(self) = y
    }
    private fun test_call_styles(s: S<u64>,x: u64) {
        m::receiver<u64>(s, x);
        m::receiver_ref<u64>(Borrow(Immutable)(s), x);
        m::receiver_ref_mut<u64>(Borrow(Mutable)(s), x);
        m::receiver_more_generics<u64, u64>(s, 22);
        m::receiver_needs_type_args<u64, u8>(s, x);
        Tuple()
    }
    private fun test_receiver_inference(s: S<u64>) {
        m::inlined<u64>(|s: S<u64>| m::id<u64>(s), s)
    }
} // end 0x42::m


// -- Model dump after env processor simplifier:
module 0x42::m {
    struct S<T> {
        x: T,
    }
    private fun id<T>(self: S<T>): S<T> {
        self
    }
    private fun inlined<T>(f: |S<T>|S<T>,s: S<T>) {
        (f)(s);
        Tuple()
    }
    private fun receiver<T>(self: S<T>,y: T) {
        select m::S.x<S<T>>(self) = y;
        Tuple()
    }
    private fun receiver_more_generics<T,R>(self: S<T>,_y: R) {
        Tuple()
    }
    private fun receiver_needs_type_args<T,R>(self: S<T>,_y: T) {
        Abort(1)
    }
    private fun receiver_ref<T>(self: &S<T>,_y: T) {
        Tuple()
    }
    private fun receiver_ref_mut<T>(self: &mut S<T>,y: T) {
        select m::S.x<&mut S<T>>(self) = y
    }
    private fun test_call_styles(s: S<u64>,x: u64) {
        m::receiver<u64>(s, x);
        m::receiver_ref<u64>(Borrow(Immutable)(s), x);
        m::receiver_ref_mut<u64>(Borrow(Mutable)(s), x);
        m::receiver_more_generics<u64, u64>(s, 22);
        m::receiver_needs_type_args<u64, u8>(s, x);
        Tuple()
    }
    private fun test_receiver_inference(s: S<u64>) {
        m::inlined<u64>(|s: S<u64>| m::id<u64>(s), s)
    }
} // end 0x42::m



Diagnostics:
error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
   ┌─ tests/lambda/inline-parity/generic_calls.move:47:17
   │
47 │         inlined(|s| s.id(), s)
   │                 ^^^^^^^^^^
