// -- Model dump before bytecode pipeline
module 0x42::Test {
    private fun adder(x: u64,y: u64): u64 {
        Add<u64>(x, y)
    }
    private fun apply(f: |(u64, u64)|u64,x: u64,y: u64): u64 {
        (f)(x, y)
    }
    public fun main(): u64 {
        Test::apply(closure#0Test::__lambda__1__main(), 10, 100)
    }
    private fun __lambda__1__main(x: u64,y: u64): u64 {
        return Test::adder(x, y)
    }
} // end 0x42::Test

// -- Sourcified model before bytecode pipeline
module 0x42::Test {
    fun adder(x: u64, y: u64): u64 {
        x + y
    }
    fun apply(f: |(u64, u64)|u64, x: u64, y: u64): u64 {
        f(x, y)
    }
    public fun main(): u64 {
        apply(|(arg0,arg1)| __lambda__1__main(arg0, arg1), 10, 100)
    }
    fun __lambda__1__main(x: u64, y: u64): u64 {
        adder(x, y)
    }
}

============ initial bytecode ================

[variant baseline]
fun Test::adder($t0: u64, $t1: u64): u64 {
     var $t2: u64
     var $t3: u64
  0: $t3 := infer($t0)
  1: $t2 := +($t3, $t1)
  2: return $t2
}


[variant baseline]
fun Test::apply($t0: |(u64, u64)|u64, $t1: u64, $t2: u64): u64 {
     var $t3: u64
     var $t4: u64
     var $t5: u64
  0: $t4 := infer($t1)
  1: $t5 := infer($t2)
  2: $t3 := invoke($t4, $t5, $t0)
  3: return $t3
}


[variant baseline]
public fun Test::main(): u64 {
     var $t0: u64
     var $t1: |(u64, u64)|u64
     var $t2: u64
     var $t3: u64
  0: $t1 := closure#0 Test::__lambda__1__main()
  1: $t2 := 10
  2: $t3 := 100
  3: $t0 := Test::apply($t1, $t2, $t3)
  4: return $t0
}


[variant baseline]
fun Test::__lambda__1__main($t0: u64, $t1: u64): u64 {
     var $t2: u64
     var $t3: u64
  0: $t3 := infer($t0)
  1: $t2 := Test::adder($t3, $t1)
  2: return $t2
  3: return $t2
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun Test::adder($t0: u64, $t1: u64): u64 {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     # live vars: $t0, $t1
  0: $t0 := move($t0)
     # live vars: $t0, $t1
  1: $t0 := +($t0, $t1)
     # live vars: $t0
  2: return $t0
}


[variant baseline]
fun Test::apply($t0: |(u64, u64)|u64, $t1: u64, $t2: u64): u64 {
     var $t3: u64 [unused]
     var $t4: u64 [unused]
     var $t5: u64 [unused]
     # live vars: $t0, $t1, $t2
  0: $t1 := move($t1)
     # live vars: $t0, $t1, $t2
  1: $t2 := move($t2)
     # live vars: $t0, $t1, $t2
  2: $t1 := invoke($t1, $t2, $t0)
     # live vars: $t1
  3: return $t1
}


[variant baseline]
public fun Test::main(): u64 {
     var $t0: u64 [unused]
     var $t1: |(u64, u64)|u64
     var $t2: u64
     var $t3: u64
     # live vars:
  0: $t1 := closure#0 Test::__lambda__1__main()
     # live vars: $t1
  1: $t2 := 10
     # live vars: $t1, $t2
  2: $t3 := 100
     # live vars: $t1, $t2, $t3
  3: $t2 := Test::apply($t1, $t2, $t3)
     # live vars: $t2
  4: return $t2
}


[variant baseline]
fun Test::__lambda__1__main($t0: u64, $t1: u64): u64 {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     # live vars: $t0, $t1
  0: $t0 := move($t0)
     # live vars: $t0, $t1
  1: $t0 := Test::adder($t0, $t1)
     # live vars: $t0
  2: return $t0
}


============ disassembled file-format ==================
// Move bytecode v8
module 42.Test {


adder(x: u64, y: u64): u64 /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](x: u64)
	1: MoveLoc[1](y: u64)
	2: Add
	3: Ret
}
apply(f: |u64,u64|u64, x: u64, y: u64): u64 /* def_idx: 1 */ {
B0:
	0: MoveLoc[1](x: u64)
	1: MoveLoc[2](y: u64)
	2: MoveLoc[0](f: |u64,u64|u64)
	3: CallClosure(|u64,u64|u64)
	4: Ret
}
public main(): u64 /* def_idx: 2 */ {
B0:
	0: PackClosure#0 __lambda__1__main(u64, u64): u64
	1: LdU64(10)
	2: LdU64(100)
	3: Call apply(|u64,u64|u64, u64, u64): u64
	4: Ret
}
__lambda__1__main(x: u64, y: u64): u64 /* def_idx: 3 */ {
B0:
	0: MoveLoc[0](x: u64)
	1: MoveLoc[1](y: u64)
	2: Call adder(u64, u64): u64
	3: Ret
}
}
============ bytecode verification succeeded ========
