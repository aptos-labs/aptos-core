// -- Model dump before env processor pipeline:
module 0x42::LambdaTest1 {
    public fun inline_apply(f: |u64|u64,b: u64): u64 {
        (f)(b)
    }
    public fun inline_apply1(f: |u64|u64,b: u64): u64 {
        LambdaTest1::inline_mul(Add<u64>((f)(b), 1), LambdaTest1::inline_mul(3, 4))
    }
    public fun inline_mul(a: u64,b: u64): u64 {
        Mul<u64>(a, b)
    }
} // end 0x42::LambdaTest1
module 0x42::LambdaTest2 {
    use 0x42::LambdaTest1; // resolved as: 0x42::LambdaTest1
    use std::vector;
    public fun foreach<T>(v: &vector<T>,action: |&T|) {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, vector::length<T>(v)) {
              (action)(vector::borrow<T>(v, i));
              i: u64 = Add<u64>(i, 1);
              Tuple()
            } else {
              break
            }
          }
        }
    }
    public fun inline_apply2(g: |u64|u64,c: u64): u64 {
        Add<u64>(LambdaTest1::inline_apply1(|z: u64| z, (g)(LambdaTest1::inline_mul(c, LambdaTest1::inline_apply(|x: u64| x, 3)))), 2)
    }
    public fun inline_apply3(g: |u64|u64,c: u64): u64 {
        Add<u64>(LambdaTest1::inline_apply1(g, LambdaTest1::inline_mul(c, LambdaTest1::inline_apply(|x: u64| LambdaTest1::inline_apply(|y: u64| y, x), 3))), 4)
    }
    public fun test_inline_lambda() {
        {
          let v: vector<u64> = Vector<u64>(1, 2, 3);
          {
            let product: u64 = 1;
            LambdaTest2::foreach<u64>(Borrow(Immutable)(v), |e: &u64| product: u64 = LambdaTest1::inline_mul(product, Deref(e)));
            Tuple()
          }
        }
    }
} // end 0x42::LambdaTest2
module 0x42::LambdaTest {
    use 0x42::LambdaTest2; // resolved as: 0x42::LambdaTest2
    public fun inline_apply(f: |u64|u64,b: u64): u64 {
        (f)(b)
    }
    public fun inline_apply_test(): u64 {
        Add<u64>(LambdaTest2::inline_apply2(|x: u64| Add<u64>(x, 1), 3), LambdaTest2::inline_apply2(|x: u64| Mul<u64>(x, x), LambdaTest::inline_apply(|y: u64| y, 3)))
    }
    private fun test_lambda() {
        {
          let a: u64 = LambdaTest::inline_apply_test();
          if Eq<u64>(a, 1) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
} // end 0x42::LambdaTest


// -- Model dump after env processor unused checks:
module 0x42::LambdaTest1 {
    public fun inline_apply(f: |u64|u64,b: u64): u64 {
        (f)(b)
    }
    public fun inline_apply1(f: |u64|u64,b: u64): u64 {
        LambdaTest1::inline_mul(Add<u64>((f)(b), 1), LambdaTest1::inline_mul(3, 4))
    }
    public fun inline_mul(a: u64,b: u64): u64 {
        Mul<u64>(a, b)
    }
} // end 0x42::LambdaTest1
module 0x42::LambdaTest2 {
    use 0x42::LambdaTest1; // resolved as: 0x42::LambdaTest1
    use std::vector;
    public fun foreach<T>(v: &vector<T>,action: |&T|) {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, vector::length<T>(v)) {
              (action)(vector::borrow<T>(v, i));
              i: u64 = Add<u64>(i, 1);
              Tuple()
            } else {
              break
            }
          }
        }
    }
    public fun inline_apply2(g: |u64|u64,c: u64): u64 {
        Add<u64>(LambdaTest1::inline_apply1(|z: u64| z, (g)(LambdaTest1::inline_mul(c, LambdaTest1::inline_apply(|x: u64| x, 3)))), 2)
    }
    public fun inline_apply3(g: |u64|u64,c: u64): u64 {
        Add<u64>(LambdaTest1::inline_apply1(g, LambdaTest1::inline_mul(c, LambdaTest1::inline_apply(|x: u64| LambdaTest1::inline_apply(|y: u64| y, x), 3))), 4)
    }
    public fun test_inline_lambda() {
        {
          let v: vector<u64> = Vector<u64>(1, 2, 3);
          {
            let product: u64 = 1;
            LambdaTest2::foreach<u64>(Borrow(Immutable)(v), |e: &u64| product: u64 = LambdaTest1::inline_mul(product, Deref(e)));
            Tuple()
          }
        }
    }
} // end 0x42::LambdaTest2
module 0x42::LambdaTest {
    use 0x42::LambdaTest2; // resolved as: 0x42::LambdaTest2
    public fun inline_apply(f: |u64|u64,b: u64): u64 {
        (f)(b)
    }
    public fun inline_apply_test(): u64 {
        Add<u64>(LambdaTest2::inline_apply2(|x: u64| Add<u64>(x, 1), 3), LambdaTest2::inline_apply2(|x: u64| Mul<u64>(x, x), LambdaTest::inline_apply(|y: u64| y, 3)))
    }
    private fun test_lambda() {
        {
          let a: u64 = LambdaTest::inline_apply_test();
          if Eq<u64>(a, 1) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
} // end 0x42::LambdaTest


// -- Model dump after env processor type parameter check:
module 0x42::LambdaTest1 {
    public fun inline_apply(f: |u64|u64,b: u64): u64 {
        (f)(b)
    }
    public fun inline_apply1(f: |u64|u64,b: u64): u64 {
        LambdaTest1::inline_mul(Add<u64>((f)(b), 1), LambdaTest1::inline_mul(3, 4))
    }
    public fun inline_mul(a: u64,b: u64): u64 {
        Mul<u64>(a, b)
    }
} // end 0x42::LambdaTest1
module 0x42::LambdaTest2 {
    use 0x42::LambdaTest1; // resolved as: 0x42::LambdaTest1
    use std::vector;
    public fun foreach<T>(v: &vector<T>,action: |&T|) {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, vector::length<T>(v)) {
              (action)(vector::borrow<T>(v, i));
              i: u64 = Add<u64>(i, 1);
              Tuple()
            } else {
              break
            }
          }
        }
    }
    public fun inline_apply2(g: |u64|u64,c: u64): u64 {
        Add<u64>(LambdaTest1::inline_apply1(|z: u64| z, (g)(LambdaTest1::inline_mul(c, LambdaTest1::inline_apply(|x: u64| x, 3)))), 2)
    }
    public fun inline_apply3(g: |u64|u64,c: u64): u64 {
        Add<u64>(LambdaTest1::inline_apply1(g, LambdaTest1::inline_mul(c, LambdaTest1::inline_apply(|x: u64| LambdaTest1::inline_apply(|y: u64| y, x), 3))), 4)
    }
    public fun test_inline_lambda() {
        {
          let v: vector<u64> = Vector<u64>(1, 2, 3);
          {
            let product: u64 = 1;
            LambdaTest2::foreach<u64>(Borrow(Immutable)(v), |e: &u64| product: u64 = LambdaTest1::inline_mul(product, Deref(e)));
            Tuple()
          }
        }
    }
} // end 0x42::LambdaTest2
module 0x42::LambdaTest {
    use 0x42::LambdaTest2; // resolved as: 0x42::LambdaTest2
    public fun inline_apply(f: |u64|u64,b: u64): u64 {
        (f)(b)
    }
    public fun inline_apply_test(): u64 {
        Add<u64>(LambdaTest2::inline_apply2(|x: u64| Add<u64>(x, 1), 3), LambdaTest2::inline_apply2(|x: u64| Mul<u64>(x, x), LambdaTest::inline_apply(|y: u64| y, 3)))
    }
    private fun test_lambda() {
        {
          let a: u64 = LambdaTest::inline_apply_test();
          if Eq<u64>(a, 1) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
} // end 0x42::LambdaTest


// -- Model dump after env processor check recursive struct definition:
module 0x42::LambdaTest1 {
    public fun inline_apply(f: |u64|u64,b: u64): u64 {
        (f)(b)
    }
    public fun inline_apply1(f: |u64|u64,b: u64): u64 {
        LambdaTest1::inline_mul(Add<u64>((f)(b), 1), LambdaTest1::inline_mul(3, 4))
    }
    public fun inline_mul(a: u64,b: u64): u64 {
        Mul<u64>(a, b)
    }
} // end 0x42::LambdaTest1
module 0x42::LambdaTest2 {
    use 0x42::LambdaTest1; // resolved as: 0x42::LambdaTest1
    use std::vector;
    public fun foreach<T>(v: &vector<T>,action: |&T|) {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, vector::length<T>(v)) {
              (action)(vector::borrow<T>(v, i));
              i: u64 = Add<u64>(i, 1);
              Tuple()
            } else {
              break
            }
          }
        }
    }
    public fun inline_apply2(g: |u64|u64,c: u64): u64 {
        Add<u64>(LambdaTest1::inline_apply1(|z: u64| z, (g)(LambdaTest1::inline_mul(c, LambdaTest1::inline_apply(|x: u64| x, 3)))), 2)
    }
    public fun inline_apply3(g: |u64|u64,c: u64): u64 {
        Add<u64>(LambdaTest1::inline_apply1(g, LambdaTest1::inline_mul(c, LambdaTest1::inline_apply(|x: u64| LambdaTest1::inline_apply(|y: u64| y, x), 3))), 4)
    }
    public fun test_inline_lambda() {
        {
          let v: vector<u64> = Vector<u64>(1, 2, 3);
          {
            let product: u64 = 1;
            LambdaTest2::foreach<u64>(Borrow(Immutable)(v), |e: &u64| product: u64 = LambdaTest1::inline_mul(product, Deref(e)));
            Tuple()
          }
        }
    }
} // end 0x42::LambdaTest2
module 0x42::LambdaTest {
    use 0x42::LambdaTest2; // resolved as: 0x42::LambdaTest2
    public fun inline_apply(f: |u64|u64,b: u64): u64 {
        (f)(b)
    }
    public fun inline_apply_test(): u64 {
        Add<u64>(LambdaTest2::inline_apply2(|x: u64| Add<u64>(x, 1), 3), LambdaTest2::inline_apply2(|x: u64| Mul<u64>(x, x), LambdaTest::inline_apply(|y: u64| y, 3)))
    }
    private fun test_lambda() {
        {
          let a: u64 = LambdaTest::inline_apply_test();
          if Eq<u64>(a, 1) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
} // end 0x42::LambdaTest


// -- Model dump after env processor check cyclic type instantiation:
module 0x42::LambdaTest1 {
    public fun inline_apply(f: |u64|u64,b: u64): u64 {
        (f)(b)
    }
    public fun inline_apply1(f: |u64|u64,b: u64): u64 {
        LambdaTest1::inline_mul(Add<u64>((f)(b), 1), LambdaTest1::inline_mul(3, 4))
    }
    public fun inline_mul(a: u64,b: u64): u64 {
        Mul<u64>(a, b)
    }
} // end 0x42::LambdaTest1
module 0x42::LambdaTest2 {
    use 0x42::LambdaTest1; // resolved as: 0x42::LambdaTest1
    use std::vector;
    public fun foreach<T>(v: &vector<T>,action: |&T|) {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, vector::length<T>(v)) {
              (action)(vector::borrow<T>(v, i));
              i: u64 = Add<u64>(i, 1);
              Tuple()
            } else {
              break
            }
          }
        }
    }
    public fun inline_apply2(g: |u64|u64,c: u64): u64 {
        Add<u64>(LambdaTest1::inline_apply1(|z: u64| z, (g)(LambdaTest1::inline_mul(c, LambdaTest1::inline_apply(|x: u64| x, 3)))), 2)
    }
    public fun inline_apply3(g: |u64|u64,c: u64): u64 {
        Add<u64>(LambdaTest1::inline_apply1(g, LambdaTest1::inline_mul(c, LambdaTest1::inline_apply(|x: u64| LambdaTest1::inline_apply(|y: u64| y, x), 3))), 4)
    }
    public fun test_inline_lambda() {
        {
          let v: vector<u64> = Vector<u64>(1, 2, 3);
          {
            let product: u64 = 1;
            LambdaTest2::foreach<u64>(Borrow(Immutable)(v), |e: &u64| product: u64 = LambdaTest1::inline_mul(product, Deref(e)));
            Tuple()
          }
        }
    }
} // end 0x42::LambdaTest2
module 0x42::LambdaTest {
    use 0x42::LambdaTest2; // resolved as: 0x42::LambdaTest2
    public fun inline_apply(f: |u64|u64,b: u64): u64 {
        (f)(b)
    }
    public fun inline_apply_test(): u64 {
        Add<u64>(LambdaTest2::inline_apply2(|x: u64| Add<u64>(x, 1), 3), LambdaTest2::inline_apply2(|x: u64| Mul<u64>(x, x), LambdaTest::inline_apply(|y: u64| y, 3)))
    }
    private fun test_lambda() {
        {
          let a: u64 = LambdaTest::inline_apply_test();
          if Eq<u64>(a, 1) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
} // end 0x42::LambdaTest


// -- Model dump after env processor unused struct params check:
module 0x42::LambdaTest1 {
    public fun inline_apply(f: |u64|u64,b: u64): u64 {
        (f)(b)
    }
    public fun inline_apply1(f: |u64|u64,b: u64): u64 {
        LambdaTest1::inline_mul(Add<u64>((f)(b), 1), LambdaTest1::inline_mul(3, 4))
    }
    public fun inline_mul(a: u64,b: u64): u64 {
        Mul<u64>(a, b)
    }
} // end 0x42::LambdaTest1
module 0x42::LambdaTest2 {
    use 0x42::LambdaTest1; // resolved as: 0x42::LambdaTest1
    use std::vector;
    public fun foreach<T>(v: &vector<T>,action: |&T|) {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, vector::length<T>(v)) {
              (action)(vector::borrow<T>(v, i));
              i: u64 = Add<u64>(i, 1);
              Tuple()
            } else {
              break
            }
          }
        }
    }
    public fun inline_apply2(g: |u64|u64,c: u64): u64 {
        Add<u64>(LambdaTest1::inline_apply1(|z: u64| z, (g)(LambdaTest1::inline_mul(c, LambdaTest1::inline_apply(|x: u64| x, 3)))), 2)
    }
    public fun inline_apply3(g: |u64|u64,c: u64): u64 {
        Add<u64>(LambdaTest1::inline_apply1(g, LambdaTest1::inline_mul(c, LambdaTest1::inline_apply(|x: u64| LambdaTest1::inline_apply(|y: u64| y, x), 3))), 4)
    }
    public fun test_inline_lambda() {
        {
          let v: vector<u64> = Vector<u64>(1, 2, 3);
          {
            let product: u64 = 1;
            LambdaTest2::foreach<u64>(Borrow(Immutable)(v), |e: &u64| product: u64 = LambdaTest1::inline_mul(product, Deref(e)));
            Tuple()
          }
        }
    }
} // end 0x42::LambdaTest2
module 0x42::LambdaTest {
    use 0x42::LambdaTest2; // resolved as: 0x42::LambdaTest2
    public fun inline_apply(f: |u64|u64,b: u64): u64 {
        (f)(b)
    }
    public fun inline_apply_test(): u64 {
        Add<u64>(LambdaTest2::inline_apply2(|x: u64| Add<u64>(x, 1), 3), LambdaTest2::inline_apply2(|x: u64| Mul<u64>(x, x), LambdaTest::inline_apply(|y: u64| y, 3)))
    }
    private fun test_lambda() {
        {
          let a: u64 = LambdaTest::inline_apply_test();
          if Eq<u64>(a, 1) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
} // end 0x42::LambdaTest


// -- Model dump after env processor access and use check before inlining:
module 0x42::LambdaTest1 {
    public fun inline_apply(f: |u64|u64,b: u64): u64 {
        (f)(b)
    }
    public fun inline_apply1(f: |u64|u64,b: u64): u64 {
        LambdaTest1::inline_mul(Add<u64>((f)(b), 1), LambdaTest1::inline_mul(3, 4))
    }
    public fun inline_mul(a: u64,b: u64): u64 {
        Mul<u64>(a, b)
    }
} // end 0x42::LambdaTest1
module 0x42::LambdaTest2 {
    use 0x42::LambdaTest1; // resolved as: 0x42::LambdaTest1
    use std::vector;
    public fun foreach<T>(v: &vector<T>,action: |&T|) {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, vector::length<T>(v)) {
              (action)(vector::borrow<T>(v, i));
              i: u64 = Add<u64>(i, 1);
              Tuple()
            } else {
              break
            }
          }
        }
    }
    public fun inline_apply2(g: |u64|u64,c: u64): u64 {
        Add<u64>(LambdaTest1::inline_apply1(|z: u64| z, (g)(LambdaTest1::inline_mul(c, LambdaTest1::inline_apply(|x: u64| x, 3)))), 2)
    }
    public fun inline_apply3(g: |u64|u64,c: u64): u64 {
        Add<u64>(LambdaTest1::inline_apply1(g, LambdaTest1::inline_mul(c, LambdaTest1::inline_apply(|x: u64| LambdaTest1::inline_apply(|y: u64| y, x), 3))), 4)
    }
    public fun test_inline_lambda() {
        {
          let v: vector<u64> = Vector<u64>(1, 2, 3);
          {
            let product: u64 = 1;
            LambdaTest2::foreach<u64>(Borrow(Immutable)(v), |e: &u64| product: u64 = LambdaTest1::inline_mul(product, Deref(e)));
            Tuple()
          }
        }
    }
} // end 0x42::LambdaTest2
module 0x42::LambdaTest {
    use 0x42::LambdaTest2; // resolved as: 0x42::LambdaTest2
    public fun inline_apply(f: |u64|u64,b: u64): u64 {
        (f)(b)
    }
    public fun inline_apply_test(): u64 {
        Add<u64>(LambdaTest2::inline_apply2(|x: u64| Add<u64>(x, 1), 3), LambdaTest2::inline_apply2(|x: u64| Mul<u64>(x, x), LambdaTest::inline_apply(|y: u64| y, 3)))
    }
    private fun test_lambda() {
        {
          let a: u64 = LambdaTest::inline_apply_test();
          if Eq<u64>(a, 1) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
} // end 0x42::LambdaTest


// -- Model dump after env processor inlining:
module 0x42::LambdaTest1 {
    public fun inline_apply(f: |u64|u64,b: u64): u64 {
        (f)(b)
    }
    public fun inline_apply1(f: |u64|u64,b: u64): u64 {
        LambdaTest1::inline_mul(Add<u64>((f)(b), 1), LambdaTest1::inline_mul(3, 4))
    }
    public fun inline_mul(a: u64,b: u64): u64 {
        Mul<u64>(a, b)
    }
} // end 0x42::LambdaTest1
module 0x42::LambdaTest2 {
    use 0x42::LambdaTest1; // resolved as: 0x42::LambdaTest1
    use std::vector;
    public fun foreach<T>(v: &vector<T>,action: |&T|) {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, vector::length<T>(v)) {
              (action)(vector::borrow<T>(v, i));
              i: u64 = Add<u64>(i, 1);
              Tuple()
            } else {
              break
            }
          }
        }
    }
    public fun inline_apply2(g: |u64|u64,c: u64): u64 {
        Add<u64>(LambdaTest1::inline_apply1(|z: u64| z, (g)(LambdaTest1::inline_mul(c, LambdaTest1::inline_apply(|x: u64| x, 3)))), 2)
    }
    public fun inline_apply3(g: |u64|u64,c: u64): u64 {
        Add<u64>(LambdaTest1::inline_apply1(g, LambdaTest1::inline_mul(c, LambdaTest1::inline_apply(|x: u64| LambdaTest1::inline_apply(|y: u64| y, x), 3))), 4)
    }
    public fun test_inline_lambda() {
        {
          let v: vector<u64> = Vector<u64>(1, 2, 3);
          {
            let product: u64 = 1;
            LambdaTest2::foreach<u64>(Borrow(Immutable)(v), |e: &u64| product: u64 = LambdaTest1::inline_mul(product, Deref(e)));
            Tuple()
          }
        }
    }
} // end 0x42::LambdaTest2
module 0x42::LambdaTest {
    use 0x42::LambdaTest2; // resolved as: 0x42::LambdaTest2
    public fun inline_apply(f: |u64|u64,b: u64): u64 {
        (f)(b)
    }
    public fun inline_apply_test(): u64 {
        Add<u64>(LambdaTest2::inline_apply2(|x: u64| Add<u64>(x, 1), 3), LambdaTest2::inline_apply2(|x: u64| Mul<u64>(x, x), LambdaTest::inline_apply(|y: u64| y, 3)))
    }
    private fun test_lambda() {
        {
          let a: u64 = LambdaTest::inline_apply_test();
          if Eq<u64>(a, 1) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
} // end 0x42::LambdaTest


// -- Model dump after env processor access and use check after inlining:
module 0x42::LambdaTest1 {
    public fun inline_apply(f: |u64|u64,b: u64): u64 {
        (f)(b)
    }
    public fun inline_apply1(f: |u64|u64,b: u64): u64 {
        LambdaTest1::inline_mul(Add<u64>((f)(b), 1), LambdaTest1::inline_mul(3, 4))
    }
    public fun inline_mul(a: u64,b: u64): u64 {
        Mul<u64>(a, b)
    }
} // end 0x42::LambdaTest1
module 0x42::LambdaTest2 {
    use 0x42::LambdaTest1; // resolved as: 0x42::LambdaTest1
    use std::vector;
    public fun foreach<T>(v: &vector<T>,action: |&T|) {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, vector::length<T>(v)) {
              (action)(vector::borrow<T>(v, i));
              i: u64 = Add<u64>(i, 1);
              Tuple()
            } else {
              break
            }
          }
        }
    }
    public fun inline_apply2(g: |u64|u64,c: u64): u64 {
        Add<u64>(LambdaTest1::inline_apply1(|z: u64| z, (g)(LambdaTest1::inline_mul(c, LambdaTest1::inline_apply(|x: u64| x, 3)))), 2)
    }
    public fun inline_apply3(g: |u64|u64,c: u64): u64 {
        Add<u64>(LambdaTest1::inline_apply1(g, LambdaTest1::inline_mul(c, LambdaTest1::inline_apply(|x: u64| LambdaTest1::inline_apply(|y: u64| y, x), 3))), 4)
    }
    public fun test_inline_lambda() {
        {
          let v: vector<u64> = Vector<u64>(1, 2, 3);
          {
            let product: u64 = 1;
            LambdaTest2::foreach<u64>(Borrow(Immutable)(v), |e: &u64| product: u64 = LambdaTest1::inline_mul(product, Deref(e)));
            Tuple()
          }
        }
    }
} // end 0x42::LambdaTest2
module 0x42::LambdaTest {
    use 0x42::LambdaTest2; // resolved as: 0x42::LambdaTest2
    public fun inline_apply(f: |u64|u64,b: u64): u64 {
        (f)(b)
    }
    public fun inline_apply_test(): u64 {
        Add<u64>(LambdaTest2::inline_apply2(|x: u64| Add<u64>(x, 1), 3), LambdaTest2::inline_apply2(|x: u64| Mul<u64>(x, x), LambdaTest::inline_apply(|y: u64| y, 3)))
    }
    private fun test_lambda() {
        {
          let a: u64 = LambdaTest::inline_apply_test();
          if Eq<u64>(a, 1) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
} // end 0x42::LambdaTest


// -- Model dump after env processor acquires check:
module 0x42::LambdaTest1 {
    public fun inline_apply(f: |u64|u64,b: u64): u64 {
        (f)(b)
    }
    public fun inline_apply1(f: |u64|u64,b: u64): u64 {
        LambdaTest1::inline_mul(Add<u64>((f)(b), 1), LambdaTest1::inline_mul(3, 4))
    }
    public fun inline_mul(a: u64,b: u64): u64 {
        Mul<u64>(a, b)
    }
} // end 0x42::LambdaTest1
module 0x42::LambdaTest2 {
    use 0x42::LambdaTest1; // resolved as: 0x42::LambdaTest1
    use std::vector;
    public fun foreach<T>(v: &vector<T>,action: |&T|) {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, vector::length<T>(v)) {
              (action)(vector::borrow<T>(v, i));
              i: u64 = Add<u64>(i, 1);
              Tuple()
            } else {
              break
            }
          }
        }
    }
    public fun inline_apply2(g: |u64|u64,c: u64): u64 {
        Add<u64>(LambdaTest1::inline_apply1(|z: u64| z, (g)(LambdaTest1::inline_mul(c, LambdaTest1::inline_apply(|x: u64| x, 3)))), 2)
    }
    public fun inline_apply3(g: |u64|u64,c: u64): u64 {
        Add<u64>(LambdaTest1::inline_apply1(g, LambdaTest1::inline_mul(c, LambdaTest1::inline_apply(|x: u64| LambdaTest1::inline_apply(|y: u64| y, x), 3))), 4)
    }
    public fun test_inline_lambda() {
        {
          let v: vector<u64> = Vector<u64>(1, 2, 3);
          {
            let product: u64 = 1;
            LambdaTest2::foreach<u64>(Borrow(Immutable)(v), |e: &u64| product: u64 = LambdaTest1::inline_mul(product, Deref(e)));
            Tuple()
          }
        }
    }
} // end 0x42::LambdaTest2
module 0x42::LambdaTest {
    use 0x42::LambdaTest2; // resolved as: 0x42::LambdaTest2
    public fun inline_apply(f: |u64|u64,b: u64): u64 {
        (f)(b)
    }
    public fun inline_apply_test(): u64 {
        Add<u64>(LambdaTest2::inline_apply2(|x: u64| Add<u64>(x, 1), 3), LambdaTest2::inline_apply2(|x: u64| Mul<u64>(x, x), LambdaTest::inline_apply(|y: u64| y, 3)))
    }
    private fun test_lambda() {
        {
          let a: u64 = LambdaTest::inline_apply_test();
          if Eq<u64>(a, 1) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
} // end 0x42::LambdaTest


// -- Model dump after env processor simplifier:
module 0x42::LambdaTest1 {
    public fun inline_apply(f: |u64|u64,b: u64): u64 {
        (f)(b)
    }
    public fun inline_apply1(f: |u64|u64,b: u64): u64 {
        LambdaTest1::inline_mul(Add<u64>((f)(b), 1), LambdaTest1::inline_mul(3, 4))
    }
    public fun inline_mul(a: u64,b: u64): u64 {
        Mul<u64>(a, b)
    }
} // end 0x42::LambdaTest1
module 0x42::LambdaTest2 {
    use 0x42::LambdaTest1; // resolved as: 0x42::LambdaTest1
    use std::vector;
    public fun foreach<T>(v: &vector<T>,action: |&T|) {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, vector::length<T>(v)) {
              (action)(vector::borrow<T>(v, i));
              i: u64 = Add<u64>(i, 1);
              Tuple()
            } else {
              break
            }
          }
        }
    }
    public fun inline_apply2(g: |u64|u64,c: u64): u64 {
        Add<u64>(LambdaTest1::inline_apply1(|z: u64| z, (g)(LambdaTest1::inline_mul(c, LambdaTest1::inline_apply(|x: u64| x, 3)))), 2)
    }
    public fun inline_apply3(g: |u64|u64,c: u64): u64 {
        Add<u64>(LambdaTest1::inline_apply1(g, LambdaTest1::inline_mul(c, LambdaTest1::inline_apply(|x: u64| LambdaTest1::inline_apply(|y: u64| y, x), 3))), 4)
    }
    public fun test_inline_lambda() {
        {
          let product: u64 = 1;
          LambdaTest2::foreach<u64>(Borrow(Immutable)([Number(1), Number(2), Number(3)]), |e: &u64| product: u64 = LambdaTest1::inline_mul(product, Deref(e)));
          Tuple()
        }
    }
} // end 0x42::LambdaTest2
module 0x42::LambdaTest {
    use 0x42::LambdaTest2; // resolved as: 0x42::LambdaTest2
    public fun inline_apply(f: |u64|u64,b: u64): u64 {
        (f)(b)
    }
    public fun inline_apply_test(): u64 {
        Add<u64>(LambdaTest2::inline_apply2(|x: u64| Add<u64>(x, 1), 3), LambdaTest2::inline_apply2(|x: u64| Mul<u64>(x, x), LambdaTest::inline_apply(|y: u64| y, 3)))
    }
    private fun test_lambda() {
        {
          let a: u64 = LambdaTest::inline_apply_test();
          if Eq<u64>(a, 1) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
} // end 0x42::LambdaTest



Diagnostics:
error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
   ┌─ tests/lambda/inline-parity/lambda.move:30:14
   │
30 │     foreach(&v, |e| product = LambdaTest1::inline_mul(product, *e));
   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
   ┌─ tests/lambda/inline-parity/lambda.move:34:29
   │
34 │     LambdaTest1::inline_apply1(|z|z, g(LambdaTest1::inline_mul(c, LambdaTest1::inline_apply(|x|x, 3)))) + 2
   │                                ^^^^

error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
   ┌─ tests/lambda/inline-parity/lambda.move:34:90
   │
34 │     LambdaTest1::inline_apply1(|z|z, g(LambdaTest1::inline_mul(c, LambdaTest1::inline_apply(|x|x, 3)))) + 2
   │                                                                                             ^^^^

error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
   ┌─ tests/lambda/inline-parity/lambda.move:40:29
   │
40 │         LambdaTest1::inline_apply(|y|y, x)
   │                                   ^^^^

error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
   ┌─ tests/lambda/inline-parity/lambda.move:39:59
   │
39 │           LambdaTest1::inline_mul(c, LambdaTest1::inline_apply(|x| {
   │ ╭──────────────────────────────────────────────────────────────^
40 │ │         LambdaTest1::inline_apply(|y|y, x)
41 │ │         },
   │ ╰─────────^

error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
   ┌─ tests/lambda/inline-parity/lambda.move:54:29
   │
54 │     LambdaTest2::inline_apply2(|x| x + 1, 3) +
   │                                ^^^^^^^^^

error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
   ┌─ tests/lambda/inline-parity/lambda.move:55:29
   │
55 │     LambdaTest2::inline_apply2(|x| x * x, inline_apply(|y|y, 3))
   │                                ^^^^^^^^^

error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
   ┌─ tests/lambda/inline-parity/lambda.move:55:53
   │
55 │     LambdaTest2::inline_apply2(|x| x * x, inline_apply(|y|y, 3))
   │                                                        ^^^^
