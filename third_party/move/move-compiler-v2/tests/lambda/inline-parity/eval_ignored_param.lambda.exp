// -- Model dump before bytecode pipeline
module 0x42::Test {
    private fun foo(f: |(u64, u64, u64)|u64,g: |(u64, u64, u64)|u64,x: u64,_: u64,y: u64,z: u64): u64 {
        {
          let r1: u64 = (f)(x: u64 = Add<u64>(x, 1);
          x, y: u64 = Add<u64>(y, 1);
          y, z: u64 = Add<u64>(z, 1);
          z);
          {
            let r2: u64 = (g)(x: u64 = Add<u64>(x, 1);
            x, y: u64 = Add<u64>(y, 1);
            y, z: u64 = Add<u64>(z, 1);
            z);
            Add<u64>(Add<u64>(Add<u64>(Add<u64>(r1, r2), Mul<u64>(3, x)), Mul<u64>(5, y)), Mul<u64>(7, z))
          }
        }
    }
    public fun test() {
        {
          let r: u64 = Test::foo(closure#0Test::__lambda__1__test(), closure#0Test::__lambda__2__test(), 1, 10, 100, 1000);
          if Eq<u64>(r, 9637) {
            Tuple()
          } else {
            Abort(r)
          };
          Tuple()
        }
    }
    private fun __lambda__1__test(x: u64,param$1: u64,z: u64): u64 {
        {
          let _: u64 = param$1;
          Mul<u64>(x, z)
        }
    }
    private fun __lambda__2__test(param$0: u64,y: u64,param$2: u64): u64 {
        {
          let _: u64 = param$2;
          {
            let _: u64 = param$0;
            y
          }
        }
    }
} // end 0x42::Test

// -- Sourcified model before bytecode pipeline
module 0x42::Test {
    fun foo(f: |(u64, u64, u64)|u64, g: |(u64, u64, u64)|u64, x: u64, _: u64, y: u64, z: u64): u64 {
        let r1 = f({
            x = x + 1;
            x
        }, {
            y = y + 1;
            y
        }, {
            z = z + 1;
            z
        });
        let r2 = g({
            x = x + 1;
            x
        }, {
            y = y + 1;
            y
        }, {
            z = z + 1;
            z
        });
        r1 + r2 + 3 * x + 5 * y + 7 * z
    }
    public fun test() {
        let r = foo(|(arg0,arg1,arg2)| __lambda__1__test(arg0, arg1, arg2), |(arg0,arg1,arg2)| __lambda__2__test(arg0, arg1, arg2), 1, 10, 100, 1000);
        if (r == 9637) () else abort r;
    }
    fun __lambda__1__test(x: u64, param$1: u64, z: u64): u64 {
        let _ = param$1;
        x * z
    }
    fun __lambda__2__test(param$0: u64, y: u64, param$2: u64): u64 {
        let _ = param$2;
        let _ = param$0;
        y
    }
}

============ initial bytecode ================

[variant baseline]
fun Test::foo($t0: |(u64, u64, u64)|u64, $t1: |(u64, u64, u64)|u64, $t2: u64, $t3: u64, $t4: u64, $t5: u64): u64 {
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: u64
     var $t11: u64
     var $t12: u64
     var $t13: u64
     var $t14: u64
     var $t15: u64
     var $t16: u64
     var $t17: u64
     var $t18: u64
     var $t19: u64
     var $t20: u64
     var $t21: u64
     var $t22: u64
     var $t23: u64
     var $t24: u64
     var $t25: u64
     var $t26: u64
     var $t27: u64
     var $t28: u64
     var $t29: u64
     var $t30: u64
     var $t31: u64
     var $t32: u64
     var $t33: u64
     var $t34: u64
     var $t35: u64
     var $t36: u64
     var $t37: u64
     var $t38: u64
     var $t39: u64
     var $t40: u64
     var $t41: u64
     var $t42: u64
  0: $t10 := infer($t2)
  1: $t11 := 1
  2: $t9 := +($t10, $t11)
  3: $t2 := infer($t9)
  4: $t8 := infer($t2)
  5: $t14 := infer($t4)
  6: $t15 := 1
  7: $t13 := +($t14, $t15)
  8: $t4 := infer($t13)
  9: $t12 := infer($t4)
 10: $t18 := infer($t5)
 11: $t19 := 1
 12: $t17 := +($t18, $t19)
 13: $t5 := infer($t17)
 14: $t16 := infer($t5)
 15: $t7 := invoke($t8, $t12, $t16, $t0)
 16: $t23 := infer($t2)
 17: $t24 := 1
 18: $t22 := +($t23, $t24)
 19: $t2 := infer($t22)
 20: $t21 := infer($t2)
 21: $t27 := infer($t4)
 22: $t28 := 1
 23: $t26 := +($t27, $t28)
 24: $t4 := infer($t26)
 25: $t25 := infer($t4)
 26: $t31 := infer($t5)
 27: $t32 := 1
 28: $t30 := +($t31, $t32)
 29: $t5 := infer($t30)
 30: $t29 := infer($t5)
 31: $t20 := invoke($t21, $t25, $t29, $t1)
 32: $t36 := infer($t7)
 33: $t35 := +($t36, $t20)
 34: $t38 := 3
 35: $t37 := *($t38, $t2)
 36: $t34 := +($t35, $t37)
 37: $t40 := 5
 38: $t39 := *($t40, $t4)
 39: $t33 := +($t34, $t39)
 40: $t42 := 7
 41: $t41 := *($t42, $t5)
 42: $t6 := +($t33, $t41)
 43: return $t6
}


[variant baseline]
public fun Test::test() {
     var $t0: u64
     var $t1: |(u64, u64, u64)|u64
     var $t2: |(u64, u64, u64)|u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: bool
     var $t8: u64
     var $t9: u64
  0: $t1 := closure#0 Test::__lambda__1__test()
  1: $t2 := closure#0 Test::__lambda__2__test()
  2: $t3 := 1
  3: $t4 := 10
  4: $t5 := 100
  5: $t6 := 1000
  6: $t0 := Test::foo($t1, $t2, $t3, $t4, $t5, $t6)
  7: $t8 := infer($t0)
  8: $t9 := 9637
  9: $t7 := ==($t8, $t9)
 10: if ($t7) goto 11 else goto 13
 11: label L0
 12: goto 15
 13: label L1
 14: abort($t0)
 15: label L2
 16: return ()
}


[variant baseline]
fun Test::__lambda__1__test($t0: u64, $t1: u64, $t2: u64): u64 {
     var $t3: u64
     var $t4: u64
     var $t5: u64
  0: $t4 := infer($t1)
  1: $t5 := infer($t0)
  2: $t3 := *($t5, $t2)
  3: return $t3
}


[variant baseline]
fun Test::__lambda__2__test($t0: u64, $t1: u64, $t2: u64): u64 {
     var $t3: u64
     var $t4: u64
     var $t5: u64
  0: $t4 := infer($t2)
  1: $t5 := infer($t0)
  2: $t3 := infer($t1)
  3: return $t3
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun Test::foo($t0: |(u64, u64, u64)|u64, $t1: |(u64, u64, u64)|u64, $t2: u64, $t3: u64, $t4: u64, $t5: u64): u64 {
     var $t6: u64 [unused]
     var $t7: u64 [unused]
     var $t8: u64 [unused]
     var $t9: u64 [unused]
     var $t10: u64 [unused]
     var $t11: u64
     var $t12: u64 [unused]
     var $t13: u64 [unused]
     var $t14: u64 [unused]
     var $t15: u64
     var $t16: u64 [unused]
     var $t17: u64 [unused]
     var $t18: u64 [unused]
     var $t19: u64
     var $t20: u64 [unused]
     var $t21: u64 [unused]
     var $t22: u64 [unused]
     var $t23: u64 [unused]
     var $t24: u64 [unused]
     var $t25: u64 [unused]
     var $t26: u64 [unused]
     var $t27: u64 [unused]
     var $t28: u64 [unused]
     var $t29: u64 [unused]
     var $t30: u64 [unused]
     var $t31: u64 [unused]
     var $t32: u64
     var $t33: u64 [unused]
     var $t34: u64 [unused]
     var $t35: u64 [unused]
     var $t36: u64 [unused]
     var $t37: u64 [unused]
     var $t38: u64 [unused]
     var $t39: u64 [unused]
     var $t40: u64 [unused]
     var $t41: u64 [unused]
     var $t42: u64 [unused]
     # live vars: $t0, $t1, $t2, $t3, $t4, $t5
  0: $t3 := move($t2)
     # live vars: $t0, $t1, $t3, $t4, $t5
  1: $t11 := 1
     # live vars: $t0, $t1, $t3, $t4, $t5, $t11
  2: $t3 := +($t3, $t11)
     # live vars: $t0, $t1, $t3, $t4, $t5
  3: $t2 := move($t3)
     # live vars: $t0, $t1, $t2, $t4, $t5
  4: $t3 := copy($t2)
     # live vars: $t0, $t1, $t2, $t3, $t4, $t5
  5: $t11 := move($t4)
     # live vars: $t0, $t1, $t2, $t3, $t5, $t11
  6: $t15 := 1
     # live vars: $t0, $t1, $t2, $t3, $t5, $t11, $t15
  7: $t11 := +($t11, $t15)
     # live vars: $t0, $t1, $t2, $t3, $t5, $t11
  8: $t4 := move($t11)
     # live vars: $t0, $t1, $t2, $t3, $t4, $t5
  9: $t11 := copy($t4)
     # live vars: $t0, $t1, $t2, $t3, $t4, $t5, $t11
 10: $t15 := move($t5)
     # live vars: $t0, $t1, $t2, $t3, $t4, $t11, $t15
 11: $t19 := 1
     # live vars: $t0, $t1, $t2, $t3, $t4, $t11, $t15, $t19
 12: $t15 := +($t15, $t19)
     # live vars: $t0, $t1, $t2, $t3, $t4, $t11, $t15
 13: $t5 := move($t15)
     # live vars: $t0, $t1, $t2, $t3, $t4, $t5, $t11
 14: $t15 := copy($t5)
     # live vars: $t0, $t1, $t2, $t3, $t4, $t5, $t11, $t15
 15: $t3 := invoke($t3, $t11, $t15, $t0)
     # live vars: $t1, $t2, $t3, $t4, $t5
 16: $t11 := move($t2)
     # live vars: $t1, $t3, $t4, $t5, $t11
 17: $t15 := 1
     # live vars: $t1, $t3, $t4, $t5, $t11, $t15
 18: $t11 := +($t11, $t15)
     # live vars: $t1, $t3, $t4, $t5, $t11
 19: $t2 := move($t11)
     # live vars: $t1, $t2, $t3, $t4, $t5
 20: $t11 := copy($t2)
     # live vars: $t1, $t2, $t3, $t4, $t5, $t11
 21: $t15 := move($t4)
     # live vars: $t1, $t2, $t3, $t5, $t11, $t15
 22: $t19 := 1
     # live vars: $t1, $t2, $t3, $t5, $t11, $t15, $t19
 23: $t15 := +($t15, $t19)
     # live vars: $t1, $t2, $t3, $t5, $t11, $t15
 24: $t4 := move($t15)
     # live vars: $t1, $t2, $t3, $t4, $t5, $t11
 25: $t15 := copy($t4)
     # live vars: $t1, $t2, $t3, $t4, $t5, $t11, $t15
 26: $t19 := move($t5)
     # live vars: $t1, $t2, $t3, $t4, $t11, $t15, $t19
 27: $t32 := 1
     # live vars: $t1, $t2, $t3, $t4, $t11, $t15, $t19, $t32
 28: $t19 := +($t19, $t32)
     # live vars: $t1, $t2, $t3, $t4, $t11, $t15, $t19
 29: $t5 := move($t19)
     # live vars: $t1, $t2, $t3, $t4, $t5, $t11, $t15
 30: $t19 := copy($t5)
     # live vars: $t1, $t2, $t3, $t4, $t5, $t11, $t15, $t19
 31: $t11 := invoke($t11, $t15, $t19, $t1)
     # live vars: $t2, $t3, $t4, $t5, $t11
 32: $t3 := move($t3)
     # live vars: $t2, $t3, $t4, $t5, $t11
 33: $t3 := +($t3, $t11)
     # live vars: $t2, $t3, $t4, $t5
 34: $t11 := 3
     # live vars: $t2, $t3, $t4, $t5, $t11
 35: $t2 := *($t11, $t2)
     # live vars: $t2, $t3, $t4, $t5
 36: $t2 := +($t3, $t2)
     # live vars: $t2, $t4, $t5
 37: $t3 := 5
     # live vars: $t2, $t3, $t4, $t5
 38: $t3 := *($t3, $t4)
     # live vars: $t2, $t3, $t5
 39: $t2 := +($t2, $t3)
     # live vars: $t2, $t5
 40: $t3 := 7
     # live vars: $t2, $t3, $t5
 41: $t3 := *($t3, $t5)
     # live vars: $t2, $t3
 42: $t2 := +($t2, $t3)
     # live vars: $t2
 43: return $t2
}


[variant baseline]
public fun Test::test() {
     var $t0: u64 [unused]
     var $t1: |(u64, u64, u64)|u64
     var $t2: |(u64, u64, u64)|u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: bool
     var $t8: u64 [unused]
     var $t9: u64 [unused]
     # live vars:
  0: $t1 := closure#0 Test::__lambda__1__test()
     # live vars: $t1
  1: $t2 := closure#0 Test::__lambda__2__test()
     # live vars: $t1, $t2
  2: $t3 := 1
     # live vars: $t1, $t2, $t3
  3: $t4 := 10
     # live vars: $t1, $t2, $t3, $t4
  4: $t5 := 100
     # live vars: $t1, $t2, $t3, $t4, $t5
  5: $t6 := 1000
     # live vars: $t1, $t2, $t3, $t4, $t5, $t6
  6: $t3 := Test::foo($t1, $t2, $t3, $t4, $t5, $t6)
     # live vars: $t3
  7: $t4 := copy($t3)
     # live vars: $t3, $t4
  8: $t5 := 9637
     # live vars: $t3, $t4, $t5
  9: $t7 := ==($t4, $t5)
     # live vars: $t3, $t7
 10: if ($t7) goto 11 else goto 13
     # live vars: $t3
 11: label L0
     # live vars:
 12: return ()
     # live vars: $t3
 13: label L1
     # live vars: $t3
 14: abort($t3)
}


[variant baseline]
fun Test::__lambda__1__test($t0: u64, $t1: u64, $t2: u64): u64 {
     var $t3: u64 [unused]
     var $t4: u64 [unused]
     var $t5: u64 [unused]
     # live vars: $t0, $t1, $t2
  0: $t0 := move($t0)
     # live vars: $t0, $t2
  1: $t0 := *($t0, $t2)
     # live vars: $t0
  2: return $t0
}


[variant baseline]
fun Test::__lambda__2__test($t0: u64, $t1: u64, $t2: u64): u64 {
     var $t3: u64 [unused]
     var $t4: u64 [unused]
     var $t5: u64 [unused]
     # live vars: $t0, $t1, $t2
  0: return $t1
}


============ disassembled file-format ==================
// Move bytecode v8
module 42.Test {


foo(f: |u64,u64,u64|u64, g: |u64,u64,u64|u64, x: u64, _: u64, y: u64, z: u64): u64 /* def_idx: 0 */ {
L6:	$t11: u64
B0:
	0: MoveLoc[2](x: u64)
	1: LdU64(1)
	2: Add
	3: StLoc[2](x: u64)
	4: CopyLoc[2](x: u64)
	5: MoveLoc[4](y: u64)
	6: LdU64(1)
	7: Add
	8: StLoc[4](y: u64)
	9: CopyLoc[4](y: u64)
	10: MoveLoc[5](z: u64)
	11: LdU64(1)
	12: Add
	13: StLoc[5](z: u64)
	14: CopyLoc[5](z: u64)
	15: MoveLoc[0](f: |u64,u64,u64|u64)
	16: CallClosure(|u64,u64,u64|u64)
	17: MoveLoc[2](x: u64)
	18: LdU64(1)
	19: Add
	20: StLoc[2](x: u64)
	21: CopyLoc[2](x: u64)
	22: MoveLoc[4](y: u64)
	23: LdU64(1)
	24: Add
	25: StLoc[4](y: u64)
	26: CopyLoc[4](y: u64)
	27: MoveLoc[5](z: u64)
	28: LdU64(1)
	29: Add
	30: StLoc[5](z: u64)
	31: CopyLoc[5](z: u64)
	32: MoveLoc[1](g: |u64,u64,u64|u64)
	33: CallClosure(|u64,u64,u64|u64)
	34: Add
	35: LdU64(3)
	36: MoveLoc[2](x: u64)
	37: Mul
	38: Add
	39: LdU64(5)
	40: MoveLoc[4](y: u64)
	41: Mul
	42: Add
	43: LdU64(7)
	44: MoveLoc[5](z: u64)
	45: Mul
	46: Add
	47: Ret
}
public test() /* def_idx: 1 */ {
L0:	$t3: u64
B0:
	0: PackClosure#0 __lambda__1__test(u64, u64, u64): u64
	1: PackClosure#0 __lambda__2__test(u64, u64, u64): u64
	2: LdU64(1)
	3: LdU64(10)
	4: LdU64(100)
	5: LdU64(1000)
	6: Call foo(|u64,u64,u64|u64, |u64,u64,u64|u64, u64, u64, u64, u64): u64
	7: StLoc[0]($t3: u64)
	8: CopyLoc[0]($t3: u64)
	9: LdU64(9637)
	10: Eq
	11: BrFalse(13)
B1:
	12: Ret
B2:
	13: MoveLoc[0]($t3: u64)
	14: Abort
}
__lambda__1__test(x: u64, param$1: u64, z: u64): u64 /* def_idx: 2 */ {
B0:
	0: MoveLoc[0](x: u64)
	1: MoveLoc[2](z: u64)
	2: Mul
	3: Ret
}
__lambda__2__test(param$0: u64, y: u64, param$2: u64): u64 /* def_idx: 3 */ {
B0:
	0: MoveLoc[1](y: u64)
	1: Ret
}
}
============ bytecode verification succeeded ========
