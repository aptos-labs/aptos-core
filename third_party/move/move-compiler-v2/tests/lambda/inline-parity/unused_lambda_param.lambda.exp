// -- Model dump before env processor pipeline:
module 0xc0ffee::m {
    private fun test(p: u64,f: |u64|u64): u64 {
        (f)(p)
    }
    private fun unused_lambda() {
        m::test(0, |x: u64| 1);
        Tuple()
    }
    private fun unused_lambda_suppressed1() {
        m::test(0, |_x: u64| 1);
        Tuple()
    }
    private fun unused_lambda_suppressed2() {
        m::test(0, |_: u64| 1);
        Tuple()
    }
} // end 0xc0ffee::m


// -- Model dump after env processor unused checks:
module 0xc0ffee::m {
    private fun test(p: u64,f: |u64|u64): u64 {
        (f)(p)
    }
    private fun unused_lambda() {
        m::test(0, |x: u64| 1);
        Tuple()
    }
    private fun unused_lambda_suppressed1() {
        m::test(0, |_x: u64| 1);
        Tuple()
    }
    private fun unused_lambda_suppressed2() {
        m::test(0, |_: u64| 1);
        Tuple()
    }
} // end 0xc0ffee::m


// -- Model dump after env processor type parameter check:
module 0xc0ffee::m {
    private fun test(p: u64,f: |u64|u64): u64 {
        (f)(p)
    }
    private fun unused_lambda() {
        m::test(0, |x: u64| 1);
        Tuple()
    }
    private fun unused_lambda_suppressed1() {
        m::test(0, |_x: u64| 1);
        Tuple()
    }
    private fun unused_lambda_suppressed2() {
        m::test(0, |_: u64| 1);
        Tuple()
    }
} // end 0xc0ffee::m


// -- Model dump after env processor check recursive struct definition:
module 0xc0ffee::m {
    private fun test(p: u64,f: |u64|u64): u64 {
        (f)(p)
    }
    private fun unused_lambda() {
        m::test(0, |x: u64| 1);
        Tuple()
    }
    private fun unused_lambda_suppressed1() {
        m::test(0, |_x: u64| 1);
        Tuple()
    }
    private fun unused_lambda_suppressed2() {
        m::test(0, |_: u64| 1);
        Tuple()
    }
} // end 0xc0ffee::m


// -- Model dump after env processor check cyclic type instantiation:
module 0xc0ffee::m {
    private fun test(p: u64,f: |u64|u64): u64 {
        (f)(p)
    }
    private fun unused_lambda() {
        m::test(0, |x: u64| 1);
        Tuple()
    }
    private fun unused_lambda_suppressed1() {
        m::test(0, |_x: u64| 1);
        Tuple()
    }
    private fun unused_lambda_suppressed2() {
        m::test(0, |_: u64| 1);
        Tuple()
    }
} // end 0xc0ffee::m


// -- Model dump after env processor unused struct params check:
module 0xc0ffee::m {
    private fun test(p: u64,f: |u64|u64): u64 {
        (f)(p)
    }
    private fun unused_lambda() {
        m::test(0, |x: u64| 1);
        Tuple()
    }
    private fun unused_lambda_suppressed1() {
        m::test(0, |_x: u64| 1);
        Tuple()
    }
    private fun unused_lambda_suppressed2() {
        m::test(0, |_: u64| 1);
        Tuple()
    }
} // end 0xc0ffee::m


// -- Model dump after env processor access and use check before inlining:
module 0xc0ffee::m {
    private fun test(p: u64,f: |u64|u64): u64 {
        (f)(p)
    }
    private fun unused_lambda() {
        m::test(0, |x: u64| 1);
        Tuple()
    }
    private fun unused_lambda_suppressed1() {
        m::test(0, |_x: u64| 1);
        Tuple()
    }
    private fun unused_lambda_suppressed2() {
        m::test(0, |_: u64| 1);
        Tuple()
    }
} // end 0xc0ffee::m


// -- Model dump after env processor inlining:
module 0xc0ffee::m {
    private fun test(p: u64,f: |u64|u64): u64 {
        (f)(p)
    }
    private fun unused_lambda() {
        m::test(0, |x: u64| 1);
        Tuple()
    }
    private fun unused_lambda_suppressed1() {
        m::test(0, |_x: u64| 1);
        Tuple()
    }
    private fun unused_lambda_suppressed2() {
        m::test(0, |_: u64| 1);
        Tuple()
    }
} // end 0xc0ffee::m


// -- Model dump after env processor access and use check after inlining:
module 0xc0ffee::m {
    private fun test(p: u64,f: |u64|u64): u64 {
        (f)(p)
    }
    private fun unused_lambda() {
        m::test(0, |x: u64| 1);
        Tuple()
    }
    private fun unused_lambda_suppressed1() {
        m::test(0, |_x: u64| 1);
        Tuple()
    }
    private fun unused_lambda_suppressed2() {
        m::test(0, |_: u64| 1);
        Tuple()
    }
} // end 0xc0ffee::m


// -- Model dump after env processor acquires check:
module 0xc0ffee::m {
    private fun test(p: u64,f: |u64|u64): u64 {
        (f)(p)
    }
    private fun unused_lambda() {
        m::test(0, |x: u64| 1);
        Tuple()
    }
    private fun unused_lambda_suppressed1() {
        m::test(0, |_x: u64| 1);
        Tuple()
    }
    private fun unused_lambda_suppressed2() {
        m::test(0, |_: u64| 1);
        Tuple()
    }
} // end 0xc0ffee::m


// -- Model dump after env processor simplifier:
module 0xc0ffee::m {
    private fun test(p: u64,f: |u64|u64): u64 {
        (f)(p)
    }
    private fun unused_lambda() {
        m::test(0, |x: u64| 1);
        Tuple()
    }
    private fun unused_lambda_suppressed1() {
        m::test(0, |_x: u64| 1);
        Tuple()
    }
    private fun unused_lambda_suppressed2() {
        m::test(0, |_: u64| 1);
        Tuple()
    }
} // end 0xc0ffee::m



Diagnostics:
warning: Unused anonymous function parameter `x`. Consider removing or prefixing with an underscore: `_x`
  ┌─ tests/lambda/inline-parity/unused_lambda_param.move:7:18
  │
7 │         test(0, |x| 1);
  │                  ^

error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
  ┌─ tests/lambda/inline-parity/unused_lambda_param.move:7:17
  │
7 │         test(0, |x| 1);
  │                 ^^^^^

error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
   ┌─ tests/lambda/inline-parity/unused_lambda_param.move:11:17
   │
11 │         test(0, |_x| 1);
   │                 ^^^^^^

error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
   ┌─ tests/lambda/inline-parity/unused_lambda_param.move:15:17
   │
15 │         test(0, |_| 1);
   │                 ^^^^^
