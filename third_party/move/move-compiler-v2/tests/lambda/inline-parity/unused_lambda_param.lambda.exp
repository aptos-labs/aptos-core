
Diagnostics:
warning: Unused anonymous function parameter `x`. Consider removing or prefixing with an underscore: `_x`
  ┌─ tests/lambda/inline-parity/unused_lambda_param.move:7:18
  │
7 │         test(0, |x| 1);
  │                  ^

// -- Model dump before bytecode pipeline
module 0xc0ffee::m {
    private fun test(p: u64,f: |u64|u64): u64 {
        (f)(p)
    }
    private fun unused_lambda() {
        m::test(0, closure#0m::__lambda__1__unused_lambda());
        Tuple()
    }
    private fun unused_lambda_suppressed1() {
        m::test(0, closure#0m::__lambda__1__unused_lambda_suppressed1());
        Tuple()
    }
    private fun unused_lambda_suppressed2() {
        m::test(0, closure#0m::__lambda__1__unused_lambda_suppressed2());
        Tuple()
    }
    private fun __lambda__1__unused_lambda(x: u64): u64 {
        1
    }
    private fun __lambda__1__unused_lambda_suppressed1(_x: u64): u64 {
        1
    }
    private fun __lambda__1__unused_lambda_suppressed2(param$0: u64): u64 {
        {
          let _: u64 = param$0;
          1
        }
    }
} // end 0xc0ffee::m

// -- Sourcified model before bytecode pipeline
module 0xc0ffee::m {
    fun test(p: u64, f: |u64|u64): u64 {
        f(p)
    }
    fun unused_lambda() {
        test(0, |arg0| __lambda__1__unused_lambda(arg0));
    }
    fun unused_lambda_suppressed1() {
        test(0, |arg0| __lambda__1__unused_lambda_suppressed1(arg0));
    }
    fun unused_lambda_suppressed2() {
        test(0, |arg0| __lambda__1__unused_lambda_suppressed2(arg0));
    }
    fun __lambda__1__unused_lambda(x: u64): u64 {
        1
    }
    fun __lambda__1__unused_lambda_suppressed1(_x: u64): u64 {
        1
    }
    fun __lambda__1__unused_lambda_suppressed2(param$0: u64): u64 {
        let _ = param$0;
        1
    }
}

============ initial bytecode ================

[variant baseline]
fun m::test($t0: u64, $t1: |u64|u64): u64 {
     var $t2: u64
     var $t3: u64
  0: $t3 := infer($t0)
  1: $t2 := invoke($t3, $t1)
  2: return $t2
}


[variant baseline]
fun m::unused_lambda() {
     var $t0: u64
     var $t1: u64
     var $t2: |u64|u64
  0: $t1 := 0
  1: $t2 := closure#0 m::__lambda__1__unused_lambda()
  2: $t0 := m::test($t1, $t2)
  3: return ()
}


[variant baseline]
fun m::unused_lambda_suppressed1() {
     var $t0: u64
     var $t1: u64
     var $t2: |u64|u64
  0: $t1 := 0
  1: $t2 := closure#0 m::__lambda__1__unused_lambda_suppressed1()
  2: $t0 := m::test($t1, $t2)
  3: return ()
}


[variant baseline]
fun m::unused_lambda_suppressed2() {
     var $t0: u64
     var $t1: u64
     var $t2: |u64|u64
  0: $t1 := 0
  1: $t2 := closure#0 m::__lambda__1__unused_lambda_suppressed2()
  2: $t0 := m::test($t1, $t2)
  3: return ()
}


[variant baseline]
fun m::__lambda__1__unused_lambda($t0: u64): u64 {
     var $t1: u64
  0: $t1 := 1
  1: return $t1
}


[variant baseline]
fun m::__lambda__1__unused_lambda_suppressed1($t0: u64): u64 {
     var $t1: u64
  0: $t1 := 1
  1: return $t1
}


[variant baseline]
fun m::__lambda__1__unused_lambda_suppressed2($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
  0: $t2 := infer($t0)
  1: $t1 := 1
  2: return $t1
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::test($t0: u64, $t1: |u64|u64): u64 {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     # live vars: $t0, $t1
  0: $t0 := move($t0)
     # live vars: $t0, $t1
  1: $t0 := invoke($t0, $t1)
     # live vars: $t0
  2: return $t0
}


[variant baseline]
fun m::unused_lambda() {
     var $t0: u64
     var $t1: u64
     var $t2: |u64|u64
     # live vars:
  0: $t1 := 0
     # live vars: $t1
  1: $t2 := closure#0 m::__lambda__1__unused_lambda()
     # live vars: $t1, $t2
  2: $t0 := m::test($t1, $t2)
     # live vars:
  3: return ()
}


[variant baseline]
fun m::unused_lambda_suppressed1() {
     var $t0: u64
     var $t1: u64
     var $t2: |u64|u64
     # live vars:
  0: $t1 := 0
     # live vars: $t1
  1: $t2 := closure#0 m::__lambda__1__unused_lambda_suppressed1()
     # live vars: $t1, $t2
  2: $t0 := m::test($t1, $t2)
     # live vars:
  3: return ()
}


[variant baseline]
fun m::unused_lambda_suppressed2() {
     var $t0: u64
     var $t1: u64
     var $t2: |u64|u64
     # live vars:
  0: $t1 := 0
     # live vars: $t1
  1: $t2 := closure#0 m::__lambda__1__unused_lambda_suppressed2()
     # live vars: $t1, $t2
  2: $t0 := m::test($t1, $t2)
     # live vars:
  3: return ()
}


[variant baseline]
fun m::__lambda__1__unused_lambda($t0: u64): u64 {
     var $t1: u64 [unused]
     # live vars: $t0
  0: $t0 := 1
     # live vars: $t0
  1: return $t0
}


[variant baseline]
fun m::__lambda__1__unused_lambda_suppressed1($t0: u64): u64 {
     var $t1: u64 [unused]
     # live vars: $t0
  0: $t0 := 1
     # live vars: $t0
  1: return $t0
}


[variant baseline]
fun m::__lambda__1__unused_lambda_suppressed2($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: u64 [unused]
     # live vars: $t0
  0: $t0 := 1
     # live vars: $t0
  1: return $t0
}


============ disassembled file-format ==================
// Move bytecode v8
module c0ffee.m {


test(p: u64, f: |u64|u64): u64 /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](p: u64)
	1: MoveLoc[1](f: |u64|u64)
	2: CallClosure(|u64|u64)
	3: Ret
}
unused_lambda() /* def_idx: 1 */ {
B0:
	0: LdU64(0)
	1: PackClosure#0 __lambda__1__unused_lambda(u64): u64
	2: Call test(u64, |u64|u64): u64
	3: Pop
	4: Ret
}
unused_lambda_suppressed1() /* def_idx: 2 */ {
B0:
	0: LdU64(0)
	1: PackClosure#0 __lambda__1__unused_lambda_suppressed1(u64): u64
	2: Call test(u64, |u64|u64): u64
	3: Pop
	4: Ret
}
unused_lambda_suppressed2() /* def_idx: 3 */ {
B0:
	0: LdU64(0)
	1: PackClosure#0 __lambda__1__unused_lambda_suppressed2(u64): u64
	2: Call test(u64, |u64|u64): u64
	3: Pop
	4: Ret
}
__lambda__1__unused_lambda(x: u64): u64 /* def_idx: 4 */ {
B0:
	0: LdU64(1)
	1: Ret
}
__lambda__1__unused_lambda_suppressed1(_x: u64): u64 /* def_idx: 5 */ {
B0:
	0: LdU64(1)
	1: Ret
}
__lambda__1__unused_lambda_suppressed2(param$0: u64): u64 /* def_idx: 6 */ {
B0:
	0: LdU64(1)
	1: Ret
}
}
============ bytecode verification succeeded ========
