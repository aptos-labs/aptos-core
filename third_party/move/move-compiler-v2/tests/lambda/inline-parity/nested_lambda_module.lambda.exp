// -- Model dump before bytecode pipeline
module 0x42::Test1 {
    public fun apply(f: |(u64, u64)|u64,x: u64,y: u64): u64 {
        (f)(x, y)
    }
} // end 0x42::Test1
module 0x42::Test {
    use 0x42::Test1; // resolved as: 0x42::Test1
    public fun test(): u64 {
        Test1::apply(closure#0Test::__lambda__1__test(), 1, Test1::apply(closure#0Test::__lambda__2__test(), 2, 1))
    }
    private fun __lambda__1__test(x: u64,y: u64): u64 {
        Add<u64>(x, y)
    }
    private fun __lambda__2__test(x: u64,y: u64): u64 {
        Mul<u64>(x, y)
    }
} // end 0x42::Test

// -- Sourcified model before bytecode pipeline
module 0x42::Test1 {
    public fun apply(f: |(u64, u64)|u64, x: u64, y: u64): u64 {
        f(x, y)
    }
}
module 0x42::Test {
    use 0x42::Test1;
    public fun test(): u64 {
        Test1::apply(|(arg0,arg1)| __lambda__1__test(arg0, arg1), 1, Test1::apply(|(arg0,arg1)| __lambda__2__test(arg0, arg1), 2, 1))
    }
    fun __lambda__1__test(x: u64, y: u64): u64 {
        x + y
    }
    fun __lambda__2__test(x: u64, y: u64): u64 {
        x * y
    }
}

============ initial bytecode ================

[variant baseline]
public fun Test1::apply($t0: |(u64, u64)|u64, $t1: u64, $t2: u64): u64 {
     var $t3: u64
     var $t4: u64
  0: $t4 := infer($t1)
  1: $t3 := invoke($t4, $t2, $t0)
  2: return $t3
}


[variant baseline]
public fun Test::test(): u64 {
     var $t0: u64
     var $t1: |(u64, u64)|u64
     var $t2: u64
     var $t3: u64
     var $t4: |(u64, u64)|u64
     var $t5: u64
     var $t6: u64
  0: $t1 := closure#0 Test::__lambda__1__test()
  1: $t2 := 1
  2: $t4 := closure#0 Test::__lambda__2__test()
  3: $t5 := 2
  4: $t6 := 1
  5: $t3 := Test1::apply($t4, $t5, $t6)
  6: $t0 := Test1::apply($t1, $t2, $t3)
  7: return $t0
}


[variant baseline]
fun Test::__lambda__1__test($t0: u64, $t1: u64): u64 {
     var $t2: u64
     var $t3: u64
  0: $t3 := infer($t0)
  1: $t2 := +($t3, $t1)
  2: return $t2
}


[variant baseline]
fun Test::__lambda__2__test($t0: u64, $t1: u64): u64 {
     var $t2: u64
     var $t3: u64
  0: $t3 := infer($t0)
  1: $t2 := *($t3, $t1)
  2: return $t2
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun Test1::apply($t0: |(u64, u64)|u64, $t1: u64, $t2: u64): u64 {
     var $t3: u64 [unused]
     var $t4: u64 [unused]
     # live vars: $t0, $t1, $t2
  0: $t1 := move($t1)
     # live vars: $t0, $t1, $t2
  1: $t1 := invoke($t1, $t2, $t0)
     # live vars: $t1
  2: return $t1
}


[variant baseline]
public fun Test::test(): u64 {
     var $t0: u64 [unused]
     var $t1: |(u64, u64)|u64
     var $t2: u64
     var $t3: u64 [unused]
     var $t4: |(u64, u64)|u64
     var $t5: u64
     var $t6: u64
     # live vars:
  0: $t1 := closure#0 Test::__lambda__1__test()
     # live vars: $t1
  1: $t2 := 1
     # live vars: $t1, $t2
  2: $t4 := closure#0 Test::__lambda__2__test()
     # live vars: $t1, $t2, $t4
  3: $t5 := 2
     # live vars: $t1, $t2, $t4, $t5
  4: $t6 := 1
     # live vars: $t1, $t2, $t4, $t5, $t6
  5: $t5 := Test1::apply($t4, $t5, $t6)
     # live vars: $t1, $t2, $t5
  6: $t2 := Test1::apply($t1, $t2, $t5)
     # live vars: $t2
  7: return $t2
}


[variant baseline]
fun Test::__lambda__1__test($t0: u64, $t1: u64): u64 {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     # live vars: $t0, $t1
  0: $t0 := move($t0)
     # live vars: $t0, $t1
  1: $t0 := +($t0, $t1)
     # live vars: $t0
  2: return $t0
}


[variant baseline]
fun Test::__lambda__2__test($t0: u64, $t1: u64): u64 {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     # live vars: $t0, $t1
  0: $t0 := move($t0)
     # live vars: $t0, $t1
  1: $t0 := *($t0, $t1)
     # live vars: $t0
  2: return $t0
}


============ disassembled file-format ==================
// Move bytecode v8
module 42.Test1 {


public apply(f: |u64,u64|u64, x: u64, y: u64): u64 /* def_idx: 0 */ {
B0:
	0: MoveLoc[1](x: u64)
	1: MoveLoc[2](y: u64)
	2: MoveLoc[0](f: |u64,u64|u64)
	3: CallClosure(|u64,u64|u64)
	4: Ret
}
}// Move bytecode v8
module 42.Test {
use 0000000000000000000000000000000000000000000000000000000000000042::Test1;




public test(): u64 /* def_idx: 0 */ {
B0:
	0: PackClosure#0 __lambda__1__test(u64, u64): u64
	1: LdU64(1)
	2: PackClosure#0 __lambda__2__test(u64, u64): u64
	3: LdU64(2)
	4: LdU64(1)
	5: Call Test1::apply(|u64,u64|u64, u64, u64): u64
	6: Call Test1::apply(|u64,u64|u64, u64, u64): u64
	7: Ret
}
__lambda__1__test(x: u64, y: u64): u64 /* def_idx: 1 */ {
B0:
	0: MoveLoc[0](x: u64)
	1: MoveLoc[1](y: u64)
	2: Add
	3: Ret
}
__lambda__2__test(x: u64, y: u64): u64 /* def_idx: 2 */ {
B0:
	0: MoveLoc[0](x: u64)
	1: MoveLoc[1](y: u64)
	2: Mul
	3: Ret
}
}
============ bytecode verification succeeded ========
