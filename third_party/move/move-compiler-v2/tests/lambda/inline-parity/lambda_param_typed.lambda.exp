// -- Model dump before bytecode pipeline
module 0x42::LambdaParam {
    public fun inline_apply(f: |u64|u64,b: u64): u64 {
        (f)(b)
    }
    public fun inline_apply2(f: |u64|u64,b: u64): u64 {
        LambdaParam::inline_apply(f, b)
    }
    public fun inline_apply3(f: |u64|u64,b: u64): u64 {
        LambdaParam::inline_apply4(f, b)
    }
    public fun inline_apply4(_f: |u64|u64,b: u64): u64 {
        b
    }
    private fun test_lambda_symbol_param1() {
        {
          let a: u64 = LambdaParam::inline_apply2(closure#0LambdaParam::__lambda__1__test_lambda_symbol_param1(), 3);
          if Eq<u64>(a, 3) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
    private fun test_lambda_symbol_param2() {
        {
          let a: u64 = LambdaParam::inline_apply2(closure#0LambdaParam::__lambda__1__test_lambda_symbol_param2(), 3);
          if Eq<u64>(a, 3) {
            Tuple()
          } else {
            Abort(0)
          };
          {
            let b: u64 = LambdaParam::inline_apply(closure#0LambdaParam::__lambda__2__test_lambda_symbol_param2(), 3);
            if Eq<u64>(b, 3) {
              Tuple()
            } else {
              Abort(0)
            };
            {
              let b: u64 = LambdaParam::inline_apply3(closure#0LambdaParam::__lambda__3__test_lambda_symbol_param2(), 3);
              if Eq<u64>(b, 3) {
                Tuple()
              } else {
                Abort(0)
              };
              Tuple()
            }
          }
        }
    }
    private fun __lambda__1__test_lambda_symbol_param1(x: u64): u64 {
        x
    }
    private fun __lambda__1__test_lambda_symbol_param2(x: u64): u64 {
        x
    }
    private fun __lambda__2__test_lambda_symbol_param2(x: u64): u64 {
        x
    }
    private fun __lambda__3__test_lambda_symbol_param2(x: u64): u64 {
        x
    }
} // end 0x42::LambdaParam

// -- Sourcified model before bytecode pipeline
module 0x42::LambdaParam {
    public fun inline_apply(f: |u64|u64, b: u64): u64 {
        f(b)
    }
    public fun inline_apply2(f: |u64|u64, b: u64): u64 {
        inline_apply(f, b)
    }
    public fun inline_apply3(f: |u64|u64, b: u64): u64 {
        inline_apply4(f, b)
    }
    public fun inline_apply4(_f: |u64|u64, b: u64): u64 {
        b
    }
    fun test_lambda_symbol_param1() {
        let a = inline_apply2(|arg0| __lambda__1__test_lambda_symbol_param1(arg0), 3);
        if (a == 3) () else abort 0;
    }
    fun test_lambda_symbol_param2() {
        let a = inline_apply2(|arg0| __lambda__1__test_lambda_symbol_param2(arg0), 3);
        if (a == 3) () else abort 0;
        let b = inline_apply(|arg0| __lambda__2__test_lambda_symbol_param2(arg0), 3);
        if (b == 3) () else abort 0;
        let b = inline_apply3(|arg0| __lambda__3__test_lambda_symbol_param2(arg0), 3);
        if (b == 3) () else abort 0;
    }
    fun __lambda__1__test_lambda_symbol_param1(x: u64): u64 {
        x
    }
    fun __lambda__1__test_lambda_symbol_param2(x: u64): u64 {
        x
    }
    fun __lambda__2__test_lambda_symbol_param2(x: u64): u64 {
        x
    }
    fun __lambda__3__test_lambda_symbol_param2(x: u64): u64 {
        x
    }
}

============ initial bytecode ================

[variant baseline]
public fun LambdaParam::inline_apply($t0: |u64|u64, $t1: u64): u64 {
     var $t2: u64
     var $t3: u64
  0: $t3 := infer($t1)
  1: $t2 := invoke($t3, $t0)
  2: return $t2
}


[variant baseline]
public fun LambdaParam::inline_apply2($t0: |u64|u64, $t1: u64): u64 {
     var $t2: u64
     var $t3: |u64|u64
  0: $t3 := infer($t0)
  1: $t2 := LambdaParam::inline_apply($t3, $t1)
  2: return $t2
}


[variant baseline]
public fun LambdaParam::inline_apply3($t0: |u64|u64, $t1: u64): u64 {
     var $t2: u64
     var $t3: |u64|u64
  0: $t3 := infer($t0)
  1: $t2 := LambdaParam::inline_apply4($t3, $t1)
  2: return $t2
}


[variant baseline]
public fun LambdaParam::inline_apply4($t0: |u64|u64, $t1: u64): u64 {
     var $t2: u64
  0: $t2 := infer($t1)
  1: return $t2
}


[variant baseline]
fun LambdaParam::test_lambda_symbol_param1() {
     var $t0: u64
     var $t1: |u64|u64
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: u64
     var $t6: u64
  0: $t1 := closure#0 LambdaParam::__lambda__1__test_lambda_symbol_param1()
  1: $t2 := 3
  2: $t0 := LambdaParam::inline_apply2($t1, $t2)
  3: $t4 := infer($t0)
  4: $t5 := 3
  5: $t3 := ==($t4, $t5)
  6: if ($t3) goto 7 else goto 9
  7: label L0
  8: goto 12
  9: label L1
 10: $t6 := 0
 11: abort($t6)
 12: label L2
 13: return ()
}


[variant baseline]
fun LambdaParam::test_lambda_symbol_param2() {
     var $t0: u64
     var $t1: |u64|u64
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: |u64|u64
     var $t9: u64
     var $t10: bool
     var $t11: u64
     var $t12: u64
     var $t13: u64
     var $t14: u64
     var $t15: |u64|u64
     var $t16: u64
     var $t17: bool
     var $t18: u64
     var $t19: u64
     var $t20: u64
  0: $t1 := closure#0 LambdaParam::__lambda__1__test_lambda_symbol_param2()
  1: $t2 := 3
  2: $t0 := LambdaParam::inline_apply2($t1, $t2)
  3: $t4 := infer($t0)
  4: $t5 := 3
  5: $t3 := ==($t4, $t5)
  6: if ($t3) goto 7 else goto 9
  7: label L0
  8: goto 12
  9: label L1
 10: $t6 := 0
 11: abort($t6)
 12: label L2
 13: $t8 := closure#0 LambdaParam::__lambda__2__test_lambda_symbol_param2()
 14: $t9 := 3
 15: $t7 := LambdaParam::inline_apply($t8, $t9)
 16: $t11 := infer($t7)
 17: $t12 := 3
 18: $t10 := ==($t11, $t12)
 19: if ($t10) goto 20 else goto 22
 20: label L3
 21: goto 25
 22: label L4
 23: $t13 := 0
 24: abort($t13)
 25: label L5
 26: $t15 := closure#0 LambdaParam::__lambda__3__test_lambda_symbol_param2()
 27: $t16 := 3
 28: $t14 := LambdaParam::inline_apply3($t15, $t16)
 29: $t18 := infer($t14)
 30: $t19 := 3
 31: $t17 := ==($t18, $t19)
 32: if ($t17) goto 33 else goto 35
 33: label L6
 34: goto 38
 35: label L7
 36: $t20 := 0
 37: abort($t20)
 38: label L8
 39: return ()
}


[variant baseline]
fun LambdaParam::__lambda__1__test_lambda_symbol_param1($t0: u64): u64 {
     var $t1: u64
  0: $t1 := infer($t0)
  1: return $t1
}


[variant baseline]
fun LambdaParam::__lambda__1__test_lambda_symbol_param2($t0: u64): u64 {
     var $t1: u64
  0: $t1 := infer($t0)
  1: return $t1
}


[variant baseline]
fun LambdaParam::__lambda__2__test_lambda_symbol_param2($t0: u64): u64 {
     var $t1: u64
  0: $t1 := infer($t0)
  1: return $t1
}


[variant baseline]
fun LambdaParam::__lambda__3__test_lambda_symbol_param2($t0: u64): u64 {
     var $t1: u64
  0: $t1 := infer($t0)
  1: return $t1
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun LambdaParam::inline_apply($t0: |u64|u64, $t1: u64): u64 {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     # live vars: $t0, $t1
  0: $t1 := move($t1)
     # live vars: $t0, $t1
  1: $t1 := invoke($t1, $t0)
     # live vars: $t1
  2: return $t1
}


[variant baseline]
public fun LambdaParam::inline_apply2($t0: |u64|u64, $t1: u64): u64 {
     var $t2: u64 [unused]
     var $t3: |u64|u64 [unused]
     # live vars: $t0, $t1
  0: $t0 := move($t0)
     # live vars: $t0, $t1
  1: $t1 := LambdaParam::inline_apply($t0, $t1)
     # live vars: $t1
  2: return $t1
}


[variant baseline]
public fun LambdaParam::inline_apply3($t0: |u64|u64, $t1: u64): u64 {
     var $t2: u64 [unused]
     var $t3: |u64|u64 [unused]
     # live vars: $t0, $t1
  0: $t0 := move($t0)
     # live vars: $t0, $t1
  1: $t1 := LambdaParam::inline_apply4($t0, $t1)
     # live vars: $t1
  2: return $t1
}


[variant baseline]
public fun LambdaParam::inline_apply4($t0: |u64|u64, $t1: u64): u64 {
     var $t2: u64 [unused]
     # live vars: $t0, $t1
  0: return $t1
}


[variant baseline]
fun LambdaParam::test_lambda_symbol_param1() {
     var $t0: u64 [unused]
     var $t1: |u64|u64
     var $t2: u64
     var $t3: bool
     var $t4: u64 [unused]
     var $t5: u64
     var $t6: u64 [unused]
     # live vars:
  0: $t1 := closure#0 LambdaParam::__lambda__1__test_lambda_symbol_param1()
     # live vars: $t1
  1: $t2 := 3
     # live vars: $t1, $t2
  2: $t2 := LambdaParam::inline_apply2($t1, $t2)
     # live vars: $t2
  3: $t2 := move($t2)
     # live vars: $t2
  4: $t5 := 3
     # live vars: $t2, $t5
  5: $t3 := ==($t2, $t5)
     # live vars: $t3
  6: if ($t3) goto 7 else goto 9
     # live vars:
  7: label L0
     # live vars:
  8: return ()
     # live vars:
  9: label L1
     # live vars:
 10: $t2 := 0
     # live vars: $t2
 11: abort($t2)
}


[variant baseline]
fun LambdaParam::test_lambda_symbol_param2() {
     var $t0: u64 [unused]
     var $t1: |u64|u64
     var $t2: u64
     var $t3: bool
     var $t4: u64 [unused]
     var $t5: u64
     var $t6: u64 [unused]
     var $t7: u64 [unused]
     var $t8: |u64|u64 [unused]
     var $t9: u64 [unused]
     var $t10: bool [unused]
     var $t11: u64 [unused]
     var $t12: u64 [unused]
     var $t13: u64 [unused]
     var $t14: u64 [unused]
     var $t15: |u64|u64 [unused]
     var $t16: u64 [unused]
     var $t17: bool [unused]
     var $t18: u64 [unused]
     var $t19: u64 [unused]
     var $t20: u64 [unused]
     # live vars:
  0: $t1 := closure#0 LambdaParam::__lambda__1__test_lambda_symbol_param2()
     # live vars: $t1
  1: $t2 := 3
     # live vars: $t1, $t2
  2: $t2 := LambdaParam::inline_apply2($t1, $t2)
     # live vars: $t2
  3: $t2 := move($t2)
     # live vars: $t2
  4: $t5 := 3
     # live vars: $t2, $t5
  5: $t3 := ==($t2, $t5)
     # live vars: $t3
  6: if ($t3) goto 7 else goto 31
     # live vars:
  7: label L0
     # live vars:
  8: $t1 := closure#0 LambdaParam::__lambda__2__test_lambda_symbol_param2()
     # live vars: $t1
  9: $t2 := 3
     # live vars: $t1, $t2
 10: $t2 := LambdaParam::inline_apply($t1, $t2)
     # live vars: $t2
 11: $t2 := move($t2)
     # live vars: $t2
 12: $t5 := 3
     # live vars: $t2, $t5
 13: $t3 := ==($t2, $t5)
     # live vars: $t3
 14: if ($t3) goto 15 else goto 28
     # live vars:
 15: label L3
     # live vars:
 16: $t1 := closure#0 LambdaParam::__lambda__3__test_lambda_symbol_param2()
     # live vars: $t1
 17: $t2 := 3
     # live vars: $t1, $t2
 18: $t2 := LambdaParam::inline_apply3($t1, $t2)
     # live vars: $t2
 19: $t2 := move($t2)
     # live vars: $t2
 20: $t5 := 3
     # live vars: $t2, $t5
 21: $t3 := ==($t2, $t5)
     # live vars: $t3
 22: if ($t3) goto 23 else goto 25
     # live vars:
 23: label L6
     # live vars:
 24: return ()
     # live vars:
 25: label L7
     # live vars:
 26: $t2 := 0
     # live vars: $t2
 27: abort($t2)
     # live vars:
 28: label L4
     # live vars:
 29: $t2 := 0
     # live vars: $t2
 30: abort($t2)
     # live vars:
 31: label L1
     # live vars:
 32: $t2 := 0
     # live vars: $t2
 33: abort($t2)
}


[variant baseline]
fun LambdaParam::__lambda__1__test_lambda_symbol_param1($t0: u64): u64 {
     var $t1: u64 [unused]
     # live vars: $t0
  0: return $t0
}


[variant baseline]
fun LambdaParam::__lambda__1__test_lambda_symbol_param2($t0: u64): u64 {
     var $t1: u64 [unused]
     # live vars: $t0
  0: return $t0
}


[variant baseline]
fun LambdaParam::__lambda__2__test_lambda_symbol_param2($t0: u64): u64 {
     var $t1: u64 [unused]
     # live vars: $t0
  0: return $t0
}


[variant baseline]
fun LambdaParam::__lambda__3__test_lambda_symbol_param2($t0: u64): u64 {
     var $t1: u64 [unused]
     # live vars: $t0
  0: return $t0
}


============ disassembled file-format ==================
// Move bytecode v8
module 42.LambdaParam {


public inline_apply(f: |u64|u64 has drop, b: u64): u64 /* def_idx: 0 */ {
B0:
	0: MoveLoc[1](b: u64)
	1: MoveLoc[0](f: |u64|u64 has drop)
	2: CallClosure(|u64|u64 has drop)
	3: Ret
}
public inline_apply2(f: |u64|u64 has drop, b: u64): u64 /* def_idx: 1 */ {
B0:
	0: MoveLoc[0](f: |u64|u64 has drop)
	1: MoveLoc[1](b: u64)
	2: Call inline_apply(|u64|u64 has drop, u64): u64
	3: Ret
}
public inline_apply3(f: |u64|u64 has drop, b: u64): u64 /* def_idx: 2 */ {
B0:
	0: MoveLoc[0](f: |u64|u64 has drop)
	1: MoveLoc[1](b: u64)
	2: Call inline_apply4(|u64|u64 has drop, u64): u64
	3: Ret
}
public inline_apply4(_f: |u64|u64 has drop, b: u64): u64 /* def_idx: 3 */ {
B0:
	0: MoveLoc[1](b: u64)
	1: Ret
}
test_lambda_symbol_param1() /* def_idx: 4 */ {
B0:
	0: PackClosure#0 __lambda__1__test_lambda_symbol_param1(u64): u64
	1: LdU64(3)
	2: Call inline_apply2(|u64|u64 has drop, u64): u64
	3: LdU64(3)
	4: Eq
	5: BrFalse(7)
B1:
	6: Ret
B2:
	7: LdU64(0)
	8: Abort
}
test_lambda_symbol_param2() /* def_idx: 5 */ {
B0:
	0: PackClosure#0 __lambda__1__test_lambda_symbol_param2(u64): u64
	1: LdU64(3)
	2: Call inline_apply2(|u64|u64 has drop, u64): u64
	3: LdU64(3)
	4: Eq
	5: BrFalse(23)
B1:
	6: PackClosure#0 __lambda__2__test_lambda_symbol_param2(u64): u64
	7: LdU64(3)
	8: Call inline_apply(|u64|u64 has drop, u64): u64
	9: LdU64(3)
	10: Eq
	11: BrFalse(21)
B2:
	12: PackClosure#0 __lambda__3__test_lambda_symbol_param2(u64): u64
	13: LdU64(3)
	14: Call inline_apply3(|u64|u64 has drop, u64): u64
	15: LdU64(3)
	16: Eq
	17: BrFalse(19)
B3:
	18: Ret
B4:
	19: LdU64(0)
	20: Abort
B5:
	21: LdU64(0)
	22: Abort
B6:
	23: LdU64(0)
	24: Abort
}
__lambda__1__test_lambda_symbol_param1(x: u64): u64 /* def_idx: 6 */ {
B0:
	0: MoveLoc[0](x: u64)
	1: Ret
}
__lambda__1__test_lambda_symbol_param2(x: u64): u64 /* def_idx: 7 */ {
B0:
	0: MoveLoc[0](x: u64)
	1: Ret
}
__lambda__2__test_lambda_symbol_param2(x: u64): u64 /* def_idx: 8 */ {
B0:
	0: MoveLoc[0](x: u64)
	1: Ret
}
__lambda__3__test_lambda_symbol_param2(x: u64): u64 /* def_idx: 9 */ {
B0:
	0: MoveLoc[0](x: u64)
	1: Ret
}
}
============ bytecode verification succeeded ========
