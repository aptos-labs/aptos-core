// -- Model dump before bytecode pipeline
module 0x42::Test {
    private fun foo(g: |(u64, u64, u64, u64)|u64,x: u64,y: u64,z: u64,q: u64): u64 {
        (g)(x, y, z, q)
    }
    public fun test() {
        if Eq<u64>(Test::foo(closure#0Test::__lambda__1__test(), 10, 100, 1000, 10000), 10100) {
          Tuple()
        } else {
          Abort(0)
        };
        Tuple()
    }
    private fun __lambda__1__test(param$0: u64,y: u64,param$2: u64,q: u64): u64 {
        {
          let _: u64 = param$2;
          {
            let _: u64 = param$0;
            Add<u64>(y, q)
          }
        }
    }
} // end 0x42::Test

// -- Sourcified model before bytecode pipeline
module 0x42::Test {
    fun foo(g: |(u64, u64, u64, u64)|u64, x: u64, y: u64, z: u64, q: u64): u64 {
        g(x, y, z, q)
    }
    public fun test() {
        if (foo(|(arg0,arg1,arg2,arg3)| __lambda__1__test(arg0, arg1, arg2, arg3), 10, 100, 1000, 10000) == 10100) () else abort 0;
    }
    fun __lambda__1__test(param$0: u64, y: u64, param$2: u64, q: u64): u64 {
        let _ = param$2;
        let _ = param$0;
        y + q
    }
}

============ initial bytecode ================

[variant baseline]
fun Test::foo($t0: |(u64, u64, u64, u64)|u64, $t1: u64, $t2: u64, $t3: u64, $t4: u64): u64 {
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
  0: $t6 := infer($t1)
  1: $t7 := infer($t2)
  2: $t8 := infer($t3)
  3: $t5 := invoke($t6, $t7, $t8, $t4, $t0)
  4: return $t5
}


[variant baseline]
public fun Test::test() {
     var $t0: bool
     var $t1: u64
     var $t2: |(u64, u64, u64, u64)|u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
  0: $t2 := closure#0 Test::__lambda__1__test()
  1: $t3 := 10
  2: $t4 := 100
  3: $t5 := 1000
  4: $t6 := 10000
  5: $t1 := Test::foo($t2, $t3, $t4, $t5, $t6)
  6: $t7 := 10100
  7: $t0 := ==($t1, $t7)
  8: if ($t0) goto 9 else goto 11
  9: label L0
 10: goto 14
 11: label L1
 12: $t8 := 0
 13: abort($t8)
 14: label L2
 15: return ()
}


[variant baseline]
fun Test::__lambda__1__test($t0: u64, $t1: u64, $t2: u64, $t3: u64): u64 {
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
  0: $t5 := infer($t2)
  1: $t6 := infer($t0)
  2: $t7 := infer($t1)
  3: $t4 := +($t7, $t3)
  4: return $t4
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun Test::foo($t0: |(u64, u64, u64, u64)|u64, $t1: u64, $t2: u64, $t3: u64, $t4: u64): u64 {
     var $t5: u64 [unused]
     var $t6: u64 [unused]
     var $t7: u64 [unused]
     var $t8: u64 [unused]
     # live vars: $t0, $t1, $t2, $t3, $t4
  0: $t1 := move($t1)
     # live vars: $t0, $t1, $t2, $t3, $t4
  1: $t2 := move($t2)
     # live vars: $t0, $t1, $t2, $t3, $t4
  2: $t3 := move($t3)
     # live vars: $t0, $t1, $t2, $t3, $t4
  3: $t1 := invoke($t1, $t2, $t3, $t4, $t0)
     # live vars: $t1
  4: return $t1
}


[variant baseline]
public fun Test::test() {
     var $t0: bool
     var $t1: u64 [unused]
     var $t2: |(u64, u64, u64, u64)|u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64 [unused]
     var $t8: u64 [unused]
     # live vars:
  0: $t2 := closure#0 Test::__lambda__1__test()
     # live vars: $t2
  1: $t3 := 10
     # live vars: $t2, $t3
  2: $t4 := 100
     # live vars: $t2, $t3, $t4
  3: $t5 := 1000
     # live vars: $t2, $t3, $t4, $t5
  4: $t6 := 10000
     # live vars: $t2, $t3, $t4, $t5, $t6
  5: $t3 := Test::foo($t2, $t3, $t4, $t5, $t6)
     # live vars: $t3
  6: $t4 := 10100
     # live vars: $t3, $t4
  7: $t0 := ==($t3, $t4)
     # live vars: $t0
  8: if ($t0) goto 9 else goto 11
     # live vars:
  9: label L0
     # live vars:
 10: return ()
     # live vars:
 11: label L1
     # live vars:
 12: $t3 := 0
     # live vars: $t3
 13: abort($t3)
}


[variant baseline]
fun Test::__lambda__1__test($t0: u64, $t1: u64, $t2: u64, $t3: u64): u64 {
     var $t4: u64 [unused]
     var $t5: u64 [unused]
     var $t6: u64 [unused]
     var $t7: u64 [unused]
     # live vars: $t0, $t1, $t2, $t3
  0: $t1 := move($t1)
     # live vars: $t1, $t3
  1: $t0 := +($t1, $t3)
     # live vars: $t0
  2: return $t0
}


============ disassembled file-format ==================
// Move bytecode v8
module 42.Test {


foo(g: |u64,u64,u64,u64|u64, x: u64, y: u64, z: u64, q: u64): u64 /* def_idx: 0 */ {
B0:
	0: MoveLoc[1](x: u64)
	1: MoveLoc[2](y: u64)
	2: MoveLoc[3](z: u64)
	3: MoveLoc[4](q: u64)
	4: MoveLoc[0](g: |u64,u64,u64,u64|u64)
	5: CallClosure(|u64,u64,u64,u64|u64)
	6: Ret
}
public test() /* def_idx: 1 */ {
B0:
	0: PackClosure#0 __lambda__1__test(u64, u64, u64, u64): u64
	1: LdU64(10)
	2: LdU64(100)
	3: LdU64(1000)
	4: LdU64(10000)
	5: Call foo(|u64,u64,u64,u64|u64, u64, u64, u64, u64): u64
	6: LdU64(10100)
	7: Eq
	8: BrFalse(10)
B1:
	9: Ret
B2:
	10: LdU64(0)
	11: Abort
}
__lambda__1__test(param$0: u64, y: u64, param$2: u64, q: u64): u64 /* def_idx: 2 */ {
B0:
	0: MoveLoc[1](y: u64)
	1: MoveLoc[3](q: u64)
	2: Add
	3: Ret
}
}
============ bytecode verification succeeded ========
