// -- Model dump before bytecode pipeline
module 0x42::Test {
    private fun foo(f: |(u64, u64)|u64,g: |(u64, u64)|u64,x: u64,_y: u64): u64 {
        Add<u64>((f)(x, _y), (g)(x, _y))
    }
    public fun test() {
        if Eq<u64>(Test::foo(closure#0Test::__lambda__1__test(), closure#0Test::__lambda__2__test(), 10, 100), 13) {
          Tuple()
        } else {
          Abort(0)
        };
        Tuple()
    }
    private fun __lambda__1__test(param$0: u64,param$1: u64): u64 {
        {
          let _: u64 = param$1;
          {
            let _: u64 = param$0;
            3
          }
        }
    }
    private fun __lambda__2__test(param$0: u64,param$1: u64): u64 {
        {
          let _: u64 = param$1;
          {
            let _: u64 = param$0;
            10
          }
        }
    }
} // end 0x42::Test

// -- Sourcified model before bytecode pipeline
module 0x42::Test {
    fun foo(f: |(u64, u64)|u64, g: |(u64, u64)|u64, x: u64, _y: u64): u64 {
        f(x, _y) + g(x, _y)
    }
    public fun test() {
        if (foo(|(arg0,arg1)| __lambda__1__test(arg0, arg1), |(arg0,arg1)| __lambda__2__test(arg0, arg1), 10, 100) == 13) () else abort 0;
    }
    fun __lambda__1__test(param$0: u64, param$1: u64): u64 {
        let _ = param$1;
        let _ = param$0;
        3
    }
    fun __lambda__2__test(param$0: u64, param$1: u64): u64 {
        let _ = param$1;
        let _ = param$0;
        10
    }
}

============ initial bytecode ================

[variant baseline]
fun Test::foo($t0: |(u64, u64)|u64, $t1: |(u64, u64)|u64, $t2: u64, $t3: u64): u64 {
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
  0: $t6 := infer($t2)
  1: $t5 := invoke($t6, $t3, $t0)
  2: $t8 := infer($t2)
  3: $t7 := invoke($t8, $t3, $t1)
  4: $t4 := +($t5, $t7)
  5: return $t4
}


[variant baseline]
public fun Test::test() {
     var $t0: bool
     var $t1: u64
     var $t2: |(u64, u64)|u64
     var $t3: |(u64, u64)|u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
  0: $t2 := closure#0 Test::__lambda__1__test()
  1: $t3 := closure#0 Test::__lambda__2__test()
  2: $t4 := 10
  3: $t5 := 100
  4: $t1 := Test::foo($t2, $t3, $t4, $t5)
  5: $t6 := 13
  6: $t0 := ==($t1, $t6)
  7: if ($t0) goto 8 else goto 10
  8: label L0
  9: goto 13
 10: label L1
 11: $t7 := 0
 12: abort($t7)
 13: label L2
 14: return ()
}


[variant baseline]
fun Test::__lambda__1__test($t0: u64, $t1: u64): u64 {
     var $t2: u64
     var $t3: u64
     var $t4: u64
  0: $t3 := infer($t1)
  1: $t4 := infer($t0)
  2: $t2 := 3
  3: return $t2
}


[variant baseline]
fun Test::__lambda__2__test($t0: u64, $t1: u64): u64 {
     var $t2: u64
     var $t3: u64
     var $t4: u64
  0: $t3 := infer($t1)
  1: $t4 := infer($t0)
  2: $t2 := 10
  3: return $t2
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun Test::foo($t0: |(u64, u64)|u64, $t1: |(u64, u64)|u64, $t2: u64, $t3: u64): u64 {
     var $t4: u64 [unused]
     var $t5: u64 [unused]
     var $t6: u64
     var $t7: u64 [unused]
     var $t8: u64 [unused]
     # live vars: $t0, $t1, $t2, $t3
  0: $t6 := copy($t2)
     # live vars: $t0, $t1, $t2, $t3, $t6
  1: $t6 := invoke($t6, $t3, $t0)
     # live vars: $t1, $t2, $t3, $t6
  2: $t2 := move($t2)
     # live vars: $t1, $t2, $t3, $t6
  3: $t2 := invoke($t2, $t3, $t1)
     # live vars: $t2, $t6
  4: $t2 := +($t6, $t2)
     # live vars: $t2
  5: return $t2
}


[variant baseline]
public fun Test::test() {
     var $t0: bool
     var $t1: u64 [unused]
     var $t2: |(u64, u64)|u64
     var $t3: |(u64, u64)|u64
     var $t4: u64
     var $t5: u64
     var $t6: u64 [unused]
     var $t7: u64 [unused]
     # live vars:
  0: $t2 := closure#0 Test::__lambda__1__test()
     # live vars: $t2
  1: $t3 := closure#0 Test::__lambda__2__test()
     # live vars: $t2, $t3
  2: $t4 := 10
     # live vars: $t2, $t3, $t4
  3: $t5 := 100
     # live vars: $t2, $t3, $t4, $t5
  4: $t4 := Test::foo($t2, $t3, $t4, $t5)
     # live vars: $t4
  5: $t5 := 13
     # live vars: $t4, $t5
  6: $t0 := ==($t4, $t5)
     # live vars: $t0
  7: if ($t0) goto 8 else goto 10
     # live vars:
  8: label L0
     # live vars:
  9: return ()
     # live vars:
 10: label L1
     # live vars:
 11: $t4 := 0
     # live vars: $t4
 12: abort($t4)
}


[variant baseline]
fun Test::__lambda__1__test($t0: u64, $t1: u64): u64 {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     var $t4: u64 [unused]
     # live vars: $t0, $t1
  0: $t0 := 3
     # live vars: $t0
  1: return $t0
}


[variant baseline]
fun Test::__lambda__2__test($t0: u64, $t1: u64): u64 {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     var $t4: u64 [unused]
     # live vars: $t0, $t1
  0: $t0 := 10
     # live vars: $t0
  1: return $t0
}


============ disassembled file-format ==================
// Move bytecode v8
module 42.Test {


foo(f: |u64,u64|u64, g: |u64,u64|u64, x: u64, _y: u64): u64 /* def_idx: 0 */ {
B0:
	0: CopyLoc[2](x: u64)
	1: CopyLoc[3](_y: u64)
	2: MoveLoc[0](f: |u64,u64|u64)
	3: CallClosure(|u64,u64|u64)
	4: MoveLoc[2](x: u64)
	5: MoveLoc[3](_y: u64)
	6: MoveLoc[1](g: |u64,u64|u64)
	7: CallClosure(|u64,u64|u64)
	8: Add
	9: Ret
}
public test() /* def_idx: 1 */ {
B0:
	0: PackClosure#0 __lambda__1__test(u64, u64): u64
	1: PackClosure#0 __lambda__2__test(u64, u64): u64
	2: LdU64(10)
	3: LdU64(100)
	4: Call foo(|u64,u64|u64, |u64,u64|u64, u64, u64): u64
	5: LdU64(13)
	6: Eq
	7: BrFalse(9)
B1:
	8: Ret
B2:
	9: LdU64(0)
	10: Abort
}
__lambda__1__test(param$0: u64, param$1: u64): u64 /* def_idx: 2 */ {
B0:
	0: LdU64(3)
	1: Ret
}
__lambda__2__test(param$0: u64, param$1: u64): u64 /* def_idx: 3 */ {
B0:
	0: LdU64(10)
	1: Ret
}
}
============ bytecode verification succeeded ========
