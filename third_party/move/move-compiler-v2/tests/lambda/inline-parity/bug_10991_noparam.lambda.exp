// -- Model dump before env processor pipeline:
module 0x42::Test {
    private fun foo(f: |(u64, u64)|u64,g: |(u64, u64)|u64,x: u64,_y: u64): u64 {
        Add<u64>((f)(x, _y), (g)(x, _y))
    }
    public fun test() {
        if Eq<u64>(Test::foo(|(_: u64, _: u64): (u64, u64)| 3, |(_: u64, _: u64): (u64, u64)| 10, 10, 100), 13) {
          Tuple()
        } else {
          Abort(0)
        };
        Tuple()
    }
} // end 0x42::Test


// -- Model dump after env processor unused checks:
module 0x42::Test {
    private fun foo(f: |(u64, u64)|u64,g: |(u64, u64)|u64,x: u64,_y: u64): u64 {
        Add<u64>((f)(x, _y), (g)(x, _y))
    }
    public fun test() {
        if Eq<u64>(Test::foo(|(_: u64, _: u64): (u64, u64)| 3, |(_: u64, _: u64): (u64, u64)| 10, 10, 100), 13) {
          Tuple()
        } else {
          Abort(0)
        };
        Tuple()
    }
} // end 0x42::Test


// -- Model dump after env processor type parameter check:
module 0x42::Test {
    private fun foo(f: |(u64, u64)|u64,g: |(u64, u64)|u64,x: u64,_y: u64): u64 {
        Add<u64>((f)(x, _y), (g)(x, _y))
    }
    public fun test() {
        if Eq<u64>(Test::foo(|(_: u64, _: u64): (u64, u64)| 3, |(_: u64, _: u64): (u64, u64)| 10, 10, 100), 13) {
          Tuple()
        } else {
          Abort(0)
        };
        Tuple()
    }
} // end 0x42::Test


// -- Model dump after env processor check recursive struct definition:
module 0x42::Test {
    private fun foo(f: |(u64, u64)|u64,g: |(u64, u64)|u64,x: u64,_y: u64): u64 {
        Add<u64>((f)(x, _y), (g)(x, _y))
    }
    public fun test() {
        if Eq<u64>(Test::foo(|(_: u64, _: u64): (u64, u64)| 3, |(_: u64, _: u64): (u64, u64)| 10, 10, 100), 13) {
          Tuple()
        } else {
          Abort(0)
        };
        Tuple()
    }
} // end 0x42::Test


// -- Model dump after env processor check cyclic type instantiation:
module 0x42::Test {
    private fun foo(f: |(u64, u64)|u64,g: |(u64, u64)|u64,x: u64,_y: u64): u64 {
        Add<u64>((f)(x, _y), (g)(x, _y))
    }
    public fun test() {
        if Eq<u64>(Test::foo(|(_: u64, _: u64): (u64, u64)| 3, |(_: u64, _: u64): (u64, u64)| 10, 10, 100), 13) {
          Tuple()
        } else {
          Abort(0)
        };
        Tuple()
    }
} // end 0x42::Test


// -- Model dump after env processor unused struct params check:
module 0x42::Test {
    private fun foo(f: |(u64, u64)|u64,g: |(u64, u64)|u64,x: u64,_y: u64): u64 {
        Add<u64>((f)(x, _y), (g)(x, _y))
    }
    public fun test() {
        if Eq<u64>(Test::foo(|(_: u64, _: u64): (u64, u64)| 3, |(_: u64, _: u64): (u64, u64)| 10, 10, 100), 13) {
          Tuple()
        } else {
          Abort(0)
        };
        Tuple()
    }
} // end 0x42::Test


// -- Model dump after env processor access and use check before inlining:
module 0x42::Test {
    private fun foo(f: |(u64, u64)|u64,g: |(u64, u64)|u64,x: u64,_y: u64): u64 {
        Add<u64>((f)(x, _y), (g)(x, _y))
    }
    public fun test() {
        if Eq<u64>(Test::foo(|(_: u64, _: u64): (u64, u64)| 3, |(_: u64, _: u64): (u64, u64)| 10, 10, 100), 13) {
          Tuple()
        } else {
          Abort(0)
        };
        Tuple()
    }
} // end 0x42::Test


// -- Model dump after env processor inlining:
module 0x42::Test {
    private fun foo(f: |(u64, u64)|u64,g: |(u64, u64)|u64,x: u64,_y: u64): u64 {
        Add<u64>((f)(x, _y), (g)(x, _y))
    }
    public fun test() {
        if Eq<u64>(Test::foo(|(_: u64, _: u64): (u64, u64)| 3, |(_: u64, _: u64): (u64, u64)| 10, 10, 100), 13) {
          Tuple()
        } else {
          Abort(0)
        };
        Tuple()
    }
} // end 0x42::Test


// -- Model dump after env processor access and use check after inlining:
module 0x42::Test {
    private fun foo(f: |(u64, u64)|u64,g: |(u64, u64)|u64,x: u64,_y: u64): u64 {
        Add<u64>((f)(x, _y), (g)(x, _y))
    }
    public fun test() {
        if Eq<u64>(Test::foo(|(_: u64, _: u64): (u64, u64)| 3, |(_: u64, _: u64): (u64, u64)| 10, 10, 100), 13) {
          Tuple()
        } else {
          Abort(0)
        };
        Tuple()
    }
} // end 0x42::Test


// -- Model dump after env processor acquires check:
module 0x42::Test {
    private fun foo(f: |(u64, u64)|u64,g: |(u64, u64)|u64,x: u64,_y: u64): u64 {
        Add<u64>((f)(x, _y), (g)(x, _y))
    }
    public fun test() {
        if Eq<u64>(Test::foo(|(_: u64, _: u64): (u64, u64)| 3, |(_: u64, _: u64): (u64, u64)| 10, 10, 100), 13) {
          Tuple()
        } else {
          Abort(0)
        };
        Tuple()
    }
} // end 0x42::Test


// -- Model dump after env processor simplifier:
module 0x42::Test {
    private fun foo(f: |(u64, u64)|u64,g: |(u64, u64)|u64,x: u64,_y: u64): u64 {
        Add<u64>((f)(x, _y), (g)(x, _y))
    }
    public fun test() {
        if Eq<u64>(Test::foo(|(_: u64, _: u64): (u64, u64)| 3, |(_: u64, _: u64): (u64, u64)| 10, 10, 100), 13) {
          Tuple()
        } else {
          Abort(0)
        };
        Tuple()
    }
} // end 0x42::Test



Diagnostics:
error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
  ┌─ tests/lambda/inline-parity/bug_10991_noparam.move:8:21
  │
8 │         assert!(foo(|_, _| 3, |_, _| 10, 10, 100) == 13, 0);
  │                     ^^^^^^^^

error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
  ┌─ tests/lambda/inline-parity/bug_10991_noparam.move:8:31
  │
8 │         assert!(foo(|_, _| 3, |_, _| 10, 10, 100) == 13, 0);
  │                               ^^^^^^^^^
