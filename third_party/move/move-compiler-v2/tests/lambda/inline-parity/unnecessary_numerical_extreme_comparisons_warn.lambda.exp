// -- Model dump before env processor pipeline:
module 0xc0ffee::m {
    private fun apply(f: |u8|bool,x: u8): bool {
        (f)(x)
    }
    private fun bar() {
        Tuple()
    }
    private fun foo<T>(x: T): T {
        x
    }
    public fun test1(x: u8) {
        if Gt<u8>(Add<u8>(x, 1), 255) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test2(x: &u8,y: &u8) {
        if Eq<bool>(Gt<u8>(Add<u8>(Deref(x), Deref(y)), 255), true) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test3(x: u8) {
        if Or(Lt<u8>(x, 0), Gt<u8>(0, x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Gt<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test4(a: u8,b: u16,c: u32,d: u64,e: u128,f: u256) {
        if Or(Gt<u8>(a, 255), Gt<u256>(f, Cast<u256>(255))) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u16>(b, 65535) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u32>(4294967295, c) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u64>(18446744073709551615, d) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u128>(e, 340282366920938463463374607431768211455) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u256>(f, 115792089237316195423570985008687907853269984665640564039457584007913129639935) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u256>(115792089237316195423570985008687907853269984665640564039457584007913129639935, f) {
          m::bar()
        } else {
          Tuple()
        };
        if Gt<u128>(340282366920938463463374607431768211455, e) {
          m::bar()
        } else {
          Tuple()
        };
        spec {
          assert Le($t0, 255);
        }

    }
    public fun test5(x: u8): bool {
        m::apply(|x: u8| Gt<u8>(x, 255), x)
    }
} // end 0xc0ffee::m
module 0xc0ffee::no_warn {
    public fun test(x: u8) {
        if Lt<u8>(x, 0) {
          Abort(1)
        } else {
          Tuple()
        };
        Tuple()
    }
} // end 0xc0ffee::no_warn


// -- Model dump after env processor unused checks:
module 0xc0ffee::m {
    private fun apply(f: |u8|bool,x: u8): bool {
        (f)(x)
    }
    private fun bar() {
        Tuple()
    }
    private fun foo<T>(x: T): T {
        x
    }
    public fun test1(x: u8) {
        if Gt<u8>(Add<u8>(x, 1), 255) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test2(x: &u8,y: &u8) {
        if Eq<bool>(Gt<u8>(Add<u8>(Deref(x), Deref(y)), 255), true) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test3(x: u8) {
        if Or(Lt<u8>(x, 0), Gt<u8>(0, x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Gt<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test4(a: u8,b: u16,c: u32,d: u64,e: u128,f: u256) {
        if Or(Gt<u8>(a, 255), Gt<u256>(f, Cast<u256>(255))) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u16>(b, 65535) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u32>(4294967295, c) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u64>(18446744073709551615, d) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u128>(e, 340282366920938463463374607431768211455) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u256>(f, 115792089237316195423570985008687907853269984665640564039457584007913129639935) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u256>(115792089237316195423570985008687907853269984665640564039457584007913129639935, f) {
          m::bar()
        } else {
          Tuple()
        };
        if Gt<u128>(340282366920938463463374607431768211455, e) {
          m::bar()
        } else {
          Tuple()
        };
        spec {
          assert Le($t0, 255);
        }

    }
    public fun test5(x: u8): bool {
        m::apply(|x: u8| Gt<u8>(x, 255), x)
    }
} // end 0xc0ffee::m
module 0xc0ffee::no_warn {
    public fun test(x: u8) {
        if Lt<u8>(x, 0) {
          Abort(1)
        } else {
          Tuple()
        };
        Tuple()
    }
} // end 0xc0ffee::no_warn


// -- Model dump after env processor type parameter check:
module 0xc0ffee::m {
    private fun apply(f: |u8|bool,x: u8): bool {
        (f)(x)
    }
    private fun bar() {
        Tuple()
    }
    private fun foo<T>(x: T): T {
        x
    }
    public fun test1(x: u8) {
        if Gt<u8>(Add<u8>(x, 1), 255) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test2(x: &u8,y: &u8) {
        if Eq<bool>(Gt<u8>(Add<u8>(Deref(x), Deref(y)), 255), true) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test3(x: u8) {
        if Or(Lt<u8>(x, 0), Gt<u8>(0, x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Gt<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test4(a: u8,b: u16,c: u32,d: u64,e: u128,f: u256) {
        if Or(Gt<u8>(a, 255), Gt<u256>(f, Cast<u256>(255))) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u16>(b, 65535) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u32>(4294967295, c) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u64>(18446744073709551615, d) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u128>(e, 340282366920938463463374607431768211455) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u256>(f, 115792089237316195423570985008687907853269984665640564039457584007913129639935) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u256>(115792089237316195423570985008687907853269984665640564039457584007913129639935, f) {
          m::bar()
        } else {
          Tuple()
        };
        if Gt<u128>(340282366920938463463374607431768211455, e) {
          m::bar()
        } else {
          Tuple()
        };
        spec {
          assert Le($t0, 255);
        }

    }
    public fun test5(x: u8): bool {
        m::apply(|x: u8| Gt<u8>(x, 255), x)
    }
} // end 0xc0ffee::m
module 0xc0ffee::no_warn {
    public fun test(x: u8) {
        if Lt<u8>(x, 0) {
          Abort(1)
        } else {
          Tuple()
        };
        Tuple()
    }
} // end 0xc0ffee::no_warn


// -- Model dump after env processor check recursive struct definition:
module 0xc0ffee::m {
    private fun apply(f: |u8|bool,x: u8): bool {
        (f)(x)
    }
    private fun bar() {
        Tuple()
    }
    private fun foo<T>(x: T): T {
        x
    }
    public fun test1(x: u8) {
        if Gt<u8>(Add<u8>(x, 1), 255) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test2(x: &u8,y: &u8) {
        if Eq<bool>(Gt<u8>(Add<u8>(Deref(x), Deref(y)), 255), true) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test3(x: u8) {
        if Or(Lt<u8>(x, 0), Gt<u8>(0, x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Gt<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test4(a: u8,b: u16,c: u32,d: u64,e: u128,f: u256) {
        if Or(Gt<u8>(a, 255), Gt<u256>(f, Cast<u256>(255))) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u16>(b, 65535) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u32>(4294967295, c) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u64>(18446744073709551615, d) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u128>(e, 340282366920938463463374607431768211455) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u256>(f, 115792089237316195423570985008687907853269984665640564039457584007913129639935) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u256>(115792089237316195423570985008687907853269984665640564039457584007913129639935, f) {
          m::bar()
        } else {
          Tuple()
        };
        if Gt<u128>(340282366920938463463374607431768211455, e) {
          m::bar()
        } else {
          Tuple()
        };
        spec {
          assert Le($t0, 255);
        }

    }
    public fun test5(x: u8): bool {
        m::apply(|x: u8| Gt<u8>(x, 255), x)
    }
} // end 0xc0ffee::m
module 0xc0ffee::no_warn {
    public fun test(x: u8) {
        if Lt<u8>(x, 0) {
          Abort(1)
        } else {
          Tuple()
        };
        Tuple()
    }
} // end 0xc0ffee::no_warn


// -- Model dump after env processor check cyclic type instantiation:
module 0xc0ffee::m {
    private fun apply(f: |u8|bool,x: u8): bool {
        (f)(x)
    }
    private fun bar() {
        Tuple()
    }
    private fun foo<T>(x: T): T {
        x
    }
    public fun test1(x: u8) {
        if Gt<u8>(Add<u8>(x, 1), 255) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test2(x: &u8,y: &u8) {
        if Eq<bool>(Gt<u8>(Add<u8>(Deref(x), Deref(y)), 255), true) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test3(x: u8) {
        if Or(Lt<u8>(x, 0), Gt<u8>(0, x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Gt<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test4(a: u8,b: u16,c: u32,d: u64,e: u128,f: u256) {
        if Or(Gt<u8>(a, 255), Gt<u256>(f, Cast<u256>(255))) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u16>(b, 65535) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u32>(4294967295, c) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u64>(18446744073709551615, d) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u128>(e, 340282366920938463463374607431768211455) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u256>(f, 115792089237316195423570985008687907853269984665640564039457584007913129639935) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u256>(115792089237316195423570985008687907853269984665640564039457584007913129639935, f) {
          m::bar()
        } else {
          Tuple()
        };
        if Gt<u128>(340282366920938463463374607431768211455, e) {
          m::bar()
        } else {
          Tuple()
        };
        spec {
          assert Le($t0, 255);
        }

    }
    public fun test5(x: u8): bool {
        m::apply(|x: u8| Gt<u8>(x, 255), x)
    }
} // end 0xc0ffee::m
module 0xc0ffee::no_warn {
    public fun test(x: u8) {
        if Lt<u8>(x, 0) {
          Abort(1)
        } else {
          Tuple()
        };
        Tuple()
    }
} // end 0xc0ffee::no_warn


// -- Model dump after env processor unused struct params check:
module 0xc0ffee::m {
    private fun apply(f: |u8|bool,x: u8): bool {
        (f)(x)
    }
    private fun bar() {
        Tuple()
    }
    private fun foo<T>(x: T): T {
        x
    }
    public fun test1(x: u8) {
        if Gt<u8>(Add<u8>(x, 1), 255) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test2(x: &u8,y: &u8) {
        if Eq<bool>(Gt<u8>(Add<u8>(Deref(x), Deref(y)), 255), true) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test3(x: u8) {
        if Or(Lt<u8>(x, 0), Gt<u8>(0, x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Gt<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test4(a: u8,b: u16,c: u32,d: u64,e: u128,f: u256) {
        if Or(Gt<u8>(a, 255), Gt<u256>(f, Cast<u256>(255))) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u16>(b, 65535) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u32>(4294967295, c) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u64>(18446744073709551615, d) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u128>(e, 340282366920938463463374607431768211455) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u256>(f, 115792089237316195423570985008687907853269984665640564039457584007913129639935) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u256>(115792089237316195423570985008687907853269984665640564039457584007913129639935, f) {
          m::bar()
        } else {
          Tuple()
        };
        if Gt<u128>(340282366920938463463374607431768211455, e) {
          m::bar()
        } else {
          Tuple()
        };
        spec {
          assert Le($t0, 255);
        }

    }
    public fun test5(x: u8): bool {
        m::apply(|x: u8| Gt<u8>(x, 255), x)
    }
} // end 0xc0ffee::m
module 0xc0ffee::no_warn {
    public fun test(x: u8) {
        if Lt<u8>(x, 0) {
          Abort(1)
        } else {
          Tuple()
        };
        Tuple()
    }
} // end 0xc0ffee::no_warn


// -- Model dump after env processor access and use check before inlining:
module 0xc0ffee::m {
    private fun apply(f: |u8|bool,x: u8): bool {
        (f)(x)
    }
    private fun bar() {
        Tuple()
    }
    private fun foo<T>(x: T): T {
        x
    }
    public fun test1(x: u8) {
        if Gt<u8>(Add<u8>(x, 1), 255) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test2(x: &u8,y: &u8) {
        if Eq<bool>(Gt<u8>(Add<u8>(Deref(x), Deref(y)), 255), true) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test3(x: u8) {
        if Or(Lt<u8>(x, 0), Gt<u8>(0, x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Gt<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test4(a: u8,b: u16,c: u32,d: u64,e: u128,f: u256) {
        if Or(Gt<u8>(a, 255), Gt<u256>(f, Cast<u256>(255))) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u16>(b, 65535) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u32>(4294967295, c) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u64>(18446744073709551615, d) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u128>(e, 340282366920938463463374607431768211455) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u256>(f, 115792089237316195423570985008687907853269984665640564039457584007913129639935) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u256>(115792089237316195423570985008687907853269984665640564039457584007913129639935, f) {
          m::bar()
        } else {
          Tuple()
        };
        if Gt<u128>(340282366920938463463374607431768211455, e) {
          m::bar()
        } else {
          Tuple()
        };
        spec {
          assert Le($t0, 255);
        }

    }
    public fun test5(x: u8): bool {
        m::apply(|x: u8| Gt<u8>(x, 255), x)
    }
} // end 0xc0ffee::m
module 0xc0ffee::no_warn {
    public fun test(x: u8) {
        if Lt<u8>(x, 0) {
          Abort(1)
        } else {
          Tuple()
        };
        Tuple()
    }
} // end 0xc0ffee::no_warn


// -- Model dump after env processor inlining:
module 0xc0ffee::m {
    private fun apply(f: |u8|bool,x: u8): bool {
        (f)(x)
    }
    private fun bar() {
        Tuple()
    }
    private fun foo<T>(x: T): T {
        x
    }
    public fun test1(x: u8) {
        if Gt<u8>(Add<u8>(x, 1), 255) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test2(x: &u8,y: &u8) {
        if Eq<bool>(Gt<u8>(Add<u8>(Deref(x), Deref(y)), 255), true) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test3(x: u8) {
        if Or(Lt<u8>(x, 0), Gt<u8>(0, x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Gt<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test4(a: u8,b: u16,c: u32,d: u64,e: u128,f: u256) {
        if Or(Gt<u8>(a, 255), Gt<u256>(f, Cast<u256>(255))) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u16>(b, 65535) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u32>(4294967295, c) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u64>(18446744073709551615, d) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u128>(e, 340282366920938463463374607431768211455) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u256>(f, 115792089237316195423570985008687907853269984665640564039457584007913129639935) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u256>(115792089237316195423570985008687907853269984665640564039457584007913129639935, f) {
          m::bar()
        } else {
          Tuple()
        };
        if Gt<u128>(340282366920938463463374607431768211455, e) {
          m::bar()
        } else {
          Tuple()
        };
        spec {
          assert Le($t0, 255);
        }

    }
    public fun test5(x: u8): bool {
        m::apply(|x: u8| Gt<u8>(x, 255), x)
    }
} // end 0xc0ffee::m
module 0xc0ffee::no_warn {
    public fun test(x: u8) {
        if Lt<u8>(x, 0) {
          Abort(1)
        } else {
          Tuple()
        };
        Tuple()
    }
} // end 0xc0ffee::no_warn


// -- Model dump after env processor access and use check after inlining:
module 0xc0ffee::m {
    private fun apply(f: |u8|bool,x: u8): bool {
        (f)(x)
    }
    private fun bar() {
        Tuple()
    }
    private fun foo<T>(x: T): T {
        x
    }
    public fun test1(x: u8) {
        if Gt<u8>(Add<u8>(x, 1), 255) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test2(x: &u8,y: &u8) {
        if Eq<bool>(Gt<u8>(Add<u8>(Deref(x), Deref(y)), 255), true) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test3(x: u8) {
        if Or(Lt<u8>(x, 0), Gt<u8>(0, x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Gt<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test4(a: u8,b: u16,c: u32,d: u64,e: u128,f: u256) {
        if Or(Gt<u8>(a, 255), Gt<u256>(f, Cast<u256>(255))) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u16>(b, 65535) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u32>(4294967295, c) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u64>(18446744073709551615, d) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u128>(e, 340282366920938463463374607431768211455) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u256>(f, 115792089237316195423570985008687907853269984665640564039457584007913129639935) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u256>(115792089237316195423570985008687907853269984665640564039457584007913129639935, f) {
          m::bar()
        } else {
          Tuple()
        };
        if Gt<u128>(340282366920938463463374607431768211455, e) {
          m::bar()
        } else {
          Tuple()
        };
        spec {
          assert Le($t0, 255);
        }

    }
    public fun test5(x: u8): bool {
        m::apply(|x: u8| Gt<u8>(x, 255), x)
    }
} // end 0xc0ffee::m
module 0xc0ffee::no_warn {
    public fun test(x: u8) {
        if Lt<u8>(x, 0) {
          Abort(1)
        } else {
          Tuple()
        };
        Tuple()
    }
} // end 0xc0ffee::no_warn


// -- Model dump after env processor acquires check:
module 0xc0ffee::m {
    private fun apply(f: |u8|bool,x: u8): bool {
        (f)(x)
    }
    private fun bar() {
        Tuple()
    }
    private fun foo<T>(x: T): T {
        x
    }
    public fun test1(x: u8) {
        if Gt<u8>(Add<u8>(x, 1), 255) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test2(x: &u8,y: &u8) {
        if Eq<bool>(Gt<u8>(Add<u8>(Deref(x), Deref(y)), 255), true) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test3(x: u8) {
        if Or(Lt<u8>(x, 0), Gt<u8>(0, x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Gt<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test4(a: u8,b: u16,c: u32,d: u64,e: u128,f: u256) {
        if Or(Gt<u8>(a, 255), Gt<u256>(f, Cast<u256>(255))) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u16>(b, 65535) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u32>(4294967295, c) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u64>(18446744073709551615, d) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u128>(e, 340282366920938463463374607431768211455) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u256>(f, 115792089237316195423570985008687907853269984665640564039457584007913129639935) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u256>(115792089237316195423570985008687907853269984665640564039457584007913129639935, f) {
          m::bar()
        } else {
          Tuple()
        };
        if Gt<u128>(340282366920938463463374607431768211455, e) {
          m::bar()
        } else {
          Tuple()
        };
        spec {
          assert Le($t0, 255);
        }

    }
    public fun test5(x: u8): bool {
        m::apply(|x: u8| Gt<u8>(x, 255), x)
    }
} // end 0xc0ffee::m
module 0xc0ffee::no_warn {
    public fun test(x: u8) {
        if Lt<u8>(x, 0) {
          Abort(1)
        } else {
          Tuple()
        };
        Tuple()
    }
} // end 0xc0ffee::no_warn


// -- Model dump after env processor simplifier:
module 0xc0ffee::m {
    private fun apply(f: |u8|bool,x: u8): bool {
        (f)(x)
    }
    private fun bar() {
        Tuple()
    }
    private fun foo<T>(x: T): T {
        x
    }
    public fun test1(x: u8) {
        if Gt<u8>(Add<u8>(x, 1), 255) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test2(x: &u8,y: &u8) {
        if Eq<bool>(Gt<u8>(Add<u8>(Deref(x), Deref(y)), 255), true) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test3(x: u8) {
        if Or(Lt<u8>(x, 0), Gt<u8>(0, x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Gt<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test4(a: u8,b: u16,c: u32,d: u64,e: u128,f: u256) {
        if Or(Gt<u8>(a, 255), Gt<u256>(f, 255)) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u16>(b, 65535) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u32>(4294967295, c) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u64>(18446744073709551615, d) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u128>(e, 340282366920938463463374607431768211455) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u256>(f, 115792089237316195423570985008687907853269984665640564039457584007913129639935) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u256>(115792089237316195423570985008687907853269984665640564039457584007913129639935, f) {
          m::bar()
        } else {
          Tuple()
        };
        if Gt<u128>(340282366920938463463374607431768211455, e) {
          m::bar()
        } else {
          Tuple()
        };
        spec {
          assert Le($t0, 255);
        }

    }
    public fun test5(x: u8): bool {
        m::apply(|x: u8| Gt<u8>(x, 255), x)
    }
} // end 0xc0ffee::m
module 0xc0ffee::no_warn {
    public fun test(x: u8) {
        if Lt<u8>(x, 0) {
          Abort(1)
        } else {
          Tuple()
        };
        Tuple()
    }
} // end 0xc0ffee::no_warn



Diagnostics:
error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
   ┌─ tests/lambda/inline-parity/unnecessary_numerical_extreme_comparisons_warn.move:54:15
   │
54 │         apply(|x| x > U8_MAX, x)
   │               ^^^^^^^^^^^^^^
