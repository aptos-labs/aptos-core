// -- Model dump before env processor pipeline:
module 0x42::m {
    spec {
      invariant forall a: address: TypeDomain<address>(): Implies(exists<0x42::m::S>(a), m::exec<address, bool>(|a: address| Lt(select m::S.f<0x42::m::S>(m::get<0x42::m::S>(a)), 10), a));
    }

    struct S {
        f: u64,
    }
    spec {
      invariant m::exec<num, bool>(|x: num| Gt(x, 0), select m::S.f());
    }

    private fun exec<T,R>(f: |T|R,x: T): R {
        {
          let r: R = (f)(x);
          spec {
            assert Eq<#1>(r, (f)($t1));
          }
          ;
          r
        }
    }
    private fun function_code_spec_block(x: u64): u64 {
        spec {
          assert m::exec<num, bool>(|y: num| Gt(y, 0), $t0);
        }
        ;
        Add<u64>(x, 1)
    }
    private fun function_spec_block(x: u64): u64 {
        Add<u64>(x, 1)
    }
    spec {
      ensures Eq<u64>(result0(), m::exec<num, num>(|x: num| Add(x, 1), $t0));
    }

    private inline fun get<R>(a: address): &R {
        BorrowGlobal(Immutable)<R>(a)
    }
} // end 0x42::m


// -- Model dump after env processor unused checks:
module 0x42::m {
    spec {
      invariant forall a: address: TypeDomain<address>(): Implies(exists<0x42::m::S>(a), m::exec<address, bool>(|a: address| Lt(select m::S.f<0x42::m::S>(m::get<0x42::m::S>(a)), 10), a));
    }

    struct S {
        f: u64,
    }
    spec {
      invariant m::exec<num, bool>(|x: num| Gt(x, 0), select m::S.f());
    }

    private fun exec<T,R>(f: |T|R,x: T): R {
        {
          let r: R = (f)(x);
          spec {
            assert Eq<#1>(r, (f)($t1));
          }
          ;
          r
        }
    }
    private fun function_code_spec_block(x: u64): u64 {
        spec {
          assert m::exec<num, bool>(|y: num| Gt(y, 0), $t0);
        }
        ;
        Add<u64>(x, 1)
    }
    private fun function_spec_block(x: u64): u64 {
        Add<u64>(x, 1)
    }
    spec {
      ensures Eq<u64>(result0(), m::exec<num, num>(|x: num| Add(x, 1), $t0));
    }

    private inline fun get<R>(a: address): &R {
        BorrowGlobal(Immutable)<R>(a)
    }
} // end 0x42::m


// -- Model dump after env processor type parameter check:
module 0x42::m {
    spec {
      invariant forall a: address: TypeDomain<address>(): Implies(exists<0x42::m::S>(a), m::exec<address, bool>(|a: address| Lt(select m::S.f<0x42::m::S>(m::get<0x42::m::S>(a)), 10), a));
    }

    struct S {
        f: u64,
    }
    spec {
      invariant m::exec<num, bool>(|x: num| Gt(x, 0), select m::S.f());
    }

    private fun exec<T,R>(f: |T|R,x: T): R {
        {
          let r: R = (f)(x);
          spec {
            assert Eq<#1>(r, (f)($t1));
          }
          ;
          r
        }
    }
    private fun function_code_spec_block(x: u64): u64 {
        spec {
          assert m::exec<num, bool>(|y: num| Gt(y, 0), $t0);
        }
        ;
        Add<u64>(x, 1)
    }
    private fun function_spec_block(x: u64): u64 {
        Add<u64>(x, 1)
    }
    spec {
      ensures Eq<u64>(result0(), m::exec<num, num>(|x: num| Add(x, 1), $t0));
    }

    private inline fun get<R>(a: address): &R {
        BorrowGlobal(Immutable)<R>(a)
    }
} // end 0x42::m


// -- Model dump after env processor check recursive struct definition:
module 0x42::m {
    spec {
      invariant forall a: address: TypeDomain<address>(): Implies(exists<0x42::m::S>(a), m::exec<address, bool>(|a: address| Lt(select m::S.f<0x42::m::S>(m::get<0x42::m::S>(a)), 10), a));
    }

    struct S {
        f: u64,
    }
    spec {
      invariant m::exec<num, bool>(|x: num| Gt(x, 0), select m::S.f());
    }

    private fun exec<T,R>(f: |T|R,x: T): R {
        {
          let r: R = (f)(x);
          spec {
            assert Eq<#1>(r, (f)($t1));
          }
          ;
          r
        }
    }
    private fun function_code_spec_block(x: u64): u64 {
        spec {
          assert m::exec<num, bool>(|y: num| Gt(y, 0), $t0);
        }
        ;
        Add<u64>(x, 1)
    }
    private fun function_spec_block(x: u64): u64 {
        Add<u64>(x, 1)
    }
    spec {
      ensures Eq<u64>(result0(), m::exec<num, num>(|x: num| Add(x, 1), $t0));
    }

    private inline fun get<R>(a: address): &R {
        BorrowGlobal(Immutable)<R>(a)
    }
} // end 0x42::m


// -- Model dump after env processor check cyclic type instantiation:
module 0x42::m {
    spec {
      invariant forall a: address: TypeDomain<address>(): Implies(exists<0x42::m::S>(a), m::exec<address, bool>(|a: address| Lt(select m::S.f<0x42::m::S>(m::get<0x42::m::S>(a)), 10), a));
    }

    struct S {
        f: u64,
    }
    spec {
      invariant m::exec<num, bool>(|x: num| Gt(x, 0), select m::S.f());
    }

    private fun exec<T,R>(f: |T|R,x: T): R {
        {
          let r: R = (f)(x);
          spec {
            assert Eq<#1>(r, (f)($t1));
          }
          ;
          r
        }
    }
    private fun function_code_spec_block(x: u64): u64 {
        spec {
          assert m::exec<num, bool>(|y: num| Gt(y, 0), $t0);
        }
        ;
        Add<u64>(x, 1)
    }
    private fun function_spec_block(x: u64): u64 {
        Add<u64>(x, 1)
    }
    spec {
      ensures Eq<u64>(result0(), m::exec<num, num>(|x: num| Add(x, 1), $t0));
    }

    private inline fun get<R>(a: address): &R {
        BorrowGlobal(Immutable)<R>(a)
    }
} // end 0x42::m


// -- Model dump after env processor unused struct params check:
module 0x42::m {
    spec {
      invariant forall a: address: TypeDomain<address>(): Implies(exists<0x42::m::S>(a), m::exec<address, bool>(|a: address| Lt(select m::S.f<0x42::m::S>(m::get<0x42::m::S>(a)), 10), a));
    }

    struct S {
        f: u64,
    }
    spec {
      invariant m::exec<num, bool>(|x: num| Gt(x, 0), select m::S.f());
    }

    private fun exec<T,R>(f: |T|R,x: T): R {
        {
          let r: R = (f)(x);
          spec {
            assert Eq<#1>(r, (f)($t1));
          }
          ;
          r
        }
    }
    private fun function_code_spec_block(x: u64): u64 {
        spec {
          assert m::exec<num, bool>(|y: num| Gt(y, 0), $t0);
        }
        ;
        Add<u64>(x, 1)
    }
    private fun function_spec_block(x: u64): u64 {
        Add<u64>(x, 1)
    }
    spec {
      ensures Eq<u64>(result0(), m::exec<num, num>(|x: num| Add(x, 1), $t0));
    }

    private inline fun get<R>(a: address): &R {
        BorrowGlobal(Immutable)<R>(a)
    }
} // end 0x42::m


// -- Model dump after env processor access and use check before inlining:
module 0x42::m {
    spec {
      invariant forall a: address: TypeDomain<address>(): Implies(exists<0x42::m::S>(a), m::exec<address, bool>(|a: address| Lt(select m::S.f<0x42::m::S>(m::get<0x42::m::S>(a)), 10), a));
    }

    struct S {
        f: u64,
    }
    spec {
      invariant m::exec<num, bool>(|x: num| Gt(x, 0), select m::S.f());
    }

    private fun exec<T,R>(f: |T|R,x: T): R {
        {
          let r: R = (f)(x);
          spec {
            assert Eq<#1>(r, (f)($t1));
          }
          ;
          r
        }
    }
    private fun function_code_spec_block(x: u64): u64 {
        spec {
          assert m::exec<num, bool>(|y: num| Gt(y, 0), $t0);
        }
        ;
        Add<u64>(x, 1)
    }
    private fun function_spec_block(x: u64): u64 {
        Add<u64>(x, 1)
    }
    spec {
      ensures Eq<u64>(result0(), m::exec<num, num>(|x: num| Add(x, 1), $t0));
    }

    private inline fun get<R>(a: address): &R {
        BorrowGlobal(Immutable)<R>(a)
    }
} // end 0x42::m


// -- Model dump after env processor inlining:
module 0x42::m {
    spec {
      invariant forall a: address: TypeDomain<address>(): Implies(exists<0x42::m::S>(a), m::exec<address, bool>(|a: address| Lt(select m::S.f<0x42::m::S>({
      let (a: address): (address) = Tuple(a);
      BorrowGlobal(Immutable)<0x42::m::S>(a)
    }), 10), a));
    }

    struct S {
        f: u64,
    }
    spec {
      invariant m::exec<num, bool>(|x: num| Gt(x, 0), select m::S.f());
    }

    private fun exec<T,R>(f: |T|R,x: T): R {
        {
          let r: R = (f)(x);
          spec {
            assert Eq<#1>(r, (f)($t1));
          }
          ;
          r
        }
    }
    private fun function_code_spec_block(x: u64): u64 {
        spec {
          assert m::exec<num, bool>(|y: num| Gt(y, 0), $t0);
        }
        ;
        Add<u64>(x, 1)
    }
    private fun function_spec_block(x: u64): u64 {
        Add<u64>(x, 1)
    }
    spec {
      ensures Eq<u64>(result0(), m::exec<num, num>(|x: num| Add(x, 1), $t0));
    }

    private inline fun get<R>(a: address): &R {
        BorrowGlobal(Immutable)<R>(a)
    }
} // end 0x42::m


// -- Model dump after env processor access and use check after inlining:
module 0x42::m {
    spec {
      invariant forall a: address: TypeDomain<address>(): Implies(exists<0x42::m::S>(a), m::exec<address, bool>(|a: address| Lt(select m::S.f<0x42::m::S>({
      let (a: address): (address) = Tuple(a);
      BorrowGlobal(Immutable)<0x42::m::S>(a)
    }), 10), a));
    }

    struct S {
        f: u64,
    }
    spec {
      invariant m::exec<num, bool>(|x: num| Gt(x, 0), select m::S.f());
    }

    private fun exec<T,R>(f: |T|R,x: T): R {
        {
          let r: R = (f)(x);
          spec {
            assert Eq<#1>(r, (f)($t1));
          }
          ;
          r
        }
    }
    private fun function_code_spec_block(x: u64): u64 {
        spec {
          assert m::exec<num, bool>(|y: num| Gt(y, 0), $t0);
        }
        ;
        Add<u64>(x, 1)
    }
    private fun function_spec_block(x: u64): u64 {
        Add<u64>(x, 1)
    }
    spec {
      ensures Eq<u64>(result0(), m::exec<num, num>(|x: num| Add(x, 1), $t0));
    }

    private inline fun get<R>(a: address): &R {
        BorrowGlobal(Immutable)<R>(a)
    }
} // end 0x42::m


// -- Model dump after env processor acquires check:
module 0x42::m {
    spec {
      invariant forall a: address: TypeDomain<address>(): Implies(exists<0x42::m::S>(a), m::exec<address, bool>(|a: address| Lt(select m::S.f<0x42::m::S>({
      let (a: address): (address) = Tuple(a);
      BorrowGlobal(Immutable)<0x42::m::S>(a)
    }), 10), a));
    }

    struct S {
        f: u64,
    }
    spec {
      invariant m::exec<num, bool>(|x: num| Gt(x, 0), select m::S.f());
    }

    private fun exec<T,R>(f: |T|R,x: T): R {
        {
          let r: R = (f)(x);
          spec {
            assert Eq<#1>(r, (f)($t1));
          }
          ;
          r
        }
    }
    private fun function_code_spec_block(x: u64): u64 {
        spec {
          assert m::exec<num, bool>(|y: num| Gt(y, 0), $t0);
        }
        ;
        Add<u64>(x, 1)
    }
    private fun function_spec_block(x: u64): u64 {
        Add<u64>(x, 1)
    }
    spec {
      ensures Eq<u64>(result0(), m::exec<num, num>(|x: num| Add(x, 1), $t0));
    }

    private inline fun get<R>(a: address): &R {
        BorrowGlobal(Immutable)<R>(a)
    }
} // end 0x42::m


// -- Model dump after env processor simplifier:
module 0x42::m {
    spec {
      invariant forall a: address: TypeDomain<address>(): Implies(exists<0x42::m::S>(a), m::exec<address, bool>(|a: address| Lt(select m::S.f<0x42::m::S>({
      let (a: address): (address) = Tuple(a);
      BorrowGlobal(Immutable)<0x42::m::S>(a)
    }), 10), a));
    }

    struct S {
        f: u64,
    }
    spec {
      invariant m::exec<num, bool>(|x: num| Gt(x, 0), select m::S.f());
    }

    private fun exec<T,R>(f: |T|R,x: T): R {
        {
          let r: R = (f)(x);
          spec {
            assert Eq<#1>(r, (f)($t1));
          }
          ;
          r
        }
    }
    private fun function_code_spec_block(x: u64): u64 {
        spec {
          assert m::exec<num, bool>(|y: num| Gt(y, 0), $t0);
        }
        ;
        Add<u64>(x, 1)
    }
    private fun function_spec_block(x: u64): u64 {
        Add<u64>(x, 1)
    }
    spec {
      ensures Eq<u64>(result0(), m::exec<num, num>(|x: num| Add(x, 1), $t0));
    }

    private inline fun get<R>(a: address): &R {
        BorrowGlobal(Immutable)<R>(a)
    }
} // end 0x42::m



Diagnostics:
error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
   ┌─ tests/lambda/inline-parity/inline_fun_in_spec.move:19:28
   │
19 │         spec { assert exec(|y| y > 0, x); };
   │                            ^^^^^^^^^
