// -- Model dump before bytecode pipeline
module 0x42::m {
    spec {
      invariant forall a: address: TypeDomain<address>(): Implies(exists<0x42::m::S>(a), m::$exec<address, bool>(|a: address| Lt(select m::S.f<0x42::m::S>({
      let (a: address): (address) = Tuple(a);
      global<0x42::m::S>(a)
    }), 10), a));
    }

    struct S {
        f: u64,
    }
    spec {
      invariant m::$exec<num, bool>(|x: num| Gt(x, 0), select m::S.f());
    }

    private fun exec<T,R>(f: |T|R with copy,x: T): R {
        {
          let r: R = (f)(x);
          spec {
            assert Eq<#1>(r, (f)($t1));
          }
          ;
          r
        }
    }
    private fun function_code_spec_block(x: u64): u64 {
        spec {
          assert m::$exec<num, bool>(closure#0m::__lambda__1__function_code_spec_block(), $t0);
        }
        ;
        Add<u64>(x, 1)
    }
    private fun function_spec_block(x: u64): u64 {
        Add<u64>(x, 1)
    }
    spec {
      ensures Eq<u64>(result0(), m::$exec<num, num>(|x: num| Add(x, 1), $t0));
    }

    private inline fun get<R>(a: address): &R {
        BorrowGlobal(Immutable)<R>(a)
    }
    private fun __lambda__1__function_code_spec_block(y: num): bool {
        Gt(y, 0)
    }
    spec fun $exec<T,R>(f: |#0|#1 with copy,x: #0): #1 {
        {
          let r: #1 = (f)(x);
          r
        }
    }
    spec fun $__lambda__1__function_code_spec_block(y: num): bool {
        Gt(y, 0)
    }
} // end 0x42::m

// -- Sourcified model before bytecode pipeline
module 0x42::m {
    struct S has copy, drop, key {
        f: u64,
    }
    /*
     spec {
      invariant m::$exec<num, bool>(|x: num| Gt(x, 0), select m::S.f());
    }

    */
    fun exec<T: copy + drop, R>(f: |T|R with copy, x: T): R {
        let r = f(x);

        /* spec {
          assert Eq<#1>(r, (f)($t1));
        }
         */
        ;
        r
    }
    fun function_code_spec_block(x: u64): u64 {

        /* spec {
          assert m::$exec<num, bool>(closure#0m::__lambda__1__function_code_spec_block(), $t0);
        }
         */
        ;
        x + 1
    }
    fun function_spec_block(x: u64): u64 {
        x + 1
    }
    inline fun get<R: key>(a: address): &R {
        borrow_global<R>(a)
    }
    fun __lambda__1__function_code_spec_block(y: num): bool {
        y > 0u256
    }
}

============ initial bytecode ================

[variant baseline]
fun m::exec<#0, #1>($t0: |#0|#1 with copy, $t1: #0): #1 {
     var $t2: #1
     var $t3: #1
     var $t4: #0
  0: $t4 := infer($t1)
  1: $t3 := invoke($t4, $t0)
  2: spec {
  assert Eq<#1>($t3, ($t0)($t1));
}

  3: $t2 := infer($t3)
  4: return $t2
}


[variant baseline]
fun m::function_code_spec_block($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
  0: spec {
  assert m::$exec<num, bool>(closure#0m::__lambda__1__function_code_spec_block(), $t0);
}

  1: $t2 := infer($t0)
  2: $t3 := 1
  3: $t1 := +($t2, $t3)
  4: return $t1
}


[variant baseline]
fun m::function_spec_block($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
  0: $t2 := infer($t0)
  1: $t3 := 1
  2: $t1 := +($t2, $t3)
  3: return $t1
}


[variant baseline]
fun m::__lambda__1__function_code_spec_block($t0: num): bool {
     var $t1: bool
     var $t2: num
     var $t3: u256
  0: $t2 := infer($t0)
  1: $t3 := 0
  2: $t1 := >($t2, $t3)
  3: return $t1
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::exec<#0, #1>($t0: |#0|#1 with copy, $t1: #0): #1 {
     var $t2: #1
     var $t3: #1
     var $t4: #0
     # live vars: $t0, $t1
  0: $t4 := copy($t1)
     # live vars: $t0, $t1, $t4
  1: $t3 := invoke($t4, $t0)
     # live vars: $t0, $t1, $t3
  2: spec {
  assert Eq<#1>($t3, ($t0)($t1));
}

     # live vars: $t3
  3: $t2 := move($t3)
     # live vars: $t2
  4: return $t2
}


[variant baseline]
fun m::function_code_spec_block($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: u64
     var $t3: u64
     # live vars: $t0
  0: spec {
  assert m::$exec<num, bool>(closure#0m::__lambda__1__function_code_spec_block(), $t0);
}

     # live vars: $t0
  1: $t2 := move($t0)
     # live vars: $t2
  2: $t3 := 1
     # live vars: $t2, $t3
  3: $t2 := +($t2, $t3)
     # live vars: $t2
  4: return $t2
}


[variant baseline]
fun m::function_spec_block($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: u64 [unused]
     var $t3: u64
     # live vars: $t0
  0: $t0 := move($t0)
     # live vars: $t0
  1: $t3 := 1
     # live vars: $t0, $t3
  2: $t0 := +($t0, $t3)
     # live vars: $t0
  3: return $t0
}


[variant baseline]
fun m::__lambda__1__function_code_spec_block($t0: num): bool {
     var $t1: bool
     var $t2: num [unused]
     var $t3: u256
     # live vars: $t0
  0: $t0 := move($t0)
     # live vars: $t0
  1: $t3 := 0
     # live vars: $t0, $t3
  2: $t1 := >($t0, $t3)
     # live vars: $t1
  3: return $t1
}


Diagnostics:
bug: unexpected specification type Primitive(
    Num,
)
   ┌─ tests/lambda/inline-parity/inline_fun_in_spec.move:19:28
   │
19 │         spec { assert exec(|y| y > 0, x); }; // This is lifted and leads to followup errors, need to enable in specs
   │                            ^^^^^^^^^
