// -- Model dump before env processor pipeline:
module 0x42::Test {
    public fun foo(f: |(u64, u64)|,z: u64) {
        Test::quux(|(a: u64, b: u64): (u64, u64)| (f)(a, b), z);
        Tuple()
    }
    public fun quux(f: |(u64, u64)|,_z: u64) {
        {
          let x: u64 = 3;
          {
            let q: u64 = 5;
            (f)(x, q);
            Tuple()
          }
        }
    }
    public fun test_shadowing() {
        {
          let _x: u64 = 1;
          {
            let z: u64 = 4;
            Test::foo(|(y: u64, _q: u64): (u64, u64)| _x: u64 = y, z);
            if Eq<u64>(_x, 3) {
              Tuple()
            } else {
              Abort(0)
            }
          }
        }
    }
    public fun test_shadowing2() {
        {
          let _x: u64 = 1;
          {
            let z: u64 = 4;
            Test::quux(|(y: u64, _q: u64): (u64, u64)| _x: u64 = y, z);
            if Eq<u64>(_x, 3) {
              Tuple()
            } else {
              Abort(0)
            }
          }
        }
    }
} // end 0x42::Test


// -- Model dump after env processor unused checks:
module 0x42::Test {
    public fun foo(f: |(u64, u64)|,z: u64) {
        Test::quux(|(a: u64, b: u64): (u64, u64)| (f)(a, b), z);
        Tuple()
    }
    public fun quux(f: |(u64, u64)|,_z: u64) {
        {
          let x: u64 = 3;
          {
            let q: u64 = 5;
            (f)(x, q);
            Tuple()
          }
        }
    }
    public fun test_shadowing() {
        {
          let _x: u64 = 1;
          {
            let z: u64 = 4;
            Test::foo(|(y: u64, _q: u64): (u64, u64)| _x: u64 = y, z);
            if Eq<u64>(_x, 3) {
              Tuple()
            } else {
              Abort(0)
            }
          }
        }
    }
    public fun test_shadowing2() {
        {
          let _x: u64 = 1;
          {
            let z: u64 = 4;
            Test::quux(|(y: u64, _q: u64): (u64, u64)| _x: u64 = y, z);
            if Eq<u64>(_x, 3) {
              Tuple()
            } else {
              Abort(0)
            }
          }
        }
    }
} // end 0x42::Test


// -- Model dump after env processor type parameter check:
module 0x42::Test {
    public fun foo(f: |(u64, u64)|,z: u64) {
        Test::quux(|(a: u64, b: u64): (u64, u64)| (f)(a, b), z);
        Tuple()
    }
    public fun quux(f: |(u64, u64)|,_z: u64) {
        {
          let x: u64 = 3;
          {
            let q: u64 = 5;
            (f)(x, q);
            Tuple()
          }
        }
    }
    public fun test_shadowing() {
        {
          let _x: u64 = 1;
          {
            let z: u64 = 4;
            Test::foo(|(y: u64, _q: u64): (u64, u64)| _x: u64 = y, z);
            if Eq<u64>(_x, 3) {
              Tuple()
            } else {
              Abort(0)
            }
          }
        }
    }
    public fun test_shadowing2() {
        {
          let _x: u64 = 1;
          {
            let z: u64 = 4;
            Test::quux(|(y: u64, _q: u64): (u64, u64)| _x: u64 = y, z);
            if Eq<u64>(_x, 3) {
              Tuple()
            } else {
              Abort(0)
            }
          }
        }
    }
} // end 0x42::Test


// -- Model dump after env processor check recursive struct definition:
module 0x42::Test {
    public fun foo(f: |(u64, u64)|,z: u64) {
        Test::quux(|(a: u64, b: u64): (u64, u64)| (f)(a, b), z);
        Tuple()
    }
    public fun quux(f: |(u64, u64)|,_z: u64) {
        {
          let x: u64 = 3;
          {
            let q: u64 = 5;
            (f)(x, q);
            Tuple()
          }
        }
    }
    public fun test_shadowing() {
        {
          let _x: u64 = 1;
          {
            let z: u64 = 4;
            Test::foo(|(y: u64, _q: u64): (u64, u64)| _x: u64 = y, z);
            if Eq<u64>(_x, 3) {
              Tuple()
            } else {
              Abort(0)
            }
          }
        }
    }
    public fun test_shadowing2() {
        {
          let _x: u64 = 1;
          {
            let z: u64 = 4;
            Test::quux(|(y: u64, _q: u64): (u64, u64)| _x: u64 = y, z);
            if Eq<u64>(_x, 3) {
              Tuple()
            } else {
              Abort(0)
            }
          }
        }
    }
} // end 0x42::Test


// -- Model dump after env processor check cyclic type instantiation:
module 0x42::Test {
    public fun foo(f: |(u64, u64)|,z: u64) {
        Test::quux(|(a: u64, b: u64): (u64, u64)| (f)(a, b), z);
        Tuple()
    }
    public fun quux(f: |(u64, u64)|,_z: u64) {
        {
          let x: u64 = 3;
          {
            let q: u64 = 5;
            (f)(x, q);
            Tuple()
          }
        }
    }
    public fun test_shadowing() {
        {
          let _x: u64 = 1;
          {
            let z: u64 = 4;
            Test::foo(|(y: u64, _q: u64): (u64, u64)| _x: u64 = y, z);
            if Eq<u64>(_x, 3) {
              Tuple()
            } else {
              Abort(0)
            }
          }
        }
    }
    public fun test_shadowing2() {
        {
          let _x: u64 = 1;
          {
            let z: u64 = 4;
            Test::quux(|(y: u64, _q: u64): (u64, u64)| _x: u64 = y, z);
            if Eq<u64>(_x, 3) {
              Tuple()
            } else {
              Abort(0)
            }
          }
        }
    }
} // end 0x42::Test


// -- Model dump after env processor unused struct params check:
module 0x42::Test {
    public fun foo(f: |(u64, u64)|,z: u64) {
        Test::quux(|(a: u64, b: u64): (u64, u64)| (f)(a, b), z);
        Tuple()
    }
    public fun quux(f: |(u64, u64)|,_z: u64) {
        {
          let x: u64 = 3;
          {
            let q: u64 = 5;
            (f)(x, q);
            Tuple()
          }
        }
    }
    public fun test_shadowing() {
        {
          let _x: u64 = 1;
          {
            let z: u64 = 4;
            Test::foo(|(y: u64, _q: u64): (u64, u64)| _x: u64 = y, z);
            if Eq<u64>(_x, 3) {
              Tuple()
            } else {
              Abort(0)
            }
          }
        }
    }
    public fun test_shadowing2() {
        {
          let _x: u64 = 1;
          {
            let z: u64 = 4;
            Test::quux(|(y: u64, _q: u64): (u64, u64)| _x: u64 = y, z);
            if Eq<u64>(_x, 3) {
              Tuple()
            } else {
              Abort(0)
            }
          }
        }
    }
} // end 0x42::Test


// -- Model dump after env processor access and use check before inlining:
module 0x42::Test {
    public fun foo(f: |(u64, u64)|,z: u64) {
        Test::quux(|(a: u64, b: u64): (u64, u64)| (f)(a, b), z);
        Tuple()
    }
    public fun quux(f: |(u64, u64)|,_z: u64) {
        {
          let x: u64 = 3;
          {
            let q: u64 = 5;
            (f)(x, q);
            Tuple()
          }
        }
    }
    public fun test_shadowing() {
        {
          let _x: u64 = 1;
          {
            let z: u64 = 4;
            Test::foo(|(y: u64, _q: u64): (u64, u64)| _x: u64 = y, z);
            if Eq<u64>(_x, 3) {
              Tuple()
            } else {
              Abort(0)
            }
          }
        }
    }
    public fun test_shadowing2() {
        {
          let _x: u64 = 1;
          {
            let z: u64 = 4;
            Test::quux(|(y: u64, _q: u64): (u64, u64)| _x: u64 = y, z);
            if Eq<u64>(_x, 3) {
              Tuple()
            } else {
              Abort(0)
            }
          }
        }
    }
} // end 0x42::Test


// -- Model dump after env processor inlining:
module 0x42::Test {
    public fun foo(f: |(u64, u64)|,z: u64) {
        Test::quux(|(a: u64, b: u64): (u64, u64)| (f)(a, b), z);
        Tuple()
    }
    public fun quux(f: |(u64, u64)|,_z: u64) {
        {
          let x: u64 = 3;
          {
            let q: u64 = 5;
            (f)(x, q);
            Tuple()
          }
        }
    }
    public fun test_shadowing() {
        {
          let _x: u64 = 1;
          {
            let z: u64 = 4;
            Test::foo(|(y: u64, _q: u64): (u64, u64)| _x: u64 = y, z);
            if Eq<u64>(_x, 3) {
              Tuple()
            } else {
              Abort(0)
            }
          }
        }
    }
    public fun test_shadowing2() {
        {
          let _x: u64 = 1;
          {
            let z: u64 = 4;
            Test::quux(|(y: u64, _q: u64): (u64, u64)| _x: u64 = y, z);
            if Eq<u64>(_x, 3) {
              Tuple()
            } else {
              Abort(0)
            }
          }
        }
    }
} // end 0x42::Test


// -- Model dump after env processor access and use check after inlining:
module 0x42::Test {
    public fun foo(f: |(u64, u64)|,z: u64) {
        Test::quux(|(a: u64, b: u64): (u64, u64)| (f)(a, b), z);
        Tuple()
    }
    public fun quux(f: |(u64, u64)|,_z: u64) {
        {
          let x: u64 = 3;
          {
            let q: u64 = 5;
            (f)(x, q);
            Tuple()
          }
        }
    }
    public fun test_shadowing() {
        {
          let _x: u64 = 1;
          {
            let z: u64 = 4;
            Test::foo(|(y: u64, _q: u64): (u64, u64)| _x: u64 = y, z);
            if Eq<u64>(_x, 3) {
              Tuple()
            } else {
              Abort(0)
            }
          }
        }
    }
    public fun test_shadowing2() {
        {
          let _x: u64 = 1;
          {
            let z: u64 = 4;
            Test::quux(|(y: u64, _q: u64): (u64, u64)| _x: u64 = y, z);
            if Eq<u64>(_x, 3) {
              Tuple()
            } else {
              Abort(0)
            }
          }
        }
    }
} // end 0x42::Test


// -- Model dump after env processor acquires check:
module 0x42::Test {
    public fun foo(f: |(u64, u64)|,z: u64) {
        Test::quux(|(a: u64, b: u64): (u64, u64)| (f)(a, b), z);
        Tuple()
    }
    public fun quux(f: |(u64, u64)|,_z: u64) {
        {
          let x: u64 = 3;
          {
            let q: u64 = 5;
            (f)(x, q);
            Tuple()
          }
        }
    }
    public fun test_shadowing() {
        {
          let _x: u64 = 1;
          {
            let z: u64 = 4;
            Test::foo(|(y: u64, _q: u64): (u64, u64)| _x: u64 = y, z);
            if Eq<u64>(_x, 3) {
              Tuple()
            } else {
              Abort(0)
            }
          }
        }
    }
    public fun test_shadowing2() {
        {
          let _x: u64 = 1;
          {
            let z: u64 = 4;
            Test::quux(|(y: u64, _q: u64): (u64, u64)| _x: u64 = y, z);
            if Eq<u64>(_x, 3) {
              Tuple()
            } else {
              Abort(0)
            }
          }
        }
    }
} // end 0x42::Test


// -- Model dump after env processor simplifier:
module 0x42::Test {
    public fun foo(f: |(u64, u64)|,z: u64) {
        Test::quux(|(a: u64, b: u64): (u64, u64)| (f)(a, b), z);
        Tuple()
    }
    public fun quux(f: |(u64, u64)|,_z: u64) {
        (f)(3, 5);
        Tuple()
    }
    public fun test_shadowing() {
        {
          let _x: u64 = 1;
          Test::foo(|(y: u64, _q: u64): (u64, u64)| _x: u64 = y, 4);
          if Eq<u64>(_x, 3) {
            Tuple()
          } else {
            Abort(0)
          }
        }
    }
    public fun test_shadowing2() {
        {
          let _x: u64 = 1;
          Test::quux(|(y: u64, _q: u64): (u64, u64)| _x: u64 = y, 4);
          if Eq<u64>(_x, 3) {
            Tuple()
          } else {
            Abort(0)
          }
        }
    }
} // end 0x42::Test



Diagnostics:
error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
   ┌─ tests/lambda/inline-parity/shadowing_unused.move:11:14
   │
11 │         quux(|a, b| f(a, b), z);
   │              ^^^^^^^^^^^^^^

error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
   ┌─ tests/lambda/inline-parity/shadowing_unused.move:17:13
   │
17 │           foo(|y, _q| {
   │ ╭─────────────^
18 │ │             _x = y  // We expect this to assign 3 via foo if renaming works correctly. If not it would
19 │ │                     // have the value 1.
20 │ │         }, z);
   │ ╰─────────^

error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
   ┌─ tests/lambda/inline-parity/shadowing_unused.move:27:14
   │
27 │           quux(|y, _q| {
   │ ╭──────────────^
28 │ │             _x = y  // We expect this to assign 3 via foo if renaming works correctly. If not it would
29 │ │                     // have the value 1.
30 │ │         }, z);
   │ ╰─────────^
