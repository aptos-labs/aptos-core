// -- Model dump before bytecode pipeline
module 0x42::map_opt {
    use std::option;
    public fun map<Element,OtherElement>(t: 0x1::option::Option<Element>,f: |Element|OtherElement): 0x1::option::Option<OtherElement> {
        if option::is_some<Element>(Borrow(Immutable)(t)) {
          option::some<OtherElement>((f)(option::extract<Element>(Borrow(Mutable)(t))))
        } else {
          option::none<OtherElement>()
        }
    }
} // end 0x42::map_opt
module 0x42::Test {
    use std::option;
    use 0x42::map_opt; // resolved as: 0x42::map_opt
    public fun test(): u64 {
        {
          let t: 0x1::option::Option<u64> = option::some<u64>(1);
          {
            let x: 0x1::option::Option<u64> = map_opt::map<u64, u64>(t, closure#0Test::test$lambda$1());
            option::extract<u64>(Borrow(Mutable)(x))
          }
        }
    }
    private fun test$lambda$1(e: u64): u64 {
        Add<u64>(e, 1)
    }
} // end 0x42::Test

// -- Sourcified model before bytecode pipeline
module 0x42::map_opt {
    public fun map<Element, OtherElement>(t: 0x1::option::Option<Element>, f: |Element|OtherElement): 0x1::option::Option<OtherElement> {
        if (0x1::option::is_some<Element>(&t)) 0x1::option::some<OtherElement>(f(0x1::option::extract<Element>(&mut t))) else 0x1::option::none<OtherElement>()
    }
}
module 0x42::Test {
    use 0x42::map_opt;
    public fun test(): u64 {
        let t = 0x1::option::some<u64>(1);
        let x = map_opt::map<u64,u64>(t, |arg0| test$lambda$1(arg0));
        0x1::option::extract<u64>(&mut x)
    }
    fun test$lambda$1(e: u64): u64 {
        e + 1
    }
}


Diagnostics:
error: Calls to function values other than inline function parameters not yet implemented
  ┌─ tests/lambda/inline-parity/options.move:7:26
  │
7 │             option::some(f(option::extract(&mut t)))
  │                          ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: Function-typed values not yet implemented except as parameters to calls to inline functions
   ┌─ tests/lambda/inline-parity/options.move:22:33
   │
22 │         let x = map_opt::map(t, |e| e + 1);
   │                                 ^^^^^^^^^
