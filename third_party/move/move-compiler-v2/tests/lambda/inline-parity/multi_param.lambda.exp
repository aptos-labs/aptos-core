// -- Model dump before env processor pipeline:
module 0x42::Test {
    use 0x1::vector as V; // resolved as: 0x1::vector
    struct Elem<K,V> {
        k: K,
        v: V,
    }
    public fun elem_for_each_ref<K,V>(v: &mut vector<Elem<K, V>>,f: |(&K, &mut V)|u64): u64 {
        {
          let result: u64 = 0;
          Test::for_each_ref_mut<Elem<K, V>>(v, |elem: &mut Elem<K, V>| {
            let elem: &mut Elem<K, V> = elem;
            result: u64 = Add<u64>(result, (f)(Borrow(Immutable)(select Test::Elem.k<&mut Elem<K, V>>(elem)), Borrow(Mutable)(select Test::Elem.v<&mut Elem<K, V>>(elem))));
            Tuple()
          });
          result
        }
    }
    public fun for_each_ref_mut<Element>(v: &mut vector<Element>,f: |&mut Element|) {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, vector::length<Element>(Freeze(false)(v))) {
              (f)(vector::borrow_mut<Element>(v, i));
              i: u64 = Add<u64>(i, 1)
            } else {
              break
            }
          }
        }
    }
    public fun test() {
        if Eq<u64>(Test::elem_for_each_ref<u64, u64>(Borrow(Mutable)(Vector<Elem<u64, u64>>(pack Test::Elem<u64, u64>(1, 2))), |(x: &u64, y: &mut u64): (&u64, &mut u64)| Add<u64>(Deref(x), Deref(y))), 3) {
          Tuple()
        } else {
          Abort(0)
        }
    }
} // end 0x42::Test


// -- Model dump after env processor unused checks:
module 0x42::Test {
    use 0x1::vector as V; // resolved as: 0x1::vector
    struct Elem<K,V> {
        k: K,
        v: V,
    }
    public fun elem_for_each_ref<K,V>(v: &mut vector<Elem<K, V>>,f: |(&K, &mut V)|u64): u64 {
        {
          let result: u64 = 0;
          Test::for_each_ref_mut<Elem<K, V>>(v, |elem: &mut Elem<K, V>| {
            let elem: &mut Elem<K, V> = elem;
            result: u64 = Add<u64>(result, (f)(Borrow(Immutable)(select Test::Elem.k<&mut Elem<K, V>>(elem)), Borrow(Mutable)(select Test::Elem.v<&mut Elem<K, V>>(elem))));
            Tuple()
          });
          result
        }
    }
    public fun for_each_ref_mut<Element>(v: &mut vector<Element>,f: |&mut Element|) {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, vector::length<Element>(Freeze(false)(v))) {
              (f)(vector::borrow_mut<Element>(v, i));
              i: u64 = Add<u64>(i, 1)
            } else {
              break
            }
          }
        }
    }
    public fun test() {
        if Eq<u64>(Test::elem_for_each_ref<u64, u64>(Borrow(Mutable)(Vector<Elem<u64, u64>>(pack Test::Elem<u64, u64>(1, 2))), |(x: &u64, y: &mut u64): (&u64, &mut u64)| Add<u64>(Deref(x), Deref(y))), 3) {
          Tuple()
        } else {
          Abort(0)
        }
    }
} // end 0x42::Test


// -- Model dump after env processor type parameter check:
module 0x42::Test {
    use 0x1::vector as V; // resolved as: 0x1::vector
    struct Elem<K,V> {
        k: K,
        v: V,
    }
    public fun elem_for_each_ref<K,V>(v: &mut vector<Elem<K, V>>,f: |(&K, &mut V)|u64): u64 {
        {
          let result: u64 = 0;
          Test::for_each_ref_mut<Elem<K, V>>(v, |elem: &mut Elem<K, V>| {
            let elem: &mut Elem<K, V> = elem;
            result: u64 = Add<u64>(result, (f)(Borrow(Immutable)(select Test::Elem.k<&mut Elem<K, V>>(elem)), Borrow(Mutable)(select Test::Elem.v<&mut Elem<K, V>>(elem))));
            Tuple()
          });
          result
        }
    }
    public fun for_each_ref_mut<Element>(v: &mut vector<Element>,f: |&mut Element|) {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, vector::length<Element>(Freeze(false)(v))) {
              (f)(vector::borrow_mut<Element>(v, i));
              i: u64 = Add<u64>(i, 1)
            } else {
              break
            }
          }
        }
    }
    public fun test() {
        if Eq<u64>(Test::elem_for_each_ref<u64, u64>(Borrow(Mutable)(Vector<Elem<u64, u64>>(pack Test::Elem<u64, u64>(1, 2))), |(x: &u64, y: &mut u64): (&u64, &mut u64)| Add<u64>(Deref(x), Deref(y))), 3) {
          Tuple()
        } else {
          Abort(0)
        }
    }
} // end 0x42::Test


// -- Model dump after env processor check recursive struct definition:
module 0x42::Test {
    use 0x1::vector as V; // resolved as: 0x1::vector
    struct Elem<K,V> {
        k: K,
        v: V,
    }
    public fun elem_for_each_ref<K,V>(v: &mut vector<Elem<K, V>>,f: |(&K, &mut V)|u64): u64 {
        {
          let result: u64 = 0;
          Test::for_each_ref_mut<Elem<K, V>>(v, |elem: &mut Elem<K, V>| {
            let elem: &mut Elem<K, V> = elem;
            result: u64 = Add<u64>(result, (f)(Borrow(Immutable)(select Test::Elem.k<&mut Elem<K, V>>(elem)), Borrow(Mutable)(select Test::Elem.v<&mut Elem<K, V>>(elem))));
            Tuple()
          });
          result
        }
    }
    public fun for_each_ref_mut<Element>(v: &mut vector<Element>,f: |&mut Element|) {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, vector::length<Element>(Freeze(false)(v))) {
              (f)(vector::borrow_mut<Element>(v, i));
              i: u64 = Add<u64>(i, 1)
            } else {
              break
            }
          }
        }
    }
    public fun test() {
        if Eq<u64>(Test::elem_for_each_ref<u64, u64>(Borrow(Mutable)(Vector<Elem<u64, u64>>(pack Test::Elem<u64, u64>(1, 2))), |(x: &u64, y: &mut u64): (&u64, &mut u64)| Add<u64>(Deref(x), Deref(y))), 3) {
          Tuple()
        } else {
          Abort(0)
        }
    }
} // end 0x42::Test


// -- Model dump after env processor check cyclic type instantiation:
module 0x42::Test {
    use 0x1::vector as V; // resolved as: 0x1::vector
    struct Elem<K,V> {
        k: K,
        v: V,
    }
    public fun elem_for_each_ref<K,V>(v: &mut vector<Elem<K, V>>,f: |(&K, &mut V)|u64): u64 {
        {
          let result: u64 = 0;
          Test::for_each_ref_mut<Elem<K, V>>(v, |elem: &mut Elem<K, V>| {
            let elem: &mut Elem<K, V> = elem;
            result: u64 = Add<u64>(result, (f)(Borrow(Immutable)(select Test::Elem.k<&mut Elem<K, V>>(elem)), Borrow(Mutable)(select Test::Elem.v<&mut Elem<K, V>>(elem))));
            Tuple()
          });
          result
        }
    }
    public fun for_each_ref_mut<Element>(v: &mut vector<Element>,f: |&mut Element|) {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, vector::length<Element>(Freeze(false)(v))) {
              (f)(vector::borrow_mut<Element>(v, i));
              i: u64 = Add<u64>(i, 1)
            } else {
              break
            }
          }
        }
    }
    public fun test() {
        if Eq<u64>(Test::elem_for_each_ref<u64, u64>(Borrow(Mutable)(Vector<Elem<u64, u64>>(pack Test::Elem<u64, u64>(1, 2))), |(x: &u64, y: &mut u64): (&u64, &mut u64)| Add<u64>(Deref(x), Deref(y))), 3) {
          Tuple()
        } else {
          Abort(0)
        }
    }
} // end 0x42::Test


// -- Model dump after env processor unused struct params check:
module 0x42::Test {
    use 0x1::vector as V; // resolved as: 0x1::vector
    struct Elem<K,V> {
        k: K,
        v: V,
    }
    public fun elem_for_each_ref<K,V>(v: &mut vector<Elem<K, V>>,f: |(&K, &mut V)|u64): u64 {
        {
          let result: u64 = 0;
          Test::for_each_ref_mut<Elem<K, V>>(v, |elem: &mut Elem<K, V>| {
            let elem: &mut Elem<K, V> = elem;
            result: u64 = Add<u64>(result, (f)(Borrow(Immutable)(select Test::Elem.k<&mut Elem<K, V>>(elem)), Borrow(Mutable)(select Test::Elem.v<&mut Elem<K, V>>(elem))));
            Tuple()
          });
          result
        }
    }
    public fun for_each_ref_mut<Element>(v: &mut vector<Element>,f: |&mut Element|) {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, vector::length<Element>(Freeze(false)(v))) {
              (f)(vector::borrow_mut<Element>(v, i));
              i: u64 = Add<u64>(i, 1)
            } else {
              break
            }
          }
        }
    }
    public fun test() {
        if Eq<u64>(Test::elem_for_each_ref<u64, u64>(Borrow(Mutable)(Vector<Elem<u64, u64>>(pack Test::Elem<u64, u64>(1, 2))), |(x: &u64, y: &mut u64): (&u64, &mut u64)| Add<u64>(Deref(x), Deref(y))), 3) {
          Tuple()
        } else {
          Abort(0)
        }
    }
} // end 0x42::Test


// -- Model dump after env processor access and use check before inlining:
module 0x42::Test {
    use 0x1::vector as V; // resolved as: 0x1::vector
    struct Elem<K,V> {
        k: K,
        v: V,
    }
    public fun elem_for_each_ref<K,V>(v: &mut vector<Elem<K, V>>,f: |(&K, &mut V)|u64): u64 {
        {
          let result: u64 = 0;
          Test::for_each_ref_mut<Elem<K, V>>(v, |elem: &mut Elem<K, V>| {
            let elem: &mut Elem<K, V> = elem;
            result: u64 = Add<u64>(result, (f)(Borrow(Immutable)(select Test::Elem.k<&mut Elem<K, V>>(elem)), Borrow(Mutable)(select Test::Elem.v<&mut Elem<K, V>>(elem))));
            Tuple()
          });
          result
        }
    }
    public fun for_each_ref_mut<Element>(v: &mut vector<Element>,f: |&mut Element|) {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, vector::length<Element>(Freeze(false)(v))) {
              (f)(vector::borrow_mut<Element>(v, i));
              i: u64 = Add<u64>(i, 1)
            } else {
              break
            }
          }
        }
    }
    public fun test() {
        if Eq<u64>(Test::elem_for_each_ref<u64, u64>(Borrow(Mutable)(Vector<Elem<u64, u64>>(pack Test::Elem<u64, u64>(1, 2))), |(x: &u64, y: &mut u64): (&u64, &mut u64)| Add<u64>(Deref(x), Deref(y))), 3) {
          Tuple()
        } else {
          Abort(0)
        }
    }
} // end 0x42::Test


// -- Model dump after env processor inlining:
module 0x42::Test {
    use 0x1::vector as V; // resolved as: 0x1::vector
    struct Elem<K,V> {
        k: K,
        v: V,
    }
    public fun elem_for_each_ref<K,V>(v: &mut vector<Elem<K, V>>,f: |(&K, &mut V)|u64): u64 {
        {
          let result: u64 = 0;
          Test::for_each_ref_mut<Elem<K, V>>(v, |elem: &mut Elem<K, V>| {
            let elem: &mut Elem<K, V> = elem;
            result: u64 = Add<u64>(result, (f)(Borrow(Immutable)(select Test::Elem.k<&mut Elem<K, V>>(elem)), Borrow(Mutable)(select Test::Elem.v<&mut Elem<K, V>>(elem))));
            Tuple()
          });
          result
        }
    }
    public fun for_each_ref_mut<Element>(v: &mut vector<Element>,f: |&mut Element|) {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, vector::length<Element>(Freeze(false)(v))) {
              (f)(vector::borrow_mut<Element>(v, i));
              i: u64 = Add<u64>(i, 1)
            } else {
              break
            }
          }
        }
    }
    public fun test() {
        if Eq<u64>(Test::elem_for_each_ref<u64, u64>(Borrow(Mutable)(Vector<Elem<u64, u64>>(pack Test::Elem<u64, u64>(1, 2))), |(x: &u64, y: &mut u64): (&u64, &mut u64)| Add<u64>(Deref(x), Deref(y))), 3) {
          Tuple()
        } else {
          Abort(0)
        }
    }
} // end 0x42::Test


// -- Model dump after env processor access and use check after inlining:
module 0x42::Test {
    use 0x1::vector as V; // resolved as: 0x1::vector
    struct Elem<K,V> {
        k: K,
        v: V,
    }
    public fun elem_for_each_ref<K,V>(v: &mut vector<Elem<K, V>>,f: |(&K, &mut V)|u64): u64 {
        {
          let result: u64 = 0;
          Test::for_each_ref_mut<Elem<K, V>>(v, |elem: &mut Elem<K, V>| {
            let elem: &mut Elem<K, V> = elem;
            result: u64 = Add<u64>(result, (f)(Borrow(Immutable)(select Test::Elem.k<&mut Elem<K, V>>(elem)), Borrow(Mutable)(select Test::Elem.v<&mut Elem<K, V>>(elem))));
            Tuple()
          });
          result
        }
    }
    public fun for_each_ref_mut<Element>(v: &mut vector<Element>,f: |&mut Element|) {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, vector::length<Element>(Freeze(false)(v))) {
              (f)(vector::borrow_mut<Element>(v, i));
              i: u64 = Add<u64>(i, 1)
            } else {
              break
            }
          }
        }
    }
    public fun test() {
        if Eq<u64>(Test::elem_for_each_ref<u64, u64>(Borrow(Mutable)(Vector<Elem<u64, u64>>(pack Test::Elem<u64, u64>(1, 2))), |(x: &u64, y: &mut u64): (&u64, &mut u64)| Add<u64>(Deref(x), Deref(y))), 3) {
          Tuple()
        } else {
          Abort(0)
        }
    }
} // end 0x42::Test


// -- Model dump after env processor acquires check:
module 0x42::Test {
    use 0x1::vector as V; // resolved as: 0x1::vector
    struct Elem<K,V> {
        k: K,
        v: V,
    }
    public fun elem_for_each_ref<K,V>(v: &mut vector<Elem<K, V>>,f: |(&K, &mut V)|u64): u64 {
        {
          let result: u64 = 0;
          Test::for_each_ref_mut<Elem<K, V>>(v, |elem: &mut Elem<K, V>| {
            let elem: &mut Elem<K, V> = elem;
            result: u64 = Add<u64>(result, (f)(Borrow(Immutable)(select Test::Elem.k<&mut Elem<K, V>>(elem)), Borrow(Mutable)(select Test::Elem.v<&mut Elem<K, V>>(elem))));
            Tuple()
          });
          result
        }
    }
    public fun for_each_ref_mut<Element>(v: &mut vector<Element>,f: |&mut Element|) {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, vector::length<Element>(Freeze(false)(v))) {
              (f)(vector::borrow_mut<Element>(v, i));
              i: u64 = Add<u64>(i, 1)
            } else {
              break
            }
          }
        }
    }
    public fun test() {
        if Eq<u64>(Test::elem_for_each_ref<u64, u64>(Borrow(Mutable)(Vector<Elem<u64, u64>>(pack Test::Elem<u64, u64>(1, 2))), |(x: &u64, y: &mut u64): (&u64, &mut u64)| Add<u64>(Deref(x), Deref(y))), 3) {
          Tuple()
        } else {
          Abort(0)
        }
    }
} // end 0x42::Test


// -- Model dump after env processor simplifier:
module 0x42::Test {
    use 0x1::vector as V; // resolved as: 0x1::vector
    struct Elem<K,V> {
        k: K,
        v: V,
    }
    public fun elem_for_each_ref<K,V>(v: &mut vector<Elem<K, V>>,f: |(&K, &mut V)|u64): u64 {
        {
          let result: u64 = 0;
          Test::for_each_ref_mut<Elem<K, V>>(v, |elem: &mut Elem<K, V>| {
            let elem: &mut Elem<K, V> = elem;
            result: u64 = Add<u64>(result, (f)(Borrow(Immutable)(select Test::Elem.k<&mut Elem<K, V>>(elem)), Borrow(Mutable)(select Test::Elem.v<&mut Elem<K, V>>(elem))));
            Tuple()
          });
          result
        }
    }
    public fun for_each_ref_mut<Element>(v: &mut vector<Element>,f: |&mut Element|) {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, vector::length<Element>(Freeze(false)(v))) {
              (f)(vector::borrow_mut<Element>(v, i));
              i: u64 = Add<u64>(i, 1)
            } else {
              break
            }
          }
        }
    }
    public fun test() {
        if Eq<u64>(Test::elem_for_each_ref<u64, u64>(Borrow(Mutable)(Vector<Elem<u64, u64>>(pack Test::Elem<u64, u64>(1, 2))), |(x: &u64, y: &mut u64): (&u64, &mut u64)| Add<u64>(Deref(x), Deref(y))), 3) {
          Tuple()
        } else {
          Abort(0)
        }
    }
} // end 0x42::Test



Diagnostics:
error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
   ┌─ tests/lambda/inline-parity/multi_param.move:19:29
   │
19 │           for_each_ref_mut(v, |elem| {
   │ ╭─────────────────────────────^
20 │ │             let elem: &mut Elem<K, V> = elem; // Checks whether scoping is fine
21 │ │             result = result + f(&elem.k, &mut elem.v);
22 │ │         });
   │ ╰─────────^

error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
   ┌─ tests/lambda/inline-parity/multi_param.move:27:64
   │
27 │         assert!(elem_for_each_ref(&mut vector[Elem{k:1, v:2}], |x,y| *x + *y) == 3, 0)
   │                                                                ^^^^^^^^^^^^^
