// -- Model dump before bytecode pipeline
module 0x8675309::M {
    struct S {
        dummy_field: bool,
    }
    private fun imm<T>(_x: &T) {
        Tuple()
    }
    private fun imm_imm<T>(_x: &T,_y: &T) {
        Tuple()
    }
    private fun imm_mut<T>(_x: &T,_y: &mut T) {
        Tuple()
    }
    private fun mut_imm<T>(_x: &mut T,_y: &T) {
        Tuple()
    }
    private fun t0() {
        M::imm<u64>(Freeze(false)(Borrow(Mutable)(0)));
        M::imm<u64>(Borrow(Immutable)(0));
        M::imm<S>(Freeze(false)(Borrow(Mutable)(pack M::S(false))));
        M::imm<S>(Borrow(Immutable)(pack M::S(false)));
        Tuple()
    }
    private fun t1() {
        M::imm_mut<u64>(Freeze(false)(Borrow(Mutable)(0)), Borrow(Mutable)(0));
        M::mut_imm<u64>(Borrow(Mutable)(0), Freeze(false)(Borrow(Mutable)(0)));
        M::imm_imm<u64>(Freeze(false)(Borrow(Mutable)(0)), Freeze(false)(Borrow(Mutable)(0)));
        Tuple()
    }
    private fun t2(f: |(&u64, &mut u64)| with copy) {
        (f)(Borrow(Mutable)(0), Borrow(Mutable)(0));
        (f)(Borrow(Immutable)(0), Borrow(Mutable)(0));
        Tuple()
    }
} // end 0x8675309::M

// -- Sourcified model before bytecode pipeline
module 0x8675309::M {
    struct S has drop {
    }
    fun imm<T>(_x: &T) {
    }
    fun imm_imm<T>(_x: &T, _y: &T) {
    }
    fun imm_mut<T>(_x: &T, _y: &mut T) {
    }
    fun mut_imm<T>(_x: &mut T, _y: &T) {
    }
    fun t0() {
        imm<u64>(/*freeze*/&mut 0);
        imm<u64>(&0);
        imm<S>(/*freeze*/&mut S{});
        imm<S>(&S{});
    }
    fun t1() {
        imm_mut<u64>(/*freeze*/&mut 0, &mut 0);
        mut_imm<u64>(&mut 0, /*freeze*/&mut 0);
        imm_imm<u64>(/*freeze*/&mut 0, /*freeze*/&mut 0);
    }
    fun t2(f: |(&u64, &mut u64)| with copy) {
        f(&mut 0, &mut 0);
        f(&0, &mut 0);
    }
}

============ initial bytecode ================

[variant baseline]
fun M::imm<#0>($t0: &#0) {
  0: return ()
}


[variant baseline]
fun M::imm_imm<#0>($t0: &#0, $t1: &#0) {
  0: return ()
}


[variant baseline]
fun M::imm_mut<#0>($t0: &#0, $t1: &mut #0) {
  0: return ()
}


[variant baseline]
fun M::mut_imm<#0>($t0: &mut #0, $t1: &#0) {
  0: return ()
}


[variant baseline]
fun M::t0() {
     var $t0: &u64
     var $t1: &mut u64
     var $t2: u64
     var $t3: &u64
     var $t4: u64
     var $t5: &0x8675309::M::S
     var $t6: &mut 0x8675309::M::S
     var $t7: 0x8675309::M::S
     var $t8: bool
     var $t9: &0x8675309::M::S
     var $t10: 0x8675309::M::S
     var $t11: bool
  0: $t2 := 0
  1: $t1 := borrow_local($t2)
  2: $t0 := freeze_ref(implicit)($t1)
  3: M::imm<u64>($t0)
  4: $t4 := 0
  5: $t3 := borrow_local($t4)
  6: M::imm<u64>($t3)
  7: $t8 := false
  8: $t7 := pack 0x8675309::M::S($t8)
  9: $t6 := borrow_local($t7)
 10: $t5 := freeze_ref(implicit)($t6)
 11: M::imm<0x8675309::M::S>($t5)
 12: $t11 := false
 13: $t10 := pack 0x8675309::M::S($t11)
 14: $t9 := borrow_local($t10)
 15: M::imm<0x8675309::M::S>($t9)
 16: return ()
}


[variant baseline]
fun M::t1() {
     var $t0: &u64
     var $t1: &mut u64
     var $t2: u64
     var $t3: &mut u64
     var $t4: u64
     var $t5: &mut u64
     var $t6: u64
     var $t7: &u64
     var $t8: &mut u64
     var $t9: u64
     var $t10: &u64
     var $t11: &mut u64
     var $t12: u64
     var $t13: &u64
     var $t14: &mut u64
     var $t15: u64
  0: $t2 := 0
  1: $t1 := borrow_local($t2)
  2: $t0 := freeze_ref(implicit)($t1)
  3: $t4 := 0
  4: $t3 := borrow_local($t4)
  5: M::imm_mut<u64>($t0, $t3)
  6: $t6 := 0
  7: $t5 := borrow_local($t6)
  8: $t9 := 0
  9: $t8 := borrow_local($t9)
 10: $t7 := freeze_ref(implicit)($t8)
 11: M::mut_imm<u64>($t5, $t7)
 12: $t12 := 0
 13: $t11 := borrow_local($t12)
 14: $t10 := freeze_ref(implicit)($t11)
 15: $t15 := 0
 16: $t14 := borrow_local($t15)
 17: $t13 := freeze_ref(implicit)($t14)
 18: M::imm_imm<u64>($t10, $t13)
 19: return ()
}


[variant baseline]
fun M::t2($t0: |(&u64, &mut u64)| with copy) {
     var $t1: &mut u64
     var $t2: u64
     var $t3: &mut u64
     var $t4: u64
     var $t5: &u64
     var $t6: u64
     var $t7: &mut u64
     var $t8: u64
  0: $t2 := 0
  1: $t1 := borrow_local($t2)
  2: $t4 := 0
  3: $t3 := borrow_local($t4)
  4: invoke($t1, $t3, $t0)
  5: $t6 := 0
  6: $t5 := borrow_local($t6)
  7: $t8 := 0
  8: $t7 := borrow_local($t8)
  9: invoke($t5, $t7, $t0)
 10: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun M::imm<#0>($t0: &#0) {
     # live vars: $t0
  0: drop($t0)
     # live vars:
  1: return ()
}


[variant baseline]
fun M::imm_imm<#0>($t0: &#0, $t1: &#0) {
     # live vars: $t0, $t1
  0: drop($t0)
     # live vars: $t1
  1: drop($t1)
     # live vars:
  2: return ()
}


[variant baseline]
fun M::imm_mut<#0>($t0: &#0, $t1: &mut #0) {
     # live vars: $t0, $t1
  0: drop($t0)
     # live vars: $t1
  1: drop($t1)
     # live vars:
  2: return ()
}


[variant baseline]
fun M::mut_imm<#0>($t0: &mut #0, $t1: &#0) {
     # live vars: $t0, $t1
  0: drop($t0)
     # live vars: $t1
  1: drop($t1)
     # live vars:
  2: return ()
}


[variant baseline]
fun M::t0() {
     var $t0: &u64
     var $t1: &mut u64
     var $t2: u64
     var $t3: &u64 [unused]
     var $t4: u64
     var $t5: &0x8675309::M::S
     var $t6: &mut 0x8675309::M::S
     var $t7: 0x8675309::M::S
     var $t8: bool
     var $t9: &0x8675309::M::S [unused]
     var $t10: 0x8675309::M::S
     var $t11: bool [unused]
     # live vars:
  0: $t2 := 0
     # live vars: $t2
  1: $t1 := borrow_local($t2)
     # live vars: $t1
  2: $t0 := freeze_ref(implicit)($t1)
     # live vars: $t0
  3: M::imm<u64>($t0)
     # live vars:
  4: $t4 := 0
     # live vars: $t4
  5: $t0 := borrow_local($t4)
     # live vars: $t0
  6: M::imm<u64>($t0)
     # live vars:
  7: $t8 := false
     # live vars: $t8
  8: $t7 := pack 0x8675309::M::S($t8)
     # live vars: $t7
  9: $t6 := borrow_local($t7)
     # live vars: $t6
 10: $t5 := freeze_ref(implicit)($t6)
     # live vars: $t5
 11: M::imm<0x8675309::M::S>($t5)
     # live vars:
 12: $t8 := false
     # live vars: $t8
 13: $t10 := pack 0x8675309::M::S($t8)
     # live vars: $t10
 14: $t5 := borrow_local($t10)
     # live vars: $t5
 15: M::imm<0x8675309::M::S>($t5)
     # live vars:
 16: return ()
}


[variant baseline]
fun M::t1() {
     var $t0: &u64
     var $t1: &mut u64
     var $t2: u64
     var $t3: &mut u64 [unused]
     var $t4: u64
     var $t5: &mut u64 [unused]
     var $t6: u64
     var $t7: &u64 [unused]
     var $t8: &mut u64
     var $t9: u64
     var $t10: &u64 [unused]
     var $t11: &mut u64 [unused]
     var $t12: u64
     var $t13: &u64
     var $t14: &mut u64 [unused]
     var $t15: u64
     # live vars:
  0: $t2 := 0
     # live vars: $t2
  1: $t1 := borrow_local($t2)
     # live vars: $t1
  2: $t0 := freeze_ref(implicit)($t1)
     # live vars: $t0
  3: $t4 := 0
     # live vars: $t0, $t4
  4: $t1 := borrow_local($t4)
     # live vars: $t0, $t1
  5: M::imm_mut<u64>($t0, $t1)
     # live vars:
  6: $t6 := 0
     # live vars: $t6
  7: $t1 := borrow_local($t6)
     # live vars: $t1
  8: $t9 := 0
     # live vars: $t1, $t9
  9: $t8 := borrow_local($t9)
     # live vars: $t1, $t8
 10: $t0 := freeze_ref(implicit)($t8)
     # live vars: $t0, $t1
 11: M::mut_imm<u64>($t1, $t0)
     # live vars:
 12: $t12 := 0
     # live vars: $t12
 13: $t1 := borrow_local($t12)
     # live vars: $t1
 14: $t0 := freeze_ref(implicit)($t1)
     # live vars: $t0
 15: $t15 := 0
     # live vars: $t0, $t15
 16: $t1 := borrow_local($t15)
     # live vars: $t0, $t1
 17: $t13 := freeze_ref(implicit)($t1)
     # live vars: $t0, $t13
 18: M::imm_imm<u64>($t0, $t13)
     # live vars:
 19: return ()
}


[variant baseline]
fun M::t2($t0: |(&u64, &mut u64)| with copy) {
     var $t1: &mut u64
     var $t2: u64
     var $t3: &mut u64
     var $t4: u64
     var $t5: &u64
     var $t6: u64
     var $t7: &mut u64 [unused]
     var $t8: u64
     # live vars: $t0
  0: $t2 := 0
     # live vars: $t0, $t2
  1: $t1 := borrow_local($t2)
     # live vars: $t0, $t1
  2: $t4 := 0
     # live vars: $t0, $t1, $t4
  3: $t3 := borrow_local($t4)
     # live vars: $t0, $t1, $t3
  4: invoke($t1, $t3, $t0)
     # live vars: $t0
  5: $t6 := 0
     # live vars: $t0, $t6
  6: $t5 := borrow_local($t6)
     # live vars: $t0, $t5
  7: $t8 := 0
     # live vars: $t0, $t5, $t8
  8: $t1 := borrow_local($t8)
     # live vars: $t0, $t1, $t5
  9: invoke($t5, $t1, $t0)
     # live vars:
 10: return ()
}


============ disassembled file-format ==================
// Move bytecode v8
module 8675309.M {
struct S has drop {
	dummy_field: bool
}

imm<T>(_x: &T) /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](_x: &T)
	1: Pop
	2: Ret
}
imm_imm<T>(_x: &T, _y: &T) /* def_idx: 1 */ {
B0:
	0: MoveLoc[0](_x: &T)
	1: Pop
	2: MoveLoc[1](_y: &T)
	3: Pop
	4: Ret
}
imm_mut<T>(_x: &T, _y: &mut T) /* def_idx: 2 */ {
B0:
	0: MoveLoc[0](_x: &T)
	1: Pop
	2: MoveLoc[1](_y: &mut T)
	3: Pop
	4: Ret
}
mut_imm<T>(_x: &mut T, _y: &T) /* def_idx: 3 */ {
B0:
	0: MoveLoc[0](_x: &mut T)
	1: Pop
	2: MoveLoc[1](_y: &T)
	3: Pop
	4: Ret
}
t0() /* def_idx: 4 */ {
L0:	$t2: u64
L1:	$t4: u64
L2:	$t7: S
L3:	$t10: S
B0:
	0: LdU64(0)
	1: StLoc[0]($t2: u64)
	2: MutBorrowLoc[0]($t2: u64)
	3: FreezeRef
	4: Call imm<u64>(&u64)
	5: LdU64(0)
	6: StLoc[1]($t4: u64)
	7: ImmBorrowLoc[1]($t4: u64)
	8: Call imm<u64>(&u64)
	9: LdFalse
	10: Pack[0](S)
	11: StLoc[2]($t7: S)
	12: MutBorrowLoc[2]($t7: S)
	13: FreezeRef
	14: Call imm<S>(&S)
	15: LdFalse
	16: Pack[0](S)
	17: StLoc[3]($t10: S)
	18: ImmBorrowLoc[3]($t10: S)
	19: Call imm<S>(&S)
	20: Ret
}
t1() /* def_idx: 5 */ {
L0:	$t2: u64
L1:	$t4: u64
L2:	$t6: u64
L3:	$t9: u64
L4:	$t12: u64
L5:	$t15: u64
B0:
	0: LdU64(0)
	1: StLoc[0]($t2: u64)
	2: MutBorrowLoc[0]($t2: u64)
	3: FreezeRef
	4: LdU64(0)
	5: StLoc[1]($t4: u64)
	6: MutBorrowLoc[1]($t4: u64)
	7: Call imm_mut<u64>(&u64, &mut u64)
	8: LdU64(0)
	9: StLoc[2]($t6: u64)
	10: MutBorrowLoc[2]($t6: u64)
	11: LdU64(0)
	12: StLoc[3]($t9: u64)
	13: MutBorrowLoc[3]($t9: u64)
	14: FreezeRef
	15: Call mut_imm<u64>(&mut u64, &u64)
	16: LdU64(0)
	17: StLoc[4]($t12: u64)
	18: MutBorrowLoc[4]($t12: u64)
	19: FreezeRef
	20: LdU64(0)
	21: StLoc[5]($t15: u64)
	22: MutBorrowLoc[5]($t15: u64)
	23: FreezeRef
	24: Call imm_imm<u64>(&u64, &u64)
	25: Ret
}
t2(f: |&u64,&mut u64| has copy) /* def_idx: 6 */ {
L1:	$t2: u64
L2:	$t4: u64
L3:	$t6: u64
L4:	$t8: u64
B0:
	0: LdU64(0)
	1: StLoc[1]($t2: u64)
	2: MutBorrowLoc[1]($t2: u64)
	3: LdU64(0)
	4: StLoc[2]($t4: u64)
	5: MutBorrowLoc[2]($t4: u64)
	6: CopyLoc[0](f: |&u64,&mut u64| has copy)
	7: CallClosure(|&u64,&mut u64| has copy)
	8: LdU64(0)
	9: StLoc[3]($t6: u64)
	10: ImmBorrowLoc[3]($t6: u64)
	11: LdU64(0)
	12: StLoc[4]($t8: u64)
	13: MutBorrowLoc[4]($t8: u64)
	14: MoveLoc[0](f: |&u64,&mut u64| has copy)
	15: CallClosure(|&u64,&mut u64| has copy)
	16: Ret
}
}
============ bytecode verification failed ========

Diagnostics:
bug: bytecode verification failed with unexpected status code `CALL_TYPE_MISMATCH_ERROR`. This is a compiler bug, consider reporting it.
Error message: none
   ┌─ tests/lambda/inline-parity/subtype_args.move:24:9
   │
24 │         f(&mut 0, &mut 0); // need to further investigate this error
   │         ^^^^^^^^^^^^^^^^^
