// -- Model dump before env processor pipeline:
module 0x8675309::M {
    struct S {
        dummy_field: bool,
    }
    private fun imm<T>(_x: &T) {
        Tuple()
    }
    private fun imm_imm<T>(_x: &T,_y: &T) {
        Tuple()
    }
    private fun imm_mut<T>(_x: &T,_y: &mut T) {
        Tuple()
    }
    private fun mut_imm<T>(_x: &mut T,_y: &T) {
        Tuple()
    }
    private fun t0() {
        M::imm<u64>(Freeze(false)(Borrow(Mutable)(0)));
        M::imm<u64>(Borrow(Immutable)(0));
        M::imm<S>(Freeze(false)(Borrow(Mutable)(pack M::S(false))));
        M::imm<S>(Borrow(Immutable)(pack M::S(false)));
        Tuple()
    }
    private fun t1() {
        M::imm_mut<u64>(Freeze(false)(Borrow(Mutable)(0)), Borrow(Mutable)(0));
        M::mut_imm<u64>(Borrow(Mutable)(0), Freeze(false)(Borrow(Mutable)(0)));
        M::imm_imm<u64>(Freeze(false)(Borrow(Mutable)(0)), Freeze(false)(Borrow(Mutable)(0)));
        Tuple()
    }
    private fun t2(f: |(&u64, &mut u64)|) {
        (f)(Borrow(Mutable)(0), Borrow(Mutable)(0));
        (f)(Borrow(Immutable)(0), Borrow(Mutable)(0));
        Tuple()
    }
} // end 0x8675309::M


// -- Model dump after env processor unused checks:
module 0x8675309::M {
    struct S {
        dummy_field: bool,
    }
    private fun imm<T>(_x: &T) {
        Tuple()
    }
    private fun imm_imm<T>(_x: &T,_y: &T) {
        Tuple()
    }
    private fun imm_mut<T>(_x: &T,_y: &mut T) {
        Tuple()
    }
    private fun mut_imm<T>(_x: &mut T,_y: &T) {
        Tuple()
    }
    private fun t0() {
        M::imm<u64>(Freeze(false)(Borrow(Mutable)(0)));
        M::imm<u64>(Borrow(Immutable)(0));
        M::imm<S>(Freeze(false)(Borrow(Mutable)(pack M::S(false))));
        M::imm<S>(Borrow(Immutable)(pack M::S(false)));
        Tuple()
    }
    private fun t1() {
        M::imm_mut<u64>(Freeze(false)(Borrow(Mutable)(0)), Borrow(Mutable)(0));
        M::mut_imm<u64>(Borrow(Mutable)(0), Freeze(false)(Borrow(Mutable)(0)));
        M::imm_imm<u64>(Freeze(false)(Borrow(Mutable)(0)), Freeze(false)(Borrow(Mutable)(0)));
        Tuple()
    }
    private fun t2(f: |(&u64, &mut u64)|) {
        (f)(Borrow(Mutable)(0), Borrow(Mutable)(0));
        (f)(Borrow(Immutable)(0), Borrow(Mutable)(0));
        Tuple()
    }
} // end 0x8675309::M


// -- Model dump after env processor type parameter check:
module 0x8675309::M {
    struct S {
        dummy_field: bool,
    }
    private fun imm<T>(_x: &T) {
        Tuple()
    }
    private fun imm_imm<T>(_x: &T,_y: &T) {
        Tuple()
    }
    private fun imm_mut<T>(_x: &T,_y: &mut T) {
        Tuple()
    }
    private fun mut_imm<T>(_x: &mut T,_y: &T) {
        Tuple()
    }
    private fun t0() {
        M::imm<u64>(Freeze(false)(Borrow(Mutable)(0)));
        M::imm<u64>(Borrow(Immutable)(0));
        M::imm<S>(Freeze(false)(Borrow(Mutable)(pack M::S(false))));
        M::imm<S>(Borrow(Immutable)(pack M::S(false)));
        Tuple()
    }
    private fun t1() {
        M::imm_mut<u64>(Freeze(false)(Borrow(Mutable)(0)), Borrow(Mutable)(0));
        M::mut_imm<u64>(Borrow(Mutable)(0), Freeze(false)(Borrow(Mutable)(0)));
        M::imm_imm<u64>(Freeze(false)(Borrow(Mutable)(0)), Freeze(false)(Borrow(Mutable)(0)));
        Tuple()
    }
    private fun t2(f: |(&u64, &mut u64)|) {
        (f)(Borrow(Mutable)(0), Borrow(Mutable)(0));
        (f)(Borrow(Immutable)(0), Borrow(Mutable)(0));
        Tuple()
    }
} // end 0x8675309::M


// -- Model dump after env processor check recursive struct definition:
module 0x8675309::M {
    struct S {
        dummy_field: bool,
    }
    private fun imm<T>(_x: &T) {
        Tuple()
    }
    private fun imm_imm<T>(_x: &T,_y: &T) {
        Tuple()
    }
    private fun imm_mut<T>(_x: &T,_y: &mut T) {
        Tuple()
    }
    private fun mut_imm<T>(_x: &mut T,_y: &T) {
        Tuple()
    }
    private fun t0() {
        M::imm<u64>(Freeze(false)(Borrow(Mutable)(0)));
        M::imm<u64>(Borrow(Immutable)(0));
        M::imm<S>(Freeze(false)(Borrow(Mutable)(pack M::S(false))));
        M::imm<S>(Borrow(Immutable)(pack M::S(false)));
        Tuple()
    }
    private fun t1() {
        M::imm_mut<u64>(Freeze(false)(Borrow(Mutable)(0)), Borrow(Mutable)(0));
        M::mut_imm<u64>(Borrow(Mutable)(0), Freeze(false)(Borrow(Mutable)(0)));
        M::imm_imm<u64>(Freeze(false)(Borrow(Mutable)(0)), Freeze(false)(Borrow(Mutable)(0)));
        Tuple()
    }
    private fun t2(f: |(&u64, &mut u64)|) {
        (f)(Borrow(Mutable)(0), Borrow(Mutable)(0));
        (f)(Borrow(Immutable)(0), Borrow(Mutable)(0));
        Tuple()
    }
} // end 0x8675309::M


// -- Model dump after env processor check cyclic type instantiation:
module 0x8675309::M {
    struct S {
        dummy_field: bool,
    }
    private fun imm<T>(_x: &T) {
        Tuple()
    }
    private fun imm_imm<T>(_x: &T,_y: &T) {
        Tuple()
    }
    private fun imm_mut<T>(_x: &T,_y: &mut T) {
        Tuple()
    }
    private fun mut_imm<T>(_x: &mut T,_y: &T) {
        Tuple()
    }
    private fun t0() {
        M::imm<u64>(Freeze(false)(Borrow(Mutable)(0)));
        M::imm<u64>(Borrow(Immutable)(0));
        M::imm<S>(Freeze(false)(Borrow(Mutable)(pack M::S(false))));
        M::imm<S>(Borrow(Immutable)(pack M::S(false)));
        Tuple()
    }
    private fun t1() {
        M::imm_mut<u64>(Freeze(false)(Borrow(Mutable)(0)), Borrow(Mutable)(0));
        M::mut_imm<u64>(Borrow(Mutable)(0), Freeze(false)(Borrow(Mutable)(0)));
        M::imm_imm<u64>(Freeze(false)(Borrow(Mutable)(0)), Freeze(false)(Borrow(Mutable)(0)));
        Tuple()
    }
    private fun t2(f: |(&u64, &mut u64)|) {
        (f)(Borrow(Mutable)(0), Borrow(Mutable)(0));
        (f)(Borrow(Immutable)(0), Borrow(Mutable)(0));
        Tuple()
    }
} // end 0x8675309::M


// -- Model dump after env processor unused struct params check:
module 0x8675309::M {
    struct S {
        dummy_field: bool,
    }
    private fun imm<T>(_x: &T) {
        Tuple()
    }
    private fun imm_imm<T>(_x: &T,_y: &T) {
        Tuple()
    }
    private fun imm_mut<T>(_x: &T,_y: &mut T) {
        Tuple()
    }
    private fun mut_imm<T>(_x: &mut T,_y: &T) {
        Tuple()
    }
    private fun t0() {
        M::imm<u64>(Freeze(false)(Borrow(Mutable)(0)));
        M::imm<u64>(Borrow(Immutable)(0));
        M::imm<S>(Freeze(false)(Borrow(Mutable)(pack M::S(false))));
        M::imm<S>(Borrow(Immutable)(pack M::S(false)));
        Tuple()
    }
    private fun t1() {
        M::imm_mut<u64>(Freeze(false)(Borrow(Mutable)(0)), Borrow(Mutable)(0));
        M::mut_imm<u64>(Borrow(Mutable)(0), Freeze(false)(Borrow(Mutable)(0)));
        M::imm_imm<u64>(Freeze(false)(Borrow(Mutable)(0)), Freeze(false)(Borrow(Mutable)(0)));
        Tuple()
    }
    private fun t2(f: |(&u64, &mut u64)|) {
        (f)(Borrow(Mutable)(0), Borrow(Mutable)(0));
        (f)(Borrow(Immutable)(0), Borrow(Mutable)(0));
        Tuple()
    }
} // end 0x8675309::M


// -- Model dump after env processor access and use check before inlining:
module 0x8675309::M {
    struct S {
        dummy_field: bool,
    }
    private fun imm<T>(_x: &T) {
        Tuple()
    }
    private fun imm_imm<T>(_x: &T,_y: &T) {
        Tuple()
    }
    private fun imm_mut<T>(_x: &T,_y: &mut T) {
        Tuple()
    }
    private fun mut_imm<T>(_x: &mut T,_y: &T) {
        Tuple()
    }
    private fun t0() {
        M::imm<u64>(Freeze(false)(Borrow(Mutable)(0)));
        M::imm<u64>(Borrow(Immutable)(0));
        M::imm<S>(Freeze(false)(Borrow(Mutable)(pack M::S(false))));
        M::imm<S>(Borrow(Immutable)(pack M::S(false)));
        Tuple()
    }
    private fun t1() {
        M::imm_mut<u64>(Freeze(false)(Borrow(Mutable)(0)), Borrow(Mutable)(0));
        M::mut_imm<u64>(Borrow(Mutable)(0), Freeze(false)(Borrow(Mutable)(0)));
        M::imm_imm<u64>(Freeze(false)(Borrow(Mutable)(0)), Freeze(false)(Borrow(Mutable)(0)));
        Tuple()
    }
    private fun t2(f: |(&u64, &mut u64)|) {
        (f)(Borrow(Mutable)(0), Borrow(Mutable)(0));
        (f)(Borrow(Immutable)(0), Borrow(Mutable)(0));
        Tuple()
    }
} // end 0x8675309::M


// -- Model dump after env processor inlining:
module 0x8675309::M {
    struct S {
        dummy_field: bool,
    }
    private fun imm<T>(_x: &T) {
        Tuple()
    }
    private fun imm_imm<T>(_x: &T,_y: &T) {
        Tuple()
    }
    private fun imm_mut<T>(_x: &T,_y: &mut T) {
        Tuple()
    }
    private fun mut_imm<T>(_x: &mut T,_y: &T) {
        Tuple()
    }
    private fun t0() {
        M::imm<u64>(Freeze(false)(Borrow(Mutable)(0)));
        M::imm<u64>(Borrow(Immutable)(0));
        M::imm<S>(Freeze(false)(Borrow(Mutable)(pack M::S(false))));
        M::imm<S>(Borrow(Immutable)(pack M::S(false)));
        Tuple()
    }
    private fun t1() {
        M::imm_mut<u64>(Freeze(false)(Borrow(Mutable)(0)), Borrow(Mutable)(0));
        M::mut_imm<u64>(Borrow(Mutable)(0), Freeze(false)(Borrow(Mutable)(0)));
        M::imm_imm<u64>(Freeze(false)(Borrow(Mutable)(0)), Freeze(false)(Borrow(Mutable)(0)));
        Tuple()
    }
    private fun t2(f: |(&u64, &mut u64)|) {
        (f)(Borrow(Mutable)(0), Borrow(Mutable)(0));
        (f)(Borrow(Immutable)(0), Borrow(Mutable)(0));
        Tuple()
    }
} // end 0x8675309::M


// -- Model dump after env processor access and use check after inlining:
module 0x8675309::M {
    struct S {
        dummy_field: bool,
    }
    private fun imm<T>(_x: &T) {
        Tuple()
    }
    private fun imm_imm<T>(_x: &T,_y: &T) {
        Tuple()
    }
    private fun imm_mut<T>(_x: &T,_y: &mut T) {
        Tuple()
    }
    private fun mut_imm<T>(_x: &mut T,_y: &T) {
        Tuple()
    }
    private fun t0() {
        M::imm<u64>(Freeze(false)(Borrow(Mutable)(0)));
        M::imm<u64>(Borrow(Immutable)(0));
        M::imm<S>(Freeze(false)(Borrow(Mutable)(pack M::S(false))));
        M::imm<S>(Borrow(Immutable)(pack M::S(false)));
        Tuple()
    }
    private fun t1() {
        M::imm_mut<u64>(Freeze(false)(Borrow(Mutable)(0)), Borrow(Mutable)(0));
        M::mut_imm<u64>(Borrow(Mutable)(0), Freeze(false)(Borrow(Mutable)(0)));
        M::imm_imm<u64>(Freeze(false)(Borrow(Mutable)(0)), Freeze(false)(Borrow(Mutable)(0)));
        Tuple()
    }
    private fun t2(f: |(&u64, &mut u64)|) {
        (f)(Borrow(Mutable)(0), Borrow(Mutable)(0));
        (f)(Borrow(Immutable)(0), Borrow(Mutable)(0));
        Tuple()
    }
} // end 0x8675309::M


// -- Model dump after env processor acquires check:
module 0x8675309::M {
    struct S {
        dummy_field: bool,
    }
    private fun imm<T>(_x: &T) {
        Tuple()
    }
    private fun imm_imm<T>(_x: &T,_y: &T) {
        Tuple()
    }
    private fun imm_mut<T>(_x: &T,_y: &mut T) {
        Tuple()
    }
    private fun mut_imm<T>(_x: &mut T,_y: &T) {
        Tuple()
    }
    private fun t0() {
        M::imm<u64>(Freeze(false)(Borrow(Mutable)(0)));
        M::imm<u64>(Borrow(Immutable)(0));
        M::imm<S>(Freeze(false)(Borrow(Mutable)(pack M::S(false))));
        M::imm<S>(Borrow(Immutable)(pack M::S(false)));
        Tuple()
    }
    private fun t1() {
        M::imm_mut<u64>(Freeze(false)(Borrow(Mutable)(0)), Borrow(Mutable)(0));
        M::mut_imm<u64>(Borrow(Mutable)(0), Freeze(false)(Borrow(Mutable)(0)));
        M::imm_imm<u64>(Freeze(false)(Borrow(Mutable)(0)), Freeze(false)(Borrow(Mutable)(0)));
        Tuple()
    }
    private fun t2(f: |(&u64, &mut u64)|) {
        (f)(Borrow(Mutable)(0), Borrow(Mutable)(0));
        (f)(Borrow(Immutable)(0), Borrow(Mutable)(0));
        Tuple()
    }
} // end 0x8675309::M


// -- Model dump after env processor simplifier:
module 0x8675309::M {
    struct S {
        dummy_field: bool,
    }
    private fun imm<T>(_x: &T) {
        Tuple()
    }
    private fun imm_imm<T>(_x: &T,_y: &T) {
        Tuple()
    }
    private fun imm_mut<T>(_x: &T,_y: &mut T) {
        Tuple()
    }
    private fun mut_imm<T>(_x: &mut T,_y: &T) {
        Tuple()
    }
    private fun t0() {
        M::imm<u64>(Freeze(false)(Borrow(Mutable)(0)));
        M::imm<u64>(Borrow(Immutable)(0));
        M::imm<S>(Freeze(false)(Borrow(Mutable)(pack M::S(false))));
        M::imm<S>(Borrow(Immutable)(pack M::S(false)));
        Tuple()
    }
    private fun t1() {
        M::imm_mut<u64>(Freeze(false)(Borrow(Mutable)(0)), Borrow(Mutable)(0));
        M::mut_imm<u64>(Borrow(Mutable)(0), Freeze(false)(Borrow(Mutable)(0)));
        M::imm_imm<u64>(Freeze(false)(Borrow(Mutable)(0)), Freeze(false)(Borrow(Mutable)(0)));
        Tuple()
    }
    private fun t2(f: |(&u64, &mut u64)|) {
        (f)(Borrow(Mutable)(0), Borrow(Mutable)(0));
        (f)(Borrow(Immutable)(0), Borrow(Mutable)(0));
        Tuple()
    }
} // end 0x8675309::M


// -- Model dump after env processor lambda-lifting:
module 0x8675309::M {
    struct S {
        dummy_field: bool,
    }
    private fun imm<T>(_x: &T) {
        Tuple()
    }
    private fun imm_imm<T>(_x: &T,_y: &T) {
        Tuple()
    }
    private fun imm_mut<T>(_x: &T,_y: &mut T) {
        Tuple()
    }
    private fun mut_imm<T>(_x: &mut T,_y: &T) {
        Tuple()
    }
    private fun t0() {
        M::imm<u64>(Freeze(false)(Borrow(Mutable)(0)));
        M::imm<u64>(Borrow(Immutable)(0));
        M::imm<S>(Freeze(false)(Borrow(Mutable)(pack M::S(false))));
        M::imm<S>(Borrow(Immutable)(pack M::S(false)));
        Tuple()
    }
    private fun t1() {
        M::imm_mut<u64>(Freeze(false)(Borrow(Mutable)(0)), Borrow(Mutable)(0));
        M::mut_imm<u64>(Borrow(Mutable)(0), Freeze(false)(Borrow(Mutable)(0)));
        M::imm_imm<u64>(Freeze(false)(Borrow(Mutable)(0)), Freeze(false)(Borrow(Mutable)(0)));
        Tuple()
    }
    private fun t2(f: |(&u64, &mut u64)|) {
        (f)(Borrow(Mutable)(0), Borrow(Mutable)(0));
        (f)(Borrow(Immutable)(0), Borrow(Mutable)(0));
        Tuple()
    }
} // end 0x8675309::M


// -- Model dump after env processor specification checker:
module 0x8675309::M {
    struct S {
        dummy_field: bool,
    }
    private fun imm<T>(_x: &T) {
        Tuple()
    }
    private fun imm_imm<T>(_x: &T,_y: &T) {
        Tuple()
    }
    private fun imm_mut<T>(_x: &T,_y: &mut T) {
        Tuple()
    }
    private fun mut_imm<T>(_x: &mut T,_y: &T) {
        Tuple()
    }
    private fun t0() {
        M::imm<u64>(Freeze(false)(Borrow(Mutable)(0)));
        M::imm<u64>(Borrow(Immutable)(0));
        M::imm<S>(Freeze(false)(Borrow(Mutable)(pack M::S(false))));
        M::imm<S>(Borrow(Immutable)(pack M::S(false)));
        Tuple()
    }
    private fun t1() {
        M::imm_mut<u64>(Freeze(false)(Borrow(Mutable)(0)), Borrow(Mutable)(0));
        M::mut_imm<u64>(Borrow(Mutable)(0), Freeze(false)(Borrow(Mutable)(0)));
        M::imm_imm<u64>(Freeze(false)(Borrow(Mutable)(0)), Freeze(false)(Borrow(Mutable)(0)));
        Tuple()
    }
    private fun t2(f: |(&u64, &mut u64)|) {
        (f)(Borrow(Mutable)(0), Borrow(Mutable)(0));
        (f)(Borrow(Immutable)(0), Borrow(Mutable)(0));
        Tuple()
    }
} // end 0x8675309::M


// -- Model dump after env processor specification rewriter:
module 0x8675309::M {
    struct S {
        dummy_field: bool,
    }
    private fun imm<T>(_x: &T) {
        Tuple()
    }
    private fun imm_imm<T>(_x: &T,_y: &T) {
        Tuple()
    }
    private fun imm_mut<T>(_x: &T,_y: &mut T) {
        Tuple()
    }
    private fun mut_imm<T>(_x: &mut T,_y: &T) {
        Tuple()
    }
    private fun t0() {
        M::imm<u64>(Freeze(false)(Borrow(Mutable)(0)));
        M::imm<u64>(Borrow(Immutable)(0));
        M::imm<S>(Freeze(false)(Borrow(Mutable)(pack M::S(false))));
        M::imm<S>(Borrow(Immutable)(pack M::S(false)));
        Tuple()
    }
    private fun t1() {
        M::imm_mut<u64>(Freeze(false)(Borrow(Mutable)(0)), Borrow(Mutable)(0));
        M::mut_imm<u64>(Borrow(Mutable)(0), Freeze(false)(Borrow(Mutable)(0)));
        M::imm_imm<u64>(Freeze(false)(Borrow(Mutable)(0)), Freeze(false)(Borrow(Mutable)(0)));
        Tuple()
    }
    private fun t2(f: |(&u64, &mut u64)|) {
        (f)(Borrow(Mutable)(0), Borrow(Mutable)(0));
        (f)(Borrow(Immutable)(0), Borrow(Mutable)(0));
        Tuple()
    }
} // end 0x8675309::M



Diagnostics:
error: Calls to function values other than inline function parameters not yet implemented
   ┌─ tests/lambda/inline-parity/subtype_args.move:24:9
   │
24 │         f(&mut 0, &mut 0);
   │         ^^^^^^^^^^^^^^^^^

error: Calls to function values other than inline function parameters not yet implemented
   ┌─ tests/lambda/inline-parity/subtype_args.move:25:9
   │
25 │         f(&0, &mut 0);
   │         ^^^^^^^^^^^^^
