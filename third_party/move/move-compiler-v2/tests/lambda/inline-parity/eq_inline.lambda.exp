
Diagnostics:
warning: Unused parameter `f`. Consider removing or prefixing with an underscore: `_f`
  ┌─ tests/lambda/inline-parity/eq_inline.move:3:13
  │
3 │     fun foo(f: |&u64| has drop) {
  │             ^

// -- Model dump before bytecode pipeline
module 0x42::m {
    private fun foo(f: |&u64|) {
        Tuple()
    }
    private fun g() {
        m::foo(closure#0m::__lambda__1__g());
        Tuple()
    }
    private fun __lambda__1__g(v: &u64) {
        Eq<u64>(v, Borrow(Immutable)(1));
        Tuple()
    }
} // end 0x42::m

// -- Sourcified model before bytecode pipeline
module 0x42::m {
    fun foo(f: |&u64|) {
    }
    fun g() {
        foo(|arg0| __lambda__1__g(arg0));
    }
    fun __lambda__1__g(v: &u64) {
        v == &1;
    }
}

============ initial bytecode ================

[variant baseline]
fun m::foo($t0: |&u64|) {
  0: return ()
}


[variant baseline]
fun m::g() {
     var $t0: |&u64|
  0: $t0 := closure#0 m::__lambda__1__g()
  1: m::foo($t0)
  2: return ()
}


[variant baseline]
fun m::__lambda__1__g($t0: &u64) {
     var $t1: bool
     var $t2: &u64
     var $t3: &u64
     var $t4: u64
  0: $t2 := infer($t0)
  1: $t4 := 1
  2: $t3 := borrow_local($t4)
  3: $t1 := ==($t2, $t3)
  4: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::foo($t0: |&u64|) {
     # live vars: $t0
  0: return ()
}


[variant baseline]
fun m::g() {
     var $t0: |&u64|
     # live vars:
  0: $t0 := closure#0 m::__lambda__1__g()
     # live vars: $t0
  1: m::foo($t0)
     # live vars:
  2: return ()
}


[variant baseline]
fun m::__lambda__1__g($t0: &u64) {
     var $t1: bool
     var $t2: &u64 [unused]
     var $t3: &u64
     var $t4: u64
     # live vars: $t0
  0: $t0 := move($t0)
     # live vars: $t0
  1: $t4 := 1
     # live vars: $t0, $t4
  2: $t3 := borrow_local($t4)
     # live vars: $t0, $t3
  3: $t1 := ==($t0, $t3)
     # live vars:
  4: return ()
}


============ disassembled file-format ==================
// Move bytecode v8
module 42.m {


foo(f: |&u64| has drop) /* def_idx: 0 */ {
B0:
	0: Ret
}
g() /* def_idx: 1 */ {
B0:
	0: PackClosure#0 __lambda__1__g(&u64)
	1: Call foo(|&u64| has drop)
	2: Ret
}
__lambda__1__g(v: &u64) /* def_idx: 2 */ {
L1:	$t4: u64
B0:
	0: MoveLoc[0](v: &u64)
	1: LdU64(1)
	2: StLoc[1]($t4: u64)
	3: ImmBorrowLoc[1]($t4: u64)
	4: Eq
	5: Pop
	6: Ret
}
}
============ bytecode verification succeeded ========
