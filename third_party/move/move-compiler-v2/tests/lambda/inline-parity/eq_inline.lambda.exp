// -- Model dump before env processor pipeline:
module 0x42::m {
    private fun foo(f: |&u64|) {
        Tuple()
    }
    private fun g() {
        m::foo(|v: &u64| Eq<u64>(v, Borrow(Immutable)(1));
        Tuple());
        Tuple()
    }
} // end 0x42::m


// -- Model dump after env processor unused checks:
module 0x42::m {
    private fun foo(f: |&u64|) {
        Tuple()
    }
    private fun g() {
        m::foo(|v: &u64| Eq<u64>(v, Borrow(Immutable)(1));
        Tuple());
        Tuple()
    }
} // end 0x42::m


// -- Model dump after env processor type parameter check:
module 0x42::m {
    private fun foo(f: |&u64|) {
        Tuple()
    }
    private fun g() {
        m::foo(|v: &u64| Eq<u64>(v, Borrow(Immutable)(1));
        Tuple());
        Tuple()
    }
} // end 0x42::m


// -- Model dump after env processor check recursive struct definition:
module 0x42::m {
    private fun foo(f: |&u64|) {
        Tuple()
    }
    private fun g() {
        m::foo(|v: &u64| Eq<u64>(v, Borrow(Immutable)(1));
        Tuple());
        Tuple()
    }
} // end 0x42::m


// -- Model dump after env processor check cyclic type instantiation:
module 0x42::m {
    private fun foo(f: |&u64|) {
        Tuple()
    }
    private fun g() {
        m::foo(|v: &u64| Eq<u64>(v, Borrow(Immutable)(1));
        Tuple());
        Tuple()
    }
} // end 0x42::m


// -- Model dump after env processor unused struct params check:
module 0x42::m {
    private fun foo(f: |&u64|) {
        Tuple()
    }
    private fun g() {
        m::foo(|v: &u64| Eq<u64>(v, Borrow(Immutable)(1));
        Tuple());
        Tuple()
    }
} // end 0x42::m


// -- Model dump after env processor access and use check before inlining:
module 0x42::m {
    private fun foo(f: |&u64|) {
        Tuple()
    }
    private fun g() {
        m::foo(|v: &u64| Eq<u64>(v, Borrow(Immutable)(1));
        Tuple());
        Tuple()
    }
} // end 0x42::m


// -- Model dump after env processor inlining:
module 0x42::m {
    private fun foo(f: |&u64|) {
        Tuple()
    }
    private fun g() {
        m::foo(|v: &u64| Eq<u64>(v, Borrow(Immutable)(1));
        Tuple());
        Tuple()
    }
} // end 0x42::m


// -- Model dump after env processor access and use check after inlining:
module 0x42::m {
    private fun foo(f: |&u64|) {
        Tuple()
    }
    private fun g() {
        m::foo(|v: &u64| Eq<u64>(v, Borrow(Immutable)(1));
        Tuple());
        Tuple()
    }
} // end 0x42::m


// -- Model dump after env processor acquires check:
module 0x42::m {
    private fun foo(f: |&u64|) {
        Tuple()
    }
    private fun g() {
        m::foo(|v: &u64| Eq<u64>(v, Borrow(Immutable)(1));
        Tuple());
        Tuple()
    }
} // end 0x42::m


// -- Model dump after env processor simplifier:
module 0x42::m {
    private fun foo(f: |&u64|) {
        Tuple()
    }
    private fun g() {
        m::foo(|v: &u64| Eq<u64>(v, Borrow(Immutable)(1));
        Tuple());
        Tuple()
    }
} // end 0x42::m



Diagnostics:
warning: Unused parameter `f`. Consider removing or prefixing with an underscore: `_f`
  ┌─ tests/lambda/inline-parity/eq_inline.move:3:13
  │
3 │     fun foo(f: |&u64|) {
  │             ^

error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
  ┌─ tests/lambda/inline-parity/eq_inline.move:7:13
  │
7 │           foo(|v| {
  │ ╭─────────────^
8 │ │             v == &1;
9 │ │         });
  │ ╰─────────^
