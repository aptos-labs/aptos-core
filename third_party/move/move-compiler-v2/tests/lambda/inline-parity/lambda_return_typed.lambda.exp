// -- Model dump before env processor pipeline:
module 0x42::LambdaReturn {
    public inline fun inline_apply2(f: |u64|u64,b: u64): u64 {
        return (f)(b)
    }
    private fun test_lambda_symbol_param() {
        {
          let a: u64 = LambdaReturn::inline_apply2(|x: u64| x, 3);
          if Eq<u64>(a, 3) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
} // end 0x42::LambdaReturn


// -- Model dump after env processor unused checks:
module 0x42::LambdaReturn {
    public inline fun inline_apply2(f: |u64|u64,b: u64): u64 {
        return (f)(b)
    }
    private fun test_lambda_symbol_param() {
        {
          let a: u64 = LambdaReturn::inline_apply2(|x: u64| x, 3);
          if Eq<u64>(a, 3) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
} // end 0x42::LambdaReturn


// -- Model dump after env processor type parameter check:
module 0x42::LambdaReturn {
    public inline fun inline_apply2(f: |u64|u64,b: u64): u64 {
        return (f)(b)
    }
    private fun test_lambda_symbol_param() {
        {
          let a: u64 = LambdaReturn::inline_apply2(|x: u64| x, 3);
          if Eq<u64>(a, 3) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
} // end 0x42::LambdaReturn


// -- Model dump after env processor check recursive struct definition:
module 0x42::LambdaReturn {
    public inline fun inline_apply2(f: |u64|u64,b: u64): u64 {
        return (f)(b)
    }
    private fun test_lambda_symbol_param() {
        {
          let a: u64 = LambdaReturn::inline_apply2(|x: u64| x, 3);
          if Eq<u64>(a, 3) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
} // end 0x42::LambdaReturn


// -- Model dump after env processor check cyclic type instantiation:
module 0x42::LambdaReturn {
    public inline fun inline_apply2(f: |u64|u64,b: u64): u64 {
        return (f)(b)
    }
    private fun test_lambda_symbol_param() {
        {
          let a: u64 = LambdaReturn::inline_apply2(|x: u64| x, 3);
          if Eq<u64>(a, 3) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
} // end 0x42::LambdaReturn


// -- Model dump after env processor unused struct params check:
module 0x42::LambdaReturn {
    public inline fun inline_apply2(f: |u64|u64,b: u64): u64 {
        return (f)(b)
    }
    private fun test_lambda_symbol_param() {
        {
          let a: u64 = LambdaReturn::inline_apply2(|x: u64| x, 3);
          if Eq<u64>(a, 3) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
} // end 0x42::LambdaReturn


// -- Model dump after env processor access and use check before inlining:
module 0x42::LambdaReturn {
    public inline fun inline_apply2(f: |u64|u64,b: u64): u64 {
        return (f)(b)
    }
    private fun test_lambda_symbol_param() {
        {
          let a: u64 = LambdaReturn::inline_apply2(|x: u64| x, 3);
          if Eq<u64>(a, 3) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
} // end 0x42::LambdaReturn



Diagnostics:
error: Return not currently supported in inline functions
  ┌─ tests/lambda/inline-parity/lambda_return_typed.move:3:2
  │
3 │     return f(b)
  │     ^^^^^^^^^^^
