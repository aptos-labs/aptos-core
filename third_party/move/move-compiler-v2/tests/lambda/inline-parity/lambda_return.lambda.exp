// -- Model dump before bytecode pipeline
module 0x42::LambdaReturn {
    public fun inline_apply2(f: |u64|u64,b: u64): u64 {
        return (f)(b)
    }
    private fun test_lambda_symbol_param() {
        {
          let a: u64 = LambdaReturn::inline_apply2(closure#0LambdaReturn::__lambda__1__test_lambda_symbol_param(), 3);
          if Eq<u64>(a, 3) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
    private fun __lambda__1__test_lambda_symbol_param(x: u64): u64 {
        x
    }
} // end 0x42::LambdaReturn

// -- Sourcified model before bytecode pipeline
module 0x42::LambdaReturn {
    public fun inline_apply2(f: |u64|u64, b: u64): u64 {
        f(b)
    }
    fun test_lambda_symbol_param() {
        let a = inline_apply2(|arg0| __lambda__1__test_lambda_symbol_param(arg0), 3);
        if (a == 3) () else abort 0;
    }
    fun __lambda__1__test_lambda_symbol_param(x: u64): u64 {
        x
    }
}

============ initial bytecode ================

[variant baseline]
public fun LambdaReturn::inline_apply2($t0: |u64|u64, $t1: u64): u64 {
     var $t2: u64
     var $t3: u64
  0: $t3 := infer($t1)
  1: $t2 := invoke($t3, $t0)
  2: return $t2
  3: return $t2
}


[variant baseline]
fun LambdaReturn::test_lambda_symbol_param() {
     var $t0: u64
     var $t1: |u64|u64
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: u64
     var $t6: u64
  0: $t1 := closure#0 LambdaReturn::__lambda__1__test_lambda_symbol_param()
  1: $t2 := 3
  2: $t0 := LambdaReturn::inline_apply2($t1, $t2)
  3: $t4 := infer($t0)
  4: $t5 := 3
  5: $t3 := ==($t4, $t5)
  6: if ($t3) goto 7 else goto 9
  7: label L0
  8: goto 12
  9: label L1
 10: $t6 := 0
 11: abort($t6)
 12: label L2
 13: return ()
}


[variant baseline]
fun LambdaReturn::__lambda__1__test_lambda_symbol_param($t0: u64): u64 {
     var $t1: u64
  0: $t1 := infer($t0)
  1: return $t1
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun LambdaReturn::inline_apply2($t0: |u64|u64, $t1: u64): u64 {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     # live vars: $t0, $t1
  0: $t1 := move($t1)
     # live vars: $t0, $t1
  1: $t1 := invoke($t1, $t0)
     # live vars: $t1
  2: return $t1
}


[variant baseline]
fun LambdaReturn::test_lambda_symbol_param() {
     var $t0: u64 [unused]
     var $t1: |u64|u64
     var $t2: u64
     var $t3: bool
     var $t4: u64 [unused]
     var $t5: u64
     var $t6: u64 [unused]
     # live vars:
  0: $t1 := closure#0 LambdaReturn::__lambda__1__test_lambda_symbol_param()
     # live vars: $t1
  1: $t2 := 3
     # live vars: $t1, $t2
  2: $t2 := LambdaReturn::inline_apply2($t1, $t2)
     # live vars: $t2
  3: $t2 := move($t2)
     # live vars: $t2
  4: $t5 := 3
     # live vars: $t2, $t5
  5: $t3 := ==($t2, $t5)
     # live vars: $t3
  6: if ($t3) goto 7 else goto 9
     # live vars:
  7: label L0
     # live vars:
  8: return ()
     # live vars:
  9: label L1
     # live vars:
 10: $t2 := 0
     # live vars: $t2
 11: abort($t2)
}


[variant baseline]
fun LambdaReturn::__lambda__1__test_lambda_symbol_param($t0: u64): u64 {
     var $t1: u64 [unused]
     # live vars: $t0
  0: return $t0
}


============ disassembled file-format ==================
// Move bytecode v8
module 42.LambdaReturn {


public inline_apply2(f: |u64|u64, b: u64): u64 /* def_idx: 0 */ {
B0:
	0: MoveLoc[1](b: u64)
	1: MoveLoc[0](f: |u64|u64)
	2: CallClosure(|u64|u64)
	3: Ret
}
test_lambda_symbol_param() /* def_idx: 1 */ {
B0:
	0: PackClosure#0 __lambda__1__test_lambda_symbol_param(u64): u64
	1: LdU64(3)
	2: Call inline_apply2(|u64|u64, u64): u64
	3: LdU64(3)
	4: Eq
	5: BrFalse(7)
B1:
	6: Ret
B2:
	7: LdU64(0)
	8: Abort
}
__lambda__1__test_lambda_symbol_param(x: u64): u64 /* def_idx: 2 */ {
B0:
	0: MoveLoc[0](x: u64)
	1: Ret
}
}
============ bytecode verification succeeded ========
