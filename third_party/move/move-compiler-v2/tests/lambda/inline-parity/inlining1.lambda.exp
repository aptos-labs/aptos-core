// -- Model dump before env processor pipeline:
module 0x42::Test {
    private fun foo(f: |u64|u64,x: u64): u64 {
        (f)(x)
    }
    public fun main() {
        if Eq<u64>(Test::test(), 3) {
          Tuple()
        } else {
          Abort(5)
        };
        Tuple()
    }
    public fun test(): u64 {
        Test::foo(|_: u64| 3, 10)
    }
} // end 0x42::Test


// -- Model dump after env processor unused checks:
module 0x42::Test {
    private fun foo(f: |u64|u64,x: u64): u64 {
        (f)(x)
    }
    public fun main() {
        if Eq<u64>(Test::test(), 3) {
          Tuple()
        } else {
          Abort(5)
        };
        Tuple()
    }
    public fun test(): u64 {
        Test::foo(|_: u64| 3, 10)
    }
} // end 0x42::Test


// -- Model dump after env processor type parameter check:
module 0x42::Test {
    private fun foo(f: |u64|u64,x: u64): u64 {
        (f)(x)
    }
    public fun main() {
        if Eq<u64>(Test::test(), 3) {
          Tuple()
        } else {
          Abort(5)
        };
        Tuple()
    }
    public fun test(): u64 {
        Test::foo(|_: u64| 3, 10)
    }
} // end 0x42::Test


// -- Model dump after env processor check recursive struct definition:
module 0x42::Test {
    private fun foo(f: |u64|u64,x: u64): u64 {
        (f)(x)
    }
    public fun main() {
        if Eq<u64>(Test::test(), 3) {
          Tuple()
        } else {
          Abort(5)
        };
        Tuple()
    }
    public fun test(): u64 {
        Test::foo(|_: u64| 3, 10)
    }
} // end 0x42::Test


// -- Model dump after env processor check cyclic type instantiation:
module 0x42::Test {
    private fun foo(f: |u64|u64,x: u64): u64 {
        (f)(x)
    }
    public fun main() {
        if Eq<u64>(Test::test(), 3) {
          Tuple()
        } else {
          Abort(5)
        };
        Tuple()
    }
    public fun test(): u64 {
        Test::foo(|_: u64| 3, 10)
    }
} // end 0x42::Test


// -- Model dump after env processor unused struct params check:
module 0x42::Test {
    private fun foo(f: |u64|u64,x: u64): u64 {
        (f)(x)
    }
    public fun main() {
        if Eq<u64>(Test::test(), 3) {
          Tuple()
        } else {
          Abort(5)
        };
        Tuple()
    }
    public fun test(): u64 {
        Test::foo(|_: u64| 3, 10)
    }
} // end 0x42::Test


// -- Model dump after env processor access and use check before inlining:
module 0x42::Test {
    private fun foo(f: |u64|u64,x: u64): u64 {
        (f)(x)
    }
    public fun main() {
        if Eq<u64>(Test::test(), 3) {
          Tuple()
        } else {
          Abort(5)
        };
        Tuple()
    }
    public fun test(): u64 {
        Test::foo(|_: u64| 3, 10)
    }
} // end 0x42::Test


// -- Model dump after env processor inlining:
module 0x42::Test {
    private fun foo(f: |u64|u64,x: u64): u64 {
        (f)(x)
    }
    public fun main() {
        if Eq<u64>(Test::test(), 3) {
          Tuple()
        } else {
          Abort(5)
        };
        Tuple()
    }
    public fun test(): u64 {
        Test::foo(|_: u64| 3, 10)
    }
} // end 0x42::Test


// -- Model dump after env processor access and use check after inlining:
module 0x42::Test {
    private fun foo(f: |u64|u64,x: u64): u64 {
        (f)(x)
    }
    public fun main() {
        if Eq<u64>(Test::test(), 3) {
          Tuple()
        } else {
          Abort(5)
        };
        Tuple()
    }
    public fun test(): u64 {
        Test::foo(|_: u64| 3, 10)
    }
} // end 0x42::Test


// -- Model dump after env processor acquires check:
module 0x42::Test {
    private fun foo(f: |u64|u64,x: u64): u64 {
        (f)(x)
    }
    public fun main() {
        if Eq<u64>(Test::test(), 3) {
          Tuple()
        } else {
          Abort(5)
        };
        Tuple()
    }
    public fun test(): u64 {
        Test::foo(|_: u64| 3, 10)
    }
} // end 0x42::Test


// -- Model dump after env processor simplifier:
module 0x42::Test {
    private fun foo(f: |u64|u64,x: u64): u64 {
        (f)(x)
    }
    public fun main() {
        if Eq<u64>(Test::test(), 3) {
          Tuple()
        } else {
          Abort(5)
        };
        Tuple()
    }
    public fun test(): u64 {
        Test::foo(|_: u64| 3, 10)
    }
} // end 0x42::Test



Diagnostics:
error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
  ┌─ tests/lambda/inline-parity/inlining1.move:8:13
  │
8 │         foo(|_| 3, 10)
  │             ^^^^^
