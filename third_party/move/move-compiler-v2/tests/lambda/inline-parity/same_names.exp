// -- Model dump before bytecode pipeline
module 0x42::a {
    struct MyList {
        len: u64,
    }
    public fun len(self: &MyList): u64 {
        select a::MyList.len<&MyList>(self)
    }
} // end 0x42::a
module 0x42::b {
    struct MyOtherList {
        len: u64,
    }
    public fun len(self: &MyOtherList): u64 {
        select b::MyOtherList.len<&MyOtherList>(self)
    }
} // end 0x42::b
module 0x42::c {
    use 0x42::a; // resolved as: 0x42::a
    use 0x42::b; // resolved as: 0x42::b
    private fun foo(f: |(a::MyList, b::MyOtherList)|,x: a::MyList,y: b::MyOtherList) {
        (f)(x, y)
    }
    private fun test(x: a::MyList,y: b::MyOtherList) {
        c::foo(closure#0c::__lambda__1__test(), x, y)
    }
    private fun __lambda__1__test(x: a::MyList,y: b::MyOtherList) {
        if Eq<u64>(Add<u64>(a::len(Borrow(Immutable)(x)), b::len(Borrow(Immutable)(y))), 1) {
          Tuple()
        } else {
          Abort(1)
        }
    }
} // end 0x42::c

// -- Sourcified model before bytecode pipeline
module 0x42::a {
    struct MyList has drop {
        len: u64,
    }
    public fun len(self: &MyList): u64 {
        self.len
    }
}
module 0x42::b {
    struct MyOtherList has drop {
        len: u64,
    }
    public fun len(self: &MyOtherList): u64 {
        self.len
    }
}
module 0x42::c {
    use 0x42::a;
    use 0x42::b;
    fun foo(f: |(a::MyList, b::MyOtherList)|, x: a::MyList, y: b::MyOtherList) {
        f(x, y)
    }
    fun test(x: a::MyList, y: b::MyOtherList) {
        foo(|(arg0,arg1)| __lambda__1__test(arg0, arg1), x, y)
    }
    fun __lambda__1__test(x: a::MyList, y: b::MyOtherList) {
        if (a::len(&x) + b::len(&y) == 1) () else abort 1
    }
}

============ initial bytecode ================

[variant baseline]
public fun a::len($t0: &0x42::a::MyList): u64 {
     var $t1: u64
     var $t2: &u64
  0: $t2 := borrow_field<0x42::a::MyList>.len($t0)
  1: $t1 := read_ref($t2)
  2: return $t1
}


[variant baseline]
public fun b::len($t0: &0x42::b::MyOtherList): u64 {
     var $t1: u64
     var $t2: &u64
  0: $t2 := borrow_field<0x42::b::MyOtherList>.len($t0)
  1: $t1 := read_ref($t2)
  2: return $t1
}


[variant baseline]
fun c::foo($t0: |(0x42::a::MyList, 0x42::b::MyOtherList)|, $t1: 0x42::a::MyList, $t2: 0x42::b::MyOtherList) {
     var $t3: 0x42::a::MyList
  0: $t3 := infer($t1)
  1: invoke($t3, $t2, $t0)
  2: return ()
}


[variant baseline]
fun c::test($t0: 0x42::a::MyList, $t1: 0x42::b::MyOtherList) {
     var $t2: |(0x42::a::MyList, 0x42::b::MyOtherList)|
     var $t3: 0x42::a::MyList
  0: $t2 := closure#0 c::__lambda__1__test()
  1: $t3 := infer($t0)
  2: c::foo($t2, $t3, $t1)
  3: return ()
}


[variant baseline]
fun c::__lambda__1__test($t0: 0x42::a::MyList, $t1: 0x42::b::MyOtherList) {
     var $t2: bool
     var $t3: u64
     var $t4: u64
     var $t5: &0x42::a::MyList
     var $t6: u64
     var $t7: &0x42::b::MyOtherList
     var $t8: u64
     var $t9: u64
  0: $t5 := borrow_local($t0)
  1: $t4 := a::len($t5)
  2: $t7 := borrow_local($t1)
  3: $t6 := b::len($t7)
  4: $t3 := +($t4, $t6)
  5: $t8 := 1
  6: $t2 := ==($t3, $t8)
  7: if ($t2) goto 8 else goto 10
  8: label L0
  9: goto 13
 10: label L1
 11: $t9 := 1
 12: abort($t9)
 13: label L2
 14: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun a::len($t0: &0x42::a::MyList): u64 {
     var $t1: u64
     var $t2: &u64
     # live vars: $t0
  0: $t2 := borrow_field<0x42::a::MyList>.len($t0)
     # live vars: $t2
  1: $t1 := read_ref($t2)
     # live vars: $t1
  2: return $t1
}


[variant baseline]
public fun b::len($t0: &0x42::b::MyOtherList): u64 {
     var $t1: u64
     var $t2: &u64
     # live vars: $t0
  0: $t2 := borrow_field<0x42::b::MyOtherList>.len($t0)
     # live vars: $t2
  1: $t1 := read_ref($t2)
     # live vars: $t1
  2: return $t1
}


[variant baseline]
fun c::foo($t0: |(0x42::a::MyList, 0x42::b::MyOtherList)|, $t1: 0x42::a::MyList, $t2: 0x42::b::MyOtherList) {
     var $t3: 0x42::a::MyList [unused]
     # live vars: $t0, $t1, $t2
  0: $t1 := move($t1)
     # live vars: $t0, $t1, $t2
  1: invoke($t1, $t2, $t0)
     # live vars:
  2: return ()
}


[variant baseline]
fun c::test($t0: 0x42::a::MyList, $t1: 0x42::b::MyOtherList) {
     var $t2: |(0x42::a::MyList, 0x42::b::MyOtherList)|
     var $t3: 0x42::a::MyList [unused]
     # live vars: $t0, $t1
  0: $t2 := closure#0 c::__lambda__1__test()
     # live vars: $t0, $t1, $t2
  1: $t0 := move($t0)
     # live vars: $t0, $t1, $t2
  2: c::foo($t2, $t0, $t1)
     # live vars:
  3: return ()
}


[variant baseline]
fun c::__lambda__1__test($t0: 0x42::a::MyList, $t1: 0x42::b::MyOtherList) {
     var $t2: bool
     var $t3: u64 [unused]
     var $t4: u64
     var $t5: &0x42::a::MyList
     var $t6: u64
     var $t7: &0x42::b::MyOtherList
     var $t8: u64 [unused]
     var $t9: u64 [unused]
     # live vars: $t0, $t1
  0: $t5 := borrow_local($t0)
     # live vars: $t1, $t5
  1: $t4 := a::len($t5)
     # live vars: $t1, $t4
  2: $t7 := borrow_local($t1)
     # live vars: $t4, $t7
  3: $t6 := b::len($t7)
     # live vars: $t4, $t6
  4: $t4 := +($t4, $t6)
     # live vars: $t4
  5: $t6 := 1
     # live vars: $t4, $t6
  6: $t2 := ==($t4, $t6)
     # live vars: $t2
  7: if ($t2) goto 8 else goto 10
     # live vars:
  8: label L0
     # live vars:
  9: return ()
     # live vars:
 10: label L1
     # live vars:
 11: $t4 := 1
     # live vars: $t4
 12: abort($t4)
}


============ disassembled file-format ==================
// Move bytecode v8
module 42.a {
struct MyList has drop {
	len: u64
}

public len(self: &MyList): u64 /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](self: &MyList)
	1: ImmBorrowField[0](MyList.len: u64)
	2: ReadRef
	3: Ret
}
}// Move bytecode v8
module 42.b {
struct MyOtherList has drop {
	len: u64
}

public len(self: &MyOtherList): u64 /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](self: &MyOtherList)
	1: ImmBorrowField[0](MyOtherList.len: u64)
	2: ReadRef
	3: Ret
}
}// Move bytecode v8
module 42.c {
use 0000000000000000000000000000000000000000000000000000000000000042::a;
use 0000000000000000000000000000000000000000000000000000000000000042::b;




foo(f: |MyList,MyOtherList|, x: MyList, y: MyOtherList) /* def_idx: 0 */ {
B0:
	0: MoveLoc[1](x: MyList)
	1: MoveLoc[2](y: MyOtherList)
	2: MoveLoc[0](f: |MyList,MyOtherList|)
	3: CallClosure(|MyList,MyOtherList|)
	4: Ret
}
test(x: MyList, y: MyOtherList) /* def_idx: 1 */ {
B0:
	0: PackClosure#0 __lambda__1__test(MyList, MyOtherList)
	1: MoveLoc[0](x: MyList)
	2: MoveLoc[1](y: MyOtherList)
	3: Call foo(|MyList,MyOtherList|, MyList, MyOtherList)
	4: Ret
}
__lambda__1__test(x: MyList, y: MyOtherList) /* def_idx: 2 */ {
B0:
	0: ImmBorrowLoc[0](x: MyList)
	1: Call a::len(&MyList): u64
	2: ImmBorrowLoc[1](y: MyOtherList)
	3: Call b::len(&MyOtherList): u64
	4: Add
	5: LdU64(1)
	6: Eq
	7: BrFalse(9)
B1:
	8: Ret
B2:
	9: LdU64(1)
	10: Abort
}
}
============ bytecode verification succeeded ========
