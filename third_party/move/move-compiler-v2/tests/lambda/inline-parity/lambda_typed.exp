// -- Model dump before bytecode pipeline
module 0x42::LambdaTest1 {
    public inline fun inline_apply(f: |u64|u64,b: u64): u64 {
        (f)(b)
    }
    public inline fun inline_apply1(f: |u64|u64,b: u64): u64 {
        {
          let (a: u64, b: u64): (u64, u64) = Tuple(Add<u64>((f)(b), 1), 12);
          Mul<u64>(a, 12)
        }
    }
    public inline fun inline_mul(a: u64,b: u64): u64 {
        Mul<u64>(a, b)
    }
} // end 0x42::LambdaTest1
module 0x42::LambdaTest2 {
    use 0x42::LambdaTest1; // resolved as: 0x42::LambdaTest1
    use std::vector;
    public inline fun foreach<T>(v: &vector<T>,action: |&T|) {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, vector::length<T>(v)) {
              (action)(vector::borrow<T>(v, i));
              i: u64 = Add<u64>(i, 1);
              Tuple()
            } else {
              break
            }
          }
        }
    }
    public inline fun inline_apply2(g: |u64|u64,c: u64): u64 {
        Add<u64>({
          let (b: u64): (u64) = Tuple((g)({
            let (a: u64, b: u64): (u64, u64) = Tuple(c, 3);
            Mul<u64>(a, 3)
          }));
          {
            let (a: u64, b: u64): (u64, u64) = Tuple(Add<u64>({
              let (z: u64): (u64) = Tuple(b);
              z
            }, 1), 12);
            Mul<u64>(a, 12)
          }
        }, 2)
    }
    public inline fun inline_apply3(g: |u64|u64,c: u64): u64 {
        Add<u64>(LambdaTest1::inline_apply1(g, LambdaTest1::inline_mul(c, LambdaTest1::inline_apply(|x: u64| LambdaTest1::inline_apply(|y: u64| y, x), 3))), 4)
    }
    public fun test_inline_lambda() {
        {
          let product: u64 = 1;
          {
            let (v: &vector<u64>): (&vector<u64>) = Tuple(Borrow(Immutable)([Number(1), Number(2), Number(3)]));
            {
              let i: u64 = 0;
              loop {
                if Lt<u64>(i, vector::length<u64>(v)) {
                  {
                    let (e: &u64): (&u64) = Tuple(vector::borrow<u64>(v, i));
                    product: u64 = {
                      let (a: u64, b: u64): (u64, u64) = Tuple(product, Deref(e));
                      Mul<u64>(a, b)
                    }
                  };
                  i: u64 = Add<u64>(i, 1);
                  Tuple()
                } else {
                  break
                }
              }
            }
          };
          Tuple()
        }
    }
} // end 0x42::LambdaTest2
module 0x42::LambdaTest {
    use 0x42::LambdaTest2; // resolved as: 0x42::LambdaTest2
    public inline fun inline_apply(f: |u64|u64,b: u64): u64 {
        (f)(b)
    }
    public inline fun inline_apply_test(): u64 {
        1120
    }
    private fun test_lambda() {
        if false {
          Tuple()
        } else {
          Abort(0)
        };
        Tuple()
    }
} // end 0x42::LambdaTest

// -- Sourcified model before bytecode pipeline
module 0x42::LambdaTest1 {
    public inline fun inline_apply(f: |u64|u64, b: u64): u64 {
        f(b)
    }
    public inline fun inline_apply1(f: |u64|u64, b: u64): u64 {
        let (a,b) = (f(b) + 1, 12);
        a * 12
    }
    public inline fun inline_mul(a: u64, b: u64): u64 {
        a * b
    }
}
module 0x42::LambdaTest2 {
    use 0x42::LambdaTest1;
    public inline fun foreach<T>(v: &vector<T>, action: |&T|) {
        let i = 0;
        while (i < 0x1::vector::length<T>(v)) {
            action(0x1::vector::borrow<T>(v, i));
            i = i + 1;
        }
    }
    public inline fun inline_apply2(g: |u64|u64, c: u64): u64 {
        {
            let (b) = (g({
                let (a,b) = (c, 3);
                a * 3
            }));
            let (a,b) = ({
                let (z) = (b);
                z
            } + 1, 12);
            a * 12
        } + 2
    }
    public inline fun inline_apply3(g: |u64|u64, c: u64): u64 {
        LambdaTest1::inline_apply1(g, LambdaTest1::inline_mul(c, LambdaTest1::inline_apply(|x| LambdaTest1::inline_apply(|y| y, x), 3))) + 4
    }
    public fun test_inline_lambda() {
        let product = 1;
        {
            let (v) = (&vector[1, 2, 3]);
            let i = 0;
            while (i < 0x1::vector::length<u64>(v)) {
                {
                    let (e) = (0x1::vector::borrow<u64>(v, i));
                    product = {
                        let (a,b) = (product, *e);
                        a * b
                    }
                };
                i = i + 1;
            }
        };
    }
}
module 0x42::LambdaTest {
    use 0x42::LambdaTest2;
    public inline fun inline_apply(f: |u64|u64, b: u64): u64 {
        f(b)
    }
    public inline fun inline_apply_test(): u64 {
        1120
    }
    fun test_lambda() {
        if (false) () else abort 0;
    }
}

============ initial bytecode ================

[variant baseline]
public fun LambdaTest2::test_inline_lambda() {
     var $t0: u64
     var $t1: &vector<u64>
     var $t2: &vector<u64>
     var $t3: vector<u64>
     var $t4: u64
     var $t5: bool
     var $t6: u64
     var $t7: u64
     var $t8: &u64
     var $t9: &u64
     var $t10: &vector<u64>
     var $t11: u64
     var $t12: u64
     var $t13: u64
     var $t14: u64
     var $t15: u64
     var $t16: u64
     var $t17: u64
     var $t18: u64
  0: $t0 := 1
  1: $t3 := ["1", "2", "3"]
  2: $t2 := borrow_local($t3)
  3: $t1 := infer($t2)
  4: $t4 := 0
  5: label L0
  6: $t6 := infer($t4)
  7: $t7 := vector::length<u64>($t1)
  8: $t5 := <($t6, $t7)
  9: if ($t5) goto 10 else goto 25
 10: label L2
 11: $t10 := infer($t1)
 12: $t9 := vector::borrow<u64>($t10, $t4)
 13: $t8 := infer($t9)
 14: $t12 := infer($t0)
 15: $t14 := read_ref($t8)
 16: $t13 := infer($t14)
 17: $t15 := infer($t12)
 18: $t11 := *($t15, $t13)
 19: $t0 := infer($t11)
 20: $t17 := infer($t4)
 21: $t18 := 1
 22: $t16 := +($t17, $t18)
 23: $t4 := infer($t16)
 24: goto 27
 25: label L3
 26: goto 29
 27: label L4
 28: goto 5
 29: label L1
 30: return ()
}


[variant baseline]
fun LambdaTest::test_lambda() {
     var $t0: bool
     var $t1: u64
  0: $t0 := false
  1: if ($t0) goto 2 else goto 4
  2: label L0
  3: goto 7
  4: label L1
  5: $t1 := 0
  6: abort($t1)
  7: label L2
  8: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun LambdaTest2::test_inline_lambda() {
     var $t0: u64
     var $t1: &vector<u64> [unused]
     var $t2: &vector<u64>
     var $t3: vector<u64>
     var $t4: u64
     var $t5: bool
     var $t6: u64
     var $t7: u64
     var $t8: &u64 [unused]
     var $t9: &u64
     var $t10: &vector<u64>
     var $t11: u64 [unused]
     var $t12: u64 [unused]
     var $t13: u64 [unused]
     var $t14: u64 [unused]
     var $t15: u64 [unused]
     var $t16: u64 [unused]
     var $t17: u64 [unused]
     var $t18: u64 [unused]
     # live vars:
  0: $t0 := 1
     # live vars: $t0
  1: $t3 := ["1", "2", "3"]
     # live vars: $t0, $t3
  2: $t2 := borrow_local($t3)
     # live vars: $t0, $t2
  3: $t4 := 0
     # live vars: $t0, $t2, $t4
  4: label L0
     # live vars: $t0, $t2, $t4
  5: $t6 := copy($t4)
     # live vars: $t0, $t2, $t4, $t6
  6: $t7 := vector::length<u64>($t2)
     # live vars: $t0, $t2, $t4, $t6, $t7
  7: $t5 := <($t6, $t7)
     # live vars: $t0, $t2, $t4, $t5
  8: if ($t5) goto 9 else goto 22
     # live vars: $t0, $t2, $t4
  9: label L2
     # live vars: $t0, $t2, $t4
 10: $t10 := copy($t2)
     # live vars: $t0, $t2, $t4, $t10
 11: $t9 := vector::borrow<u64>($t10, $t4)
     # live vars: $t0, $t2, $t4, $t9
 12: $t6 := move($t0)
     # live vars: $t2, $t4, $t6, $t9
 13: $t7 := read_ref($t9)
     # live vars: $t2, $t4, $t6, $t7
 14: $t6 := move($t6)
     # live vars: $t2, $t4, $t6, $t7
 15: $t6 := *($t6, $t7)
     # live vars: $t2, $t4, $t6
 16: $t0 := move($t6)
     # live vars: $t0, $t2, $t4
 17: $t6 := move($t4)
     # live vars: $t0, $t2, $t6
 18: $t7 := 1
     # live vars: $t0, $t2, $t6, $t7
 19: $t6 := +($t6, $t7)
     # live vars: $t0, $t2, $t6
 20: $t4 := move($t6)
     # live vars: $t0, $t2, $t4
 21: goto 4
     # live vars: $t0, $t2, $t4
 22: label L3
     # live vars: $t2
 23: drop($t2)
     # live vars:
 24: return ()
}


[variant baseline]
fun LambdaTest::test_lambda() {
     var $t0: bool
     var $t1: u64
     # live vars:
  0: $t0 := false
     # live vars: $t0
  1: if ($t0) goto 2 else goto 4
     # live vars:
  2: label L0
     # live vars:
  3: return ()
     # live vars:
  4: label L1
     # live vars:
  5: $t1 := 0
     # live vars: $t1
  6: abort($t1)
}


============ disassembled file-format ==================
// Move bytecode v8
module 42.LambdaTest1 {



}// Move bytecode v8
module 42.LambdaTest2 {


public test_inline_lambda() /* def_idx: 0 */ {
L0:	product: u64
L1:	$t3: vector<u64>
L2:	$t2: &vector<u64>
L3:	i: u64
L4:	$t9: &u64
L5:	$t7: u64
L6:	$t6: u64
B0:
	0: LdU64(1)
	1: StLoc[0](product: u64)
	2: LdConst[0](Vector(U64): [3, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0])
	3: StLoc[1]($t3: vector<u64>)
	4: ImmBorrowLoc[1]($t3: vector<u64>)
	5: StLoc[2]($t2: &vector<u64>)
	6: LdU64(0)
	7: StLoc[3](i: u64)
B1:
	8: CopyLoc[3](i: u64)
	9: CopyLoc[2]($t2: &vector<u64>)
	10: VecLen(1)
	11: Lt
	12: BrFalse(27)
B2:
	13: CopyLoc[2]($t2: &vector<u64>)
	14: CopyLoc[3](i: u64)
	15: VecImmBorrow(1)
	16: StLoc[4]($t9: &u64)
	17: MoveLoc[0](product: u64)
	18: MoveLoc[4]($t9: &u64)
	19: ReadRef
	20: Mul
	21: StLoc[0](product: u64)
	22: MoveLoc[3](i: u64)
	23: LdU64(1)
	24: Add
	25: StLoc[3](i: u64)
	26: Branch(8)
B3:
	27: MoveLoc[2]($t2: &vector<u64>)
	28: Pop
	29: Ret
}
}// Move bytecode v8
module 42.LambdaTest {


test_lambda() /* def_idx: 0 */ {
B0:
	0: Branch(2)
B1:
	1: Ret
B2:
	2: LdU64(0)
	3: Abort
}
}
============ bytecode verification succeeded ========
