// -- Model dump before bytecode pipeline
module 0xc0ffee::m {
    private fun apply(f: |u8|bool,x: u8): bool {
        (f)(x)
    }
    private fun bar() {
        Tuple()
    }
    private fun foo<T>(x: T): T {
        x
    }
    public fun test1(x: u8) {
        if Gt<u8>(Add<u8>(x, 1), 255) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test2(x: &u8,y: &u8) {
        if Eq<bool>(Gt<u8>(Add<u8>(Deref(x), Deref(y)), 255), true) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test3(x: u8) {
        if Or(Lt<u8>(x, 0), Gt<u8>(0, x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Gt<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u8>(m::foo<u8>(x), 0) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u8>(0, m::foo<u8>(x)) {
          m::bar()
        } else {
          Tuple()
        };
        Tuple()
    }
    public fun test4(a: u8,b: u16,c: u32,d: u64,e: u128,f: u256) {
        if Or(Gt<u8>(a, 255), Gt<u256>(f, 255)) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u16>(b, 65535) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u32>(4294967295, c) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u64>(18446744073709551615, d) {
          m::bar()
        } else {
          Tuple()
        };
        if Lt<u128>(e, 340282366920938463463374607431768211455) {
          m::bar()
        } else {
          Tuple()
        };
        if Le<u256>(f, 115792089237316195423570985008687907853269984665640564039457584007913129639935) {
          m::bar()
        } else {
          Tuple()
        };
        if Ge<u256>(115792089237316195423570985008687907853269984665640564039457584007913129639935, f) {
          m::bar()
        } else {
          Tuple()
        };
        if Gt<u128>(340282366920938463463374607431768211455, e) {
          m::bar()
        } else {
          Tuple()
        };
        spec {
          assert Le($t0, 255);
        }

    }
    public fun test5(x: u8): bool {
        m::apply(closure#0m::__lambda__1__test5(), x)
    }
    private fun __lambda__1__test5(x: u8): bool {
        Gt<u8>(x, 255)
    }
} // end 0xc0ffee::m
module 0xc0ffee::no_warn {
    public fun test(x: u8) {
        if Lt<u8>(x, 0) {
          Abort(1)
        } else {
          Tuple()
        };
        Tuple()
    }
} // end 0xc0ffee::no_warn

// -- Sourcified model before bytecode pipeline
module 0xc0ffee::m {
    fun apply(f: |u8|bool, x: u8): bool {
        f(x)
    }
    fun bar() {
    }
    fun foo<T>(x: T): T {
        x
    }
    public fun test1(x: u8) {
        if (x + 1u8 > 255u8) bar();
    }
    public fun test2(x: &u8, y: &u8) {
        if (*x + *y > 255u8 == true) bar();
    }
    public fun test3(x: u8) {
        if (x < 0u8 || 0u8 > x) bar();
        if (foo<u8>(x) <= 0u8) bar();
        if (0u8 >= foo<u8>(x)) bar();
        if (foo<u8>(x) > 0u8) bar();
        if (0u8 < foo<u8>(x)) bar();
        if (foo<u8>(x) >= 0u8) bar();
        if (0u8 <= foo<u8>(x)) bar();
    }
    public fun test4(a: u8, b: u16, c: u32, d: u64, e: u128, f: u256) {
        if (a > 255u8 || f > 255u256) bar();
        if (b >= 65535u16) bar();
        if (4294967295u32 < c) bar();
        if (18446744073709551615 <= d) bar();
        if (e < 340282366920938463463374607431768211455u128) bar();
        if (f <= 115792089237316195423570985008687907853269984665640564039457584007913129639935u256) bar();
        if (115792089237316195423570985008687907853269984665640564039457584007913129639935u256 >= f) bar();
        if (340282366920938463463374607431768211455u128 > e) bar();

        /* spec {
          assert Le($t0, 255);
        }
         */

    }
    public fun test5(x: u8): bool {
        apply(|arg0| __lambda__1__test5(arg0), x)
    }
    fun __lambda__1__test5(x: u8): bool {
        x > 255u8
    }
}
module 0xc0ffee::no_warn {
    public fun test(x: u8) {
        if (x < 0u8) abort 1;
    }
}

============ initial bytecode ================

[variant baseline]
fun m::apply($t0: |u8|bool, $t1: u8): bool {
     var $t2: bool
  0: $t2 := invoke($t1, $t0)
  1: return $t2
}


[variant baseline]
fun m::bar() {
  0: return ()
}


[variant baseline]
fun m::foo<#0>($t0: #0): #0 {
     var $t1: #0
  0: $t1 := infer($t0)
  1: return $t1
}


[variant baseline]
public fun m::test1($t0: u8) {
     var $t1: bool
     var $t2: u8
     var $t3: u8
     var $t4: u8
     var $t5: u8
  0: $t3 := infer($t0)
  1: $t4 := 1
  2: $t2 := +($t3, $t4)
  3: $t5 := 255
  4: $t1 := >($t2, $t5)
  5: if ($t1) goto 6 else goto 9
  6: label L0
  7: m::bar()
  8: goto 10
  9: label L1
 10: label L2
 11: return ()
}


[variant baseline]
public fun m::test2($t0: &u8, $t1: &u8) {
     var $t2: bool
     var $t3: bool
     var $t4: u8
     var $t5: u8
     var $t6: u8
     var $t7: u8
     var $t8: bool
  0: $t5 := read_ref($t0)
  1: $t6 := read_ref($t1)
  2: $t4 := +($t5, $t6)
  3: $t7 := 255
  4: $t3 := >($t4, $t7)
  5: $t8 := true
  6: $t2 := ==($t3, $t8)
  7: if ($t2) goto 8 else goto 11
  8: label L0
  9: m::bar()
 10: goto 12
 11: label L1
 12: label L2
 13: return ()
}


[variant baseline]
public fun m::test3($t0: u8) {
     var $t1: bool
     var $t2: bool
     var $t3: u8
     var $t4: u8
     var $t5: u8
     var $t6: bool
     var $t7: u8
     var $t8: u8
     var $t9: bool
     var $t10: u8
     var $t11: u8
     var $t12: bool
     var $t13: u8
     var $t14: u8
     var $t15: bool
     var $t16: u8
     var $t17: u8
     var $t18: bool
     var $t19: u8
     var $t20: u8
     var $t21: bool
     var $t22: u8
     var $t23: u8
  0: $t3 := infer($t0)
  1: $t4 := 0
  2: $t2 := <($t3, $t4)
  3: if ($t2) goto 4 else goto 7
  4: label L0
  5: $t1 := true
  6: goto 10
  7: label L1
  8: $t5 := 0
  9: $t1 := >($t5, $t0)
 10: label L2
 11: if ($t1) goto 12 else goto 15
 12: label L3
 13: m::bar()
 14: goto 16
 15: label L4
 16: label L5
 17: $t7 := m::foo<u8>($t0)
 18: $t8 := 0
 19: $t6 := <=($t7, $t8)
 20: if ($t6) goto 21 else goto 24
 21: label L6
 22: m::bar()
 23: goto 25
 24: label L7
 25: label L8
 26: $t10 := 0
 27: $t11 := m::foo<u8>($t0)
 28: $t9 := >=($t10, $t11)
 29: if ($t9) goto 30 else goto 33
 30: label L9
 31: m::bar()
 32: goto 34
 33: label L10
 34: label L11
 35: $t13 := m::foo<u8>($t0)
 36: $t14 := 0
 37: $t12 := >($t13, $t14)
 38: if ($t12) goto 39 else goto 42
 39: label L12
 40: m::bar()
 41: goto 43
 42: label L13
 43: label L14
 44: $t16 := 0
 45: $t17 := m::foo<u8>($t0)
 46: $t15 := <($t16, $t17)
 47: if ($t15) goto 48 else goto 51
 48: label L15
 49: m::bar()
 50: goto 52
 51: label L16
 52: label L17
 53: $t19 := m::foo<u8>($t0)
 54: $t20 := 0
 55: $t18 := >=($t19, $t20)
 56: if ($t18) goto 57 else goto 60
 57: label L18
 58: m::bar()
 59: goto 61
 60: label L19
 61: label L20
 62: $t22 := 0
 63: $t23 := m::foo<u8>($t0)
 64: $t21 := <=($t22, $t23)
 65: if ($t21) goto 66 else goto 69
 66: label L21
 67: m::bar()
 68: goto 70
 69: label L22
 70: label L23
 71: return ()
}


[variant baseline]
public fun m::test4($t0: u8, $t1: u16, $t2: u32, $t3: u64, $t4: u128, $t5: u256) {
     var $t6: bool
     var $t7: bool
     var $t8: u8
     var $t9: u8
     var $t10: u256
     var $t11: u256
     var $t12: bool
     var $t13: u16
     var $t14: u16
     var $t15: bool
     var $t16: u32
     var $t17: bool
     var $t18: u64
     var $t19: bool
     var $t20: u128
     var $t21: u128
     var $t22: bool
     var $t23: u256
     var $t24: u256
     var $t25: bool
     var $t26: u256
     var $t27: bool
     var $t28: u128
  0: $t8 := infer($t0)
  1: $t9 := 255
  2: $t7 := >($t8, $t9)
  3: if ($t7) goto 4 else goto 7
  4: label L0
  5: $t6 := true
  6: goto 11
  7: label L1
  8: $t10 := infer($t5)
  9: $t11 := 255
 10: $t6 := >($t10, $t11)
 11: label L2
 12: if ($t6) goto 13 else goto 16
 13: label L3
 14: m::bar()
 15: goto 17
 16: label L4
 17: label L5
 18: $t13 := infer($t1)
 19: $t14 := 65535
 20: $t12 := >=($t13, $t14)
 21: if ($t12) goto 22 else goto 25
 22: label L6
 23: m::bar()
 24: goto 26
 25: label L7
 26: label L8
 27: $t16 := 4294967295
 28: $t15 := <($t16, $t2)
 29: if ($t15) goto 30 else goto 33
 30: label L9
 31: m::bar()
 32: goto 34
 33: label L10
 34: label L11
 35: $t18 := 18446744073709551615
 36: $t17 := <=($t18, $t3)
 37: if ($t17) goto 38 else goto 41
 38: label L12
 39: m::bar()
 40: goto 42
 41: label L13
 42: label L14
 43: $t20 := infer($t4)
 44: $t21 := 340282366920938463463374607431768211455
 45: $t19 := <($t20, $t21)
 46: if ($t19) goto 47 else goto 50
 47: label L15
 48: m::bar()
 49: goto 51
 50: label L16
 51: label L17
 52: $t23 := infer($t5)
 53: $t24 := 115792089237316195423570985008687907853269984665640564039457584007913129639935
 54: $t22 := <=($t23, $t24)
 55: if ($t22) goto 56 else goto 59
 56: label L18
 57: m::bar()
 58: goto 60
 59: label L19
 60: label L20
 61: $t26 := 115792089237316195423570985008687907853269984665640564039457584007913129639935
 62: $t25 := >=($t26, $t5)
 63: if ($t25) goto 64 else goto 67
 64: label L21
 65: m::bar()
 66: goto 68
 67: label L22
 68: label L23
 69: $t28 := 340282366920938463463374607431768211455
 70: $t27 := >($t28, $t4)
 71: if ($t27) goto 72 else goto 75
 72: label L24
 73: m::bar()
 74: goto 76
 75: label L25
 76: label L26
 77: spec {
  assert Le($t0, 255);
}

 78: return ()
}


[variant baseline]
public fun m::test5($t0: u8): bool {
     var $t1: bool
     var $t2: |u8|bool
  0: $t2 := closure#0 m::__lambda__1__test5()
  1: $t1 := m::apply($t2, $t0)
  2: return $t1
}


[variant baseline]
fun m::__lambda__1__test5($t0: u8): bool {
     var $t1: bool
     var $t2: u8
     var $t3: u8
  0: $t2 := infer($t0)
  1: $t3 := 255
  2: $t1 := >($t2, $t3)
  3: return $t1
}


[variant baseline]
public fun no_warn::test($t0: u8) {
     var $t1: bool
     var $t2: u8
     var $t3: u8
     var $t4: u64
  0: $t2 := infer($t0)
  1: $t3 := 0
  2: $t1 := <($t2, $t3)
  3: if ($t1) goto 4 else goto 8
  4: label L0
  5: $t4 := 1
  6: abort($t4)
  7: goto 9
  8: label L1
  9: label L2
 10: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::apply($t0: |u8|bool, $t1: u8): bool {
     var $t2: bool
     # live vars: $t0, $t1
  0: $t2 := invoke($t1, $t0)
     # live vars: $t2
  1: return $t2
}


[variant baseline]
fun m::bar() {
     # live vars:
  0: return ()
}


[variant baseline]
fun m::foo<#0>($t0: #0): #0 {
     var $t1: #0 [unused]
     # live vars: $t0
  0: return $t0
}


[variant baseline]
public fun m::test1($t0: u8) {
     var $t1: bool
     var $t2: u8 [unused]
     var $t3: u8 [unused]
     var $t4: u8
     var $t5: u8 [unused]
     # live vars: $t0
  0: $t0 := move($t0)
     # live vars: $t0
  1: $t4 := 1
     # live vars: $t0, $t4
  2: $t0 := +($t0, $t4)
     # live vars: $t0
  3: $t4 := 255
     # live vars: $t0, $t4
  4: $t1 := >($t0, $t4)
     # live vars: $t1
  5: if ($t1) goto 8 else goto 6
     # live vars:
  6: label L3
     # live vars:
  7: goto 10
     # live vars:
  8: label L0
     # live vars:
  9: m::bar()
     # live vars:
 10: label L2
     # live vars:
 11: return ()
}


[variant baseline]
public fun m::test2($t0: &u8, $t1: &u8) {
     var $t2: bool [unused]
     var $t3: bool
     var $t4: u8 [unused]
     var $t5: u8
     var $t6: u8
     var $t7: u8 [unused]
     var $t8: bool
     # live vars: $t0, $t1
  0: $t5 := read_ref($t0)
     # live vars: $t1, $t5
  1: $t6 := read_ref($t1)
     # live vars: $t5, $t6
  2: $t5 := +($t5, $t6)
     # live vars: $t5
  3: $t6 := 255
     # live vars: $t5, $t6
  4: $t3 := >($t5, $t6)
     # live vars: $t3
  5: $t8 := true
     # live vars: $t3, $t8
  6: $t3 := ==($t3, $t8)
     # live vars: $t3
  7: if ($t3) goto 10 else goto 8
     # live vars:
  8: label L3
     # live vars:
  9: goto 12
     # live vars:
 10: label L0
     # live vars:
 11: m::bar()
     # live vars:
 12: label L2
     # live vars:
 13: return ()
}


[variant baseline]
public fun m::test3($t0: u8) {
     var $t1: bool [unused]
     var $t2: bool
     var $t3: u8
     var $t4: u8
     var $t5: u8 [unused]
     var $t6: bool
     var $t7: u8 [unused]
     var $t8: u8 [unused]
     var $t9: bool [unused]
     var $t10: u8 [unused]
     var $t11: u8 [unused]
     var $t12: bool [unused]
     var $t13: u8 [unused]
     var $t14: u8 [unused]
     var $t15: bool [unused]
     var $t16: u8 [unused]
     var $t17: u8 [unused]
     var $t18: bool [unused]
     var $t19: u8 [unused]
     var $t20: u8 [unused]
     var $t21: bool [unused]
     var $t22: u8 [unused]
     var $t23: u8 [unused]
     # live vars: $t0
  0: $t3 := copy($t0)
     # live vars: $t0, $t3
  1: $t4 := 0
     # live vars: $t0, $t3, $t4
  2: $t2 := <($t3, $t4)
     # live vars: $t0, $t2
  3: if ($t2) goto 4 else goto 68
     # live vars: $t0
  4: label L0
     # live vars: $t0
  5: $t2 := true
     # live vars: $t0, $t2
  6: label L2
     # live vars: $t0, $t2
  7: if ($t2) goto 10 else goto 8
     # live vars: $t0
  8: label L24
     # live vars: $t0
  9: goto 12
     # live vars: $t0
 10: label L3
     # live vars: $t0
 11: m::bar()
     # live vars: $t0
 12: label L5
     # live vars: $t0
 13: $t3 := m::foo<u8>($t0)
     # live vars: $t0, $t3
 14: $t4 := 0
     # live vars: $t0, $t3, $t4
 15: $t6 := <=($t3, $t4)
     # live vars: $t0, $t6
 16: if ($t6) goto 19 else goto 17
     # live vars: $t0
 17: label L25
     # live vars: $t0
 18: goto 21
     # live vars: $t0
 19: label L6
     # live vars: $t0
 20: m::bar()
     # live vars: $t0
 21: label L8
     # live vars: $t0
 22: $t3 := 0
     # live vars: $t0, $t3
 23: $t4 := m::foo<u8>($t0)
     # live vars: $t0, $t3, $t4
 24: $t6 := >=($t3, $t4)
     # live vars: $t0, $t6
 25: if ($t6) goto 28 else goto 26
     # live vars: $t0
 26: label L26
     # live vars: $t0
 27: goto 30
     # live vars: $t0
 28: label L9
     # live vars: $t0
 29: m::bar()
     # live vars: $t0
 30: label L11
     # live vars: $t0
 31: $t3 := m::foo<u8>($t0)
     # live vars: $t0, $t3
 32: $t4 := 0
     # live vars: $t0, $t3, $t4
 33: $t6 := >($t3, $t4)
     # live vars: $t0, $t6
 34: if ($t6) goto 37 else goto 35
     # live vars: $t0
 35: label L27
     # live vars: $t0
 36: goto 39
     # live vars: $t0
 37: label L12
     # live vars: $t0
 38: m::bar()
     # live vars: $t0
 39: label L14
     # live vars: $t0
 40: $t3 := 0
     # live vars: $t0, $t3
 41: $t4 := m::foo<u8>($t0)
     # live vars: $t0, $t3, $t4
 42: $t6 := <($t3, $t4)
     # live vars: $t0, $t6
 43: if ($t6) goto 46 else goto 44
     # live vars: $t0
 44: label L28
     # live vars: $t0
 45: goto 48
     # live vars: $t0
 46: label L15
     # live vars: $t0
 47: m::bar()
     # live vars: $t0
 48: label L17
     # live vars: $t0
 49: $t3 := m::foo<u8>($t0)
     # live vars: $t0, $t3
 50: $t4 := 0
     # live vars: $t0, $t3, $t4
 51: $t6 := >=($t3, $t4)
     # live vars: $t0, $t6
 52: if ($t6) goto 55 else goto 53
     # live vars: $t0
 53: label L29
     # live vars: $t0
 54: goto 57
     # live vars: $t0
 55: label L18
     # live vars: $t0
 56: m::bar()
     # live vars: $t0
 57: label L20
     # live vars: $t0
 58: $t3 := 0
     # live vars: $t0, $t3
 59: $t4 := m::foo<u8>($t0)
     # live vars: $t3, $t4
 60: $t6 := <=($t3, $t4)
     # live vars: $t6
 61: if ($t6) goto 64 else goto 62
     # live vars:
 62: label L30
     # live vars:
 63: goto 66
     # live vars:
 64: label L21
     # live vars:
 65: m::bar()
     # live vars:
 66: label L23
     # live vars:
 67: return ()
     # live vars: $t0
 68: label L1
     # live vars: $t0
 69: $t3 := 0
     # live vars: $t0, $t3
 70: $t2 := >($t3, $t0)
     # live vars: $t0, $t2
 71: goto 6
}


[variant baseline]
public fun m::test4($t0: u8, $t1: u16, $t2: u32, $t3: u64, $t4: u128, $t5: u256) {
     var $t6: bool [unused]
     var $t7: bool
     var $t8: u8
     var $t9: u8
     var $t10: u256 [unused]
     var $t11: u256 [unused]
     var $t12: bool
     var $t13: u16
     var $t14: u16
     var $t15: bool [unused]
     var $t16: u32
     var $t17: bool [unused]
     var $t18: u64
     var $t19: bool [unused]
     var $t20: u128
     var $t21: u128
     var $t22: bool [unused]
     var $t23: u256
     var $t24: u256
     var $t25: bool [unused]
     var $t26: u256 [unused]
     var $t27: bool [unused]
     var $t28: u128 [unused]
     # live vars: $t0, $t1, $t2, $t3, $t4, $t5
  0: $t8 := copy($t0)
     # live vars: $t0, $t1, $t2, $t3, $t4, $t5, $t8
  1: $t9 := 255
     # live vars: $t0, $t1, $t2, $t3, $t4, $t5, $t8, $t9
  2: $t7 := >($t8, $t9)
     # live vars: $t0, $t1, $t2, $t3, $t4, $t5, $t7
  3: if ($t7) goto 4 else goto 74
     # live vars: $t0, $t1, $t2, $t3, $t4, $t5
  4: label L0
     # live vars: $t0, $t1, $t2, $t3, $t4, $t5
  5: $t7 := true
     # live vars: $t0, $t1, $t2, $t3, $t4, $t5, $t7
  6: label L2
     # live vars: $t0, $t1, $t2, $t3, $t4, $t5, $t7
  7: if ($t7) goto 10 else goto 8
     # live vars: $t0, $t1, $t2, $t3, $t4, $t5
  8: label L27
     # live vars: $t0, $t1, $t2, $t3, $t4, $t5
  9: goto 12
     # live vars: $t0, $t1, $t2, $t3, $t4, $t5
 10: label L3
     # live vars: $t0, $t1, $t2, $t3, $t4, $t5
 11: m::bar()
     # live vars: $t0, $t1, $t2, $t3, $t4, $t5
 12: label L5
     # live vars: $t0, $t1, $t2, $t3, $t4, $t5
 13: $t13 := move($t1)
     # live vars: $t0, $t2, $t3, $t4, $t5, $t13
 14: $t14 := 65535
     # live vars: $t0, $t2, $t3, $t4, $t5, $t13, $t14
 15: $t12 := >=($t13, $t14)
     # live vars: $t0, $t2, $t3, $t4, $t5, $t12
 16: if ($t12) goto 19 else goto 17
     # live vars: $t0, $t2, $t3, $t4, $t5
 17: label L28
     # live vars: $t0, $t2, $t3, $t4, $t5
 18: goto 21
     # live vars: $t0, $t2, $t3, $t4, $t5
 19: label L6
     # live vars: $t0, $t2, $t3, $t4, $t5
 20: m::bar()
     # live vars: $t0, $t2, $t3, $t4, $t5
 21: label L8
     # live vars: $t0, $t2, $t3, $t4, $t5
 22: $t16 := 4294967295
     # live vars: $t0, $t2, $t3, $t4, $t5, $t16
 23: $t12 := <($t16, $t2)
     # live vars: $t0, $t3, $t4, $t5, $t12
 24: if ($t12) goto 27 else goto 25
     # live vars: $t0, $t3, $t4, $t5
 25: label L29
     # live vars: $t0, $t3, $t4, $t5
 26: goto 29
     # live vars: $t0, $t3, $t4, $t5
 27: label L9
     # live vars: $t0, $t3, $t4, $t5
 28: m::bar()
     # live vars: $t0, $t3, $t4, $t5
 29: label L11
     # live vars: $t0, $t3, $t4, $t5
 30: $t18 := 18446744073709551615
     # live vars: $t0, $t3, $t4, $t5, $t18
 31: $t12 := <=($t18, $t3)
     # live vars: $t0, $t4, $t5, $t12
 32: if ($t12) goto 35 else goto 33
     # live vars: $t0, $t4, $t5
 33: label L30
     # live vars: $t0, $t4, $t5
 34: goto 37
     # live vars: $t0, $t4, $t5
 35: label L12
     # live vars: $t0, $t4, $t5
 36: m::bar()
     # live vars: $t0, $t4, $t5
 37: label L14
     # live vars: $t0, $t4, $t5
 38: $t20 := copy($t4)
     # live vars: $t0, $t4, $t5, $t20
 39: $t21 := 340282366920938463463374607431768211455
     # live vars: $t0, $t4, $t5, $t20, $t21
 40: $t12 := <($t20, $t21)
     # live vars: $t0, $t4, $t5, $t12
 41: if ($t12) goto 44 else goto 42
     # live vars: $t0, $t4, $t5
 42: label L31
     # live vars: $t0, $t4, $t5
 43: goto 46
     # live vars: $t0, $t4, $t5
 44: label L15
     # live vars: $t0, $t4, $t5
 45: m::bar()
     # live vars: $t0, $t4, $t5
 46: label L17
     # live vars: $t0, $t4, $t5
 47: $t23 := copy($t5)
     # live vars: $t0, $t4, $t5, $t23
 48: $t24 := 115792089237316195423570985008687907853269984665640564039457584007913129639935
     # live vars: $t0, $t4, $t5, $t23, $t24
 49: $t12 := <=($t23, $t24)
     # live vars: $t0, $t4, $t5, $t12
 50: if ($t12) goto 53 else goto 51
     # live vars: $t0, $t4, $t5
 51: label L32
     # live vars: $t0, $t4, $t5
 52: goto 55
     # live vars: $t0, $t4, $t5
 53: label L18
     # live vars: $t0, $t4, $t5
 54: m::bar()
     # live vars: $t0, $t4, $t5
 55: label L20
     # live vars: $t0, $t4, $t5
 56: $t23 := 115792089237316195423570985008687907853269984665640564039457584007913129639935
     # live vars: $t0, $t4, $t5, $t23
 57: $t12 := >=($t23, $t5)
     # live vars: $t0, $t4, $t12
 58: if ($t12) goto 61 else goto 59
     # live vars: $t0, $t4
 59: label L33
     # live vars: $t0, $t4
 60: goto 63
     # live vars: $t0, $t4
 61: label L21
     # live vars: $t0, $t4
 62: m::bar()
     # live vars: $t0, $t4
 63: label L23
     # live vars: $t0, $t4
 64: $t20 := 340282366920938463463374607431768211455
     # live vars: $t0, $t4, $t20
 65: $t12 := >($t20, $t4)
     # live vars: $t0, $t12
 66: if ($t12) goto 69 else goto 67
     # live vars: $t0
 67: label L34
     # live vars: $t0
 68: goto 71
     # live vars: $t0
 69: label L24
     # live vars: $t0
 70: m::bar()
     # live vars: $t0
 71: label L26
     # live vars: $t0
 72: spec {
  assert Le($t0, 255);
}

     # live vars:
 73: return ()
     # live vars: $t0, $t1, $t2, $t3, $t4, $t5
 74: label L1
     # live vars: $t0, $t1, $t2, $t3, $t4, $t5
 75: $t23 := copy($t5)
     # live vars: $t0, $t1, $t2, $t3, $t4, $t5, $t23
 76: $t24 := 255
     # live vars: $t0, $t1, $t2, $t3, $t4, $t5, $t23, $t24
 77: $t7 := >($t23, $t24)
     # live vars: $t0, $t1, $t2, $t3, $t4, $t5, $t7
 78: goto 6
}


[variant baseline]
public fun m::test5($t0: u8): bool {
     var $t1: bool
     var $t2: |u8|bool
     # live vars: $t0
  0: $t2 := closure#0 m::__lambda__1__test5()
     # live vars: $t0, $t2
  1: $t1 := m::apply($t2, $t0)
     # live vars: $t1
  2: return $t1
}


[variant baseline]
fun m::__lambda__1__test5($t0: u8): bool {
     var $t1: bool
     var $t2: u8 [unused]
     var $t3: u8
     # live vars: $t0
  0: $t0 := move($t0)
     # live vars: $t0
  1: $t3 := 255
     # live vars: $t0, $t3
  2: $t1 := >($t0, $t3)
     # live vars: $t1
  3: return $t1
}


[variant baseline]
public fun no_warn::test($t0: u8) {
     var $t1: bool
     var $t2: u8 [unused]
     var $t3: u8
     var $t4: u64
     # live vars: $t0
  0: $t0 := move($t0)
     # live vars: $t0
  1: $t3 := 0
     # live vars: $t0, $t3
  2: $t1 := <($t0, $t3)
     # live vars: $t1
  3: if ($t1) goto 4 else goto 7
     # live vars:
  4: label L0
     # live vars:
  5: $t4 := 1
     # live vars: $t4
  6: abort($t4)
     # live vars:
  7: label L2
     # live vars:
  8: return ()
}


============ disassembled file-format ==================
// Move bytecode v8
module c0ffee.m {


apply(f: |u8|bool, x: u8): bool /* def_idx: 0 */ {
B0:
	0: MoveLoc[1](x: u8)
	1: MoveLoc[0](f: |u8|bool)
	2: CallClosure(|u8|bool)
	3: Ret
}
bar() /* def_idx: 1 */ {
B0:
	0: Ret
}
foo<T>(x: T): T /* def_idx: 2 */ {
B0:
	0: MoveLoc[0](x: T)
	1: Ret
}
public test1(x: u8) /* def_idx: 3 */ {
B0:
	0: MoveLoc[0](x: u8)
	1: LdU8(1)
	2: Add
	3: LdU8(255)
	4: Gt
	5: BrTrue(7)
B1:
	6: Branch(8)
B2:
	7: Call bar()
B3:
	8: Ret
}
public test2(x: &u8, y: &u8) /* def_idx: 4 */ {
B0:
	0: MoveLoc[0](x: &u8)
	1: ReadRef
	2: MoveLoc[1](y: &u8)
	3: ReadRef
	4: Add
	5: LdU8(255)
	6: Gt
	7: LdTrue
	8: Eq
	9: BrTrue(11)
B1:
	10: Branch(12)
B2:
	11: Call bar()
B3:
	12: Ret
}
public test3(x: u8) /* def_idx: 5 */ {
L1:	$t2: bool
B0:
	0: CopyLoc[0](x: u8)
	1: LdU8(0)
	2: Lt
	3: BrFalse(53)
B1:
	4: LdTrue
	5: StLoc[1]($t2: bool)
B2:
	6: MoveLoc[1]($t2: bool)
	7: BrTrue(9)
B3:
	8: Branch(10)
B4:
	9: Call bar()
B5:
	10: CopyLoc[0](x: u8)
	11: Call foo<u8>(u8): u8
	12: LdU8(0)
	13: Le
	14: BrTrue(16)
B6:
	15: Branch(17)
B7:
	16: Call bar()
B8:
	17: LdU8(0)
	18: CopyLoc[0](x: u8)
	19: Call foo<u8>(u8): u8
	20: Ge
	21: BrTrue(23)
B9:
	22: Branch(24)
B10:
	23: Call bar()
B11:
	24: CopyLoc[0](x: u8)
	25: Call foo<u8>(u8): u8
	26: LdU8(0)
	27: Gt
	28: BrTrue(30)
B12:
	29: Branch(31)
B13:
	30: Call bar()
B14:
	31: LdU8(0)
	32: CopyLoc[0](x: u8)
	33: Call foo<u8>(u8): u8
	34: Lt
	35: BrTrue(37)
B15:
	36: Branch(38)
B16:
	37: Call bar()
B17:
	38: CopyLoc[0](x: u8)
	39: Call foo<u8>(u8): u8
	40: LdU8(0)
	41: Ge
	42: BrTrue(44)
B18:
	43: Branch(45)
B19:
	44: Call bar()
B20:
	45: LdU8(0)
	46: MoveLoc[0](x: u8)
	47: Call foo<u8>(u8): u8
	48: Le
	49: BrTrue(51)
B21:
	50: Branch(52)
B22:
	51: Call bar()
B23:
	52: Ret
B24:
	53: LdU8(0)
	54: CopyLoc[0](x: u8)
	55: Gt
	56: StLoc[1]($t2: bool)
	57: Branch(6)
}
public test4(a: u8, b: u16, c: u32, d: u64, e: u128, f: u256) /* def_idx: 6 */ {
L6:	$t7: bool
B0:
	0: CopyLoc[0](a: u8)
	1: LdU8(255)
	2: Gt
	3: BrFalse(54)
B1:
	4: LdTrue
	5: StLoc[6]($t7: bool)
B2:
	6: MoveLoc[6]($t7: bool)
	7: BrTrue(9)
B3:
	8: Branch(10)
B4:
	9: Call bar()
B5:
	10: MoveLoc[1](b: u16)
	11: LdU16(65535)
	12: Ge
	13: BrTrue(15)
B6:
	14: Branch(16)
B7:
	15: Call bar()
B8:
	16: LdU32(4294967295)
	17: MoveLoc[2](c: u32)
	18: Lt
	19: BrTrue(21)
B9:
	20: Branch(22)
B10:
	21: Call bar()
B11:
	22: LdU64(18446744073709551615)
	23: MoveLoc[3](d: u64)
	24: Le
	25: BrTrue(27)
B12:
	26: Branch(28)
B13:
	27: Call bar()
B14:
	28: CopyLoc[4](e: u128)
	29: LdU128(340282366920938463463374607431768211455)
	30: Lt
	31: BrTrue(33)
B15:
	32: Branch(34)
B16:
	33: Call bar()
B17:
	34: CopyLoc[5](f: u256)
	35: LdU256(115792089237316195423570985008687907853269984665640564039457584007913129639935)
	36: Le
	37: BrTrue(39)
B18:
	38: Branch(40)
B19:
	39: Call bar()
B20:
	40: LdU256(115792089237316195423570985008687907853269984665640564039457584007913129639935)
	41: MoveLoc[5](f: u256)
	42: Ge
	43: BrTrue(45)
B21:
	44: Branch(46)
B22:
	45: Call bar()
B23:
	46: LdU128(340282366920938463463374607431768211455)
	47: MoveLoc[4](e: u128)
	48: Gt
	49: BrTrue(51)
B24:
	50: Branch(52)
B25:
	51: Call bar()
B26:
	52: Nop
	53: Ret
B27:
	54: CopyLoc[5](f: u256)
	55: LdU256(255)
	56: Gt
	57: StLoc[6]($t7: bool)
	58: Branch(6)
}
public test5(x: u8): bool /* def_idx: 7 */ {
B0:
	0: PackClosure#0 __lambda__1__test5(u8): bool
	1: MoveLoc[0](x: u8)
	2: Call apply(|u8|bool, u8): bool
	3: Ret
}
__lambda__1__test5(x: u8): bool /* def_idx: 8 */ {
B0:
	0: MoveLoc[0](x: u8)
	1: LdU8(255)
	2: Gt
	3: Ret
}
}// Move bytecode v8
module c0ffee.no_warn {


public test(x: u8) /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](x: u8)
	1: LdU8(0)
	2: Lt
	3: BrFalse(6)
B1:
	4: LdU64(1)
	5: Abort
B2:
	6: Ret
}
}
============ bytecode verification succeeded ========
