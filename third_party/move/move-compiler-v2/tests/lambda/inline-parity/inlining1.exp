// -- Model dump before bytecode pipeline
module 0x42::Test {
    private fun foo(f: |u64|u64,x: u64): u64 {
        (f)(x)
    }
    public fun main() {
        if Eq<u64>(Test::test(), 3) {
          Tuple()
        } else {
          Abort(5)
        };
        Tuple()
    }
    public fun test(): u64 {
        Test::foo(closure#0Test::__lambda__1__test(), 10)
    }
    private fun __lambda__1__test(param$0: u64): u64 {
        {
          let _: u64 = param$0;
          3
        }
    }
} // end 0x42::Test

// -- Sourcified model before bytecode pipeline
module 0x42::Test {
    fun foo(f: |u64|u64, x: u64): u64 {
        f(x)
    }
    public fun main() {
        if (test() == 3) () else abort 5;
    }
    public fun test(): u64 {
        foo(|arg0| __lambda__1__test(arg0), 10)
    }
    fun __lambda__1__test(param$0: u64): u64 {
        let _ = param$0;
        3
    }
}

============ initial bytecode ================

[variant baseline]
fun Test::foo($t0: |u64|u64, $t1: u64): u64 {
     var $t2: u64
  0: $t2 := invoke($t1, $t0)
  1: return $t2
}


[variant baseline]
public fun Test::main() {
     var $t0: bool
     var $t1: u64
     var $t2: u64
     var $t3: u64
  0: $t1 := Test::test()
  1: $t2 := 3
  2: $t0 := ==($t1, $t2)
  3: if ($t0) goto 4 else goto 6
  4: label L0
  5: goto 9
  6: label L1
  7: $t3 := 5
  8: abort($t3)
  9: label L2
 10: return ()
}


[variant baseline]
public fun Test::test(): u64 {
     var $t0: u64
     var $t1: |u64|u64
     var $t2: u64
  0: $t1 := closure#0 Test::__lambda__1__test()
  1: $t2 := 10
  2: $t0 := Test::foo($t1, $t2)
  3: return $t0
}


[variant baseline]
fun Test::__lambda__1__test($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
  0: $t2 := infer($t0)
  1: $t1 := 3
  2: return $t1
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun Test::foo($t0: |u64|u64, $t1: u64): u64 {
     var $t2: u64 [unused]
     # live vars: $t0, $t1
  0: $t1 := invoke($t1, $t0)
     # live vars: $t1
  1: return $t1
}


[variant baseline]
public fun Test::main() {
     var $t0: bool
     var $t1: u64
     var $t2: u64
     var $t3: u64 [unused]
     # live vars:
  0: $t1 := Test::test()
     # live vars: $t1
  1: $t2 := 3
     # live vars: $t1, $t2
  2: $t0 := ==($t1, $t2)
     # live vars: $t0
  3: if ($t0) goto 4 else goto 6
     # live vars:
  4: label L0
     # live vars:
  5: return ()
     # live vars:
  6: label L1
     # live vars:
  7: $t1 := 5
     # live vars: $t1
  8: abort($t1)
}


[variant baseline]
public fun Test::test(): u64 {
     var $t0: u64 [unused]
     var $t1: |u64|u64
     var $t2: u64
     # live vars:
  0: $t1 := closure#0 Test::__lambda__1__test()
     # live vars: $t1
  1: $t2 := 10
     # live vars: $t1, $t2
  2: $t2 := Test::foo($t1, $t2)
     # live vars: $t2
  3: return $t2
}


[variant baseline]
fun Test::__lambda__1__test($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: u64 [unused]
     # live vars: $t0
  0: $t0 := 3
     # live vars: $t0
  1: return $t0
}


============ disassembled file-format ==================
// Move bytecode v8
module 42.Test {


foo(f: |u64|u64, x: u64): u64 /* def_idx: 0 */ {
B0:
	0: MoveLoc[1](x: u64)
	1: MoveLoc[0](f: |u64|u64)
	2: CallClosure(|u64|u64)
	3: Ret
}
public main() /* def_idx: 1 */ {
B0:
	0: Call test(): u64
	1: LdU64(3)
	2: Eq
	3: BrFalse(5)
B1:
	4: Ret
B2:
	5: LdU64(5)
	6: Abort
}
public test(): u64 /* def_idx: 2 */ {
B0:
	0: PackClosure#0 __lambda__1__test(u64): u64
	1: LdU64(10)
	2: Call foo(|u64|u64, u64): u64
	3: Ret
}
__lambda__1__test(param$0: u64): u64 /* def_idx: 3 */ {
B0:
	0: LdU64(3)
	1: Ret
}
}
============ bytecode verification succeeded ========
