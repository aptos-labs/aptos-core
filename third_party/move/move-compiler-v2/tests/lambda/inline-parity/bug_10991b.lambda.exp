// -- Model dump before bytecode pipeline
module 0x42::Test {
    private fun foo(g: |(u64, u64)|u64,x: u64,_y: u64): u64 {
        (g)(x, _y)
    }
    public fun test() {
        if Eq<u64>(Test::foo(closure#0Test::__lambda__1__test(), 10, 100), 100) {
          Tuple()
        } else {
          Abort(0)
        };
        Tuple()
    }
    private fun __lambda__1__test(param$0: u64,y: u64): u64 {
        {
          let _: u64 = param$0;
          y
        }
    }
} // end 0x42::Test

// -- Sourcified model before bytecode pipeline
module 0x42::Test {
    fun foo(g: |(u64, u64)|u64, x: u64, _y: u64): u64 {
        g(x, _y)
    }
    public fun test() {
        if (foo(|(arg0,arg1)| __lambda__1__test(arg0, arg1), 10, 100) == 100) () else abort 0;
    }
    fun __lambda__1__test(param$0: u64, y: u64): u64 {
        let _ = param$0;
        y
    }
}

============ initial bytecode ================

[variant baseline]
fun Test::foo($t0: |(u64, u64)|u64, $t1: u64, $t2: u64): u64 {
     var $t3: u64
     var $t4: u64
     var $t5: u64
  0: $t4 := infer($t1)
  1: $t5 := infer($t2)
  2: $t3 := invoke($t4, $t5, $t0)
  3: return $t3
}


[variant baseline]
public fun Test::test() {
     var $t0: bool
     var $t1: u64
     var $t2: |(u64, u64)|u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
  0: $t2 := closure#0 Test::__lambda__1__test()
  1: $t3 := 10
  2: $t4 := 100
  3: $t1 := Test::foo($t2, $t3, $t4)
  4: $t5 := 100
  5: $t0 := ==($t1, $t5)
  6: if ($t0) goto 7 else goto 9
  7: label L0
  8: goto 12
  9: label L1
 10: $t6 := 0
 11: abort($t6)
 12: label L2
 13: return ()
}


[variant baseline]
fun Test::__lambda__1__test($t0: u64, $t1: u64): u64 {
     var $t2: u64
     var $t3: u64
  0: $t3 := infer($t0)
  1: $t2 := infer($t1)
  2: return $t2
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun Test::foo($t0: |(u64, u64)|u64, $t1: u64, $t2: u64): u64 {
     var $t3: u64 [unused]
     var $t4: u64 [unused]
     var $t5: u64 [unused]
     # live vars: $t0, $t1, $t2
  0: $t1 := move($t1)
     # live vars: $t0, $t1, $t2
  1: $t2 := move($t2)
     # live vars: $t0, $t1, $t2
  2: $t1 := invoke($t1, $t2, $t0)
     # live vars: $t1
  3: return $t1
}


[variant baseline]
public fun Test::test() {
     var $t0: bool
     var $t1: u64 [unused]
     var $t2: |(u64, u64)|u64
     var $t3: u64
     var $t4: u64
     var $t5: u64 [unused]
     var $t6: u64 [unused]
     # live vars:
  0: $t2 := closure#0 Test::__lambda__1__test()
     # live vars: $t2
  1: $t3 := 10
     # live vars: $t2, $t3
  2: $t4 := 100
     # live vars: $t2, $t3, $t4
  3: $t3 := Test::foo($t2, $t3, $t4)
     # live vars: $t3
  4: $t4 := 100
     # live vars: $t3, $t4
  5: $t0 := ==($t3, $t4)
     # live vars: $t0
  6: if ($t0) goto 7 else goto 9
     # live vars:
  7: label L0
     # live vars:
  8: return ()
     # live vars:
  9: label L1
     # live vars:
 10: $t3 := 0
     # live vars: $t3
 11: abort($t3)
}


[variant baseline]
fun Test::__lambda__1__test($t0: u64, $t1: u64): u64 {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     # live vars: $t0, $t1
  0: return $t1
}


============ disassembled file-format ==================
// Move bytecode v8
module 42.Test {


foo(g: |u64,u64|u64, x: u64, _y: u64): u64 /* def_idx: 0 */ {
B0:
	0: MoveLoc[1](x: u64)
	1: MoveLoc[2](_y: u64)
	2: MoveLoc[0](g: |u64,u64|u64)
	3: CallClosure(|u64,u64|u64)
	4: Ret
}
public test() /* def_idx: 1 */ {
B0:
	0: PackClosure#0 __lambda__1__test(u64, u64): u64
	1: LdU64(10)
	2: LdU64(100)
	3: Call foo(|u64,u64|u64, u64, u64): u64
	4: LdU64(100)
	5: Eq
	6: BrFalse(8)
B1:
	7: Ret
B2:
	8: LdU64(0)
	9: Abort
}
__lambda__1__test(param$0: u64, y: u64): u64 /* def_idx: 2 */ {
B0:
	0: MoveLoc[1](y: u64)
	1: Ret
}
}
============ bytecode verification succeeded ========
