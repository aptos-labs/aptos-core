// -- Model dump before env processor pipeline:
module 0x42::Test {
    public fun apply(f: |(u64, u64)|u64,x: u64,y: u64): u64 {
        (f)(x, y)
    }
    public fun test(): u64 {
        Test::apply(|(x: u64, y: u64): (u64, u64)| Add<u64>(x, y), 1, Test::apply(|(x: u64, y: u64): (u64, u64)| Mul<u64>(x, y), 2, 1))
    }
} // end 0x42::Test


// -- Model dump after env processor unused checks:
module 0x42::Test {
    public fun apply(f: |(u64, u64)|u64,x: u64,y: u64): u64 {
        (f)(x, y)
    }
    public fun test(): u64 {
        Test::apply(|(x: u64, y: u64): (u64, u64)| Add<u64>(x, y), 1, Test::apply(|(x: u64, y: u64): (u64, u64)| Mul<u64>(x, y), 2, 1))
    }
} // end 0x42::Test


// -- Model dump after env processor type parameter check:
module 0x42::Test {
    public fun apply(f: |(u64, u64)|u64,x: u64,y: u64): u64 {
        (f)(x, y)
    }
    public fun test(): u64 {
        Test::apply(|(x: u64, y: u64): (u64, u64)| Add<u64>(x, y), 1, Test::apply(|(x: u64, y: u64): (u64, u64)| Mul<u64>(x, y), 2, 1))
    }
} // end 0x42::Test


// -- Model dump after env processor check recursive struct definition:
module 0x42::Test {
    public fun apply(f: |(u64, u64)|u64,x: u64,y: u64): u64 {
        (f)(x, y)
    }
    public fun test(): u64 {
        Test::apply(|(x: u64, y: u64): (u64, u64)| Add<u64>(x, y), 1, Test::apply(|(x: u64, y: u64): (u64, u64)| Mul<u64>(x, y), 2, 1))
    }
} // end 0x42::Test


// -- Model dump after env processor check cyclic type instantiation:
module 0x42::Test {
    public fun apply(f: |(u64, u64)|u64,x: u64,y: u64): u64 {
        (f)(x, y)
    }
    public fun test(): u64 {
        Test::apply(|(x: u64, y: u64): (u64, u64)| Add<u64>(x, y), 1, Test::apply(|(x: u64, y: u64): (u64, u64)| Mul<u64>(x, y), 2, 1))
    }
} // end 0x42::Test


// -- Model dump after env processor unused struct params check:
module 0x42::Test {
    public fun apply(f: |(u64, u64)|u64,x: u64,y: u64): u64 {
        (f)(x, y)
    }
    public fun test(): u64 {
        Test::apply(|(x: u64, y: u64): (u64, u64)| Add<u64>(x, y), 1, Test::apply(|(x: u64, y: u64): (u64, u64)| Mul<u64>(x, y), 2, 1))
    }
} // end 0x42::Test


// -- Model dump after env processor access and use check before inlining:
module 0x42::Test {
    public fun apply(f: |(u64, u64)|u64,x: u64,y: u64): u64 {
        (f)(x, y)
    }
    public fun test(): u64 {
        Test::apply(|(x: u64, y: u64): (u64, u64)| Add<u64>(x, y), 1, Test::apply(|(x: u64, y: u64): (u64, u64)| Mul<u64>(x, y), 2, 1))
    }
} // end 0x42::Test


// -- Model dump after env processor inlining:
module 0x42::Test {
    public fun apply(f: |(u64, u64)|u64,x: u64,y: u64): u64 {
        (f)(x, y)
    }
    public fun test(): u64 {
        Test::apply(|(x: u64, y: u64): (u64, u64)| Add<u64>(x, y), 1, Test::apply(|(x: u64, y: u64): (u64, u64)| Mul<u64>(x, y), 2, 1))
    }
} // end 0x42::Test


// -- Model dump after env processor access and use check after inlining:
module 0x42::Test {
    public fun apply(f: |(u64, u64)|u64,x: u64,y: u64): u64 {
        (f)(x, y)
    }
    public fun test(): u64 {
        Test::apply(|(x: u64, y: u64): (u64, u64)| Add<u64>(x, y), 1, Test::apply(|(x: u64, y: u64): (u64, u64)| Mul<u64>(x, y), 2, 1))
    }
} // end 0x42::Test


// -- Model dump after env processor acquires check:
module 0x42::Test {
    public fun apply(f: |(u64, u64)|u64,x: u64,y: u64): u64 {
        (f)(x, y)
    }
    public fun test(): u64 {
        Test::apply(|(x: u64, y: u64): (u64, u64)| Add<u64>(x, y), 1, Test::apply(|(x: u64, y: u64): (u64, u64)| Mul<u64>(x, y), 2, 1))
    }
} // end 0x42::Test


// -- Model dump after env processor simplifier:
module 0x42::Test {
    public fun apply(f: |(u64, u64)|u64,x: u64,y: u64): u64 {
        (f)(x, y)
    }
    public fun test(): u64 {
        Test::apply(|(x: u64, y: u64): (u64, u64)| Add<u64>(x, y), 1, Test::apply(|(x: u64, y: u64): (u64, u64)| Mul<u64>(x, y), 2, 1))
    }
} // end 0x42::Test



Diagnostics:
error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
  ┌─ tests/lambda/inline-parity/nested_lambda.move:9:15
  │
9 │         apply(|x, y| x + y, 1, apply(|x, y| x * y, 2, 1))
  │               ^^^^^^^^^^^^

error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
  ┌─ tests/lambda/inline-parity/nested_lambda.move:9:38
  │
9 │         apply(|x, y| x + y, 1, apply(|x, y| x * y, 2, 1))
  │                                      ^^^^^^^^^^^^
