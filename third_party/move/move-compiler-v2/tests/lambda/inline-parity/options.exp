// -- Model dump before bytecode pipeline
module 0x42::map_opt {
    use std::option;
    public fun map<Element,OtherElement>(t: 0x1::option::Option<Element>,f: |Element|OtherElement): 0x1::option::Option<OtherElement> {
        if option::is_some<Element>(Borrow(Immutable)(t)) {
          option::some<OtherElement>((f)(option::extract<Element>(Borrow(Mutable)(t))))
        } else {
          option::none<OtherElement>()
        }
    }
} // end 0x42::map_opt
module 0x42::Test {
    use std::option;
    use 0x42::map_opt; // resolved as: 0x42::map_opt
    public fun test(): u64 {
        {
          let t: 0x1::option::Option<u64> = option::some<u64>(1);
          {
            let x: 0x1::option::Option<u64> = map_opt::map<u64, u64>(t, closure#0Test::__lambda__1__test());
            option::extract<u64>(Borrow(Mutable)(x))
          }
        }
    }
    private fun __lambda__1__test(e: u64): u64 {
        Add<u64>(e, 1)
    }
} // end 0x42::Test

// -- Sourcified model before bytecode pipeline
module 0x42::map_opt {
    public fun map<Element: drop, OtherElement>(t: 0x1::option::Option<Element>, f: |Element|OtherElement): 0x1::option::Option<OtherElement> {
        if (0x1::option::is_some<Element>(&t)) 0x1::option::some<OtherElement>(f(0x1::option::extract<Element>(&mut t))) else 0x1::option::none<OtherElement>()
    }
}
module 0x42::Test {
    use 0x42::map_opt;
    public fun test(): u64 {
        let t = 0x1::option::some<u64>(1);
        let x = map_opt::map<u64,u64>(t, |arg0| __lambda__1__test(arg0));
        0x1::option::extract<u64>(&mut x)
    }
    fun __lambda__1__test(e: u64): u64 {
        e + 1
    }
}

============ initial bytecode ================

[variant baseline]
public fun map_opt::map<#0, #1>($t0: 0x1::option::Option<#0>, $t1: |#0|#1): 0x1::option::Option<#1> {
     var $t2: 0x1::option::Option<#1>
     var $t3: bool
     var $t4: &0x1::option::Option<#0>
     var $t5: #1
     var $t6: #0
     var $t7: &mut 0x1::option::Option<#0>
  0: $t4 := borrow_local($t0)
  1: $t3 := option::is_some<#0>($t4)
  2: if ($t3) goto 3 else goto 9
  3: label L0
  4: $t7 := borrow_local($t0)
  5: $t6 := option::extract<#0>($t7)
  6: $t5 := invoke($t6, $t1)
  7: $t2 := option::some<#1>($t5)
  8: goto 11
  9: label L1
 10: $t2 := option::none<#1>()
 11: label L2
 12: return $t2
}


[variant baseline]
public fun Test::test(): u64 {
     var $t0: u64
     var $t1: 0x1::option::Option<u64>
     var $t2: u64
     var $t3: 0x1::option::Option<u64>
     var $t4: 0x1::option::Option<u64>
     var $t5: |u64|u64
     var $t6: &mut 0x1::option::Option<u64>
  0: $t2 := 1
  1: $t1 := option::some<u64>($t2)
  2: $t4 := infer($t1)
  3: $t5 := closure#0 Test::__lambda__1__test()
  4: $t3 := map_opt::map<u64, u64>($t4, $t5)
  5: $t6 := borrow_local($t3)
  6: $t0 := option::extract<u64>($t6)
  7: return $t0
}


[variant baseline]
fun Test::__lambda__1__test($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
  0: $t2 := infer($t0)
  1: $t3 := 1
  2: $t1 := +($t2, $t3)
  3: return $t1
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun map_opt::map<#0, #1>($t0: 0x1::option::Option<#0>, $t1: |#0|#1): 0x1::option::Option<#1> {
     var $t2: 0x1::option::Option<#1>
     var $t3: bool
     var $t4: &0x1::option::Option<#0>
     var $t5: #1
     var $t6: #0
     var $t7: &mut 0x1::option::Option<#0>
     # live vars: $t0, $t1
  0: $t4 := borrow_local($t0)
     # live vars: $t0, $t1, $t4
  1: $t3 := option::is_some<#0>($t4)
     # live vars: $t0, $t1, $t3
  2: if ($t3) goto 3 else goto 10
     # live vars: $t0, $t1
  3: label L0
     # live vars: $t0, $t1
  4: $t7 := borrow_local($t0)
     # live vars: $t1, $t7
  5: $t6 := option::extract<#0>($t7)
     # live vars: $t1, $t6
  6: $t5 := invoke($t6, $t1)
     # live vars: $t5
  7: $t2 := option::some<#1>($t5)
     # live vars: $t2
  8: label L2
     # live vars: $t2
  9: return $t2
     # live vars: $t0, $t1
 10: label L1
     # live vars:
 11: $t2 := option::none<#1>()
     # live vars: $t2
 12: goto 8
}


[variant baseline]
public fun Test::test(): u64 {
     var $t0: u64 [unused]
     var $t1: 0x1::option::Option<u64>
     var $t2: u64
     var $t3: 0x1::option::Option<u64>
     var $t4: 0x1::option::Option<u64> [unused]
     var $t5: |u64|u64
     var $t6: &mut 0x1::option::Option<u64>
     # live vars:
  0: $t2 := 1
     # live vars: $t2
  1: $t1 := option::some<u64>($t2)
     # live vars: $t1
  2: $t1 := move($t1)
     # live vars: $t1
  3: $t5 := closure#0 Test::__lambda__1__test()
     # live vars: $t1, $t5
  4: $t3 := map_opt::map<u64, u64>($t1, $t5)
     # live vars: $t3
  5: $t6 := borrow_local($t3)
     # live vars: $t6
  6: $t2 := option::extract<u64>($t6)
     # live vars: $t2
  7: return $t2
}


[variant baseline]
fun Test::__lambda__1__test($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: u64 [unused]
     var $t3: u64
     # live vars: $t0
  0: $t0 := move($t0)
     # live vars: $t0
  1: $t3 := 1
     # live vars: $t0, $t3
  2: $t0 := +($t0, $t3)
     # live vars: $t0
  3: return $t0
}


============ disassembled file-format ==================
// Move bytecode v8
module 42.map_opt {
use 0000000000000000000000000000000000000000000000000000000000000001::option;




public map<Element: drop, OtherElement>(t: Option<Element>, f: |Element|OtherElement has drop): Option<OtherElement> /* def_idx: 0 */ {
L2:	return: Option<OtherElement>
B0:
	0: ImmBorrowLoc[0](t: Option<Element>)
	1: Call option::is_some<Element>(&Option<Element>): bool
	2: BrFalse(11)
B1:
	3: MutBorrowLoc[0](t: Option<Element>)
	4: Call option::extract<Element>(&mut Option<Element>): Element
	5: MoveLoc[1](f: |Element|OtherElement has drop)
	6: CallClosure(|Element|OtherElement has drop)
	7: Call option::some<OtherElement>(OtherElement): Option<OtherElement>
	8: StLoc[2](return: Option<OtherElement>)
B2:
	9: MoveLoc[2](return: Option<OtherElement>)
	10: Ret
B3:
	11: Call option::none<OtherElement>(): Option<OtherElement>
	12: StLoc[2](return: Option<OtherElement>)
	13: Branch(9)
}
}// Move bytecode v8
module 42.Test {
use 0000000000000000000000000000000000000000000000000000000000000001::option;
use 0000000000000000000000000000000000000000000000000000000000000042::map_opt;




public test(): u64 /* def_idx: 0 */ {
L0:	x: Option<u64>
B0:
	0: LdU64(1)
	1: Call option::some<u64>(u64): Option<u64>
	2: PackClosure#0 __lambda__1__test(u64): u64
	3: Call map_opt::map<u64, u64>(Option<u64>, |u64|u64 has drop): Option<u64>
	4: StLoc[0](x: Option<u64>)
	5: MutBorrowLoc[0](x: Option<u64>)
	6: Call option::extract<u64>(&mut Option<u64>): u64
	7: Ret
}
__lambda__1__test(e: u64): u64 /* def_idx: 1 */ {
B0:
	0: MoveLoc[0](e: u64)
	1: LdU64(1)
	2: Add
	3: Ret
}
}
============ bytecode verification succeeded ========
