// -- Model dump before bytecode pipeline
module 0x42::Test {
    private fun apply(v: u64,predicate: |u64|bool): bool {
        spec {
          assert Ge($t0, 0);
        }
        ;
        (predicate)(v)
    }
    public fun test_apply(x: u64) {
        {
          let r1: bool = Test::apply(x, closure#0Test::__lambda__1__test_apply());
          spec {
            assert r1;
          }
          ;
          if r1 {
            Tuple()
          } else {
            Abort(1)
          };
          {
            let r2: bool = Test::apply(x, closure#0Test::__lambda__2__test_apply());
            spec {
              assert r2;
            }
            ;
            if r2 {
              Tuple()
            } else {
              Abort(2)
            };
            Tuple()
          }
        }
    }
    private fun __lambda__1__test_apply(v: u64): bool {
        Ge<u64>(v, 0)
    }
    private fun __lambda__2__test_apply(v: u64): bool {
        Neq<u64>(v, 0)
    }
} // end 0x42::Test

// -- Sourcified model before bytecode pipeline
module 0x42::Test {
    fun apply(v: u64, predicate: |u64|bool): bool {

        /* spec {
          assert Ge($t0, 0);
        }
         */
        ;
        predicate(v)
    }
    public fun test_apply(x: u64) {
        let r1 = apply(x, |arg0| __lambda__1__test_apply(arg0));

        /* spec {
          assert r1;
        }
         */
        ;
        if (r1) () else abort 1;
        let r2 = apply(x, |arg0| __lambda__2__test_apply(arg0));

        /* spec {
          assert r2;
        }
         */
        ;
        if (r2) () else abort 2;
    }
    fun __lambda__1__test_apply(v: u64): bool {
        v >= 0
    }
    fun __lambda__2__test_apply(v: u64): bool {
        v != 0
    }
}

============ initial bytecode ================

[variant baseline]
fun Test::apply($t0: u64, $t1: |u64|bool): bool {
     var $t2: bool
     var $t3: u64
  0: spec {
  assert Ge($t0, 0);
}

  1: $t3 := infer($t0)
  2: $t2 := invoke($t3, $t1)
  3: return $t2
}


[variant baseline]
public fun Test::test_apply($t0: u64) {
     var $t1: bool
     var $t2: u64
     var $t3: |u64|bool
     var $t4: u64
     var $t5: bool
     var $t6: u64
     var $t7: |u64|bool
     var $t8: u64
  0: $t2 := infer($t0)
  1: $t3 := closure#0 Test::__lambda__1__test_apply()
  2: $t1 := Test::apply($t2, $t3)
  3: spec {
  assert $t1;
}

  4: if ($t1) goto 5 else goto 7
  5: label L0
  6: goto 10
  7: label L1
  8: $t4 := 1
  9: abort($t4)
 10: label L2
 11: $t6 := infer($t0)
 12: $t7 := closure#0 Test::__lambda__2__test_apply()
 13: $t5 := Test::apply($t6, $t7)
 14: spec {
  assert $t5;
}

 15: if ($t5) goto 16 else goto 18
 16: label L3
 17: goto 21
 18: label L4
 19: $t8 := 2
 20: abort($t8)
 21: label L5
 22: return ()
}


[variant baseline]
fun Test::__lambda__1__test_apply($t0: u64): bool {
     var $t1: bool
     var $t2: u64
     var $t3: u64
  0: $t2 := infer($t0)
  1: $t3 := 0
  2: $t1 := >=($t2, $t3)
  3: return $t1
}


[variant baseline]
fun Test::__lambda__2__test_apply($t0: u64): bool {
     var $t1: bool
     var $t2: u64
     var $t3: u64
  0: $t2 := infer($t0)
  1: $t3 := 0
  2: $t1 := !=($t2, $t3)
  3: return $t1
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun Test::apply($t0: u64, $t1: |u64|bool): bool {
     var $t2: bool
     var $t3: u64
     # live vars: $t0, $t1
  0: spec {
  assert Ge($t0, 0);
}

     # live vars: $t0, $t1
  1: $t3 := move($t0)
     # live vars: $t1, $t3
  2: $t2 := invoke($t3, $t1)
     # live vars: $t2
  3: return $t2
}


[variant baseline]
public fun Test::test_apply($t0: u64) {
     var $t1: bool
     var $t2: u64
     var $t3: |u64|bool
     var $t4: u64 [unused]
     var $t5: bool
     var $t6: u64 [unused]
     var $t7: |u64|bool [unused]
     var $t8: u64 [unused]
     # live vars: $t0
  0: $t2 := copy($t0)
     # live vars: $t0, $t2
  1: $t3 := closure#0 Test::__lambda__1__test_apply()
     # live vars: $t0, $t2, $t3
  2: $t1 := Test::apply($t2, $t3)
     # live vars: $t0, $t1
  3: spec {
  assert $t1;
}

     # live vars: $t0, $t1
  4: if ($t1) goto 5 else goto 16
     # live vars: $t0
  5: label L0
     # live vars: $t0
  6: $t2 := move($t0)
     # live vars: $t2
  7: $t3 := closure#0 Test::__lambda__2__test_apply()
     # live vars: $t2, $t3
  8: $t5 := Test::apply($t2, $t3)
     # live vars: $t5
  9: spec {
  assert $t5;
}

     # live vars: $t5
 10: if ($t5) goto 11 else goto 13
     # live vars:
 11: label L3
     # live vars:
 12: return ()
     # live vars:
 13: label L4
     # live vars:
 14: $t2 := 2
     # live vars: $t2
 15: abort($t2)
     # live vars: $t0
 16: label L1
     # live vars:
 17: $t0 := 1
     # live vars: $t0
 18: abort($t0)
}


[variant baseline]
fun Test::__lambda__1__test_apply($t0: u64): bool {
     var $t1: bool
     var $t2: u64 [unused]
     var $t3: u64
     # live vars: $t0
  0: $t0 := move($t0)
     # live vars: $t0
  1: $t3 := 0
     # live vars: $t0, $t3
  2: $t1 := >=($t0, $t3)
     # live vars: $t1
  3: return $t1
}


[variant baseline]
fun Test::__lambda__2__test_apply($t0: u64): bool {
     var $t1: bool
     var $t2: u64 [unused]
     var $t3: u64
     # live vars: $t0
  0: $t0 := move($t0)
     # live vars: $t0
  1: $t3 := 0
     # live vars: $t0, $t3
  2: $t1 := !=($t0, $t3)
     # live vars: $t1
  3: return $t1
}


============ disassembled file-format ==================
// Move bytecode v8
module 42.Test {


apply(v: u64, predicate: |u64|bool): bool /* def_idx: 0 */ {
B0:
	0: Nop
	1: MoveLoc[0](v: u64)
	2: MoveLoc[1](predicate: |u64|bool)
	3: CallClosure(|u64|bool)
	4: Ret
}
public test_apply(x: u64) /* def_idx: 1 */ {
L1:	r1: bool
L2:	r2: bool
B0:
	0: CopyLoc[0](x: u64)
	1: PackClosure#0 __lambda__1__test_apply(u64): bool
	2: Call apply(u64, |u64|bool): bool
	3: StLoc[1](r1: bool)
	4: Nop
	5: MoveLoc[1](r1: bool)
	6: BrFalse(17)
B1:
	7: MoveLoc[0](x: u64)
	8: PackClosure#0 __lambda__2__test_apply(u64): bool
	9: Call apply(u64, |u64|bool): bool
	10: StLoc[2](r2: bool)
	11: Nop
	12: MoveLoc[2](r2: bool)
	13: BrFalse(15)
B2:
	14: Ret
B3:
	15: LdU64(2)
	16: Abort
B4:
	17: LdU64(1)
	18: Abort
}
__lambda__1__test_apply(v: u64): bool /* def_idx: 2 */ {
B0:
	0: MoveLoc[0](v: u64)
	1: LdU64(0)
	2: Ge
	3: Ret
}
__lambda__2__test_apply(v: u64): bool /* def_idx: 3 */ {
B0:
	0: MoveLoc[0](v: u64)
	1: LdU64(0)
	2: Neq
	3: Ret
}
}
============ bytecode verification succeeded ========
