// -- Model dump before bytecode pipeline
module 0x42::m {
    struct S<T> {
        x: T,
    }
    private fun id<T>(self: S<T>): S<T> {
        self
    }
    private fun inlined<T>(f: |S<T>|S<T>,s: S<T>) {
        (f)(s);
        Tuple()
    }
    private fun test_receiver_inference(s: S<u64>) {
        m::inlined<u64>(closure#0m::id<u64>(), s)
    }
} // end 0x42::m

// -- Sourcified model before bytecode pipeline
module 0x42::m {
    struct S<T> has drop {
        x: T,
    }
    fun id<T>(self: S<T>): S<T> {
        self
    }
    fun inlined<T: drop>(f: |S<T>|S<T>, s: S<T>) {
        f(s);
    }
    fun test_receiver_inference(s: S<u64>) {
        inlined<u64>(|arg0| id(arg0), s)
    }
}

============ initial bytecode ================

[variant baseline]
fun m::id<#0>($t0: 0x42::m::S<#0>): 0x42::m::S<#0> {
     var $t1: 0x42::m::S<#0>
  0: $t1 := infer($t0)
  1: return $t1
}


[variant baseline]
fun m::inlined<#0>($t0: |0x42::m::S<#0>|0x42::m::S<#0>, $t1: 0x42::m::S<#0>) {
     var $t2: 0x42::m::S<#0>
  0: $t2 := invoke($t1, $t0)
  1: return ()
}


[variant baseline]
fun m::test_receiver_inference($t0: 0x42::m::S<u64>) {
     var $t1: |0x42::m::S<u64>|0x42::m::S<u64>
  0: $t1 := closure#0 m::id<u64>()
  1: m::inlined<u64>($t1, $t0)
  2: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::id<#0>($t0: 0x42::m::S<#0>): 0x42::m::S<#0> {
     var $t1: 0x42::m::S<#0> [unused]
     # live vars: $t0
  0: return $t0
}


[variant baseline]
fun m::inlined<#0>($t0: |0x42::m::S<#0>|0x42::m::S<#0>, $t1: 0x42::m::S<#0>) {
     var $t2: 0x42::m::S<#0> [unused]
     # live vars: $t0, $t1
  0: $t1 := invoke($t1, $t0)
     # live vars:
  1: return ()
}


[variant baseline]
fun m::test_receiver_inference($t0: 0x42::m::S<u64>) {
     var $t1: |0x42::m::S<u64>|0x42::m::S<u64>
     # live vars: $t0
  0: $t1 := closure#0 m::id<u64>()
     # live vars: $t0, $t1
  1: m::inlined<u64>($t1, $t0)
     # live vars:
  2: return ()
}


============ disassembled file-format ==================
// Move bytecode v8
module 42.m {
struct S<T> has drop {
	x: T
}

id<T>(self: S<T>): S<T> /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](self: S<T>)
	1: Ret
}
inlined<T: drop>(f: |S<T>|S<T>, s: S<T>) /* def_idx: 1 */ {
B0:
	0: MoveLoc[1](s: S<T>)
	1: MoveLoc[0](f: |S<T>|S<T>)
	2: CallClosure(|S<T>|S<T>)
	3: Pop
	4: Ret
}
test_receiver_inference(s: S<u64>) /* def_idx: 2 */ {
B0:
	0: PackClosureGeneric#0 id<u64>(S<u64>): S<u64>
	1: MoveLoc[0](s: S<u64>)
	2: Call inlined<u64>(|S<u64>|S<u64>, S<u64>)
	3: Ret
}
}
============ bytecode verification succeeded ========
