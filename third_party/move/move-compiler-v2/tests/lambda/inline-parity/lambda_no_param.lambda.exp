// -- Model dump before bytecode pipeline
module 0xdecafbad::m {
    private fun bar(f: |()|u64): u64 {
        (f)()
    }
    private fun foo(f: |()|) {
        (f)();
        Tuple()
    }
    public fun one() {
        m::foo(closure#0m::__lambda__1__one());
        Tuple()
    }
    public fun two(x: u64): u64 {
        m::bar(closure#1m::__lambda__1__two(x))
    }
    private fun __lambda__1__one() {
        Tuple()
    }
    private fun __lambda__1__two(x: u64): u64 {
        x
    }
} // end 0xdecafbad::m

// -- Sourcified model before bytecode pipeline
module 0xdecafbad::m {
    fun bar(f: |()|u64): u64 {
        f()
    }
    fun foo(f: |()|) {
        f();
    }
    public fun one() {
        foo(|()| __lambda__1__one());
    }
    public fun two(x: u64): u64 {
        bar(|()| __lambda__1__two(x))
    }
    fun __lambda__1__one() {
    }
    fun __lambda__1__two(x: u64): u64 {
        x
    }
}

============ initial bytecode ================

[variant baseline]
fun m::bar($t0: |()|u64): u64 {
     var $t1: u64
  0: $t1 := invoke($t0)
  1: return $t1
}


[variant baseline]
fun m::foo($t0: |()|) {
  0: invoke($t0)
  1: return ()
}


[variant baseline]
public fun m::one() {
     var $t0: |()|
  0: $t0 := closure#0 m::__lambda__1__one()
  1: m::foo($t0)
  2: return ()
}


[variant baseline]
public fun m::two($t0: u64): u64 {
     var $t1: u64
     var $t2: |()|u64
  0: $t2 := closure#1 m::__lambda__1__two($t0)
  1: $t1 := m::bar($t2)
  2: return $t1
}


[variant baseline]
fun m::__lambda__1__one() {
  0: return ()
}


[variant baseline]
fun m::__lambda__1__two($t0: u64): u64 {
     var $t1: u64
  0: $t1 := infer($t0)
  1: return $t1
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::bar($t0: |()|u64): u64 {
     var $t1: u64
     # live vars: $t0
  0: $t1 := invoke($t0)
     # live vars: $t1
  1: return $t1
}


[variant baseline]
fun m::foo($t0: |()|) {
     # live vars: $t0
  0: invoke($t0)
     # live vars:
  1: return ()
}


[variant baseline]
public fun m::one() {
     var $t0: |()|
     # live vars:
  0: $t0 := closure#0 m::__lambda__1__one()
     # live vars: $t0
  1: m::foo($t0)
     # live vars:
  2: return ()
}


[variant baseline]
public fun m::two($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: |()|u64
     # live vars: $t0
  0: $t2 := closure#1 m::__lambda__1__two($t0)
     # live vars: $t2
  1: $t0 := m::bar($t2)
     # live vars: $t0
  2: return $t0
}


[variant baseline]
fun m::__lambda__1__one() {
     # live vars:
  0: return ()
}


[variant baseline]
fun m::__lambda__1__two($t0: u64): u64 {
     var $t1: u64 [unused]
     # live vars: $t0
  0: return $t0
}


============ disassembled file-format ==================
// Move bytecode v8
module decafbad.m {


bar(f: ||u64): u64 /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](f: ||u64)
	1: CallClosure(||u64)
	2: Ret
}
foo(f: ||) /* def_idx: 1 */ {
B0:
	0: MoveLoc[0](f: ||)
	1: CallClosure(||)
	2: Ret
}
public one() /* def_idx: 2 */ {
B0:
	0: PackClosure#0 __lambda__1__one()
	1: Call foo(||)
	2: Ret
}
public two(x: u64): u64 /* def_idx: 3 */ {
B0:
	0: MoveLoc[0](x: u64)
	1: PackClosure#1 __lambda__1__two(u64): u64
	2: Call bar(||u64): u64
	3: Ret
}
__lambda__1__one() /* def_idx: 4 */ {
B0:
	0: Ret
}
__lambda__1__two(x: u64): u64 /* def_idx: 5 */ {
B0:
	0: MoveLoc[0](x: u64)
	1: Ret
}
}
============ bytecode verification succeeded ========
