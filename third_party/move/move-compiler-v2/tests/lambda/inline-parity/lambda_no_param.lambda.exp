// -- Model dump before env processor pipeline:
module 0xdecafbad::m {
    private fun bar(f: |()|u64): u64 {
        (f)()
    }
    private fun foo(f: |()|) {
        (f)();
        Tuple()
    }
    public fun one() {
        m::foo(|(): ()| Tuple());
        Tuple()
    }
    public fun two(x: u64): u64 {
        m::bar(|(): ()| x)
    }
} // end 0xdecafbad::m


// -- Model dump after env processor unused checks:
module 0xdecafbad::m {
    private fun bar(f: |()|u64): u64 {
        (f)()
    }
    private fun foo(f: |()|) {
        (f)();
        Tuple()
    }
    public fun one() {
        m::foo(|(): ()| Tuple());
        Tuple()
    }
    public fun two(x: u64): u64 {
        m::bar(|(): ()| x)
    }
} // end 0xdecafbad::m


// -- Model dump after env processor type parameter check:
module 0xdecafbad::m {
    private fun bar(f: |()|u64): u64 {
        (f)()
    }
    private fun foo(f: |()|) {
        (f)();
        Tuple()
    }
    public fun one() {
        m::foo(|(): ()| Tuple());
        Tuple()
    }
    public fun two(x: u64): u64 {
        m::bar(|(): ()| x)
    }
} // end 0xdecafbad::m


// -- Model dump after env processor check recursive struct definition:
module 0xdecafbad::m {
    private fun bar(f: |()|u64): u64 {
        (f)()
    }
    private fun foo(f: |()|) {
        (f)();
        Tuple()
    }
    public fun one() {
        m::foo(|(): ()| Tuple());
        Tuple()
    }
    public fun two(x: u64): u64 {
        m::bar(|(): ()| x)
    }
} // end 0xdecafbad::m


// -- Model dump after env processor check cyclic type instantiation:
module 0xdecafbad::m {
    private fun bar(f: |()|u64): u64 {
        (f)()
    }
    private fun foo(f: |()|) {
        (f)();
        Tuple()
    }
    public fun one() {
        m::foo(|(): ()| Tuple());
        Tuple()
    }
    public fun two(x: u64): u64 {
        m::bar(|(): ()| x)
    }
} // end 0xdecafbad::m


// -- Model dump after env processor unused struct params check:
module 0xdecafbad::m {
    private fun bar(f: |()|u64): u64 {
        (f)()
    }
    private fun foo(f: |()|) {
        (f)();
        Tuple()
    }
    public fun one() {
        m::foo(|(): ()| Tuple());
        Tuple()
    }
    public fun two(x: u64): u64 {
        m::bar(|(): ()| x)
    }
} // end 0xdecafbad::m


// -- Model dump after env processor access and use check before inlining:
module 0xdecafbad::m {
    private fun bar(f: |()|u64): u64 {
        (f)()
    }
    private fun foo(f: |()|) {
        (f)();
        Tuple()
    }
    public fun one() {
        m::foo(|(): ()| Tuple());
        Tuple()
    }
    public fun two(x: u64): u64 {
        m::bar(|(): ()| x)
    }
} // end 0xdecafbad::m


// -- Model dump after env processor inlining:
module 0xdecafbad::m {
    private fun bar(f: |()|u64): u64 {
        (f)()
    }
    private fun foo(f: |()|) {
        (f)();
        Tuple()
    }
    public fun one() {
        m::foo(|(): ()| Tuple());
        Tuple()
    }
    public fun two(x: u64): u64 {
        m::bar(|(): ()| x)
    }
} // end 0xdecafbad::m


// -- Model dump after env processor access and use check after inlining:
module 0xdecafbad::m {
    private fun bar(f: |()|u64): u64 {
        (f)()
    }
    private fun foo(f: |()|) {
        (f)();
        Tuple()
    }
    public fun one() {
        m::foo(|(): ()| Tuple());
        Tuple()
    }
    public fun two(x: u64): u64 {
        m::bar(|(): ()| x)
    }
} // end 0xdecafbad::m


// -- Model dump after env processor acquires check:
module 0xdecafbad::m {
    private fun bar(f: |()|u64): u64 {
        (f)()
    }
    private fun foo(f: |()|) {
        (f)();
        Tuple()
    }
    public fun one() {
        m::foo(|(): ()| Tuple());
        Tuple()
    }
    public fun two(x: u64): u64 {
        m::bar(|(): ()| x)
    }
} // end 0xdecafbad::m


// -- Model dump after env processor simplifier:
module 0xdecafbad::m {
    private fun bar(f: |()|u64): u64 {
        (f)()
    }
    private fun foo(f: |()|) {
        (f)();
        Tuple()
    }
    public fun one() {
        m::foo(|(): ()| Tuple());
        Tuple()
    }
    public fun two(x: u64): u64 {
        m::bar(|(): ()| x)
    }
} // end 0xdecafbad::m



Diagnostics:
error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
  ┌─ tests/lambda/inline-parity/lambda_no_param.move:7:13
  │
7 │         foo(|| {});
  │             ^^^^^

error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
   ┌─ tests/lambda/inline-parity/lambda_no_param.move:15:13
   │
15 │         bar(||x)
   │             ^^^
