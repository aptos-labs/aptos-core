// -- Model dump before env processor pipeline:
module 0xc0ffee::m {
    public fun bar(): u64 {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, 10) {
              i: u64 = Add<u64>(i, 1);
              if Eq<u64>(i, 5) {
                m::brk2(|_x: u64| break);
                m::brk2(|_x: u64| loop {
                  if true {
                    break
                  } else {
                    break
                  }
                });
                m::brk2(|_x: u64| loop {
                  if true {
                    continue
                  } else {
                    break
                  }
                });
                Tuple()
              } else {
                Tuple()
              }
            } else {
              break
            }
          };
          i
        }
    }
    private inline fun brk() {
        break;
        Tuple()
    }
    private inline fun brk2(f: |u64|) {
        (f)(2);
        Tuple()
    }
    private inline fun brk3() {
        loop {
          if true {
            break;
            Tuple()
          } else {
            break
          }
        }
    }
    private inline fun brk4() {
        loop {
          if true {
            continue;
            Tuple()
          } else {
            break
          }
        }
    }
    private fun broken() {
        break;
        Tuple()
    }
    private fun continued() {
        continue;
        Tuple()
    }
    public fun foo(): u64 {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, 10) {
              i: u64 = Add<u64>(i, 1);
              if Eq<u64>(i, 5) {
                m::brk();
                m::brk3();
                m::brk4();
                Tuple()
              } else {
                Tuple()
              }
            } else {
              break
            }
          };
          i
        }
    }
} // end 0xc0ffee::m


// -- Model dump after env processor unused checks:
module 0xc0ffee::m {
    public fun bar(): u64 {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, 10) {
              i: u64 = Add<u64>(i, 1);
              if Eq<u64>(i, 5) {
                m::brk2(|_x: u64| break);
                m::brk2(|_x: u64| loop {
                  if true {
                    break
                  } else {
                    break
                  }
                });
                m::brk2(|_x: u64| loop {
                  if true {
                    continue
                  } else {
                    break
                  }
                });
                Tuple()
              } else {
                Tuple()
              }
            } else {
              break
            }
          };
          i
        }
    }
    private inline fun brk() {
        break;
        Tuple()
    }
    private inline fun brk2(f: |u64|) {
        (f)(2);
        Tuple()
    }
    private inline fun brk3() {
        loop {
          if true {
            break;
            Tuple()
          } else {
            break
          }
        }
    }
    private inline fun brk4() {
        loop {
          if true {
            continue;
            Tuple()
          } else {
            break
          }
        }
    }
    private fun broken() {
        break;
        Tuple()
    }
    private fun continued() {
        continue;
        Tuple()
    }
    public fun foo(): u64 {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, 10) {
              i: u64 = Add<u64>(i, 1);
              if Eq<u64>(i, 5) {
                m::brk();
                m::brk3();
                m::brk4();
                Tuple()
              } else {
                Tuple()
              }
            } else {
              break
            }
          };
          i
        }
    }
} // end 0xc0ffee::m


// -- Model dump after env processor type parameter check:
module 0xc0ffee::m {
    public fun bar(): u64 {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, 10) {
              i: u64 = Add<u64>(i, 1);
              if Eq<u64>(i, 5) {
                m::brk2(|_x: u64| break);
                m::brk2(|_x: u64| loop {
                  if true {
                    break
                  } else {
                    break
                  }
                });
                m::brk2(|_x: u64| loop {
                  if true {
                    continue
                  } else {
                    break
                  }
                });
                Tuple()
              } else {
                Tuple()
              }
            } else {
              break
            }
          };
          i
        }
    }
    private inline fun brk() {
        break;
        Tuple()
    }
    private inline fun brk2(f: |u64|) {
        (f)(2);
        Tuple()
    }
    private inline fun brk3() {
        loop {
          if true {
            break;
            Tuple()
          } else {
            break
          }
        }
    }
    private inline fun brk4() {
        loop {
          if true {
            continue;
            Tuple()
          } else {
            break
          }
        }
    }
    private fun broken() {
        break;
        Tuple()
    }
    private fun continued() {
        continue;
        Tuple()
    }
    public fun foo(): u64 {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, 10) {
              i: u64 = Add<u64>(i, 1);
              if Eq<u64>(i, 5) {
                m::brk();
                m::brk3();
                m::brk4();
                Tuple()
              } else {
                Tuple()
              }
            } else {
              break
            }
          };
          i
        }
    }
} // end 0xc0ffee::m


// -- Model dump after env processor check recursive struct definition:
module 0xc0ffee::m {
    public fun bar(): u64 {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, 10) {
              i: u64 = Add<u64>(i, 1);
              if Eq<u64>(i, 5) {
                m::brk2(|_x: u64| break);
                m::brk2(|_x: u64| loop {
                  if true {
                    break
                  } else {
                    break
                  }
                });
                m::brk2(|_x: u64| loop {
                  if true {
                    continue
                  } else {
                    break
                  }
                });
                Tuple()
              } else {
                Tuple()
              }
            } else {
              break
            }
          };
          i
        }
    }
    private inline fun brk() {
        break;
        Tuple()
    }
    private inline fun brk2(f: |u64|) {
        (f)(2);
        Tuple()
    }
    private inline fun brk3() {
        loop {
          if true {
            break;
            Tuple()
          } else {
            break
          }
        }
    }
    private inline fun brk4() {
        loop {
          if true {
            continue;
            Tuple()
          } else {
            break
          }
        }
    }
    private fun broken() {
        break;
        Tuple()
    }
    private fun continued() {
        continue;
        Tuple()
    }
    public fun foo(): u64 {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, 10) {
              i: u64 = Add<u64>(i, 1);
              if Eq<u64>(i, 5) {
                m::brk();
                m::brk3();
                m::brk4();
                Tuple()
              } else {
                Tuple()
              }
            } else {
              break
            }
          };
          i
        }
    }
} // end 0xc0ffee::m


// -- Model dump after env processor check cyclic type instantiation:
module 0xc0ffee::m {
    public fun bar(): u64 {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, 10) {
              i: u64 = Add<u64>(i, 1);
              if Eq<u64>(i, 5) {
                m::brk2(|_x: u64| break);
                m::brk2(|_x: u64| loop {
                  if true {
                    break
                  } else {
                    break
                  }
                });
                m::brk2(|_x: u64| loop {
                  if true {
                    continue
                  } else {
                    break
                  }
                });
                Tuple()
              } else {
                Tuple()
              }
            } else {
              break
            }
          };
          i
        }
    }
    private inline fun brk() {
        break;
        Tuple()
    }
    private inline fun brk2(f: |u64|) {
        (f)(2);
        Tuple()
    }
    private inline fun brk3() {
        loop {
          if true {
            break;
            Tuple()
          } else {
            break
          }
        }
    }
    private inline fun brk4() {
        loop {
          if true {
            continue;
            Tuple()
          } else {
            break
          }
        }
    }
    private fun broken() {
        break;
        Tuple()
    }
    private fun continued() {
        continue;
        Tuple()
    }
    public fun foo(): u64 {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, 10) {
              i: u64 = Add<u64>(i, 1);
              if Eq<u64>(i, 5) {
                m::brk();
                m::brk3();
                m::brk4();
                Tuple()
              } else {
                Tuple()
              }
            } else {
              break
            }
          };
          i
        }
    }
} // end 0xc0ffee::m


// -- Model dump after env processor unused struct params check:
module 0xc0ffee::m {
    public fun bar(): u64 {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, 10) {
              i: u64 = Add<u64>(i, 1);
              if Eq<u64>(i, 5) {
                m::brk2(|_x: u64| break);
                m::brk2(|_x: u64| loop {
                  if true {
                    break
                  } else {
                    break
                  }
                });
                m::brk2(|_x: u64| loop {
                  if true {
                    continue
                  } else {
                    break
                  }
                });
                Tuple()
              } else {
                Tuple()
              }
            } else {
              break
            }
          };
          i
        }
    }
    private inline fun brk() {
        break;
        Tuple()
    }
    private inline fun brk2(f: |u64|) {
        (f)(2);
        Tuple()
    }
    private inline fun brk3() {
        loop {
          if true {
            break;
            Tuple()
          } else {
            break
          }
        }
    }
    private inline fun brk4() {
        loop {
          if true {
            continue;
            Tuple()
          } else {
            break
          }
        }
    }
    private fun broken() {
        break;
        Tuple()
    }
    private fun continued() {
        continue;
        Tuple()
    }
    public fun foo(): u64 {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, 10) {
              i: u64 = Add<u64>(i, 1);
              if Eq<u64>(i, 5) {
                m::brk();
                m::brk3();
                m::brk4();
                Tuple()
              } else {
                Tuple()
              }
            } else {
              break
            }
          };
          i
        }
    }
} // end 0xc0ffee::m


// -- Model dump after env processor access and use check before inlining:
module 0xc0ffee::m {
    public fun bar(): u64 {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, 10) {
              i: u64 = Add<u64>(i, 1);
              if Eq<u64>(i, 5) {
                m::brk2(|_x: u64| break);
                m::brk2(|_x: u64| loop {
                  if true {
                    break
                  } else {
                    break
                  }
                });
                m::brk2(|_x: u64| loop {
                  if true {
                    continue
                  } else {
                    break
                  }
                });
                Tuple()
              } else {
                Tuple()
              }
            } else {
              break
            }
          };
          i
        }
    }
    private inline fun brk() {
        break;
        Tuple()
    }
    private inline fun brk2(f: |u64|) {
        (f)(2);
        Tuple()
    }
    private inline fun brk3() {
        loop {
          if true {
            break;
            Tuple()
          } else {
            break
          }
        }
    }
    private inline fun brk4() {
        loop {
          if true {
            continue;
            Tuple()
          } else {
            break
          }
        }
    }
    private fun broken() {
        break;
        Tuple()
    }
    private fun continued() {
        continue;
        Tuple()
    }
    public fun foo(): u64 {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, 10) {
              i: u64 = Add<u64>(i, 1);
              if Eq<u64>(i, 5) {
                m::brk();
                m::brk3();
                m::brk4();
                Tuple()
              } else {
                Tuple()
              }
            } else {
              break
            }
          };
          i
        }
    }
} // end 0xc0ffee::m



Diagnostics:
error: Break outside of a loop not currently supported in inline functions
  ┌─ tests/lambda/inline-parity/break_continue_in_lambda_typed.move:3:9
  │
3 │         break;
  │         ^^^^^

error: Break outside of a loop not supported in function-typed arguments (lambda expressions)
   ┌─ tests/lambda/inline-parity/break_continue_in_lambda_typed.move:40:32
   │
40 │                 brk2(|_x: u64| break);
   │                                ^^^^^
