// -- Model dump before bytecode pipeline
module 0xc0ffee::m {
    public fun bar(): u64 {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, 10) {
              i: u64 = Add<u64>(i, 1);
              if Eq<u64>(i, 5) {
                m::brk2(closure#0m::__lambda__1__bar());
                m::brk2(closure#0m::__lambda__2__bar());
                m::brk2(closure#0m::__lambda__3__bar());
                Tuple()
              } else {
                Tuple()
              }
            } else {
              break
            }
          };
          i
        }
    }
    private fun brk() {
        break;
        Tuple()
    }
    private fun brk2(f: |u64|) {
        (f)(2);
        Tuple()
    }
    private fun brk3() {
        loop {
          if true {
            break;
            Tuple()
          } else {
            break
          }
        }
    }
    private fun brk4() {
        loop {
          if true {
            continue;
            Tuple()
          } else {
            break
          }
        }
    }
    private fun broken() {
        break;
        Tuple()
    }
    private fun continued() {
        continue;
        Tuple()
    }
    public fun foo(): u64 {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, 10) {
              i: u64 = Add<u64>(i, 1);
              if Eq<u64>(i, 5) {
                m::brk();
                m::brk3();
                m::brk4();
                Tuple()
              } else {
                Tuple()
              }
            } else {
              break
            }
          };
          i
        }
    }
    private fun __lambda__1__bar(_x: u64) {
        break
    }
    private fun __lambda__2__bar(_x: u64) {
        loop {
          if true {
            break
          } else {
            break
          }
        }
    }
    private fun __lambda__3__bar(_x: u64) {
        loop {
          if true {
            continue
          } else {
            break
          }
        }
    }
} // end 0xc0ffee::m

// -- Sourcified model before bytecode pipeline
module 0xc0ffee::m {
    public fun bar(): u64 {
        let i = 0;
        while (i < 10) {
            i = i + 1;
            if (i == 5) {
                brk2(|arg0| __lambda__1__bar(arg0));
                brk2(|arg0| __lambda__2__bar(arg0));
                brk2(|arg0| __lambda__3__bar(arg0));
            }
        };
        i
    }
    fun brk() {
        break;
    }
    fun brk2(f: |u64|) {
        f(2);
    }
    fun brk3() {
        while (true) {
            break;
        }
    }
    fun brk4() {
        while (true) {
            continue;
        }
    }
    fun broken() {
        break;
    }
    fun continued() {
        continue;
    }
    public fun foo(): u64 {
        let i = 0;
        while (i < 10) {
            i = i + 1;
            if (i == 5) {
                brk();
                brk3();
                brk4();
            }
        };
        i
    }
    fun __lambda__1__bar(_x: u64) {
        break
    }
    fun __lambda__2__bar(_x: u64) {
        while (true) break
    }
    fun __lambda__3__bar(_x: u64) {
        while (true) continue
    }
}


Diagnostics:
error: missing enclosing loop statement
  ┌─ tests/lambda/inline-parity/break_continue_in_lambda_typed.move:3:9
  │
3 │         break;
  │         ^^^^^

error: missing enclosing loop statement
   ┌─ tests/lambda/inline-parity/break_continue_in_lambda_typed.move:40:32
   │
40 │                 brk2(|_x: u64| break);
   │                                ^^^^^

error: missing enclosing loop statement
   ┌─ tests/lambda/inline-parity/break_continue_in_lambda_typed.move:49:2
   │
49 │     break;
   │     ^^^^^

error: missing enclosing loop statement
   ┌─ tests/lambda/inline-parity/break_continue_in_lambda_typed.move:53:2
   │
53 │     continue;
   │     ^^^^^^^^
