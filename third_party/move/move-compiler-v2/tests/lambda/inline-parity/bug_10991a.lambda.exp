// -- Model dump before bytecode pipeline
module 0x42::Test {
    private fun foo(f: |(u64, u64)|u64,g: |(u64, u64)|u64,h: |(u64, u64)|u64,i: |(u64, u64)|u64,x: u64,y: u64): u64 {
        Add<u64>(Add<u64>(Add<u64>((f)(x, y), (g)(x, y)), (h)(x, y)), (i)(x, y))
    }
    public fun test() {
        if Eq<u64>(Test::foo(closure#0Test::__lambda__1__test(), closure#0Test::__lambda__2__test(), closure#0Test::__lambda__3__test(), closure#0Test::__lambda__4__test(), 10, 100), 220) {
          Tuple()
        } else {
          Abort(0)
        };
        Tuple()
    }
    private fun __lambda__1__test(x: u64,param$1: u64): u64 {
        {
          let _: u64 = param$1;
          x
        }
    }
    private fun __lambda__2__test(param$0: u64,y: u64): u64 {
        {
          let _: u64 = param$0;
          y
        }
    }
    private fun __lambda__3__test(a: u64,_b: u64): u64 {
        a
    }
    private fun __lambda__4__test(_c: u64,d: u64): u64 {
        d
    }
} // end 0x42::Test

// -- Sourcified model before bytecode pipeline
module 0x42::Test {
    fun foo(f: |(u64, u64)|u64, g: |(u64, u64)|u64, h: |(u64, u64)|u64, i: |(u64, u64)|u64, x: u64, y: u64): u64 {
        f(x, y) + g(x, y) + h(x, y) + i(x, y)
    }
    public fun test() {
        if (foo(|(arg0,arg1)| __lambda__1__test(arg0, arg1), |(arg0,arg1)| __lambda__2__test(arg0, arg1), |(arg0,arg1)| __lambda__3__test(arg0, arg1), |(arg0,arg1)| __lambda__4__test(arg0, arg1), 10, 100) == 220) () else abort 0;
    }
    fun __lambda__1__test(x: u64, param$1: u64): u64 {
        let _ = param$1;
        x
    }
    fun __lambda__2__test(param$0: u64, y: u64): u64 {
        let _ = param$0;
        y
    }
    fun __lambda__3__test(a: u64, _b: u64): u64 {
        a
    }
    fun __lambda__4__test(_c: u64, d: u64): u64 {
        d
    }
}

============ initial bytecode ================

[variant baseline]
fun Test::foo($t0: |(u64, u64)|u64, $t1: |(u64, u64)|u64, $t2: |(u64, u64)|u64, $t3: |(u64, u64)|u64, $t4: u64, $t5: u64): u64 {
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: u64
     var $t11: u64
     var $t12: u64
     var $t13: u64
     var $t14: u64
     var $t15: u64
     var $t16: u64
     var $t17: u64
     var $t18: u64
     var $t19: u64
     var $t20: u64
  0: $t10 := infer($t4)
  1: $t11 := infer($t5)
  2: $t9 := invoke($t10, $t11, $t0)
  3: $t13 := infer($t4)
  4: $t14 := infer($t5)
  5: $t12 := invoke($t13, $t14, $t1)
  6: $t8 := +($t9, $t12)
  7: $t16 := infer($t4)
  8: $t17 := infer($t5)
  9: $t15 := invoke($t16, $t17, $t2)
 10: $t7 := +($t8, $t15)
 11: $t19 := infer($t4)
 12: $t20 := infer($t5)
 13: $t18 := invoke($t19, $t20, $t3)
 14: $t6 := +($t7, $t18)
 15: return $t6
}


[variant baseline]
public fun Test::test() {
     var $t0: bool
     var $t1: u64
     var $t2: |(u64, u64)|u64
     var $t3: |(u64, u64)|u64
     var $t4: |(u64, u64)|u64
     var $t5: |(u64, u64)|u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: u64
  0: $t2 := closure#0 Test::__lambda__1__test()
  1: $t3 := closure#0 Test::__lambda__2__test()
  2: $t4 := closure#0 Test::__lambda__3__test()
  3: $t5 := closure#0 Test::__lambda__4__test()
  4: $t6 := 10
  5: $t7 := 100
  6: $t1 := Test::foo($t2, $t3, $t4, $t5, $t6, $t7)
  7: $t8 := 220
  8: $t0 := ==($t1, $t8)
  9: if ($t0) goto 10 else goto 12
 10: label L0
 11: goto 15
 12: label L1
 13: $t9 := 0
 14: abort($t9)
 15: label L2
 16: return ()
}


[variant baseline]
fun Test::__lambda__1__test($t0: u64, $t1: u64): u64 {
     var $t2: u64
     var $t3: u64
  0: $t3 := infer($t1)
  1: $t2 := infer($t0)
  2: return $t2
}


[variant baseline]
fun Test::__lambda__2__test($t0: u64, $t1: u64): u64 {
     var $t2: u64
     var $t3: u64
  0: $t3 := infer($t0)
  1: $t2 := infer($t1)
  2: return $t2
}


[variant baseline]
fun Test::__lambda__3__test($t0: u64, $t1: u64): u64 {
     var $t2: u64
  0: $t2 := infer($t0)
  1: return $t2
}


[variant baseline]
fun Test::__lambda__4__test($t0: u64, $t1: u64): u64 {
     var $t2: u64
  0: $t2 := infer($t1)
  1: return $t2
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun Test::foo($t0: |(u64, u64)|u64, $t1: |(u64, u64)|u64, $t2: |(u64, u64)|u64, $t3: |(u64, u64)|u64, $t4: u64, $t5: u64): u64 {
     var $t6: u64 [unused]
     var $t7: u64 [unused]
     var $t8: u64 [unused]
     var $t9: u64 [unused]
     var $t10: u64
     var $t11: u64
     var $t12: u64 [unused]
     var $t13: u64 [unused]
     var $t14: u64
     var $t15: u64 [unused]
     var $t16: u64 [unused]
     var $t17: u64 [unused]
     var $t18: u64 [unused]
     var $t19: u64 [unused]
     var $t20: u64 [unused]
     # live vars: $t0, $t1, $t2, $t3, $t4, $t5
  0: $t10 := copy($t4)
     # live vars: $t0, $t1, $t2, $t3, $t4, $t5, $t10
  1: $t11 := copy($t5)
     # live vars: $t0, $t1, $t2, $t3, $t4, $t5, $t10, $t11
  2: $t10 := invoke($t10, $t11, $t0)
     # live vars: $t1, $t2, $t3, $t4, $t5, $t10
  3: $t11 := copy($t4)
     # live vars: $t1, $t2, $t3, $t4, $t5, $t10, $t11
  4: $t14 := copy($t5)
     # live vars: $t1, $t2, $t3, $t4, $t5, $t10, $t11, $t14
  5: $t11 := invoke($t11, $t14, $t1)
     # live vars: $t2, $t3, $t4, $t5, $t10, $t11
  6: $t10 := +($t10, $t11)
     # live vars: $t2, $t3, $t4, $t5, $t10
  7: $t11 := copy($t4)
     # live vars: $t2, $t3, $t4, $t5, $t10, $t11
  8: $t14 := copy($t5)
     # live vars: $t2, $t3, $t4, $t5, $t10, $t11, $t14
  9: $t11 := invoke($t11, $t14, $t2)
     # live vars: $t3, $t4, $t5, $t10, $t11
 10: $t10 := +($t10, $t11)
     # live vars: $t3, $t4, $t5, $t10
 11: $t4 := move($t4)
     # live vars: $t3, $t4, $t5, $t10
 12: $t5 := move($t5)
     # live vars: $t3, $t4, $t5, $t10
 13: $t4 := invoke($t4, $t5, $t3)
     # live vars: $t4, $t10
 14: $t4 := +($t10, $t4)
     # live vars: $t4
 15: return $t4
}


[variant baseline]
public fun Test::test() {
     var $t0: bool
     var $t1: u64 [unused]
     var $t2: |(u64, u64)|u64
     var $t3: |(u64, u64)|u64
     var $t4: |(u64, u64)|u64
     var $t5: |(u64, u64)|u64
     var $t6: u64
     var $t7: u64
     var $t8: u64 [unused]
     var $t9: u64 [unused]
     # live vars:
  0: $t2 := closure#0 Test::__lambda__1__test()
     # live vars: $t2
  1: $t3 := closure#0 Test::__lambda__2__test()
     # live vars: $t2, $t3
  2: $t4 := closure#0 Test::__lambda__3__test()
     # live vars: $t2, $t3, $t4
  3: $t5 := closure#0 Test::__lambda__4__test()
     # live vars: $t2, $t3, $t4, $t5
  4: $t6 := 10
     # live vars: $t2, $t3, $t4, $t5, $t6
  5: $t7 := 100
     # live vars: $t2, $t3, $t4, $t5, $t6, $t7
  6: $t6 := Test::foo($t2, $t3, $t4, $t5, $t6, $t7)
     # live vars: $t6
  7: $t7 := 220
     # live vars: $t6, $t7
  8: $t0 := ==($t6, $t7)
     # live vars: $t0
  9: if ($t0) goto 10 else goto 12
     # live vars:
 10: label L0
     # live vars:
 11: return ()
     # live vars:
 12: label L1
     # live vars:
 13: $t6 := 0
     # live vars: $t6
 14: abort($t6)
}


[variant baseline]
fun Test::__lambda__1__test($t0: u64, $t1: u64): u64 {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     # live vars: $t0, $t1
  0: return $t0
}


[variant baseline]
fun Test::__lambda__2__test($t0: u64, $t1: u64): u64 {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     # live vars: $t0, $t1
  0: return $t1
}


[variant baseline]
fun Test::__lambda__3__test($t0: u64, $t1: u64): u64 {
     var $t2: u64 [unused]
     # live vars: $t0, $t1
  0: return $t0
}


[variant baseline]
fun Test::__lambda__4__test($t0: u64, $t1: u64): u64 {
     var $t2: u64 [unused]
     # live vars: $t0, $t1
  0: return $t1
}


============ disassembled file-format ==================
// Move bytecode v8
module 42.Test {


foo(f: |u64,u64|u64, g: |u64,u64|u64, h: |u64,u64|u64, i: |u64,u64|u64, x: u64, y: u64): u64 /* def_idx: 0 */ {
B0:
	0: CopyLoc[4](x: u64)
	1: CopyLoc[5](y: u64)
	2: MoveLoc[0](f: |u64,u64|u64)
	3: CallClosure(|u64,u64|u64)
	4: CopyLoc[4](x: u64)
	5: CopyLoc[5](y: u64)
	6: MoveLoc[1](g: |u64,u64|u64)
	7: CallClosure(|u64,u64|u64)
	8: Add
	9: CopyLoc[4](x: u64)
	10: CopyLoc[5](y: u64)
	11: MoveLoc[2](h: |u64,u64|u64)
	12: CallClosure(|u64,u64|u64)
	13: Add
	14: MoveLoc[4](x: u64)
	15: MoveLoc[5](y: u64)
	16: MoveLoc[3](i: |u64,u64|u64)
	17: CallClosure(|u64,u64|u64)
	18: Add
	19: Ret
}
public test() /* def_idx: 1 */ {
B0:
	0: PackClosure#0 __lambda__1__test(u64, u64): u64
	1: PackClosure#0 __lambda__2__test(u64, u64): u64
	2: PackClosure#0 __lambda__3__test(u64, u64): u64
	3: PackClosure#0 __lambda__4__test(u64, u64): u64
	4: LdU64(10)
	5: LdU64(100)
	6: Call foo(|u64,u64|u64, |u64,u64|u64, |u64,u64|u64, |u64,u64|u64, u64, u64): u64
	7: LdU64(220)
	8: Eq
	9: BrFalse(11)
B1:
	10: Ret
B2:
	11: LdU64(0)
	12: Abort
}
__lambda__1__test(x: u64, param$1: u64): u64 /* def_idx: 2 */ {
B0:
	0: MoveLoc[0](x: u64)
	1: Ret
}
__lambda__2__test(param$0: u64, y: u64): u64 /* def_idx: 3 */ {
B0:
	0: MoveLoc[1](y: u64)
	1: Ret
}
__lambda__3__test(a: u64, _b: u64): u64 /* def_idx: 4 */ {
B0:
	0: MoveLoc[0](a: u64)
	1: Ret
}
__lambda__4__test(_c: u64, d: u64): u64 /* def_idx: 5 */ {
B0:
	0: MoveLoc[1](d: u64)
	1: Ret
}
}
============ bytecode verification succeeded ========
