// -- Model dump before env processor pipeline:
module 0xc0ffee::m {
    private fun call(f: |()|u64): u64 {
        (f)()
    }
    public fun test(): u64 {
        {
          let x: u64 = 1;
          Add<u64>(Add<u64>(x, m::call(|(): ()| x: u64 = Add<u64>(x, 1);
          x)), m::call(|(): ()| x: u64 = Add<u64>(x, 7);
          x))
        }
    }
} // end 0xc0ffee::m


// -- Model dump after env processor unused checks:
module 0xc0ffee::m {
    private fun call(f: |()|u64): u64 {
        (f)()
    }
    public fun test(): u64 {
        {
          let x: u64 = 1;
          Add<u64>(Add<u64>(x, m::call(|(): ()| x: u64 = Add<u64>(x, 1);
          x)), m::call(|(): ()| x: u64 = Add<u64>(x, 7);
          x))
        }
    }
} // end 0xc0ffee::m


// -- Model dump after env processor type parameter check:
module 0xc0ffee::m {
    private fun call(f: |()|u64): u64 {
        (f)()
    }
    public fun test(): u64 {
        {
          let x: u64 = 1;
          Add<u64>(Add<u64>(x, m::call(|(): ()| x: u64 = Add<u64>(x, 1);
          x)), m::call(|(): ()| x: u64 = Add<u64>(x, 7);
          x))
        }
    }
} // end 0xc0ffee::m


// -- Model dump after env processor check recursive struct definition:
module 0xc0ffee::m {
    private fun call(f: |()|u64): u64 {
        (f)()
    }
    public fun test(): u64 {
        {
          let x: u64 = 1;
          Add<u64>(Add<u64>(x, m::call(|(): ()| x: u64 = Add<u64>(x, 1);
          x)), m::call(|(): ()| x: u64 = Add<u64>(x, 7);
          x))
        }
    }
} // end 0xc0ffee::m


// -- Model dump after env processor check cyclic type instantiation:
module 0xc0ffee::m {
    private fun call(f: |()|u64): u64 {
        (f)()
    }
    public fun test(): u64 {
        {
          let x: u64 = 1;
          Add<u64>(Add<u64>(x, m::call(|(): ()| x: u64 = Add<u64>(x, 1);
          x)), m::call(|(): ()| x: u64 = Add<u64>(x, 7);
          x))
        }
    }
} // end 0xc0ffee::m


// -- Model dump after env processor unused struct params check:
module 0xc0ffee::m {
    private fun call(f: |()|u64): u64 {
        (f)()
    }
    public fun test(): u64 {
        {
          let x: u64 = 1;
          Add<u64>(Add<u64>(x, m::call(|(): ()| x: u64 = Add<u64>(x, 1);
          x)), m::call(|(): ()| x: u64 = Add<u64>(x, 7);
          x))
        }
    }
} // end 0xc0ffee::m


// -- Model dump after env processor access and use check before inlining:
module 0xc0ffee::m {
    private fun call(f: |()|u64): u64 {
        (f)()
    }
    public fun test(): u64 {
        {
          let x: u64 = 1;
          Add<u64>(Add<u64>(x, m::call(|(): ()| x: u64 = Add<u64>(x, 1);
          x)), m::call(|(): ()| x: u64 = Add<u64>(x, 7);
          x))
        }
    }
} // end 0xc0ffee::m


// -- Model dump after env processor inlining:
module 0xc0ffee::m {
    private fun call(f: |()|u64): u64 {
        (f)()
    }
    public fun test(): u64 {
        {
          let x: u64 = 1;
          Add<u64>(Add<u64>(x, m::call(|(): ()| x: u64 = Add<u64>(x, 1);
          x)), m::call(|(): ()| x: u64 = Add<u64>(x, 7);
          x))
        }
    }
} // end 0xc0ffee::m


// -- Model dump after env processor access and use check after inlining:
module 0xc0ffee::m {
    private fun call(f: |()|u64): u64 {
        (f)()
    }
    public fun test(): u64 {
        {
          let x: u64 = 1;
          Add<u64>(Add<u64>(x, m::call(|(): ()| x: u64 = Add<u64>(x, 1);
          x)), m::call(|(): ()| x: u64 = Add<u64>(x, 7);
          x))
        }
    }
} // end 0xc0ffee::m


// -- Model dump after env processor acquires check:
module 0xc0ffee::m {
    private fun call(f: |()|u64): u64 {
        (f)()
    }
    public fun test(): u64 {
        {
          let x: u64 = 1;
          Add<u64>(Add<u64>(x, m::call(|(): ()| x: u64 = Add<u64>(x, 1);
          x)), m::call(|(): ()| x: u64 = Add<u64>(x, 7);
          x))
        }
    }
} // end 0xc0ffee::m


// -- Model dump after env processor simplifier:
module 0xc0ffee::m {
    private fun call(f: |()|u64): u64 {
        (f)()
    }
    public fun test(): u64 {
        {
          let x: u64 = 1;
          Add<u64>(Add<u64>(x, m::call(|(): ()| x: u64 = Add<u64>(x, 1);
          x)), m::call(|(): ()| x: u64 = Add<u64>(x, 7);
          x))
        }
    }
} // end 0xc0ffee::m



Diagnostics:
error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
  ┌─ tests/lambda/inline-parity/op_with_side_effect_49.move:9:18
  │
9 │         x + call(|| {x = x + 1; x}) + call(|| {x = x + 7; x})
  │                  ^^^^^^^^^^^^^^^^^

error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
  ┌─ tests/lambda/inline-parity/op_with_side_effect_49.move:9:44
  │
9 │         x + call(|| {x = x + 1; x}) + call(|| {x = x + 7; x})
  │                                            ^^^^^^^^^^^^^^^^^
