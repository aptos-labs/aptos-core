// -- Model dump before bytecode pipeline
module 0x8675309::M {
    public fun f() {
        {
          let _x: |u64|u64 = closure#0M::__lambda__1__f();
          Tuple()
        }
    }
    private fun __lambda__1__f(i: u64): u64 {
        Add<u64>(i, 1)
    }
} // end 0x8675309::M

// -- Sourcified model before bytecode pipeline
module 0x8675309::M {
    public fun f() {
        let _x = |arg0| __lambda__1__f(arg0);
    }
    fun __lambda__1__f(i: u64): u64 {
        i + 1
    }
}

============ initial bytecode ================

[variant baseline]
public fun M::f() {
     var $t0: |u64|u64
  0: $t0 := closure#0 M::__lambda__1__f()
  1: return ()
}


[variant baseline]
fun M::__lambda__1__f($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
  0: $t2 := infer($t0)
  1: $t3 := 1
  2: $t1 := +($t2, $t3)
  3: return $t1
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun M::f() {
     var $t0: |u64|u64
     # live vars:
  0: $t0 := closure#0 M::__lambda__1__f()
     # live vars:
  1: return ()
}


[variant baseline]
fun M::__lambda__1__f($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: u64 [unused]
     var $t3: u64
     # live vars: $t0
  0: $t0 := move($t0)
     # live vars: $t0
  1: $t3 := 1
     # live vars: $t0, $t3
  2: $t0 := +($t0, $t3)
     # live vars: $t0
  3: return $t0
}


============ disassembled file-format ==================
// Move bytecode v8
module 8675309.M {


public f() /* def_idx: 0 */ {
B0:
	0: PackClosure#0 __lambda__1__f(u64): u64
	1: Pop
	2: Ret
}
__lambda__1__f(i: u64): u64 /* def_idx: 1 */ {
B0:
	0: MoveLoc[0](i: u64)
	1: LdU64(1)
	2: Add
	3: Ret
}
}
============ bytecode verification succeeded ========
