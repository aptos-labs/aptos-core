
Diagnostics:
warning: Unused local variable `a`. Consider removing or prefixing with an underscore: `_a`
  ┌─ tests/copy-propagation/call_1.move:7:13
  │
7 │         let a = p;
  │             ^

============ initial bytecode ================

[variant baseline]
fun m::id($t0: u64): u64 {
     var $t1: u64
  0: $t1 := infer($t0)
  1: return $t1
}


[variant baseline]
fun m::test($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
  0: $t2 := infer($t0)
  1: $t3 := infer($t0)
  2: $t4 := infer($t3)
  3: $t6 := m::id($t4)
  4: $t5 := m::id($t6)
  5: $t1 := m::id($t5)
  6: return $t1
}


Diagnostics:
warning: Unused assignment/binding to `a`. Consider removing the assignment/binding, or prefixing with an underscore (e.g., `_a`), or binding to `_`
  ┌─ tests/copy-propagation/call_1.move:7:17
  │
7 │         let a = p;
  │                 ^

============ after DeadStoreElimination: ================

[variant baseline]
fun m::id($t0: u64): u64 {
     var $t1: u64
  0: $t1 := move($t0)
  1: return $t1
}


[variant baseline]
fun m::test($t0: u64): u64 {
     var $t1: u64
     var $t2: u64 [unused]
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
  0: $t3 := move($t0)
  1: $t4 := move($t3)
  2: $t6 := m::id($t4)
  3: $t5 := m::id($t6)
  4: $t1 := m::id($t5)
  5: return $t1
}
