============ bytecode before first stackless bytecode pipeline ================

[variant baseline]
fun m::test($t0: u64): u64 {
     var $t1: u64
     var $t2: &mut u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
  0: $t2 := borrow_local($t0)
  1: $t3 := infer($t0)
  2: $t4 := infer($t3)
  3: $t5 := infer($t4)
  4: $t6 := 0
  5: write_ref($t2, $t6)
  6: $t1 := infer($t5)
  7: return $t1
}


Diagnostics:
error: cannot copy local `p` which is still mutably borrowed
  ┌─ tests/copy-propagation/mut_refs_4.move:5:17
  │
4 │         let a = &mut p;
  │                 ------ local `p` previously mutably borrowed here
5 │         let b = p;
  │                 ^ copy attempted here
  ·
8 │         *a = 0;
  │         ------ conflicting reference `a` used here
