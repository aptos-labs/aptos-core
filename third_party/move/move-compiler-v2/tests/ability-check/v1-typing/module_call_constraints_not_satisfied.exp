
Diagnostics:
error: type `S` is missing required ability `key` (type was inferred)
   ┌─ tests/ability-check/v1-typing/module_call_constraints_not_satisfied.move:32:9
   │
15 │     fun both<R: key, C: copy>(_r: R, _c: C) {
   │              - declaration of type parameter `R`
   ·
32 │         both(S{}, Coin{});
   │         ^^^^
   │
   = required by instantiating type parameter `R:key` of function `both`

error: constraint `integer` does not have required ability `key`
   ┌─ tests/ability-check/v1-typing/module_call_constraints_not_satisfied.move:33:14
   │
33 │         both(0, Coin{})
   │              ^

error: type `Box<C>` is missing required ability `key` (type was inferred)
   ┌─ tests/ability-check/v1-typing/module_call_constraints_not_satisfied.move:37:9
   │
15 │     fun both<R: key, C: copy>(_r: R, _c: C) {
   │              - declaration of type parameter `R`
   ·
37 │         both(new_box<C>(), new_box<R>())
   │         ^^^^
   │
   = required by instantiating type parameter `R:key` of function `both`

error: type `Box3<C, C, C>` is missing required ability `key` (type was inferred)
   ┌─ tests/ability-check/v1-typing/module_call_constraints_not_satisfied.move:41:9
   │
27 │     fun rsrc<R: key>(_r: R) {
   │              - declaration of type parameter `R`
   ·
41 │         rsrc(new_box3<C, C, C>());
   │         ^^^^
   │
   = required by instantiating type parameter `R:key` of function `rsrc`

error: type `R` is missing required ability `copy` (type was inferred)
   ┌─ tests/ability-check/v1-typing/module_call_constraints_not_satisfied.move:43:9
   │
23 │     fun cpy<C: copy>(_c: C) {
   │             - declaration of type parameter `C`
   ·
43 │         cpy(new_box3<R, C, C>());
   │         ^^^
   │
   = required by instantiating type parameter `T1` of struct `Box3`
   = required by instantiating type parameter `C:copy` of function `cpy`

error: type `C` is missing required ability `copy` (type was inferred)
   ┌─ tests/ability-check/v1-typing/module_call_constraints_not_satisfied.move:44:9
   │
23 │     fun cpy<C: copy>(_c: C) {
   │             - declaration of type parameter `C`
   ·
44 │         cpy(new_box3<C, R, C>());
   │         ^^^
   │
   = required by instantiating type parameter `T1` of struct `Box3`
   = required by instantiating type parameter `C:copy` of function `cpy`

error: type `C` is missing required ability `copy` (type was inferred)
   ┌─ tests/ability-check/v1-typing/module_call_constraints_not_satisfied.move:45:9
   │
23 │     fun cpy<C: copy>(_c: C) {
   │             - declaration of type parameter `C`
   ·
45 │         cpy(new_box3<C, C, R>());
   │         ^^^
   │
   = required by instantiating type parameter `T1` of struct `Box3`
   = required by instantiating type parameter `C:copy` of function `cpy`

error: type `C` is missing required ability `copy` (type was inferred)
   ┌─ tests/ability-check/v1-typing/module_call_constraints_not_satisfied.move:47:9
   │
23 │     fun cpy<C: copy>(_c: C) {
   │             - declaration of type parameter `C`
   ·
47 │         cpy(new_box3<C, R, R>());
   │         ^^^
   │
   = required by instantiating type parameter `T1` of struct `Box3`
   = required by instantiating type parameter `C:copy` of function `cpy`

error: type `R` is missing required ability `copy` (type was inferred)
   ┌─ tests/ability-check/v1-typing/module_call_constraints_not_satisfied.move:48:9
   │
23 │     fun cpy<C: copy>(_c: C) {
   │             - declaration of type parameter `C`
   ·
48 │         cpy(new_box3<R, C, R>());
   │         ^^^
   │
   = required by instantiating type parameter `T1` of struct `Box3`
   = required by instantiating type parameter `C:copy` of function `cpy`

error: type `R` is missing required ability `copy` (type was inferred)
   ┌─ tests/ability-check/v1-typing/module_call_constraints_not_satisfied.move:49:9
   │
23 │     fun cpy<C: copy>(_c: C) {
   │             - declaration of type parameter `C`
   ·
49 │         cpy(new_box3<R, R, C>());
   │         ^^^
   │
   = required by instantiating type parameter `T1` of struct `Box3`
   = required by instantiating type parameter `C:copy` of function `cpy`

error: type `R` is missing required ability `copy` (type was inferred)
   ┌─ tests/ability-check/v1-typing/module_call_constraints_not_satisfied.move:51:9
   │
23 │     fun cpy<C: copy>(_c: C) {
   │             - declaration of type parameter `C`
   ·
51 │         cpy(new_box3<R, R, R>());
   │         ^^^
   │
   = required by instantiating type parameter `T1` of struct `Box3`
   = required by instantiating type parameter `C:copy` of function `cpy`

error: type `U` is missing required ability `copy` (type was inferred)
   ┌─ tests/ability-check/v1-typing/module_call_constraints_not_satisfied.move:55:9
   │
23 │     fun cpy<C: copy>(_c: C) {
   │             - declaration of type parameter `C`
   ·
55 │         cpy(new_box3<U, C, C>());
   │         ^^^
   │
   = required by instantiating type parameter `T1` of struct `Box3`
   = required by instantiating type parameter `C:copy` of function `cpy`

error: type `C` is missing required ability `copy` (type was inferred)
   ┌─ tests/ability-check/v1-typing/module_call_constraints_not_satisfied.move:56:9
   │
23 │     fun cpy<C: copy>(_c: C) {
   │             - declaration of type parameter `C`
   ·
56 │         cpy(new_box3<C, U, C>());
   │         ^^^
   │
   = required by instantiating type parameter `T1` of struct `Box3`
   = required by instantiating type parameter `C:copy` of function `cpy`

error: type `C` is missing required ability `copy` (type was inferred)
   ┌─ tests/ability-check/v1-typing/module_call_constraints_not_satisfied.move:57:9
   │
23 │     fun cpy<C: copy>(_c: C) {
   │             - declaration of type parameter `C`
   ·
57 │         cpy(new_box3<C, C, U>());
   │         ^^^
   │
   = required by instantiating type parameter `T1` of struct `Box3`
   = required by instantiating type parameter `C:copy` of function `cpy`

error: type `C` is missing required ability `copy` (type was inferred)
   ┌─ tests/ability-check/v1-typing/module_call_constraints_not_satisfied.move:59:9
   │
23 │     fun cpy<C: copy>(_c: C) {
   │             - declaration of type parameter `C`
   ·
59 │         cpy(new_box3<C, U, U>());
   │         ^^^
   │
   = required by instantiating type parameter `T1` of struct `Box3`
   = required by instantiating type parameter `C:copy` of function `cpy`

error: type `U` is missing required ability `copy` (type was inferred)
   ┌─ tests/ability-check/v1-typing/module_call_constraints_not_satisfied.move:60:9
   │
23 │     fun cpy<C: copy>(_c: C) {
   │             - declaration of type parameter `C`
   ·
60 │         cpy(new_box3<U, C, U>());
   │         ^^^
   │
   = required by instantiating type parameter `T1` of struct `Box3`
   = required by instantiating type parameter `C:copy` of function `cpy`

error: type `U` is missing required ability `copy` (type was inferred)
   ┌─ tests/ability-check/v1-typing/module_call_constraints_not_satisfied.move:61:9
   │
23 │     fun cpy<C: copy>(_c: C) {
   │             - declaration of type parameter `C`
   ·
61 │         cpy(new_box3<U, U, C>());
   │         ^^^
   │
   = required by instantiating type parameter `T1` of struct `Box3`
   = required by instantiating type parameter `C:copy` of function `cpy`

error: type `U` is missing required ability `copy` (type was inferred)
   ┌─ tests/ability-check/v1-typing/module_call_constraints_not_satisfied.move:63:9
   │
23 │     fun cpy<C: copy>(_c: C) {
   │             - declaration of type parameter `C`
   ·
63 │         cpy(new_box3<U, U, U>());
   │         ^^^
   │
   = required by instantiating type parameter `T1` of struct `Box3`
   = required by instantiating type parameter `C:copy` of function `cpy`

error: type `Coin` is missing required ability `copy` (type was inferred)
   ┌─ tests/ability-check/v1-typing/module_call_constraints_not_satisfied.move:67:9
   │
19 │     fun both_1<R: copy, C: key>(_r: R, _c: C) {
   │                - declaration of type parameter `R`
   ·
67 │         both_1(Coin{}, 0)
   │         ^^^^^^
   │
   = required by instantiating type parameter `R:copy` of function `both_1`
