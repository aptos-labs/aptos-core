
Diagnostics:
error: function acquires global `M::R` which is currently mutably borrowed
   ┌─ tests/reference-safety/v1-tests/call_acquires_invalid.move:16:23
   │
10 │     fun acq(addr: address): R acquires R {
   │                                        -- `acquires` declared here
   ·
15 │         let r1 = borrow_global_mut<R>(addr);
   │                  -------------------------- struct `M::R` previously mutably borrowed here
16 │         let R { f } = acq(addr);
   │                       ^^^^^^^^^ function called here
17 │         r1.f = f
   │         ---- conflicting reference `r1` used here

error: function acquires global `M::R` which is currently mutably borrowed
   ┌─ tests/reference-safety/v1-tests/call_acquires_invalid.move:22:23
   │
10 │     fun acq(addr: address): R acquires R {
   │                                        -- `acquires` declared here
   ·
21 │         let f_ref = &mut borrow_global_mut<R>(addr).f;
   │                     --------------------------------- struct `M::R` previously mutably borrowed here
22 │         let R { f } = acq(addr);
   │                       ^^^^^^^^^ function called here
23 │         *f_ref = f
   │         ---------- conflicting reference `f_ref` used here

error: function acquires global `M::R` which is currently mutably borrowed
   ┌─ tests/reference-safety/v1-tests/call_acquires_invalid.move:28:23
   │
10 │     fun acq(addr: address): R acquires R {
   │                                        -- `acquires` declared here
   ·
27 │         let r1 = id_mut(borrow_global_mut<R>(addr));
   │                  ---------------------------------- struct `M::R` previously mutably borrowed here
28 │         let R { f } = acq(addr);
   │                       ^^^^^^^^^ function called here
29 │         r1.f = f
   │         ---- conflicting reference `r1` used here

error: function acquires global `M::R` which is currently mutably borrowed
   ┌─ tests/reference-safety/v1-tests/call_acquires_invalid.move:34:23
   │
10 │     fun acq(addr: address): R acquires R {
   │                                        -- `acquires` declared here
   ·
33 │         let f_ref = id_mut(&mut borrow_global_mut<R>(addr).f);
   │                     ----------------------------------------- struct `M::R` previously mutably borrowed here
34 │         let R { f } = acq(addr);
   │                       ^^^^^^^^^ function called here
35 │         *f_ref = f
   │         ---------- conflicting reference `f_ref` used here

error: function acquires global `M::R` which is currently borrowed
   ┌─ tests/reference-safety/v1-tests/call_acquires_invalid.move:40:23
   │
10 │     fun acq(addr: address): R acquires R {
   │                                        -- `acquires` declared here
   ·
39 │         let r1 = borrow_global<R>(addr);
   │                  ---------------------- struct `M::R` previously borrowed here
40 │         let R { f } = acq(addr);
   │                       ^^^^^^^^^ function called here
41 │         r1.f + f
   │         ---- conflicting reference `r1` used here

error: function acquires global `M::R` which is currently borrowed
   ┌─ tests/reference-safety/v1-tests/call_acquires_invalid.move:46:23
   │
10 │     fun acq(addr: address): R acquires R {
   │                                        -- `acquires` declared here
   ·
45 │         let f_ref = &borrow_global<R>(addr).f;
   │                     ------------------------- struct `M::R` previously borrowed here
46 │         let R { f } = acq(addr);
   │                       ^^^^^^^^^ function called here
47 │         *f_ref + f
   │         ------ conflicting reference `f_ref` used here

error: function acquires global `M::R` which is currently borrowed
   ┌─ tests/reference-safety/v1-tests/call_acquires_invalid.move:52:23
   │
10 │     fun acq(addr: address): R acquires R {
   │                                        -- `acquires` declared here
   ·
51 │         let r1 = id(borrow_global<R>(addr));
   │                  -------------------------- struct `M::R` previously borrowed here
52 │         let R { f } = acq(addr);
   │                       ^^^^^^^^^ function called here
53 │         r1.f + f
   │         ---- conflicting reference `r1` used here

error: function acquires global `M::R` which is currently borrowed
   ┌─ tests/reference-safety/v1-tests/call_acquires_invalid.move:58:23
   │
10 │     fun acq(addr: address): R acquires R {
   │                                        -- `acquires` declared here
   ·
57 │         let f_ref = id(&borrow_global<R>(addr).f);
   │                     ----------------------------- struct `M::R` previously borrowed here
58 │         let R { f } = acq(addr);
   │                       ^^^^^^^^^ function called here
59 │         *f_ref + f
   │         ------ conflicting reference `f_ref` used here

error: function acquires global `M::R` which is currently mutably borrowed
   ┌─ tests/reference-safety/v1-tests/call_acquires_invalid.move:66:23
   │
10 │     fun acq(addr: address): R acquires R {
   │                                        -- `acquires` declared here
   ·
65 │         let r1; if (cond) r1 = borrow_global_mut<R>(addr) else r1 = &mut r;
   │                                -------------------------- struct `M::R` previously mutably borrowed here
66 │         let R { f } = acq(addr);
   │                       ^^^^^^^^^ function called here
67 │         r1.f = f;
   │         ---- conflicting reference `r1` used here
