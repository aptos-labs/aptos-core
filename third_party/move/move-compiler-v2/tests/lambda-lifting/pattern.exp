// -- Model dump before bytecode pipeline
module 0xcafe::m {
    struct S<T> {
        x: T,
    }
    private fun consume<T>(s: S<T>,x: T,f: |(S<T>, T)|T): T {
        (f)(s, x)
    }
    private fun pattern(s: S<u64>,x: u64): u64 {
        m::consume<u64>(s, x, closure#0m::__lambda__1__pattern())
    }
    private fun __lambda__1__pattern(param$0: S<u64>,_y: u64): u64 {
        {
          let m::S<u64>{ x } = param$0;
          {
            let y: u64 = x;
            Add<u64>(x, y)
          }
        }
    }
} // end 0xcafe::m

// -- Sourcified model before bytecode pipeline
module 0xcafe::m {
    struct S<T> {
        x: T,
    }
    fun consume<T>(s: S<T>, x: T, f: |(S<T>, T)|T): T {
        f(s, x)
    }
    fun pattern(s: S<u64>, x: u64): u64 {
        consume<u64>(s, x, |(arg0,arg1)| __lambda__1__pattern(arg0, arg1))
    }
    fun __lambda__1__pattern(param$0: S<u64>, _y: u64): u64 {
        let S<u64>{x: x} = param$0;
        let y = x;
        x + y
    }
}

============ initial bytecode ================

[variant baseline]
fun m::consume<#0>($t0: 0xcafe::m::S<#0>, $t1: #0, $t2: |(0xcafe::m::S<#0>, #0)|#0): #0 {
     var $t3: #0
     var $t4: 0xcafe::m::S<#0>
  0: $t4 := infer($t0)
  1: $t3 := invoke($t4, $t1, $t2)
  2: return $t3
}


[variant baseline]
fun m::pattern($t0: 0xcafe::m::S<u64>, $t1: u64): u64 {
     var $t2: u64
     var $t3: 0xcafe::m::S<u64>
     var $t4: u64
     var $t5: |(0xcafe::m::S<u64>, u64)|u64
  0: $t3 := infer($t0)
  1: $t4 := infer($t1)
  2: $t5 := closure#0 m::__lambda__1__pattern()
  3: $t2 := m::consume<u64>($t3, $t4, $t5)
  4: return $t2
}


[variant baseline]
fun m::__lambda__1__pattern($t0: 0xcafe::m::S<u64>, $t1: u64): u64 {
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
  0: $t3 := unpack 0xcafe::m::S<u64>($t0)
  1: $t4 := infer($t3)
  2: $t5 := infer($t3)
  3: $t2 := +($t5, $t4)
  4: return $t2
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::consume<#0>($t0: 0xcafe::m::S<#0>, $t1: #0, $t2: |(0xcafe::m::S<#0>, #0)|#0): #0 {
     var $t3: #0 [unused]
     var $t4: 0xcafe::m::S<#0> [unused]
     # live vars: $t0, $t1, $t2
  0: $t0 := move($t0)
     # live vars: $t0, $t1, $t2
  1: $t1 := invoke($t0, $t1, $t2)
     # live vars: $t1
  2: return $t1
}


[variant baseline]
fun m::pattern($t0: 0xcafe::m::S<u64>, $t1: u64): u64 {
     var $t2: u64 [unused]
     var $t3: 0xcafe::m::S<u64> [unused]
     var $t4: u64 [unused]
     var $t5: |(0xcafe::m::S<u64>, u64)|u64
     # live vars: $t0, $t1
  0: $t0 := move($t0)
     # live vars: $t0, $t1
  1: $t1 := move($t1)
     # live vars: $t0, $t1
  2: $t5 := closure#0 m::__lambda__1__pattern()
     # live vars: $t0, $t1, $t5
  3: $t1 := m::consume<u64>($t0, $t1, $t5)
     # live vars: $t1
  4: return $t1
}


[variant baseline]
fun m::__lambda__1__pattern($t0: 0xcafe::m::S<u64>, $t1: u64): u64 {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     var $t4: u64
     var $t5: u64 [unused]
     # live vars: $t0, $t1
  0: $t1 := unpack 0xcafe::m::S<u64>($t0)
     # live vars: $t1
  1: $t4 := copy($t1)
     # live vars: $t1, $t4
  2: $t1 := move($t1)
     # live vars: $t1, $t4
  3: $t1 := +($t1, $t4)
     # live vars: $t1
  4: return $t1
}


============ disassembled file-format ==================
// Move bytecode v8
module cafe.m {
struct S<T> {
	x: T
}

consume<T>(s: S<T>, x: T, f: |S<T>,T|T): T /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](s: S<T>)
	1: MoveLoc[1](x: T)
	2: MoveLoc[2](f: |S<T>,T|T)
	3: CallClosure(|S<T>,T|T)
	4: Ret
}
pattern(s: S<u64>, x: u64): u64 /* def_idx: 1 */ {
B0:
	0: MoveLoc[0](s: S<u64>)
	1: MoveLoc[1](x: u64)
	2: PackClosure#0 __lambda__1__pattern(S<u64>, u64): u64
	3: Call consume<u64>(S<u64>, u64, |S<u64>,u64|u64): u64
	4: Ret
}
__lambda__1__pattern(param$0: S<u64>, _y: u64): u64 /* def_idx: 2 */ {
L2:	y: u64
B0:
	0: MoveLoc[0](param$0: S<u64>)
	1: UnpackGeneric[0](S<u64>)
	2: StLoc[1](_y: u64)
	3: CopyLoc[1](_y: u64)
	4: StLoc[2](y: u64)
	5: MoveLoc[1](_y: u64)
	6: MoveLoc[2](y: u64)
	7: Add
	8: Ret
}
}
============ bytecode verification succeeded ========
