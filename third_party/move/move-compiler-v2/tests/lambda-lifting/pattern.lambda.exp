// -- Model dump before env processor pipeline:
module 0xcafe::m {
    struct S<T> {
        x: T,
    }
    private fun consume<T>(s: S<T>,x: T,f: |(S<T>, T)|T): T {
        (f)(s, x)
    }
    private fun pattern(s: S<u64>,x: u64): u64 {
        m::consume<u64>(s, x, |(m::S<u64>{ x }, _y: u64): (S<u64>, u64)| {
          let y: u64 = x;
          Add<u64>(x, y)
        })
    }
} // end 0xcafe::m


// -- Model dump after env processor unused checks:
module 0xcafe::m {
    struct S<T> {
        x: T,
    }
    private fun consume<T>(s: S<T>,x: T,f: |(S<T>, T)|T): T {
        (f)(s, x)
    }
    private fun pattern(s: S<u64>,x: u64): u64 {
        m::consume<u64>(s, x, |(m::S<u64>{ x }, _y: u64): (S<u64>, u64)| {
          let y: u64 = x;
          Add<u64>(x, y)
        })
    }
} // end 0xcafe::m


// -- Model dump after env processor type parameter check:
module 0xcafe::m {
    struct S<T> {
        x: T,
    }
    private fun consume<T>(s: S<T>,x: T,f: |(S<T>, T)|T): T {
        (f)(s, x)
    }
    private fun pattern(s: S<u64>,x: u64): u64 {
        m::consume<u64>(s, x, |(m::S<u64>{ x }, _y: u64): (S<u64>, u64)| {
          let y: u64 = x;
          Add<u64>(x, y)
        })
    }
} // end 0xcafe::m


// -- Model dump after env processor check recursive struct definition:
module 0xcafe::m {
    struct S<T> {
        x: T,
    }
    private fun consume<T>(s: S<T>,x: T,f: |(S<T>, T)|T): T {
        (f)(s, x)
    }
    private fun pattern(s: S<u64>,x: u64): u64 {
        m::consume<u64>(s, x, |(m::S<u64>{ x }, _y: u64): (S<u64>, u64)| {
          let y: u64 = x;
          Add<u64>(x, y)
        })
    }
} // end 0xcafe::m


// -- Model dump after env processor check cyclic type instantiation:
module 0xcafe::m {
    struct S<T> {
        x: T,
    }
    private fun consume<T>(s: S<T>,x: T,f: |(S<T>, T)|T): T {
        (f)(s, x)
    }
    private fun pattern(s: S<u64>,x: u64): u64 {
        m::consume<u64>(s, x, |(m::S<u64>{ x }, _y: u64): (S<u64>, u64)| {
          let y: u64 = x;
          Add<u64>(x, y)
        })
    }
} // end 0xcafe::m


// -- Model dump after env processor unused struct params check:
module 0xcafe::m {
    struct S<T> {
        x: T,
    }
    private fun consume<T>(s: S<T>,x: T,f: |(S<T>, T)|T): T {
        (f)(s, x)
    }
    private fun pattern(s: S<u64>,x: u64): u64 {
        m::consume<u64>(s, x, |(m::S<u64>{ x }, _y: u64): (S<u64>, u64)| {
          let y: u64 = x;
          Add<u64>(x, y)
        })
    }
} // end 0xcafe::m


// -- Model dump after env processor access and use check before inlining:
module 0xcafe::m {
    struct S<T> {
        x: T,
    }
    private fun consume<T>(s: S<T>,x: T,f: |(S<T>, T)|T): T {
        (f)(s, x)
    }
    private fun pattern(s: S<u64>,x: u64): u64 {
        m::consume<u64>(s, x, |(m::S<u64>{ x }, _y: u64): (S<u64>, u64)| {
          let y: u64 = x;
          Add<u64>(x, y)
        })
    }
} // end 0xcafe::m


// -- Model dump after env processor inlining:
module 0xcafe::m {
    struct S<T> {
        x: T,
    }
    private fun consume<T>(s: S<T>,x: T,f: |(S<T>, T)|T): T {
        (f)(s, x)
    }
    private fun pattern(s: S<u64>,x: u64): u64 {
        m::consume<u64>(s, x, |(m::S<u64>{ x }, _y: u64): (S<u64>, u64)| {
          let y: u64 = x;
          Add<u64>(x, y)
        })
    }
} // end 0xcafe::m


// -- Model dump after env processor access and use check after inlining:
module 0xcafe::m {
    struct S<T> {
        x: T,
    }
    private fun consume<T>(s: S<T>,x: T,f: |(S<T>, T)|T): T {
        (f)(s, x)
    }
    private fun pattern(s: S<u64>,x: u64): u64 {
        m::consume<u64>(s, x, |(m::S<u64>{ x }, _y: u64): (S<u64>, u64)| {
          let y: u64 = x;
          Add<u64>(x, y)
        })
    }
} // end 0xcafe::m


// -- Model dump after env processor acquires check:
module 0xcafe::m {
    struct S<T> {
        x: T,
    }
    private fun consume<T>(s: S<T>,x: T,f: |(S<T>, T)|T): T {
        (f)(s, x)
    }
    private fun pattern(s: S<u64>,x: u64): u64 {
        m::consume<u64>(s, x, |(m::S<u64>{ x }, _y: u64): (S<u64>, u64)| {
          let y: u64 = x;
          Add<u64>(x, y)
        })
    }
} // end 0xcafe::m


// -- Model dump after env processor simplifier:
module 0xcafe::m {
    struct S<T> {
        x: T,
    }
    private fun consume<T>(s: S<T>,x: T,f: |(S<T>, T)|T): T {
        (f)(s, x)
    }
    private fun pattern(s: S<u64>,x: u64): u64 {
        m::consume<u64>(s, x, |(m::S<u64>{ x }, _y: u64): (S<u64>, u64)| {
          let y: u64 = x;
          Add<u64>(x, y)
        })
    }
} // end 0xcafe::m



Diagnostics:
error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
   ┌─ tests/lambda-lifting/pattern.move:15:23
   │
15 │         consume(s, x, |S{x}, _y| { let y = x; x + y})
   │                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
