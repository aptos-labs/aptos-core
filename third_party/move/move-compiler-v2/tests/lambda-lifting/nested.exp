// -- Model dump before bytecode pipeline
module 0xcafe::m {
    private fun map1(x: u64,f: |u64|u64): u64 {
        (f)(x)
    }
    private fun map2(x: u8,f: |u8|u8): u8 {
        (f)(x)
    }
    private fun nested(x: u64,c: u64): u64 {
        m::map1(x, closure#1m::__lambda__2__nested(c))
    }
    private fun __lambda__1__nested(c: u64,y: u8): u8 {
        Add<u8>(y, Cast<u8>(c))
    }
    private fun __lambda__2__nested(c: u64,y: u64): u64 {
        Cast<u64>(m::map2(Cast<u8>(Sub<u64>(y, c)), closure#1m::__lambda__1__nested(c)))
    }
} // end 0xcafe::m

// -- Sourcified model before bytecode pipeline
module 0xcafe::m {
    fun map1(x: u64, f: |u64|u64): u64 {
        f(x)
    }
    fun map2(x: u8, f: |u8|u8): u8 {
        f(x)
    }
    fun nested(x: u64, c: u64): u64 {
        map1(x, |arg0| __lambda__2__nested(c, arg0))
    }
    fun __lambda__1__nested(c: u64, y: u8): u8 {
        y + (c as u8)
    }
    fun __lambda__2__nested(c: u64, y: u64): u64 {
        map2(y - c as u8, |arg0| __lambda__1__nested(c, arg0)) as u64
    }
}

============ initial bytecode ================

[variant baseline]
fun m::map1($t0: u64, $t1: |u64|u64): u64 {
     var $t2: u64
  0: $t2 := invoke($t0, $t1)
  1: return $t2
}


[variant baseline]
fun m::map2($t0: u8, $t1: |u8|u8): u8 {
     var $t2: u8
  0: $t2 := invoke($t0, $t1)
  1: return $t2
}


[variant baseline]
fun m::nested($t0: u64, $t1: u64): u64 {
     var $t2: u64
     var $t3: u64
     var $t4: |u64|u64
  0: $t3 := infer($t0)
  1: $t4 := closure#1 m::__lambda__2__nested($t1)
  2: $t2 := m::map1($t3, $t4)
  3: return $t2
}


[variant baseline]
fun m::__lambda__1__nested($t0: u64, $t1: u8): u8 {
     var $t2: u8
     var $t3: u8
     var $t4: u8
  0: $t3 := infer($t1)
  1: $t4 := (u8)($t0)
  2: $t2 := +($t3, $t4)
  3: return $t2
}


[variant baseline]
fun m::__lambda__2__nested($t0: u64, $t1: u64): u64 {
     var $t2: u64
     var $t3: u8
     var $t4: u8
     var $t5: u64
     var $t6: u64
     var $t7: |u8|u8
  0: $t6 := infer($t1)
  1: $t5 := -($t6, $t0)
  2: $t4 := (u8)($t5)
  3: $t7 := closure#1 m::__lambda__1__nested($t0)
  4: $t3 := m::map2($t4, $t7)
  5: $t2 := (u64)($t3)
  6: return $t2
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::map1($t0: u64, $t1: |u64|u64): u64 {
     var $t2: u64 [unused]
     # live vars: $t0, $t1
  0: $t0 := invoke($t0, $t1)
     # live vars: $t0
  1: return $t0
}


[variant baseline]
fun m::map2($t0: u8, $t1: |u8|u8): u8 {
     var $t2: u8 [unused]
     # live vars: $t0, $t1
  0: $t0 := invoke($t0, $t1)
     # live vars: $t0
  1: return $t0
}


[variant baseline]
fun m::nested($t0: u64, $t1: u64): u64 {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     var $t4: |u64|u64
     # live vars: $t0, $t1
  0: $t0 := move($t0)
     # live vars: $t0, $t1
  1: $t4 := closure#1 m::__lambda__2__nested($t1)
     # live vars: $t0, $t4
  2: $t0 := m::map1($t0, $t4)
     # live vars: $t0
  3: return $t0
}


[variant baseline]
fun m::__lambda__1__nested($t0: u64, $t1: u8): u8 {
     var $t2: u8 [unused]
     var $t3: u8 [unused]
     var $t4: u8
     # live vars: $t0, $t1
  0: $t1 := move($t1)
     # live vars: $t0, $t1
  1: $t4 := (u8)($t0)
     # live vars: $t1, $t4
  2: $t1 := +($t1, $t4)
     # live vars: $t1
  3: return $t1
}


[variant baseline]
fun m::__lambda__2__nested($t0: u64, $t1: u64): u64 {
     var $t2: u64 [unused]
     var $t3: u8 [unused]
     var $t4: u8
     var $t5: u64 [unused]
     var $t6: u64 [unused]
     var $t7: |u8|u8
     # live vars: $t0, $t1
  0: $t1 := move($t1)
     # live vars: $t0, $t1
  1: $t1 := -($t1, $t0)
     # live vars: $t0, $t1
  2: $t4 := (u8)($t1)
     # live vars: $t0, $t4
  3: $t7 := closure#1 m::__lambda__1__nested($t0)
     # live vars: $t4, $t7
  4: $t4 := m::map2($t4, $t7)
     # live vars: $t4
  5: $t0 := (u64)($t4)
     # live vars: $t0
  6: return $t0
}


============ disassembled file-format ==================
// Move bytecode v8
module cafe.m {


map1(x: u64, f: |u64|u64): u64 /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](x: u64)
	1: MoveLoc[1](f: |u64|u64)
	2: CallClosure(|u64|u64)
	3: Ret
}
map2(x: u8, f: |u8|u8): u8 /* def_idx: 1 */ {
B0:
	0: MoveLoc[0](x: u8)
	1: MoveLoc[1](f: |u8|u8)
	2: CallClosure(|u8|u8)
	3: Ret
}
nested(x: u64, c: u64): u64 /* def_idx: 2 */ {
B0:
	0: MoveLoc[0](x: u64)
	1: MoveLoc[1](c: u64)
	2: PackClosure#1 __lambda__2__nested(u64, u64): u64
	3: Call map1(u64, |u64|u64): u64
	4: Ret
}
__lambda__1__nested(c: u64, y: u8): u8 /* def_idx: 3 */ {
B0:
	0: MoveLoc[1](y: u8)
	1: MoveLoc[0](c: u64)
	2: CastU8
	3: Add
	4: Ret
}
__lambda__2__nested(c: u64, y: u64): u64 /* def_idx: 4 */ {
B0:
	0: MoveLoc[1](y: u64)
	1: CopyLoc[0](c: u64)
	2: Sub
	3: CastU8
	4: MoveLoc[0](c: u64)
	5: PackClosure#1 __lambda__1__nested(u64, u8): u8
	6: Call map2(u8, |u8|u8): u8
	7: CastU64
	8: Ret
}
}
============ bytecode verification succeeded ========
