// -- Model dump before env processor pipeline:
module 0xcafe::m {
    private fun map1(x: u64,f: |u64|u64): u64 {
        (f)(x)
    }
    private fun map2(x: u8,f: |u8|u8): u8 {
        (f)(x)
    }
    private fun nested(x: u64,c: u64): u64 {
        m::map1(x, |y: u64| Cast<u64>(m::map2(Cast<u8>(Sub<u64>(y, c)), |y: u8| Add<u8>(y, Cast<u8>(c)))))
    }
} // end 0xcafe::m


// -- Model dump after env processor unused checks:
module 0xcafe::m {
    private fun map1(x: u64,f: |u64|u64): u64 {
        (f)(x)
    }
    private fun map2(x: u8,f: |u8|u8): u8 {
        (f)(x)
    }
    private fun nested(x: u64,c: u64): u64 {
        m::map1(x, |y: u64| Cast<u64>(m::map2(Cast<u8>(Sub<u64>(y, c)), |y: u8| Add<u8>(y, Cast<u8>(c)))))
    }
} // end 0xcafe::m


// -- Model dump after env processor type parameter check:
module 0xcafe::m {
    private fun map1(x: u64,f: |u64|u64): u64 {
        (f)(x)
    }
    private fun map2(x: u8,f: |u8|u8): u8 {
        (f)(x)
    }
    private fun nested(x: u64,c: u64): u64 {
        m::map1(x, |y: u64| Cast<u64>(m::map2(Cast<u8>(Sub<u64>(y, c)), |y: u8| Add<u8>(y, Cast<u8>(c)))))
    }
} // end 0xcafe::m


// -- Model dump after env processor check recursive struct definition:
module 0xcafe::m {
    private fun map1(x: u64,f: |u64|u64): u64 {
        (f)(x)
    }
    private fun map2(x: u8,f: |u8|u8): u8 {
        (f)(x)
    }
    private fun nested(x: u64,c: u64): u64 {
        m::map1(x, |y: u64| Cast<u64>(m::map2(Cast<u8>(Sub<u64>(y, c)), |y: u8| Add<u8>(y, Cast<u8>(c)))))
    }
} // end 0xcafe::m


// -- Model dump after env processor check cyclic type instantiation:
module 0xcafe::m {
    private fun map1(x: u64,f: |u64|u64): u64 {
        (f)(x)
    }
    private fun map2(x: u8,f: |u8|u8): u8 {
        (f)(x)
    }
    private fun nested(x: u64,c: u64): u64 {
        m::map1(x, |y: u64| Cast<u64>(m::map2(Cast<u8>(Sub<u64>(y, c)), |y: u8| Add<u8>(y, Cast<u8>(c)))))
    }
} // end 0xcafe::m


// -- Model dump after env processor unused struct params check:
module 0xcafe::m {
    private fun map1(x: u64,f: |u64|u64): u64 {
        (f)(x)
    }
    private fun map2(x: u8,f: |u8|u8): u8 {
        (f)(x)
    }
    private fun nested(x: u64,c: u64): u64 {
        m::map1(x, |y: u64| Cast<u64>(m::map2(Cast<u8>(Sub<u64>(y, c)), |y: u8| Add<u8>(y, Cast<u8>(c)))))
    }
} // end 0xcafe::m


// -- Model dump after env processor access and use check before inlining:
module 0xcafe::m {
    private fun map1(x: u64,f: |u64|u64): u64 {
        (f)(x)
    }
    private fun map2(x: u8,f: |u8|u8): u8 {
        (f)(x)
    }
    private fun nested(x: u64,c: u64): u64 {
        m::map1(x, |y: u64| Cast<u64>(m::map2(Cast<u8>(Sub<u64>(y, c)), |y: u8| Add<u8>(y, Cast<u8>(c)))))
    }
} // end 0xcafe::m


// -- Model dump after env processor inlining:
module 0xcafe::m {
    private fun map1(x: u64,f: |u64|u64): u64 {
        (f)(x)
    }
    private fun map2(x: u8,f: |u8|u8): u8 {
        (f)(x)
    }
    private fun nested(x: u64,c: u64): u64 {
        m::map1(x, |y: u64| Cast<u64>(m::map2(Cast<u8>(Sub<u64>(y, c)), |y: u8| Add<u8>(y, Cast<u8>(c)))))
    }
} // end 0xcafe::m


// -- Model dump after env processor access and use check after inlining:
module 0xcafe::m {
    private fun map1(x: u64,f: |u64|u64): u64 {
        (f)(x)
    }
    private fun map2(x: u8,f: |u8|u8): u8 {
        (f)(x)
    }
    private fun nested(x: u64,c: u64): u64 {
        m::map1(x, |y: u64| Cast<u64>(m::map2(Cast<u8>(Sub<u64>(y, c)), |y: u8| Add<u8>(y, Cast<u8>(c)))))
    }
} // end 0xcafe::m


// -- Model dump after env processor acquires check:
module 0xcafe::m {
    private fun map1(x: u64,f: |u64|u64): u64 {
        (f)(x)
    }
    private fun map2(x: u8,f: |u8|u8): u8 {
        (f)(x)
    }
    private fun nested(x: u64,c: u64): u64 {
        m::map1(x, |y: u64| Cast<u64>(m::map2(Cast<u8>(Sub<u64>(y, c)), |y: u8| Add<u8>(y, Cast<u8>(c)))))
    }
} // end 0xcafe::m


// -- Model dump after env processor simplifier:
module 0xcafe::m {
    private fun map1(x: u64,f: |u64|u64): u64 {
        (f)(x)
    }
    private fun map2(x: u8,f: |u8|u8): u8 {
        (f)(x)
    }
    private fun nested(x: u64,c: u64): u64 {
        m::map1(x, |y: u64| Cast<u64>(m::map2(Cast<u8>(Sub<u64>(y, c)), |y: u8| Add<u8>(y, Cast<u8>(c)))))
    }
} // end 0xcafe::m



Diagnostics:
error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
   ┌─ tests/lambda-lifting/nested.move:15:42
   │
15 │         map1(x, |y| (map2((y - c as u8), |y| y + (c as u8)) as u64))
   │                                          ^^^^^^^^^^^^^^^^^

error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
   ┌─ tests/lambda-lifting/nested.move:15:17
   │
15 │         map1(x, |y| (map2((y - c as u8), |y| y + (c as u8)) as u64))
   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
