// -- Model dump before env processor pipeline:
module 0xcafe::m {
    struct S {
        x: u64,
    }
    private fun map(x: u64,f: |u64|u64): u64 {
        (f)(x)
    }
    private fun assigns_local(x: u64,c: u64): u64 {
        {
          let z: u64 = 1;
          m::map(x, |y: u64| z: u64 = 2;
          Add<u64>(y, c))
        }
    }
    private fun assigns_param(x: u64,c: u64): u64 {
        m::map(x, |y: u64| x: u64 = 2;
        Add<u64>(y, c))
    }
    private fun borrows_local(x: u64): u64 {
        {
          let z: u64 = 1;
          m::map(x, |y: u64| {
            let r: &mut u64 = Borrow(Mutable)(z);
            Add<u64>(y, Deref(r))
          })
        }
    }
    private fun borrows_param(x: u64,c: u64): u64 {
        m::map(x, |y: u64| {
          let r: &mut u64 = Borrow(Mutable)(c);
          Add<u64>(y, Deref(r))
        })
    }
    private fun immutable_borrow_ok(x: u64): u64 {
        {
          let z: u64 = 1;
          m::map(x, |y: u64| {
            let r: &u64 = Borrow(Immutable)(z);
            Add<u64>(y, Deref(r))
          })
        }
    }
} // end 0xcafe::m


// -- Model dump after env processor unused checks:
module 0xcafe::m {
    struct S {
        x: u64,
    }
    private fun map(x: u64,f: |u64|u64): u64 {
        (f)(x)
    }
    private fun assigns_local(x: u64,c: u64): u64 {
        {
          let z: u64 = 1;
          m::map(x, |y: u64| z: u64 = 2;
          Add<u64>(y, c))
        }
    }
    private fun assigns_param(x: u64,c: u64): u64 {
        m::map(x, |y: u64| x: u64 = 2;
        Add<u64>(y, c))
    }
    private fun borrows_local(x: u64): u64 {
        {
          let z: u64 = 1;
          m::map(x, |y: u64| {
            let r: &mut u64 = Borrow(Mutable)(z);
            Add<u64>(y, Deref(r))
          })
        }
    }
    private fun borrows_param(x: u64,c: u64): u64 {
        m::map(x, |y: u64| {
          let r: &mut u64 = Borrow(Mutable)(c);
          Add<u64>(y, Deref(r))
        })
    }
    private fun immutable_borrow_ok(x: u64): u64 {
        {
          let z: u64 = 1;
          m::map(x, |y: u64| {
            let r: &u64 = Borrow(Immutable)(z);
            Add<u64>(y, Deref(r))
          })
        }
    }
} // end 0xcafe::m


// -- Model dump after env processor type parameter check:
module 0xcafe::m {
    struct S {
        x: u64,
    }
    private fun map(x: u64,f: |u64|u64): u64 {
        (f)(x)
    }
    private fun assigns_local(x: u64,c: u64): u64 {
        {
          let z: u64 = 1;
          m::map(x, |y: u64| z: u64 = 2;
          Add<u64>(y, c))
        }
    }
    private fun assigns_param(x: u64,c: u64): u64 {
        m::map(x, |y: u64| x: u64 = 2;
        Add<u64>(y, c))
    }
    private fun borrows_local(x: u64): u64 {
        {
          let z: u64 = 1;
          m::map(x, |y: u64| {
            let r: &mut u64 = Borrow(Mutable)(z);
            Add<u64>(y, Deref(r))
          })
        }
    }
    private fun borrows_param(x: u64,c: u64): u64 {
        m::map(x, |y: u64| {
          let r: &mut u64 = Borrow(Mutable)(c);
          Add<u64>(y, Deref(r))
        })
    }
    private fun immutable_borrow_ok(x: u64): u64 {
        {
          let z: u64 = 1;
          m::map(x, |y: u64| {
            let r: &u64 = Borrow(Immutable)(z);
            Add<u64>(y, Deref(r))
          })
        }
    }
} // end 0xcafe::m


// -- Model dump after env processor check recursive struct definition:
module 0xcafe::m {
    struct S {
        x: u64,
    }
    private fun map(x: u64,f: |u64|u64): u64 {
        (f)(x)
    }
    private fun assigns_local(x: u64,c: u64): u64 {
        {
          let z: u64 = 1;
          m::map(x, |y: u64| z: u64 = 2;
          Add<u64>(y, c))
        }
    }
    private fun assigns_param(x: u64,c: u64): u64 {
        m::map(x, |y: u64| x: u64 = 2;
        Add<u64>(y, c))
    }
    private fun borrows_local(x: u64): u64 {
        {
          let z: u64 = 1;
          m::map(x, |y: u64| {
            let r: &mut u64 = Borrow(Mutable)(z);
            Add<u64>(y, Deref(r))
          })
        }
    }
    private fun borrows_param(x: u64,c: u64): u64 {
        m::map(x, |y: u64| {
          let r: &mut u64 = Borrow(Mutable)(c);
          Add<u64>(y, Deref(r))
        })
    }
    private fun immutable_borrow_ok(x: u64): u64 {
        {
          let z: u64 = 1;
          m::map(x, |y: u64| {
            let r: &u64 = Borrow(Immutable)(z);
            Add<u64>(y, Deref(r))
          })
        }
    }
} // end 0xcafe::m


// -- Model dump after env processor check cyclic type instantiation:
module 0xcafe::m {
    struct S {
        x: u64,
    }
    private fun map(x: u64,f: |u64|u64): u64 {
        (f)(x)
    }
    private fun assigns_local(x: u64,c: u64): u64 {
        {
          let z: u64 = 1;
          m::map(x, |y: u64| z: u64 = 2;
          Add<u64>(y, c))
        }
    }
    private fun assigns_param(x: u64,c: u64): u64 {
        m::map(x, |y: u64| x: u64 = 2;
        Add<u64>(y, c))
    }
    private fun borrows_local(x: u64): u64 {
        {
          let z: u64 = 1;
          m::map(x, |y: u64| {
            let r: &mut u64 = Borrow(Mutable)(z);
            Add<u64>(y, Deref(r))
          })
        }
    }
    private fun borrows_param(x: u64,c: u64): u64 {
        m::map(x, |y: u64| {
          let r: &mut u64 = Borrow(Mutable)(c);
          Add<u64>(y, Deref(r))
        })
    }
    private fun immutable_borrow_ok(x: u64): u64 {
        {
          let z: u64 = 1;
          m::map(x, |y: u64| {
            let r: &u64 = Borrow(Immutable)(z);
            Add<u64>(y, Deref(r))
          })
        }
    }
} // end 0xcafe::m


// -- Model dump after env processor unused struct params check:
module 0xcafe::m {
    struct S {
        x: u64,
    }
    private fun map(x: u64,f: |u64|u64): u64 {
        (f)(x)
    }
    private fun assigns_local(x: u64,c: u64): u64 {
        {
          let z: u64 = 1;
          m::map(x, |y: u64| z: u64 = 2;
          Add<u64>(y, c))
        }
    }
    private fun assigns_param(x: u64,c: u64): u64 {
        m::map(x, |y: u64| x: u64 = 2;
        Add<u64>(y, c))
    }
    private fun borrows_local(x: u64): u64 {
        {
          let z: u64 = 1;
          m::map(x, |y: u64| {
            let r: &mut u64 = Borrow(Mutable)(z);
            Add<u64>(y, Deref(r))
          })
        }
    }
    private fun borrows_param(x: u64,c: u64): u64 {
        m::map(x, |y: u64| {
          let r: &mut u64 = Borrow(Mutable)(c);
          Add<u64>(y, Deref(r))
        })
    }
    private fun immutable_borrow_ok(x: u64): u64 {
        {
          let z: u64 = 1;
          m::map(x, |y: u64| {
            let r: &u64 = Borrow(Immutable)(z);
            Add<u64>(y, Deref(r))
          })
        }
    }
} // end 0xcafe::m


// -- Model dump after env processor access and use check before inlining:
module 0xcafe::m {
    struct S {
        x: u64,
    }
    private fun map(x: u64,f: |u64|u64): u64 {
        (f)(x)
    }
    private fun assigns_local(x: u64,c: u64): u64 {
        {
          let z: u64 = 1;
          m::map(x, |y: u64| z: u64 = 2;
          Add<u64>(y, c))
        }
    }
    private fun assigns_param(x: u64,c: u64): u64 {
        m::map(x, |y: u64| x: u64 = 2;
        Add<u64>(y, c))
    }
    private fun borrows_local(x: u64): u64 {
        {
          let z: u64 = 1;
          m::map(x, |y: u64| {
            let r: &mut u64 = Borrow(Mutable)(z);
            Add<u64>(y, Deref(r))
          })
        }
    }
    private fun borrows_param(x: u64,c: u64): u64 {
        m::map(x, |y: u64| {
          let r: &mut u64 = Borrow(Mutable)(c);
          Add<u64>(y, Deref(r))
        })
    }
    private fun immutable_borrow_ok(x: u64): u64 {
        {
          let z: u64 = 1;
          m::map(x, |y: u64| {
            let r: &u64 = Borrow(Immutable)(z);
            Add<u64>(y, Deref(r))
          })
        }
    }
} // end 0xcafe::m


// -- Model dump after env processor inlining:
module 0xcafe::m {
    struct S {
        x: u64,
    }
    private fun map(x: u64,f: |u64|u64): u64 {
        (f)(x)
    }
    private fun assigns_local(x: u64,c: u64): u64 {
        {
          let z: u64 = 1;
          m::map(x, |y: u64| z: u64 = 2;
          Add<u64>(y, c))
        }
    }
    private fun assigns_param(x: u64,c: u64): u64 {
        m::map(x, |y: u64| x: u64 = 2;
        Add<u64>(y, c))
    }
    private fun borrows_local(x: u64): u64 {
        {
          let z: u64 = 1;
          m::map(x, |y: u64| {
            let r: &mut u64 = Borrow(Mutable)(z);
            Add<u64>(y, Deref(r))
          })
        }
    }
    private fun borrows_param(x: u64,c: u64): u64 {
        m::map(x, |y: u64| {
          let r: &mut u64 = Borrow(Mutable)(c);
          Add<u64>(y, Deref(r))
        })
    }
    private fun immutable_borrow_ok(x: u64): u64 {
        {
          let z: u64 = 1;
          m::map(x, |y: u64| {
            let r: &u64 = Borrow(Immutable)(z);
            Add<u64>(y, Deref(r))
          })
        }
    }
} // end 0xcafe::m


// -- Model dump after env processor access and use check after inlining:
module 0xcafe::m {
    struct S {
        x: u64,
    }
    private fun map(x: u64,f: |u64|u64): u64 {
        (f)(x)
    }
    private fun assigns_local(x: u64,c: u64): u64 {
        {
          let z: u64 = 1;
          m::map(x, |y: u64| z: u64 = 2;
          Add<u64>(y, c))
        }
    }
    private fun assigns_param(x: u64,c: u64): u64 {
        m::map(x, |y: u64| x: u64 = 2;
        Add<u64>(y, c))
    }
    private fun borrows_local(x: u64): u64 {
        {
          let z: u64 = 1;
          m::map(x, |y: u64| {
            let r: &mut u64 = Borrow(Mutable)(z);
            Add<u64>(y, Deref(r))
          })
        }
    }
    private fun borrows_param(x: u64,c: u64): u64 {
        m::map(x, |y: u64| {
          let r: &mut u64 = Borrow(Mutable)(c);
          Add<u64>(y, Deref(r))
        })
    }
    private fun immutable_borrow_ok(x: u64): u64 {
        {
          let z: u64 = 1;
          m::map(x, |y: u64| {
            let r: &u64 = Borrow(Immutable)(z);
            Add<u64>(y, Deref(r))
          })
        }
    }
} // end 0xcafe::m


// -- Model dump after env processor acquires check:
module 0xcafe::m {
    struct S {
        x: u64,
    }
    private fun map(x: u64,f: |u64|u64): u64 {
        (f)(x)
    }
    private fun assigns_local(x: u64,c: u64): u64 {
        {
          let z: u64 = 1;
          m::map(x, |y: u64| z: u64 = 2;
          Add<u64>(y, c))
        }
    }
    private fun assigns_param(x: u64,c: u64): u64 {
        m::map(x, |y: u64| x: u64 = 2;
        Add<u64>(y, c))
    }
    private fun borrows_local(x: u64): u64 {
        {
          let z: u64 = 1;
          m::map(x, |y: u64| {
            let r: &mut u64 = Borrow(Mutable)(z);
            Add<u64>(y, Deref(r))
          })
        }
    }
    private fun borrows_param(x: u64,c: u64): u64 {
        m::map(x, |y: u64| {
          let r: &mut u64 = Borrow(Mutable)(c);
          Add<u64>(y, Deref(r))
        })
    }
    private fun immutable_borrow_ok(x: u64): u64 {
        {
          let z: u64 = 1;
          m::map(x, |y: u64| {
            let r: &u64 = Borrow(Immutable)(z);
            Add<u64>(y, Deref(r))
          })
        }
    }
} // end 0xcafe::m


// -- Model dump after env processor simplifier:
module 0xcafe::m {
    struct S {
        x: u64,
    }
    private fun map(x: u64,f: |u64|u64): u64 {
        (f)(x)
    }
    private fun assigns_local(x: u64,c: u64): u64 {
        {
          let z: u64 = 1;
          m::map(x, |y: u64| z: u64 = 2;
          Add<u64>(y, c))
        }
    }
    private fun assigns_param(x: u64,c: u64): u64 {
        m::map(x, |y: u64| x: u64 = 2;
        Add<u64>(y, c))
    }
    private fun borrows_local(x: u64): u64 {
        {
          let z: u64 = 1;
          m::map(x, |y: u64| {
            let r: &mut u64 = Borrow(Mutable)(z);
            Add<u64>(y, Deref(r))
          })
        }
    }
    private fun borrows_param(x: u64,c: u64): u64 {
        m::map(x, |y: u64| {
          let r: &mut u64 = Borrow(Mutable)(c);
          Add<u64>(y, Deref(r))
        })
    }
    private fun immutable_borrow_ok(x: u64): u64 {
        m::map(x, |y: u64| {
          let r: &u64 = Borrow(Immutable)(1);
          Add<u64>(y, Deref(r))
        })
    }
} // end 0xcafe::m



Diagnostics:
error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
   ┌─ tests/lambda-lifting/modify.move:13:16
   │
13 │           map(x, |y| {
   │ ╭────────────────^
14 │ │             x = 2;
15 │ │             y + c
16 │ │         })
   │ ╰─────────^

error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
   ┌─ tests/lambda-lifting/modify.move:20:16
   │
20 │           map(x, |y| {
   │ ╭────────────────^
21 │ │             let r = &mut c;
22 │ │             y + *r
23 │ │         })
   │ ╰─────────^

error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
   ┌─ tests/lambda-lifting/modify.move:28:16
   │
28 │           map(x, |y| {
   │ ╭────────────────^
29 │ │             z = 2;
30 │ │             y + c
31 │ │         })
   │ ╰─────────^

error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
   ┌─ tests/lambda-lifting/modify.move:36:16
   │
36 │           map(x, |y| {
   │ ╭────────────────^
37 │ │             let r = &mut z;
38 │ │             y + *r
39 │ │         })
   │ ╰─────────^

error: Currently, lambda expressions must explicitly declare `move` capture of free variables, except when appearing as an argument to an inline function call.
   ┌─ tests/lambda-lifting/modify.move:44:16
   │
44 │           map(x, |y| {
   │ ╭────────────────^
45 │ │             let r = &z;
46 │ │             y + *r
47 │ │         })
   │ ╰─────────^
