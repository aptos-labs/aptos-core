// -- Model dump before bytecode pipeline
module 0xcafe::m {
    private fun map(x: u64,f: |u64|u64): u64 {
        (f)(x)
    }
    private fun no_name_clash(x: u64,c: u64): u64 {
        m::map(x, closure#1m::__lambda__1__no_name_clash(c))
    }
    private fun with_name_clash1(x: u64,c: u64): u64 {
        m::map(x, closure#1m::__lambda__1__with_name_clash1(c))
    }
    private fun with_name_clash2(x: u64,c: u64): u64 {
        m::map(x, closure#1m::__lambda__1__with_name_clash2(c))
    }
    private fun __lambda__1__no_name_clash(c: u64,y: u64): u64 {
        Add<u64>(y, c)
    }
    private fun __lambda__1__with_name_clash1(c: u64,x: u64): u64 {
        Add<u64>(x, c)
    }
    private fun __lambda__1__with_name_clash2(c: u64,x: u64): u64 {
        Add<u64>({
          let x: u64 = Add<u64>(c, 1);
          x
        }, x)
    }
} // end 0xcafe::m

// -- Sourcified model before bytecode pipeline
module 0xcafe::m {
    fun map(x: u64, f: |u64|u64): u64 {
        f(x)
    }
    fun no_name_clash(x: u64, c: u64): u64 {
        map(x, |arg0| __lambda__1__no_name_clash(c, arg0))
    }
    fun with_name_clash1(x: u64, c: u64): u64 {
        map(x, |arg0| __lambda__1__with_name_clash1(c, arg0))
    }
    fun with_name_clash2(x: u64, c: u64): u64 {
        map(x, |arg0| __lambda__1__with_name_clash2(c, arg0))
    }
    fun __lambda__1__no_name_clash(c: u64, y: u64): u64 {
        y + c
    }
    fun __lambda__1__with_name_clash1(c: u64, x: u64): u64 {
        x + c
    }
    fun __lambda__1__with_name_clash2(c: u64, x: u64): u64 {
        {
            let x = c + 1;
            x
        } + x
    }
}

============ initial bytecode ================

[variant baseline]
fun m::map($t0: u64, $t1: |u64|u64): u64 {
     var $t2: u64
     var $t3: u64
  0: $t3 := infer($t0)
  1: $t2 := invoke($t3, $t1)
  2: return $t2
}


[variant baseline]
fun m::no_name_clash($t0: u64, $t1: u64): u64 {
     var $t2: u64
     var $t3: u64
     var $t4: |u64|u64
  0: $t3 := infer($t0)
  1: $t4 := closure#1 m::__lambda__1__no_name_clash($t1)
  2: $t2 := m::map($t3, $t4)
  3: return $t2
}


[variant baseline]
fun m::with_name_clash1($t0: u64, $t1: u64): u64 {
     var $t2: u64
     var $t3: u64
     var $t4: |u64|u64
  0: $t3 := infer($t0)
  1: $t4 := closure#1 m::__lambda__1__with_name_clash1($t1)
  2: $t2 := m::map($t3, $t4)
  3: return $t2
}


[variant baseline]
fun m::with_name_clash2($t0: u64, $t1: u64): u64 {
     var $t2: u64
     var $t3: u64
     var $t4: |u64|u64
  0: $t3 := infer($t0)
  1: $t4 := closure#1 m::__lambda__1__with_name_clash2($t1)
  2: $t2 := m::map($t3, $t4)
  3: return $t2
}


[variant baseline]
fun m::__lambda__1__no_name_clash($t0: u64, $t1: u64): u64 {
     var $t2: u64
     var $t3: u64
  0: $t3 := infer($t1)
  1: $t2 := +($t3, $t0)
  2: return $t2
}


[variant baseline]
fun m::__lambda__1__with_name_clash1($t0: u64, $t1: u64): u64 {
     var $t2: u64
     var $t3: u64
  0: $t3 := infer($t1)
  1: $t2 := +($t3, $t0)
  2: return $t2
}


[variant baseline]
fun m::__lambda__1__with_name_clash2($t0: u64, $t1: u64): u64 {
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
  0: $t5 := infer($t0)
  1: $t6 := 1
  2: $t4 := +($t5, $t6)
  3: $t3 := infer($t4)
  4: $t2 := +($t3, $t1)
  5: return $t2
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::map($t0: u64, $t1: |u64|u64): u64 {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     # live vars: $t0, $t1
  0: $t0 := move($t0)
     # live vars: $t0, $t1
  1: $t0 := invoke($t0, $t1)
     # live vars: $t0
  2: return $t0
}


[variant baseline]
fun m::no_name_clash($t0: u64, $t1: u64): u64 {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     var $t4: |u64|u64
     # live vars: $t0, $t1
  0: $t0 := move($t0)
     # live vars: $t0, $t1
  1: $t4 := closure#1 m::__lambda__1__no_name_clash($t1)
     # live vars: $t0, $t4
  2: $t0 := m::map($t0, $t4)
     # live vars: $t0
  3: return $t0
}


[variant baseline]
fun m::with_name_clash1($t0: u64, $t1: u64): u64 {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     var $t4: |u64|u64
     # live vars: $t0, $t1
  0: $t0 := move($t0)
     # live vars: $t0, $t1
  1: $t4 := closure#1 m::__lambda__1__with_name_clash1($t1)
     # live vars: $t0, $t4
  2: $t0 := m::map($t0, $t4)
     # live vars: $t0
  3: return $t0
}


[variant baseline]
fun m::with_name_clash2($t0: u64, $t1: u64): u64 {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     var $t4: |u64|u64
     # live vars: $t0, $t1
  0: $t0 := move($t0)
     # live vars: $t0, $t1
  1: $t4 := closure#1 m::__lambda__1__with_name_clash2($t1)
     # live vars: $t0, $t4
  2: $t0 := m::map($t0, $t4)
     # live vars: $t0
  3: return $t0
}


[variant baseline]
fun m::__lambda__1__no_name_clash($t0: u64, $t1: u64): u64 {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     # live vars: $t0, $t1
  0: $t1 := move($t1)
     # live vars: $t0, $t1
  1: $t0 := +($t1, $t0)
     # live vars: $t0
  2: return $t0
}


[variant baseline]
fun m::__lambda__1__with_name_clash1($t0: u64, $t1: u64): u64 {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     # live vars: $t0, $t1
  0: $t1 := move($t1)
     # live vars: $t0, $t1
  1: $t0 := +($t1, $t0)
     # live vars: $t0
  2: return $t0
}


[variant baseline]
fun m::__lambda__1__with_name_clash2($t0: u64, $t1: u64): u64 {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     var $t4: u64 [unused]
     var $t5: u64 [unused]
     var $t6: u64
     # live vars: $t0, $t1
  0: $t0 := move($t0)
     # live vars: $t0, $t1
  1: $t6 := 1
     # live vars: $t0, $t1, $t6
  2: $t0 := +($t0, $t6)
     # live vars: $t0, $t1
  3: $t0 := move($t0)
     # live vars: $t0, $t1
  4: $t0 := +($t0, $t1)
     # live vars: $t0
  5: return $t0
}


============ disassembled file-format ==================
// Move bytecode v8
module cafe.m {


map(x: u64, f: |u64|u64 has drop): u64 /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](x: u64)
	1: MoveLoc[1](f: |u64|u64 has drop)
	2: CallClosure(|u64|u64 has drop)
	3: Ret
}
no_name_clash(x: u64, c: u64): u64 /* def_idx: 1 */ {
B0:
	0: MoveLoc[0](x: u64)
	1: MoveLoc[1](c: u64)
	2: PackClosure#1 __lambda__1__no_name_clash(u64, u64): u64
	3: Call map(u64, |u64|u64 has drop): u64
	4: Ret
}
with_name_clash1(x: u64, c: u64): u64 /* def_idx: 2 */ {
B0:
	0: MoveLoc[0](x: u64)
	1: MoveLoc[1](c: u64)
	2: PackClosure#1 __lambda__1__with_name_clash1(u64, u64): u64
	3: Call map(u64, |u64|u64 has drop): u64
	4: Ret
}
with_name_clash2(x: u64, c: u64): u64 /* def_idx: 3 */ {
B0:
	0: MoveLoc[0](x: u64)
	1: MoveLoc[1](c: u64)
	2: PackClosure#1 __lambda__1__with_name_clash2(u64, u64): u64
	3: Call map(u64, |u64|u64 has drop): u64
	4: Ret
}
__lambda__1__no_name_clash(c: u64, y: u64): u64 /* def_idx: 4 */ {
B0:
	0: MoveLoc[1](y: u64)
	1: MoveLoc[0](c: u64)
	2: Add
	3: Ret
}
__lambda__1__with_name_clash1(c: u64, x: u64): u64 /* def_idx: 5 */ {
B0:
	0: MoveLoc[1](x: u64)
	1: MoveLoc[0](c: u64)
	2: Add
	3: Ret
}
__lambda__1__with_name_clash2(c: u64, x: u64): u64 /* def_idx: 6 */ {
B0:
	0: MoveLoc[0](c: u64)
	1: LdU64(1)
	2: Add
	3: MoveLoc[1](x: u64)
	4: Add
	5: Ret
}
}
============ bytecode verification succeeded ========
