// -- Model dump before first bytecode pipeline
module 0x8675309::M {
    struct S {
        f: u64,
    }
    private fun bar(_s: &mut u64,_u: u64) {
        Tuple()
    }
    private fun foo(_s: &S,_u: u64) {
        Tuple()
    }
    private fun t0(s: &mut S) {
        {
          let x: u64 = 0;
          {
            let z: u64 = 1;
            {
              let f: &mut u64 = x: u64 = Add<u64>(x, 1);
              Borrow(Mutable)(select M::S.f<&mut S>(x: u64 = Add<u64>(x, 1);
              z;
              s));
              if Eq<u64>(z, 1) {
                x: u64 = Add<u64>(x, 1);
                M::foo(Freeze(true)<S>(s), x: u64 = Add<u64>(x, 1);
                f = 0;
                1)
              } else {
                x: u64 = Add<u64>(x, 1)
              };
              if Eq<u64>(x, 4) {
                Tuple()
              } else {
                Abort(0)
              };
              Tuple()
            }
          }
        }
    }
    private fun t1(s: &mut S) {
        M::bar(Borrow(Mutable)(select M::S.f<&mut S>(s)), select M::S.f<&mut S>(s) = 0;
        1)
    }
} // end 0x8675309::M

// -- Sourcified model before first bytecode pipeline
module 0x8675309::M {
    struct S {
        f: u64,
    }
    fun bar(_s: &mut u64, _u: u64) {
    }
    fun foo(_s: &S, _u: u64) {
    }
    fun t0(s: &mut S) {
        let x = 0;
        let z = 1;
        let f = {
            x = x + 1;
            &mut {
                x = x + 1;
                z;
                s
            }.f
        };
        if (z == 1) {
            x = x + 1;
            foo(/*freeze*/s, {
                *{
                    x = x + 1;
                    f
                } = 0;
                1
            })
        } else x = x + 1;
        if (x == 4) () else abort 0;
    }
    fun t1(s: &mut S) {
        bar(&mut s.f, {
            s.f = 0;
            1
        })
    }
}


Diagnostics:
error: cannot freeze value which is still mutably borrowed
   ┌─ tests/simplifier/simplifier_test4.move:11:17
   │
 8 │         let f = { x = x + 1; &mut ({x = x + 1; z; s}).f };
   │                              -------------------------- field `f` previously mutably borrowed here
   ·
11 │             foo(freeze(s), { *({x = x + 1; f}) = 0; 1 })
   │                 ^^^^^^^^^                  - conflicting reference `f` used here
   │                 │
   │                 frozen here

error: cannot write value since it is borrowed
   ┌─ tests/simplifier/simplifier_test4.move:20:25
   │
20 │         bar(&mut s.f, { s.f = 0; 1 })
   │         ----------------^^^^^^^------
   │         │   │           │
   │         │   │           write attempted here
   │         │   previously mutably borrowed here
   │         conflicting reference used here
