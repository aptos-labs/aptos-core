// -- Model dump before bytecode pipeline
module 0x42::test {
    struct Coin {
        0: u256,
    }
    struct Wrapper<T> {
        0: T,
    }
    private fun add1_new(x: u256): u256 {
        x: u256 = Add<u256>(x, 1);
        x
    }
    private fun add1_old(x: u256): u256 {
        x: u256 = Add<u256>(x, 1);
        x
    }
    private fun coin_inc_new_1(self: &mut Coin) {
        {
          let $t1: &mut u256 = Borrow(Mutable)(select test::Coin.0<&mut Coin>(self));
          $t1 = Add<u256>(Deref($t1), 1)
        };
        Tuple()
    }
    private fun coin_inc_new_2(self: &mut Coin) {
        {
          let p: &mut u256 = Borrow(Mutable)(select test::Coin.0<&mut Coin>(self));
          p = Add<u256>(Deref(p), 1);
          Tuple()
        }
    }
    private fun coin_inc_old_1(self: &mut Coin) {
        select test::Coin.0<&mut Coin>(self) = Add<u256>(select test::Coin.0<&mut Coin>(self), 1);
        Tuple()
    }
    private fun coin_inc_old_2(self: &mut Coin) {
        {
          let p: &mut u256 = Borrow(Mutable)(select test::Coin.0<&mut Coin>(self));
          p = Add<u256>(Deref(p), 1);
          Tuple()
        }
    }
    private fun inc_coin_at(addr: address)
        acquires Coin(*)
     {
        {
          let coin: &mut Coin = BorrowGlobal(Mutable)<Coin>(addr);
          {
            let $t1: &mut u256 = Borrow(Mutable)(select test::Coin.0<&mut Coin>(coin));
            $t1 = Add<u256>(Deref($t1), 1)
          };
          Tuple()
        }
    }
    private fun inc_new(x: &mut u256) {
        {
          let $t1: &mut u256 = x;
          $t1 = Add<u256>(Deref($t1), 1)
        };
        Tuple()
    }
    private fun inc_old(x: &mut u256) {
        x = Add<u256>(Deref(x), 1);
        Tuple()
    }
    private fun inc_vec_coin_new(x: vector<Coin>,index: u64) {
        {
          let $t1: &mut u256 = Borrow(Mutable)(select test::Coin.0<Coin>(vector::borrow_mut<Coin>(Borrow(Mutable)(x), index)));
          $t1 = Add<u256>(Deref($t1), 1)
        };
        Tuple()
    }
    private fun inc_vec_coin_old(x: vector<Coin>,index: u64) {
        select test::Coin.0<Coin>(vector::borrow_mut<Coin>(Borrow(Mutable)(x), index)) = Add<u256>(select test::Coin.0<Coin>(vector::borrow<Coin>(Borrow(Immutable)(x), index)), 1);
        Tuple()
    }
    private fun inc_vec_new(x: &mut vector<u256>,index: u64) {
        {
          let $t1: &mut u256 = vector::borrow_mut<u256>(x, index);
          $t1 = Add<u256>(Deref($t1), 1)
        };
        Tuple()
    }
    private fun inc_vec_old(x: vector<u256>,index: u64) {
        vector::borrow_mut<u256>(Borrow(Mutable)(x), index) = Add<u256>(Deref(vector::borrow<u256>(Borrow(Immutable)(x), index)), 1);
        Tuple()
    }
    private fun inc_vec_wrapped_coin_new(x: vector<Wrapper<Coin>>,index: u64) {
        {
          let $t1: &mut u256 = Borrow(Mutable)(select test::Coin.0<Coin>(select test::Wrapper.0<Wrapper<Coin>>(vector::borrow_mut<Wrapper<Coin>>(Borrow(Mutable)(x), index))));
          $t1 = Add<u256>(Deref($t1), 1)
        };
        Tuple()
    }
    private fun inc_vec_wrapped_coin_old(x: vector<Wrapper<Coin>>,index: u64) {
        select test::Coin.0<Coin>(select test::Wrapper.0<Wrapper<Coin>>(vector::borrow_mut<Wrapper<Coin>>(Borrow(Mutable)(x), index))) = Add<u256>(select test::Coin.0<Coin>(select test::Wrapper.0<Wrapper<Coin>>(vector::borrow<Wrapper<Coin>>(Borrow(Immutable)(x), index))), 1);
        Tuple()
    }
    private fun inc_wrapped_coin_new(x: &mut Wrapper<Coin>) {
        {
          let $t1: &mut u256 = Borrow(Mutable)(select test::Coin.0<Coin>(select test::Wrapper.0<&mut Wrapper<Coin>>(x)));
          $t1 = Add<u256>(Deref($t1), 1)
        };
        Tuple()
    }
    private fun inc_wrapped_coin_old(x: &mut Wrapper<Coin>) {
        select test::Coin.0<Coin>(select test::Wrapper.0<&mut Wrapper<Coin>>(x)) = Add<u256>(select test::Coin.0<Coin>(select test::Wrapper.0<&mut Wrapper<Coin>>(x)), 1);
        Tuple()
    }
} // end 0x42::test

// -- Sourcified model before bytecode pipeline
module 0x42::test {
    struct Coin has drop, key {
        0: u256,
    }
    struct Wrapper<T> has drop, key {
        0: T,
    }
    fun add1_new(x: u256): u256 {
        x = x + 1u256;
        x
    }
    fun add1_old(x: u256): u256 {
        x = x + 1u256;
        x
    }
    fun coin_inc_new_1(self: &mut Coin) {
        {
            let $t1 = &mut self.0;
            *$t1 = *$t1 + 1u256
        };
    }
    fun coin_inc_new_2(self: &mut Coin) {
        let p = &mut self.0;
        *p = *p + 1u256;
    }
    fun coin_inc_old_1(self: &mut Coin) {
        self.0 = self.0 + 1u256;
    }
    fun coin_inc_old_2(self: &mut Coin) {
        let p = &mut self.0;
        *p = *p + 1u256;
    }
    fun inc_coin_at(addr: address)
        acquires Coin
    {
        let coin = borrow_global_mut<Coin>(addr);
        {
            let $t1 = &mut coin.0;
            *$t1 = *$t1 + 1u256
        };
    }
    fun inc_new(x: &mut u256) {
        {
            let $t1 = x;
            *$t1 = *$t1 + 1u256
        };
    }
    fun inc_old(x: &mut u256) {
        *x = *x + 1u256;
    }
    fun inc_vec_coin_new(x: vector<Coin>, index: u64) {
        {
            let $t1 = &mut 0x1::vector::borrow_mut<Coin>(&mut x, index).0;
            *$t1 = *$t1 + 1u256
        };
    }
    fun inc_vec_coin_old(x: vector<Coin>, index: u64) {
        0x1::vector::borrow_mut<Coin>(&mut x, index).0 = 0x1::vector::borrow<Coin>(&x, index).0 + 1u256;
    }
    fun inc_vec_new(x: &mut vector<u256>, index: u64) {
        {
            let $t1 = 0x1::vector::borrow_mut<u256>(x, index);
            *$t1 = *$t1 + 1u256
        };
    }
    fun inc_vec_old(x: vector<u256>, index: u64) {
        *0x1::vector::borrow_mut<u256>(&mut x, index) = *0x1::vector::borrow<u256>(&x, index) + 1u256;
    }
    fun inc_vec_wrapped_coin_new(x: vector<Wrapper<Coin>>, index: u64) {
        {
            let $t1 = &mut 0x1::vector::borrow_mut<Wrapper<Coin>>(&mut x, index).0.0;
            *$t1 = *$t1 + 1u256
        };
    }
    fun inc_vec_wrapped_coin_old(x: vector<Wrapper<Coin>>, index: u64) {
        0x1::vector::borrow_mut<Wrapper<Coin>>(&mut x, index).0.0 = 0x1::vector::borrow<Wrapper<Coin>>(&x, index).0.0 + 1u256;
    }
    fun inc_wrapped_coin_new(x: &mut Wrapper<Coin>) {
        {
            let $t1 = &mut x.0.0;
            *$t1 = *$t1 + 1u256
        };
    }
    fun inc_wrapped_coin_old(x: &mut Wrapper<Coin>) {
        x.0.0 = x.0.0 + 1u256;
    }
}

============ initial bytecode ================

[variant baseline]
fun test::add1_new($t0: u256): u256 {
     var $t1: u256
     var $t2: u256
     var $t3: u256
     var $t4: u256
  0: $t3 := infer($t0)
  1: $t4 := 1
  2: $t2 := +($t3, $t4)
  3: $t0 := infer($t2)
  4: $t1 := infer($t0)
  5: return $t1
}


[variant baseline]
fun test::add1_old($t0: u256): u256 {
     var $t1: u256
     var $t2: u256
     var $t3: u256
     var $t4: u256
  0: $t3 := infer($t0)
  1: $t4 := 1
  2: $t2 := +($t3, $t4)
  3: $t0 := infer($t2)
  4: $t1 := infer($t0)
  5: return $t1
}


[variant baseline]
fun test::coin_inc_new_1($t0: &mut 0x42::test::Coin) {
     var $t1: &mut u256
     var $t2: u256
     var $t3: u256
     var $t4: u256
  0: $t1 := borrow_field<0x42::test::Coin>.0($t0)
  1: $t3 := read_ref($t1)
  2: $t4 := 1
  3: $t2 := +($t3, $t4)
  4: write_ref($t1, $t2)
  5: return ()
}


[variant baseline]
fun test::coin_inc_new_2($t0: &mut 0x42::test::Coin) {
     var $t1: &mut u256
     var $t2: u256
     var $t3: u256
     var $t4: u256
  0: $t1 := borrow_field<0x42::test::Coin>.0($t0)
  1: $t3 := read_ref($t1)
  2: $t4 := 1
  3: $t2 := +($t3, $t4)
  4: write_ref($t1, $t2)
  5: return ()
}


[variant baseline]
fun test::coin_inc_old_1($t0: &mut 0x42::test::Coin) {
     var $t1: u256
     var $t2: u256
     var $t3: &u256
     var $t4: u256
     var $t5: &mut u256
  0: $t3 := borrow_field<0x42::test::Coin>.0($t0)
  1: $t2 := read_ref($t3)
  2: $t4 := 1
  3: $t1 := +($t2, $t4)
  4: $t5 := borrow_field<0x42::test::Coin>.0($t0)
  5: write_ref($t5, $t1)
  6: return ()
}


[variant baseline]
fun test::coin_inc_old_2($t0: &mut 0x42::test::Coin) {
     var $t1: &mut u256
     var $t2: u256
     var $t3: u256
     var $t4: u256
  0: $t1 := borrow_field<0x42::test::Coin>.0($t0)
  1: $t3 := read_ref($t1)
  2: $t4 := 1
  3: $t2 := +($t3, $t4)
  4: write_ref($t1, $t2)
  5: return ()
}


[variant baseline]
fun test::inc_coin_at($t0: address) {
     var $t1: &mut 0x42::test::Coin
     var $t2: &mut u256
     var $t3: u256
     var $t4: u256
     var $t5: u256
  0: $t1 := borrow_global<0x42::test::Coin>($t0)
  1: $t2 := borrow_field<0x42::test::Coin>.0($t1)
  2: $t4 := read_ref($t2)
  3: $t5 := 1
  4: $t3 := +($t4, $t5)
  5: write_ref($t2, $t3)
  6: return ()
}


[variant baseline]
fun test::inc_new($t0: &mut u256) {
     var $t1: &mut u256
     var $t2: u256
     var $t3: u256
     var $t4: u256
  0: $t1 := infer($t0)
  1: $t3 := read_ref($t1)
  2: $t4 := 1
  3: $t2 := +($t3, $t4)
  4: write_ref($t1, $t2)
  5: return ()
}


[variant baseline]
fun test::inc_old($t0: &mut u256) {
     var $t1: u256
     var $t2: u256
     var $t3: u256
  0: $t2 := read_ref($t0)
  1: $t3 := 1
  2: $t1 := +($t2, $t3)
  3: write_ref($t0, $t1)
  4: return ()
}


[variant baseline]
fun test::inc_vec_coin_new($t0: vector<0x42::test::Coin>, $t1: u64) {
     var $t2: &mut u256
     var $t3: &mut 0x42::test::Coin
     var $t4: &mut vector<0x42::test::Coin>
     var $t5: u256
     var $t6: u256
     var $t7: u256
  0: $t4 := borrow_local($t0)
  1: $t3 := vector::borrow_mut<0x42::test::Coin>($t4, $t1)
  2: $t2 := borrow_field<0x42::test::Coin>.0($t3)
  3: $t6 := read_ref($t2)
  4: $t7 := 1
  5: $t5 := +($t6, $t7)
  6: write_ref($t2, $t5)
  7: return ()
}


[variant baseline]
fun test::inc_vec_coin_old($t0: vector<0x42::test::Coin>, $t1: u64) {
     var $t2: u256
     var $t3: u256
     var $t4: &0x42::test::Coin
     var $t5: &vector<0x42::test::Coin>
     var $t6: &u256
     var $t7: u256
     var $t8: &mut u256
     var $t9: &mut 0x42::test::Coin
     var $t10: &mut vector<0x42::test::Coin>
  0: $t5 := borrow_local($t0)
  1: $t4 := vector::borrow<0x42::test::Coin>($t5, $t1)
  2: $t6 := borrow_field<0x42::test::Coin>.0($t4)
  3: $t3 := read_ref($t6)
  4: $t7 := 1
  5: $t2 := +($t3, $t7)
  6: $t10 := borrow_local($t0)
  7: $t9 := vector::borrow_mut<0x42::test::Coin>($t10, $t1)
  8: $t8 := borrow_field<0x42::test::Coin>.0($t9)
  9: write_ref($t8, $t2)
 10: return ()
}


[variant baseline]
fun test::inc_vec_new($t0: &mut vector<u256>, $t1: u64) {
     var $t2: &mut u256
     var $t3: &mut vector<u256>
     var $t4: u256
     var $t5: u256
     var $t6: u256
  0: $t3 := infer($t0)
  1: $t2 := vector::borrow_mut<u256>($t3, $t1)
  2: $t5 := read_ref($t2)
  3: $t6 := 1
  4: $t4 := +($t5, $t6)
  5: write_ref($t2, $t4)
  6: return ()
}


[variant baseline]
fun test::inc_vec_old($t0: vector<u256>, $t1: u64) {
     var $t2: u256
     var $t3: u256
     var $t4: &u256
     var $t5: &vector<u256>
     var $t6: u256
     var $t7: &mut u256
     var $t8: &mut vector<u256>
  0: $t5 := borrow_local($t0)
  1: $t4 := vector::borrow<u256>($t5, $t1)
  2: $t3 := read_ref($t4)
  3: $t6 := 1
  4: $t2 := +($t3, $t6)
  5: $t8 := borrow_local($t0)
  6: $t7 := vector::borrow_mut<u256>($t8, $t1)
  7: write_ref($t7, $t2)
  8: return ()
}


[variant baseline]
fun test::inc_vec_wrapped_coin_new($t0: vector<0x42::test::Wrapper<0x42::test::Coin>>, $t1: u64) {
     var $t2: &mut u256
     var $t3: &mut 0x42::test::Coin
     var $t4: &mut 0x42::test::Wrapper<0x42::test::Coin>
     var $t5: &mut vector<0x42::test::Wrapper<0x42::test::Coin>>
     var $t6: u256
     var $t7: u256
     var $t8: u256
  0: $t5 := borrow_local($t0)
  1: $t4 := vector::borrow_mut<0x42::test::Wrapper<0x42::test::Coin>>($t5, $t1)
  2: $t3 := borrow_field<0x42::test::Wrapper<0x42::test::Coin>>.0($t4)
  3: $t2 := borrow_field<0x42::test::Coin>.0($t3)
  4: $t7 := read_ref($t2)
  5: $t8 := 1
  6: $t6 := +($t7, $t8)
  7: write_ref($t2, $t6)
  8: return ()
}


[variant baseline]
fun test::inc_vec_wrapped_coin_old($t0: vector<0x42::test::Wrapper<0x42::test::Coin>>, $t1: u64) {
     var $t2: u256
     var $t3: u256
     var $t4: &0x42::test::Coin
     var $t5: &0x42::test::Wrapper<0x42::test::Coin>
     var $t6: &vector<0x42::test::Wrapper<0x42::test::Coin>>
     var $t7: &u256
     var $t8: u256
     var $t9: &mut u256
     var $t10: &mut 0x42::test::Coin
     var $t11: &mut 0x42::test::Wrapper<0x42::test::Coin>
     var $t12: &mut vector<0x42::test::Wrapper<0x42::test::Coin>>
  0: $t6 := borrow_local($t0)
  1: $t5 := vector::borrow<0x42::test::Wrapper<0x42::test::Coin>>($t6, $t1)
  2: $t4 := borrow_field<0x42::test::Wrapper<0x42::test::Coin>>.0($t5)
  3: $t7 := borrow_field<0x42::test::Coin>.0($t4)
  4: $t3 := read_ref($t7)
  5: $t8 := 1
  6: $t2 := +($t3, $t8)
  7: $t12 := borrow_local($t0)
  8: $t11 := vector::borrow_mut<0x42::test::Wrapper<0x42::test::Coin>>($t12, $t1)
  9: $t10 := borrow_field<0x42::test::Wrapper<0x42::test::Coin>>.0($t11)
 10: $t9 := borrow_field<0x42::test::Coin>.0($t10)
 11: write_ref($t9, $t2)
 12: return ()
}


[variant baseline]
fun test::inc_wrapped_coin_new($t0: &mut 0x42::test::Wrapper<0x42::test::Coin>) {
     var $t1: &mut u256
     var $t2: &mut 0x42::test::Coin
     var $t3: u256
     var $t4: u256
     var $t5: u256
  0: $t2 := borrow_field<0x42::test::Wrapper<0x42::test::Coin>>.0($t0)
  1: $t1 := borrow_field<0x42::test::Coin>.0($t2)
  2: $t4 := read_ref($t1)
  3: $t5 := 1
  4: $t3 := +($t4, $t5)
  5: write_ref($t1, $t3)
  6: return ()
}


[variant baseline]
fun test::inc_wrapped_coin_old($t0: &mut 0x42::test::Wrapper<0x42::test::Coin>) {
     var $t1: u256
     var $t2: u256
     var $t3: &0x42::test::Coin
     var $t4: &u256
     var $t5: u256
     var $t6: &mut u256
     var $t7: &mut 0x42::test::Coin
  0: $t3 := borrow_field<0x42::test::Wrapper<0x42::test::Coin>>.0($t0)
  1: $t4 := borrow_field<0x42::test::Coin>.0($t3)
  2: $t2 := read_ref($t4)
  3: $t5 := 1
  4: $t1 := +($t2, $t5)
  5: $t7 := borrow_field<0x42::test::Wrapper<0x42::test::Coin>>.0($t0)
  6: $t6 := borrow_field<0x42::test::Coin>.0($t7)
  7: write_ref($t6, $t1)
  8: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun test::add1_new($t0: u256): u256 {
     var $t1: u256 [unused]
     var $t2: u256 [unused]
     var $t3: u256
     var $t4: u256
     # live vars: $t0
  0: $t3 := move($t0)
     # live vars: $t3
  1: $t4 := 1
     # live vars: $t3, $t4
  2: $t3 := +($t3, $t4)
     # live vars: $t3
  3: $t0 := move($t3)
     # live vars: $t0
  4: return $t0
}


[variant baseline]
fun test::add1_old($t0: u256): u256 {
     var $t1: u256 [unused]
     var $t2: u256 [unused]
     var $t3: u256
     var $t4: u256
     # live vars: $t0
  0: $t3 := move($t0)
     # live vars: $t3
  1: $t4 := 1
     # live vars: $t3, $t4
  2: $t3 := +($t3, $t4)
     # live vars: $t3
  3: $t0 := move($t3)
     # live vars: $t0
  4: return $t0
}


[variant baseline]
fun test::coin_inc_new_1($t0: &mut 0x42::test::Coin) {
     var $t1: &mut u256
     var $t2: u256 [unused]
     var $t3: u256
     var $t4: u256
     # live vars: $t0
  0: $t1 := borrow_field<0x42::test::Coin>.0($t0)
     # live vars: $t1
  1: $t3 := read_ref($t1)
     # live vars: $t1, $t3
  2: $t4 := 1
     # live vars: $t1, $t3, $t4
  3: $t3 := +($t3, $t4)
     # live vars: $t1, $t3
  4: write_ref($t1, $t3)
     # live vars:
  5: return ()
}


[variant baseline]
fun test::coin_inc_new_2($t0: &mut 0x42::test::Coin) {
     var $t1: &mut u256
     var $t2: u256 [unused]
     var $t3: u256
     var $t4: u256
     # live vars: $t0
  0: $t1 := borrow_field<0x42::test::Coin>.0($t0)
     # live vars: $t1
  1: $t3 := read_ref($t1)
     # live vars: $t1, $t3
  2: $t4 := 1
     # live vars: $t1, $t3, $t4
  3: $t3 := +($t3, $t4)
     # live vars: $t1, $t3
  4: write_ref($t1, $t3)
     # live vars:
  5: return ()
}


[variant baseline]
fun test::coin_inc_old_1($t0: &mut 0x42::test::Coin) {
     var $t1: u256 [unused]
     var $t2: u256
     var $t3: &u256
     var $t4: u256
     var $t5: &mut u256
     # live vars: $t0
  0: $t3 := borrow_field<0x42::test::Coin>.0($t0)
     # live vars: $t0, $t3
  1: $t2 := read_ref($t3)
     # live vars: $t0, $t2
  2: $t4 := 1
     # live vars: $t0, $t2, $t4
  3: $t2 := +($t2, $t4)
     # live vars: $t0, $t2
  4: $t5 := borrow_field<0x42::test::Coin>.0($t0)
     # live vars: $t2, $t5
  5: write_ref($t5, $t2)
     # live vars:
  6: return ()
}


[variant baseline]
fun test::coin_inc_old_2($t0: &mut 0x42::test::Coin) {
     var $t1: &mut u256
     var $t2: u256 [unused]
     var $t3: u256
     var $t4: u256
     # live vars: $t0
  0: $t1 := borrow_field<0x42::test::Coin>.0($t0)
     # live vars: $t1
  1: $t3 := read_ref($t1)
     # live vars: $t1, $t3
  2: $t4 := 1
     # live vars: $t1, $t3, $t4
  3: $t3 := +($t3, $t4)
     # live vars: $t1, $t3
  4: write_ref($t1, $t3)
     # live vars:
  5: return ()
}


[variant baseline]
fun test::inc_coin_at($t0: address) {
     var $t1: &mut 0x42::test::Coin
     var $t2: &mut u256
     var $t3: u256 [unused]
     var $t4: u256
     var $t5: u256
     # live vars: $t0
  0: $t1 := borrow_global<0x42::test::Coin>($t0)
     # live vars: $t1
  1: $t2 := borrow_field<0x42::test::Coin>.0($t1)
     # live vars: $t2
  2: $t4 := read_ref($t2)
     # live vars: $t2, $t4
  3: $t5 := 1
     # live vars: $t2, $t4, $t5
  4: $t4 := +($t4, $t5)
     # live vars: $t2, $t4
  5: write_ref($t2, $t4)
     # live vars:
  6: return ()
}


[variant baseline]
fun test::inc_new($t0: &mut u256) {
     var $t1: &mut u256 [unused]
     var $t2: u256 [unused]
     var $t3: u256
     var $t4: u256
     # live vars: $t0
  0: $t0 := move($t0)
     # live vars: $t0
  1: $t3 := read_ref($t0)
     # live vars: $t0, $t3
  2: $t4 := 1
     # live vars: $t0, $t3, $t4
  3: $t3 := +($t3, $t4)
     # live vars: $t0, $t3
  4: write_ref($t0, $t3)
     # live vars:
  5: return ()
}


[variant baseline]
fun test::inc_old($t0: &mut u256) {
     var $t1: u256 [unused]
     var $t2: u256
     var $t3: u256
     # live vars: $t0
  0: $t2 := read_ref($t0)
     # live vars: $t0, $t2
  1: $t3 := 1
     # live vars: $t0, $t2, $t3
  2: $t2 := +($t2, $t3)
     # live vars: $t0, $t2
  3: write_ref($t0, $t2)
     # live vars:
  4: return ()
}


[variant baseline]
fun test::inc_vec_coin_new($t0: vector<0x42::test::Coin>, $t1: u64) {
     var $t2: &mut u256
     var $t3: &mut 0x42::test::Coin
     var $t4: &mut vector<0x42::test::Coin>
     var $t5: u256 [unused]
     var $t6: u256
     var $t7: u256
     # live vars: $t0, $t1
  0: $t4 := borrow_local($t0)
     # live vars: $t1, $t4
  1: $t3 := vector::borrow_mut<0x42::test::Coin>($t4, $t1)
     # live vars: $t3
  2: $t2 := borrow_field<0x42::test::Coin>.0($t3)
     # live vars: $t2
  3: $t6 := read_ref($t2)
     # live vars: $t2, $t6
  4: $t7 := 1
     # live vars: $t2, $t6, $t7
  5: $t6 := +($t6, $t7)
     # live vars: $t2, $t6
  6: write_ref($t2, $t6)
     # live vars:
  7: return ()
}


[variant baseline]
fun test::inc_vec_coin_old($t0: vector<0x42::test::Coin>, $t1: u64) {
     var $t2: u256 [unused]
     var $t3: u256
     var $t4: &0x42::test::Coin
     var $t5: &vector<0x42::test::Coin>
     var $t6: &u256
     var $t7: u256
     var $t8: &mut u256
     var $t9: &mut 0x42::test::Coin
     var $t10: &mut vector<0x42::test::Coin>
     # live vars: $t0, $t1
  0: $t5 := borrow_local($t0)
     # live vars: $t0, $t1, $t5
  1: $t4 := vector::borrow<0x42::test::Coin>($t5, $t1)
     # live vars: $t0, $t1, $t4
  2: $t6 := borrow_field<0x42::test::Coin>.0($t4)
     # live vars: $t0, $t1, $t6
  3: $t3 := read_ref($t6)
     # live vars: $t0, $t1, $t3
  4: $t7 := 1
     # live vars: $t0, $t1, $t3, $t7
  5: $t3 := +($t3, $t7)
     # live vars: $t0, $t1, $t3
  6: $t10 := borrow_local($t0)
     # live vars: $t1, $t3, $t10
  7: $t9 := vector::borrow_mut<0x42::test::Coin>($t10, $t1)
     # live vars: $t3, $t9
  8: $t8 := borrow_field<0x42::test::Coin>.0($t9)
     # live vars: $t3, $t8
  9: write_ref($t8, $t3)
     # live vars:
 10: return ()
}


[variant baseline]
fun test::inc_vec_new($t0: &mut vector<u256>, $t1: u64) {
     var $t2: &mut u256
     var $t3: &mut vector<u256> [unused]
     var $t4: u256 [unused]
     var $t5: u256
     var $t6: u256
     # live vars: $t0, $t1
  0: $t0 := move($t0)
     # live vars: $t0, $t1
  1: $t2 := vector::borrow_mut<u256>($t0, $t1)
     # live vars: $t2
  2: $t5 := read_ref($t2)
     # live vars: $t2, $t5
  3: $t6 := 1
     # live vars: $t2, $t5, $t6
  4: $t5 := +($t5, $t6)
     # live vars: $t2, $t5
  5: write_ref($t2, $t5)
     # live vars:
  6: return ()
}


[variant baseline]
fun test::inc_vec_old($t0: vector<u256>, $t1: u64) {
     var $t2: u256 [unused]
     var $t3: u256
     var $t4: &u256
     var $t5: &vector<u256>
     var $t6: u256
     var $t7: &mut u256
     var $t8: &mut vector<u256>
     # live vars: $t0, $t1
  0: $t5 := borrow_local($t0)
     # live vars: $t0, $t1, $t5
  1: $t4 := vector::borrow<u256>($t5, $t1)
     # live vars: $t0, $t1, $t4
  2: $t3 := read_ref($t4)
     # live vars: $t0, $t1, $t3
  3: $t6 := 1
     # live vars: $t0, $t1, $t3, $t6
  4: $t3 := +($t3, $t6)
     # live vars: $t0, $t1, $t3
  5: $t8 := borrow_local($t0)
     # live vars: $t1, $t3, $t8
  6: $t7 := vector::borrow_mut<u256>($t8, $t1)
     # live vars: $t3, $t7
  7: write_ref($t7, $t3)
     # live vars:
  8: return ()
}


[variant baseline]
fun test::inc_vec_wrapped_coin_new($t0: vector<0x42::test::Wrapper<0x42::test::Coin>>, $t1: u64) {
     var $t2: &mut u256
     var $t3: &mut 0x42::test::Coin
     var $t4: &mut 0x42::test::Wrapper<0x42::test::Coin>
     var $t5: &mut vector<0x42::test::Wrapper<0x42::test::Coin>>
     var $t6: u256 [unused]
     var $t7: u256
     var $t8: u256
     # live vars: $t0, $t1
  0: $t5 := borrow_local($t0)
     # live vars: $t1, $t5
  1: $t4 := vector::borrow_mut<0x42::test::Wrapper<0x42::test::Coin>>($t5, $t1)
     # live vars: $t4
  2: $t3 := borrow_field<0x42::test::Wrapper<0x42::test::Coin>>.0($t4)
     # live vars: $t3
  3: $t2 := borrow_field<0x42::test::Coin>.0($t3)
     # live vars: $t2
  4: $t7 := read_ref($t2)
     # live vars: $t2, $t7
  5: $t8 := 1
     # live vars: $t2, $t7, $t8
  6: $t7 := +($t7, $t8)
     # live vars: $t2, $t7
  7: write_ref($t2, $t7)
     # live vars:
  8: return ()
}


[variant baseline]
fun test::inc_vec_wrapped_coin_old($t0: vector<0x42::test::Wrapper<0x42::test::Coin>>, $t1: u64) {
     var $t2: u256 [unused]
     var $t3: u256
     var $t4: &0x42::test::Coin
     var $t5: &0x42::test::Wrapper<0x42::test::Coin>
     var $t6: &vector<0x42::test::Wrapper<0x42::test::Coin>>
     var $t7: &u256
     var $t8: u256
     var $t9: &mut u256
     var $t10: &mut 0x42::test::Coin
     var $t11: &mut 0x42::test::Wrapper<0x42::test::Coin>
     var $t12: &mut vector<0x42::test::Wrapper<0x42::test::Coin>>
     # live vars: $t0, $t1
  0: $t6 := borrow_local($t0)
     # live vars: $t0, $t1, $t6
  1: $t5 := vector::borrow<0x42::test::Wrapper<0x42::test::Coin>>($t6, $t1)
     # live vars: $t0, $t1, $t5
  2: $t4 := borrow_field<0x42::test::Wrapper<0x42::test::Coin>>.0($t5)
     # live vars: $t0, $t1, $t4
  3: $t7 := borrow_field<0x42::test::Coin>.0($t4)
     # live vars: $t0, $t1, $t7
  4: $t3 := read_ref($t7)
     # live vars: $t0, $t1, $t3
  5: $t8 := 1
     # live vars: $t0, $t1, $t3, $t8
  6: $t3 := +($t3, $t8)
     # live vars: $t0, $t1, $t3
  7: $t12 := borrow_local($t0)
     # live vars: $t1, $t3, $t12
  8: $t11 := vector::borrow_mut<0x42::test::Wrapper<0x42::test::Coin>>($t12, $t1)
     # live vars: $t3, $t11
  9: $t10 := borrow_field<0x42::test::Wrapper<0x42::test::Coin>>.0($t11)
     # live vars: $t3, $t10
 10: $t9 := borrow_field<0x42::test::Coin>.0($t10)
     # live vars: $t3, $t9
 11: write_ref($t9, $t3)
     # live vars:
 12: return ()
}


[variant baseline]
fun test::inc_wrapped_coin_new($t0: &mut 0x42::test::Wrapper<0x42::test::Coin>) {
     var $t1: &mut u256
     var $t2: &mut 0x42::test::Coin
     var $t3: u256 [unused]
     var $t4: u256
     var $t5: u256
     # live vars: $t0
  0: $t2 := borrow_field<0x42::test::Wrapper<0x42::test::Coin>>.0($t0)
     # live vars: $t2
  1: $t1 := borrow_field<0x42::test::Coin>.0($t2)
     # live vars: $t1
  2: $t4 := read_ref($t1)
     # live vars: $t1, $t4
  3: $t5 := 1
     # live vars: $t1, $t4, $t5
  4: $t4 := +($t4, $t5)
     # live vars: $t1, $t4
  5: write_ref($t1, $t4)
     # live vars:
  6: return ()
}


[variant baseline]
fun test::inc_wrapped_coin_old($t0: &mut 0x42::test::Wrapper<0x42::test::Coin>) {
     var $t1: u256 [unused]
     var $t2: u256
     var $t3: &0x42::test::Coin
     var $t4: &u256
     var $t5: u256
     var $t6: &mut u256
     var $t7: &mut 0x42::test::Coin
     # live vars: $t0
  0: $t3 := borrow_field<0x42::test::Wrapper<0x42::test::Coin>>.0($t0)
     # live vars: $t0, $t3
  1: $t4 := borrow_field<0x42::test::Coin>.0($t3)
     # live vars: $t0, $t4
  2: $t2 := read_ref($t4)
     # live vars: $t0, $t2
  3: $t5 := 1
     # live vars: $t0, $t2, $t5
  4: $t2 := +($t2, $t5)
     # live vars: $t0, $t2
  5: $t7 := borrow_field<0x42::test::Wrapper<0x42::test::Coin>>.0($t0)
     # live vars: $t2, $t7
  6: $t6 := borrow_field<0x42::test::Coin>.0($t7)
     # live vars: $t2, $t6
  7: write_ref($t6, $t2)
     # live vars:
  8: return ()
}


============ disassembled file-format ==================
// Move bytecode v7
module 42.test {
struct Coin has drop, key {
	_0: u256
}
struct Wrapper<Ty0> has drop, key {
	_0: Ty0
}

add1_new(Arg0: u256): u256 /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](Arg0: u256)
	1: LdU256(1)
	2: Add
	3: Ret
}
add1_old(Arg0: u256): u256 /* def_idx: 1 */ {
B0:
	0: MoveLoc[0](Arg0: u256)
	1: LdU256(1)
	2: Add
	3: Ret
}
coin_inc_new_1(Arg0: &mut Coin) /* def_idx: 2 */ {
L1:	loc0: &mut u256
B0:
	0: MoveLoc[0](Arg0: &mut Coin)
	1: MutBorrowField[0](Coin._0: u256)
	2: StLoc[1](loc0: &mut u256)
	3: CopyLoc[1](loc0: &mut u256)
	4: ReadRef
	5: LdU256(1)
	6: Add
	7: MoveLoc[1](loc0: &mut u256)
	8: WriteRef
	9: Ret
}
coin_inc_new_2(Arg0: &mut Coin) /* def_idx: 3 */ {
L1:	loc0: &mut u256
B0:
	0: MoveLoc[0](Arg0: &mut Coin)
	1: MutBorrowField[0](Coin._0: u256)
	2: StLoc[1](loc0: &mut u256)
	3: CopyLoc[1](loc0: &mut u256)
	4: ReadRef
	5: LdU256(1)
	6: Add
	7: MoveLoc[1](loc0: &mut u256)
	8: WriteRef
	9: Ret
}
coin_inc_old_1(Arg0: &mut Coin) /* def_idx: 4 */ {
B0:
	0: CopyLoc[0](Arg0: &mut Coin)
	1: ImmBorrowField[0](Coin._0: u256)
	2: ReadRef
	3: LdU256(1)
	4: Add
	5: MoveLoc[0](Arg0: &mut Coin)
	6: MutBorrowField[0](Coin._0: u256)
	7: WriteRef
	8: Ret
}
coin_inc_old_2(Arg0: &mut Coin) /* def_idx: 5 */ {
L1:	loc0: &mut u256
B0:
	0: MoveLoc[0](Arg0: &mut Coin)
	1: MutBorrowField[0](Coin._0: u256)
	2: StLoc[1](loc0: &mut u256)
	3: CopyLoc[1](loc0: &mut u256)
	4: ReadRef
	5: LdU256(1)
	6: Add
	7: MoveLoc[1](loc0: &mut u256)
	8: WriteRef
	9: Ret
}
inc_coin_at(Arg0: address) /* def_idx: 6 */ {
L1:	loc0: &mut u256
B0:
	0: MoveLoc[0](Arg0: address)
	1: MutBorrowGlobal[0](Coin)
	2: MutBorrowField[0](Coin._0: u256)
	3: StLoc[1](loc0: &mut u256)
	4: CopyLoc[1](loc0: &mut u256)
	5: ReadRef
	6: LdU256(1)
	7: Add
	8: MoveLoc[1](loc0: &mut u256)
	9: WriteRef
	10: Ret
}
inc_new(Arg0: &mut u256) /* def_idx: 7 */ {
B0:
	0: CopyLoc[0](Arg0: &mut u256)
	1: ReadRef
	2: LdU256(1)
	3: Add
	4: MoveLoc[0](Arg0: &mut u256)
	5: WriteRef
	6: Ret
}
inc_old(Arg0: &mut u256) /* def_idx: 8 */ {
B0:
	0: CopyLoc[0](Arg0: &mut u256)
	1: ReadRef
	2: LdU256(1)
	3: Add
	4: MoveLoc[0](Arg0: &mut u256)
	5: WriteRef
	6: Ret
}
inc_vec_coin_new(Arg0: vector<Coin>, Arg1: u64) /* def_idx: 9 */ {
L2:	loc0: &mut u256
B0:
	0: MutBorrowLoc[0](Arg0: vector<Coin>)
	1: MoveLoc[1](Arg1: u64)
	2: VecMutBorrow(6)
	3: MutBorrowField[0](Coin._0: u256)
	4: StLoc[2](loc0: &mut u256)
	5: CopyLoc[2](loc0: &mut u256)
	6: ReadRef
	7: LdU256(1)
	8: Add
	9: MoveLoc[2](loc0: &mut u256)
	10: WriteRef
	11: Ret
}
inc_vec_coin_old(Arg0: vector<Coin>, Arg1: u64) /* def_idx: 10 */ {
B0:
	0: ImmBorrowLoc[0](Arg0: vector<Coin>)
	1: CopyLoc[1](Arg1: u64)
	2: VecImmBorrow(6)
	3: ImmBorrowField[0](Coin._0: u256)
	4: ReadRef
	5: LdU256(1)
	6: Add
	7: MutBorrowLoc[0](Arg0: vector<Coin>)
	8: MoveLoc[1](Arg1: u64)
	9: VecMutBorrow(6)
	10: MutBorrowField[0](Coin._0: u256)
	11: WriteRef
	12: Ret
}
inc_vec_new(Arg0: &mut vector<u256>, Arg1: u64) /* def_idx: 11 */ {
L2:	loc0: &mut u256
B0:
	0: MoveLoc[0](Arg0: &mut vector<u256>)
	1: MoveLoc[1](Arg1: u64)
	2: VecMutBorrow(0)
	3: StLoc[2](loc0: &mut u256)
	4: CopyLoc[2](loc0: &mut u256)
	5: ReadRef
	6: LdU256(1)
	7: Add
	8: MoveLoc[2](loc0: &mut u256)
	9: WriteRef
	10: Ret
}
inc_vec_old(Arg0: vector<u256>, Arg1: u64) /* def_idx: 12 */ {
B0:
	0: ImmBorrowLoc[0](Arg0: vector<u256>)
	1: CopyLoc[1](Arg1: u64)
	2: VecImmBorrow(0)
	3: ReadRef
	4: LdU256(1)
	5: Add
	6: MutBorrowLoc[0](Arg0: vector<u256>)
	7: MoveLoc[1](Arg1: u64)
	8: VecMutBorrow(0)
	9: WriteRef
	10: Ret
}
inc_vec_wrapped_coin_new(Arg0: vector<Wrapper<Coin>>, Arg1: u64) /* def_idx: 13 */ {
L2:	loc0: &mut u256
B0:
	0: MutBorrowLoc[0](Arg0: vector<Wrapper<Coin>>)
	1: MoveLoc[1](Arg1: u64)
	2: VecMutBorrow(10)
	3: MutBorrowFieldGeneric[0](Wrapper._0: Ty0)
	4: MutBorrowField[0](Coin._0: u256)
	5: StLoc[2](loc0: &mut u256)
	6: CopyLoc[2](loc0: &mut u256)
	7: ReadRef
	8: LdU256(1)
	9: Add
	10: MoveLoc[2](loc0: &mut u256)
	11: WriteRef
	12: Ret
}
inc_vec_wrapped_coin_old(Arg0: vector<Wrapper<Coin>>, Arg1: u64) /* def_idx: 14 */ {
B0:
	0: ImmBorrowLoc[0](Arg0: vector<Wrapper<Coin>>)
	1: CopyLoc[1](Arg1: u64)
	2: VecImmBorrow(10)
	3: ImmBorrowFieldGeneric[0](Wrapper._0: Ty0)
	4: ImmBorrowField[0](Coin._0: u256)
	5: ReadRef
	6: LdU256(1)
	7: Add
	8: MutBorrowLoc[0](Arg0: vector<Wrapper<Coin>>)
	9: MoveLoc[1](Arg1: u64)
	10: VecMutBorrow(10)
	11: MutBorrowFieldGeneric[0](Wrapper._0: Ty0)
	12: MutBorrowField[0](Coin._0: u256)
	13: WriteRef
	14: Ret
}
inc_wrapped_coin_new(Arg0: &mut Wrapper<Coin>) /* def_idx: 15 */ {
L1:	loc0: &mut u256
B0:
	0: MoveLoc[0](Arg0: &mut Wrapper<Coin>)
	1: MutBorrowFieldGeneric[0](Wrapper._0: Ty0)
	2: MutBorrowField[0](Coin._0: u256)
	3: StLoc[1](loc0: &mut u256)
	4: CopyLoc[1](loc0: &mut u256)
	5: ReadRef
	6: LdU256(1)
	7: Add
	8: MoveLoc[1](loc0: &mut u256)
	9: WriteRef
	10: Ret
}
inc_wrapped_coin_old(Arg0: &mut Wrapper<Coin>) /* def_idx: 16 */ {
B0:
	0: CopyLoc[0](Arg0: &mut Wrapper<Coin>)
	1: ImmBorrowFieldGeneric[0](Wrapper._0: Ty0)
	2: ImmBorrowField[0](Coin._0: u256)
	3: ReadRef
	4: LdU256(1)
	5: Add
	6: MoveLoc[0](Arg0: &mut Wrapper<Coin>)
	7: MutBorrowFieldGeneric[0](Wrapper._0: Ty0)
	8: MutBorrowField[0](Coin._0: u256)
	9: WriteRef
	10: Ret
}
}
============ bytecode verification succeeded ========
