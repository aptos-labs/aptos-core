// -- Model dump before bytecode pipeline
module 0xc0ffee::m {
    private fun mod1(r: &mut u64) {
        {
          let $t1: &mut u64 = r;
          $t1 = Add<u64>(Deref($t1), 2)
        };
        Tuple()
    }
    private fun mod2(r: &mut u64): u64 {
        {
          let $t1: &mut u64 = r;
          $t1 = Add<u64>(Deref($t1), 2)
        };
        Deref(r)
    }
    public fun test0(): u64 {
        {
          let v: u64 = 1;
          {
            let $t: u64 = {
              let $t: u64 = v: u64 = Add<u64>(v, 2);
              v;
              v: u64 = Add<u64>(v, $t)
            };
            v;
            v: u64 = Add<u64>(v, $t)
          };
          v
        }
    }
    public fun test1(): u64 {
        {
          let v: u64 = 1;
          {
            let $t: u64 = v: u64 = Add<u64>(v, 2);
            v;
            v: u64 = Add<u64>(v, $t)
          };
          v
        }
    }
    public fun test2(): u64 {
        {
          let v: u64 = 1;
          {
            let $t: u64 = m::mod1(Borrow(Mutable)(v));
            v;
            v: u64 = Add<u64>(v, $t)
          };
          v
        }
    }
    public fun test3(): u64 {
        {
          let v: u64 = 1;
          {
            let $t: u64 = m::mod2(Borrow(Mutable)(v));
            v: u64 = Add<u64>(v, $t)
          };
          v
        }
    }
} // end 0xc0ffee::m

// -- Sourcified model before bytecode pipeline
module 0xc0ffee::m {
    fun mod1(r: &mut u64) {
        {
            let $t1 = r;
            *$t1 = *$t1 + 2
        };
    }
    fun mod2(r: &mut u64): u64 {
        {
            let $t1 = r;
            *$t1 = *$t1 + 2
        };
        *r
    }
    public fun test0(): u64 {
        let v = 1;
        {
            let $t = {
                {
                    let $t = {
                        v = v + 2;
                        v
                    };
                    v = v + $t
                };
                v
            };
            v = v + $t
        };
        v
    }
    public fun test1(): u64 {
        let v = 1;
        {
            let $t = {
                v = v + 2;
                v
            };
            v = v + $t
        };
        v
    }
    public fun test2(): u64 {
        let v = 1;
        {
            let $t = {
                mod1(&mut v);
                v
            };
            v = v + $t
        };
        v
    }
    public fun test3(): u64 {
        let v = 1;
        {
            let $t = mod2(&mut v);
            v = v + $t
        };
        v
    }
}

============ initial bytecode ================

[variant baseline]
fun m::mod1($t0: &mut u64) {
     var $t1: &mut u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
  0: $t1 := infer($t0)
  1: $t3 := read_ref($t1)
  2: $t4 := 2
  3: $t2 := +($t3, $t4)
  4: write_ref($t1, $t2)
  5: return ()
}


[variant baseline]
fun m::mod2($t0: &mut u64): u64 {
     var $t1: u64
     var $t2: &mut u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
  0: $t2 := infer($t0)
  1: $t4 := read_ref($t2)
  2: $t5 := 2
  3: $t3 := +($t4, $t5)
  4: write_ref($t2, $t3)
  5: $t1 := read_ref($t0)
  6: return $t1
}


[variant baseline]
public fun m::test0(): u64 {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: u64
  0: $t1 := 1
  1: $t5 := infer($t1)
  2: $t6 := 2
  3: $t4 := +($t5, $t6)
  4: $t1 := infer($t4)
  5: $t3 := infer($t1)
  6: $t8 := infer($t1)
  7: $t7 := +($t8, $t3)
  8: $t1 := infer($t7)
  9: $t2 := infer($t1)
 10: $t10 := infer($t1)
 11: $t9 := +($t10, $t2)
 12: $t1 := infer($t9)
 13: $t0 := infer($t1)
 14: return $t0
}


[variant baseline]
public fun m::test1(): u64 {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
  0: $t1 := 1
  1: $t4 := infer($t1)
  2: $t5 := 2
  3: $t3 := +($t4, $t5)
  4: $t1 := infer($t3)
  5: $t2 := infer($t1)
  6: $t7 := infer($t1)
  7: $t6 := +($t7, $t2)
  8: $t1 := infer($t6)
  9: $t0 := infer($t1)
 10: return $t0
}


[variant baseline]
public fun m::test2(): u64 {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     var $t3: &mut u64
     var $t4: u64
     var $t5: u64
  0: $t1 := 1
  1: $t3 := borrow_local($t1)
  2: m::mod1($t3)
  3: $t2 := infer($t1)
  4: $t5 := infer($t1)
  5: $t4 := +($t5, $t2)
  6: $t1 := infer($t4)
  7: $t0 := infer($t1)
  8: return $t0
}


[variant baseline]
public fun m::test3(): u64 {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     var $t3: &mut u64
     var $t4: u64
     var $t5: u64
  0: $t1 := 1
  1: $t3 := borrow_local($t1)
  2: $t2 := m::mod2($t3)
  3: $t5 := infer($t1)
  4: $t4 := +($t5, $t2)
  5: $t1 := infer($t4)
  6: $t0 := infer($t1)
  7: return $t0
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::mod1($t0: &mut u64) {
     var $t1: &mut u64 [unused]
     var $t2: u64 [unused]
     var $t3: u64
     var $t4: u64
     # live vars: $t0
  0: $t0 := move($t0)
     # live vars: $t0
  1: $t3 := read_ref($t0)
     # live vars: $t0, $t3
  2: $t4 := 2
     # live vars: $t0, $t3, $t4
  3: $t3 := +($t3, $t4)
     # live vars: $t0, $t3
  4: write_ref($t0, $t3)
     # live vars:
  5: return ()
}


[variant baseline]
fun m::mod2($t0: &mut u64): u64 {
     var $t1: u64 [unused]
     var $t2: &mut u64
     var $t3: u64 [unused]
     var $t4: u64
     var $t5: u64
     # live vars: $t0
  0: $t2 := copy($t0)
     # live vars: $t0, $t2
  1: $t4 := read_ref($t2)
     # live vars: $t0, $t2, $t4
  2: $t5 := 2
     # live vars: $t0, $t2, $t4, $t5
  3: $t4 := +($t4, $t5)
     # live vars: $t0, $t2, $t4
  4: write_ref($t2, $t4)
     # live vars: $t0
  5: $t4 := read_ref($t0)
     # live vars: $t4
  6: return $t4
}


[variant baseline]
public fun m::test0(): u64 {
     var $t0: u64 [unused]
     var $t1: u64
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     var $t4: u64 [unused]
     var $t5: u64
     var $t6: u64
     var $t7: u64 [unused]
     var $t8: u64 [unused]
     var $t9: u64 [unused]
     var $t10: u64 [unused]
     # live vars:
  0: $t1 := 1
     # live vars: $t1
  1: $t5 := move($t1)
     # live vars: $t5
  2: $t6 := 2
     # live vars: $t5, $t6
  3: $t5 := +($t5, $t6)
     # live vars: $t5
  4: $t1 := move($t5)
     # live vars: $t1
  5: $t5 := copy($t1)
     # live vars: $t1, $t5
  6: $t6 := move($t1)
     # live vars: $t5, $t6
  7: $t5 := +($t6, $t5)
     # live vars: $t5
  8: $t1 := move($t5)
     # live vars: $t1
  9: $t5 := copy($t1)
     # live vars: $t1, $t5
 10: $t6 := move($t1)
     # live vars: $t5, $t6
 11: $t5 := +($t6, $t5)
     # live vars: $t5
 12: $t1 := move($t5)
     # live vars: $t1
 13: return $t1
}


[variant baseline]
public fun m::test1(): u64 {
     var $t0: u64 [unused]
     var $t1: u64
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     var $t4: u64
     var $t5: u64
     var $t6: u64 [unused]
     var $t7: u64 [unused]
     # live vars:
  0: $t1 := 1
     # live vars: $t1
  1: $t4 := move($t1)
     # live vars: $t4
  2: $t5 := 2
     # live vars: $t4, $t5
  3: $t4 := +($t4, $t5)
     # live vars: $t4
  4: $t1 := move($t4)
     # live vars: $t1
  5: $t4 := copy($t1)
     # live vars: $t1, $t4
  6: $t5 := move($t1)
     # live vars: $t4, $t5
  7: $t4 := +($t5, $t4)
     # live vars: $t4
  8: $t1 := move($t4)
     # live vars: $t1
  9: return $t1
}


[variant baseline]
public fun m::test2(): u64 {
     var $t0: u64 [unused]
     var $t1: u64
     var $t2: u64
     var $t3: &mut u64
     var $t4: u64 [unused]
     var $t5: u64
     # live vars:
  0: $t1 := 1
     # live vars: $t1
  1: $t3 := borrow_local($t1)
     # live vars: $t1, $t3
  2: m::mod1($t3)
     # live vars: $t1
  3: $t2 := copy($t1)
     # live vars: $t1, $t2
  4: $t5 := move($t1)
     # live vars: $t2, $t5
  5: $t2 := +($t5, $t2)
     # live vars: $t2
  6: $t1 := move($t2)
     # live vars: $t1
  7: $t2 := move($t1)
     # live vars: $t2
  8: return $t2
}


[variant baseline]
public fun m::test3(): u64 {
     var $t0: u64 [unused]
     var $t1: u64
     var $t2: u64
     var $t3: &mut u64
     var $t4: u64 [unused]
     var $t5: u64
     # live vars:
  0: $t1 := 1
     # live vars: $t1
  1: $t3 := borrow_local($t1)
     # live vars: $t1, $t3
  2: $t2 := m::mod2($t3)
     # live vars: $t1, $t2
  3: $t5 := move($t1)
     # live vars: $t2, $t5
  4: $t2 := +($t5, $t2)
     # live vars: $t2
  5: $t1 := move($t2)
     # live vars: $t1
  6: $t2 := move($t1)
     # live vars: $t2
  7: return $t2
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


mod1(Arg0: &mut u64) /* def_idx: 0 */ {
B0:
	0: CopyLoc[0](Arg0: &mut u64)
	1: ReadRef
	2: LdU64(2)
	3: Add
	4: MoveLoc[0](Arg0: &mut u64)
	5: WriteRef
	6: Ret
}
mod2(Arg0: &mut u64): u64 /* def_idx: 1 */ {
L1:	loc0: &mut u64
B0:
	0: CopyLoc[0](Arg0: &mut u64)
	1: StLoc[1](loc0: &mut u64)
	2: CopyLoc[1](loc0: &mut u64)
	3: ReadRef
	4: LdU64(2)
	5: Add
	6: MoveLoc[1](loc0: &mut u64)
	7: WriteRef
	8: MoveLoc[0](Arg0: &mut u64)
	9: ReadRef
	10: Ret
}
public test0(): u64 /* def_idx: 2 */ {
L0:	loc0: u64
L1:	loc1: u64
B0:
	0: LdU64(1)
	1: LdU64(2)
	2: Add
	3: StLoc[0](loc0: u64)
	4: CopyLoc[0](loc0: u64)
	5: StLoc[1](loc1: u64)
	6: MoveLoc[0](loc0: u64)
	7: MoveLoc[1](loc1: u64)
	8: Add
	9: StLoc[0](loc0: u64)
	10: CopyLoc[0](loc0: u64)
	11: StLoc[1](loc1: u64)
	12: MoveLoc[0](loc0: u64)
	13: MoveLoc[1](loc1: u64)
	14: Add
	15: Ret
}
public test1(): u64 /* def_idx: 3 */ {
L0:	loc0: u64
L1:	loc1: u64
B0:
	0: LdU64(1)
	1: LdU64(2)
	2: Add
	3: StLoc[0](loc0: u64)
	4: CopyLoc[0](loc0: u64)
	5: StLoc[1](loc1: u64)
	6: MoveLoc[0](loc0: u64)
	7: MoveLoc[1](loc1: u64)
	8: Add
	9: Ret
}
public test2(): u64 /* def_idx: 4 */ {
L0:	loc0: u64
L1:	loc1: u64
B0:
	0: LdU64(1)
	1: StLoc[0](loc0: u64)
	2: MutBorrowLoc[0](loc0: u64)
	3: Call mod1(&mut u64)
	4: CopyLoc[0](loc0: u64)
	5: StLoc[1](loc1: u64)
	6: MoveLoc[0](loc0: u64)
	7: MoveLoc[1](loc1: u64)
	8: Add
	9: Ret
}
public test3(): u64 /* def_idx: 5 */ {
L0:	loc0: u64
L1:	loc1: u64
B0:
	0: LdU64(1)
	1: StLoc[0](loc0: u64)
	2: MutBorrowLoc[0](loc0: u64)
	3: Call mod2(&mut u64): u64
	4: StLoc[1](loc1: u64)
	5: MoveLoc[0](loc0: u64)
	6: MoveLoc[1](loc1: u64)
	7: Add
	8: Ret
}
}
============ bytecode verification succeeded ========
