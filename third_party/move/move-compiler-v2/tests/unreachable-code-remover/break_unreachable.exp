============ initial bytecode ================

[variant baseline]
fun m::test() {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: bool
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: u64
     var $t11: u64
     var $t12: u64
     var $t13: u64
     var $t14: u64
     var $t15: u64
  0: $t0 := 0
  1: label L0
  2: $t2 := infer($t0)
  3: $t3 := 1
  4: $t1 := +($t2, $t3)
  5: $t0 := infer($t1)
  6: $t5 := infer($t0)
  7: $t6 := 10
  8: $t4 := ==($t5, $t6)
  9: if ($t4) goto 10 else goto 17
 10: label L2
 11: goto 29
 12: $t8 := infer($t0)
 13: $t9 := 1
 14: $t7 := +($t8, $t9)
 15: $t0 := infer($t7)
 16: goto 23
 17: label L3
 18: goto 1
 19: $t11 := infer($t0)
 20: $t12 := 1
 21: $t10 := +($t11, $t12)
 22: $t0 := infer($t10)
 23: label L4
 24: $t14 := infer($t0)
 25: $t15 := 1
 26: $t13 := +($t14, $t15)
 27: $t0 := infer($t13)
 28: goto 1
 29: label L1
 30: return ()
}

============ after UnreachableCodeProcessor: ================

[variant baseline]
fun m::test() {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: bool
     var $t5: u64
     var $t6: u64
     var $t7: u64 [unused]
     var $t8: u64 [unused]
     var $t9: u64 [unused]
     var $t10: u64 [unused]
     var $t11: u64 [unused]
     var $t12: u64 [unused]
     var $t13: u64 [unused]
     var $t14: u64 [unused]
     var $t15: u64 [unused]
     # maybe
  0: $t0 := 0
     # maybe
  1: label L0
     # maybe
  2: $t2 := move($t0)
     # maybe
  3: $t3 := 1
     # maybe
  4: $t1 := +($t2, $t3)
     # maybe
  5: $t0 := move($t1)
     # maybe
  6: $t5 := copy($t0)
     # maybe
  7: $t6 := 10
     # maybe
  8: $t4 := ==($t5, $t6)
     # maybe
  9: if ($t4) goto 12 else goto 10
     # maybe
 10: label L3
     # maybe
 11: goto 1
     # maybe
 12: label L2
     # maybe
 13: return ()
}

============ after UnreachableCodeRemover: ================

[variant baseline]
fun m::test() {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: bool
     var $t5: u64
     var $t6: u64
     var $t7: u64 [unused]
     var $t8: u64 [unused]
     var $t9: u64 [unused]
     var $t10: u64 [unused]
     var $t11: u64 [unused]
     var $t12: u64 [unused]
     var $t13: u64 [unused]
     var $t14: u64 [unused]
     var $t15: u64 [unused]
  0: $t0 := 0
  1: label L0
  2: $t2 := move($t0)
  3: $t3 := 1
  4: $t1 := +($t2, $t3)
  5: $t0 := move($t1)
  6: $t5 := copy($t0)
  7: $t6 := 10
  8: $t4 := ==($t5, $t6)
  9: if ($t4) goto 12 else goto 10
 10: label L3
 11: goto 1
 12: label L2
 13: return ()
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


test() /* def_idx: 0 */ {
L0:	loc0: u64
B0:
	0: LdU64(0)
	1: StLoc[0](loc0: u64)
B1:
	2: MoveLoc[0](loc0: u64)
	3: LdU64(1)
	4: Add
	5: StLoc[0](loc0: u64)
	6: CopyLoc[0](loc0: u64)
	7: LdU64(10)
	8: Eq
	9: BrTrue(11)
B2:
	10: Branch(2)
B3:
	11: Ret
}
}
============ bytecode verification succeeded ========
