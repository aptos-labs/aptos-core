// -- Model dump before bytecode pipeline
module 0x42::reference_conversion {
    private fun deref(r: &u64): u64 {
        Deref(r)
    }
    private fun use_it(): u64 {
        {
          let x: u64 = 42;
          {
            let r: &mut u64 = Borrow(Mutable)(x);
            r = 43;
            reference_conversion::deref(Freeze(false)(r))
          }
        }
    }
} // end 0x42::reference_conversion

// -- Sourcified model before bytecode pipeline
module 0x42::reference_conversion {
    fun deref(r: &u64): u64 {
        *r
    }
    fun use_it(): u64 {
        let x = 42;
        let r = &mut x;
        *r = 43;
        deref(/*freeze*/r)
    }
}

============ initial bytecode ================

[variant baseline]
fun reference_conversion::deref($t0: &u64): u64 {
     var $t1: u64
  0: $t1 := read_ref($t0)
  1: return $t1
}


[variant baseline]
fun reference_conversion::use_it(): u64 {
     var $t0: u64
     var $t1: u64
     var $t2: &mut u64
     var $t3: u64
     var $t4: &u64
  0: $t1 := 42
  1: $t2 := borrow_local($t1)
  2: $t3 := 43
  3: write_ref($t2, $t3)
  4: $t4 := freeze_ref(implicit)($t2)
  5: $t0 := reference_conversion::deref($t4)
  6: return $t0
}


============ disassembled file-format ==================
// Move bytecode v7
module 42.reference_conversion {


deref(Arg0: &u64): u64 /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](Arg0: &u64)
	1: ReadRef
	2: Ret
}
use_it(): u64 /* def_idx: 1 */ {
L0:	loc0: u64
L1:	loc1: &mut u64
B0:
	0: LdU64(42)
	1: StLoc[0](loc0: u64)
	2: MutBorrowLoc[0](loc0: u64)
	3: StLoc[1](loc1: &mut u64)
	4: LdU64(43)
	5: CopyLoc[1](loc1: &mut u64)
	6: WriteRef
	7: MoveLoc[1](loc1: &mut u64)
	8: FreezeRef
	9: Call deref(&u64): u64
	10: Ret
}
}
============ bytecode verification succeeded ========
