// -- Model dump before bytecode pipeline
module 0x42::loops {
    private fun nested_loop(x: u64): u64 {
        loop {
          if Gt<u64>(x, 0) {
            loop {
              if Gt<u64>(x, 10) {
                x: u64 = Sub<u64>(x, 1);
                break;
                Tuple()
              } else {
                break
              }
            };
            x: u64 = Sub<u64>(x, 1);
            continue;
            Tuple()
          } else {
            break
          }
        };
        x
    }
    private fun while_loop(x: u64): u64 {
        loop {
          if Gt<u64>(x, 0) {
            x: u64 = Sub<u64>(x, 1);
            Tuple()
          } else {
            break
          }
        };
        x
    }
    private fun while_loop_with_break_and_continue(x: u64): u64 {
        loop {
          if Gt<u64>(x, 0) {
            if Eq<u64>(x, 42) {
              break
            } else {
              Tuple()
            };
            if Eq<u64>(x, 21) {
              continue
            } else {
              Tuple()
            };
            x: u64 = Sub<u64>(x, 1);
            Tuple()
          } else {
            break
          }
        };
        x
    }
} // end 0x42::loops

// -- Sourcified model before bytecode pipeline
module 0x42::loops {
    fun nested_loop(x: u64): u64 {
        while (x > 0) {
            while (x > 10) {
                x = x - 1;
                break;
            };
            x = x - 1;
            continue;
        };
        x
    }
    fun while_loop(x: u64): u64 {
        while (x > 0) {
            x = x - 1;
        };
        x
    }
    fun while_loop_with_break_and_continue(x: u64): u64 {
        while (x > 0) {
            if (x == 42) break;
            if (x == 21) continue;
            x = x - 1;
        };
        x
    }
}

============ initial bytecode ================

[variant baseline]
fun loops::nested_loop($t0: u64): u64 {
     var $t1: u64
     var $t2: bool
     var $t3: u64
     var $t4: u64
     var $t5: bool
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: u64
     var $t11: u64
     var $t12: u64
     var $t13: u64
  0: label L0
  1: $t3 := infer($t0)
  2: $t4 := 0
  3: $t2 := >($t3, $t4)
  4: if ($t2) goto 5 else goto 29
  5: label L2
  6: label L5
  7: $t6 := infer($t0)
  8: $t7 := 10
  9: $t5 := >($t6, $t7)
 10: if ($t5) goto 11 else goto 18
 11: label L7
 12: $t9 := infer($t0)
 13: $t10 := 1
 14: $t8 := -($t9, $t10)
 15: $t0 := infer($t8)
 16: goto 22
 17: goto 20
 18: label L8
 19: goto 22
 20: label L9
 21: goto 6
 22: label L6
 23: $t12 := infer($t0)
 24: $t13 := 1
 25: $t11 := -($t12, $t13)
 26: $t0 := infer($t11)
 27: goto 0
 28: goto 31
 29: label L3
 30: goto 33
 31: label L4
 32: goto 0
 33: label L1
 34: $t1 := infer($t0)
 35: return $t1
}


[variant baseline]
fun loops::while_loop($t0: u64): u64 {
     var $t1: u64
     var $t2: bool
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
  0: label L0
  1: $t3 := infer($t0)
  2: $t4 := 0
  3: $t2 := >($t3, $t4)
  4: if ($t2) goto 5 else goto 11
  5: label L2
  6: $t6 := infer($t0)
  7: $t7 := 1
  8: $t5 := -($t6, $t7)
  9: $t0 := infer($t5)
 10: goto 13
 11: label L3
 12: goto 15
 13: label L4
 14: goto 0
 15: label L1
 16: $t1 := infer($t0)
 17: return $t1
}


[variant baseline]
fun loops::while_loop_with_break_and_continue($t0: u64): u64 {
     var $t1: u64
     var $t2: bool
     var $t3: u64
     var $t4: u64
     var $t5: bool
     var $t6: u64
     var $t7: u64
     var $t8: bool
     var $t9: u64
     var $t10: u64
     var $t11: u64
     var $t12: u64
     var $t13: u64
  0: label L0
  1: $t3 := infer($t0)
  2: $t4 := 0
  3: $t2 := >($t3, $t4)
  4: if ($t2) goto 5 else goto 29
  5: label L2
  6: $t6 := infer($t0)
  7: $t7 := 42
  8: $t5 := ==($t6, $t7)
  9: if ($t5) goto 10 else goto 13
 10: label L5
 11: goto 33
 12: goto 14
 13: label L6
 14: label L7
 15: $t9 := infer($t0)
 16: $t10 := 21
 17: $t8 := ==($t9, $t10)
 18: if ($t8) goto 19 else goto 22
 19: label L8
 20: goto 0
 21: goto 23
 22: label L9
 23: label L10
 24: $t12 := infer($t0)
 25: $t13 := 1
 26: $t11 := -($t12, $t13)
 27: $t0 := infer($t11)
 28: goto 31
 29: label L3
 30: goto 33
 31: label L4
 32: goto 0
 33: label L1
 34: $t1 := infer($t0)
 35: return $t1
}


============ disassembled file-format ==================
// Move bytecode v7
module 42.loops {


nested_loop(Arg0: u64): u64 /* def_idx: 0 */ {
B0:
	0: CopyLoc[0](Arg0: u64)
	1: LdU64(0)
	2: Gt
	3: BrFalse(18)
B1:
	4: CopyLoc[0](Arg0: u64)
	5: LdU64(10)
	6: Gt
	7: BrTrue(9)
B2:
	8: Branch(13)
B3:
	9: MoveLoc[0](Arg0: u64)
	10: LdU64(1)
	11: Sub
	12: StLoc[0](Arg0: u64)
B4:
	13: MoveLoc[0](Arg0: u64)
	14: LdU64(1)
	15: Sub
	16: StLoc[0](Arg0: u64)
	17: Branch(0)
B5:
	18: MoveLoc[0](Arg0: u64)
	19: Ret
}
while_loop(Arg0: u64): u64 /* def_idx: 1 */ {
B0:
	0: CopyLoc[0](Arg0: u64)
	1: LdU64(0)
	2: Gt
	3: BrFalse(9)
B1:
	4: MoveLoc[0](Arg0: u64)
	5: LdU64(1)
	6: Sub
	7: StLoc[0](Arg0: u64)
	8: Branch(0)
B2:
	9: MoveLoc[0](Arg0: u64)
	10: Ret
}
while_loop_with_break_and_continue(Arg0: u64): u64 /* def_idx: 2 */ {
B0:
	0: CopyLoc[0](Arg0: u64)
	1: LdU64(0)
	2: Gt
	3: BrTrue(5)
B1:
	4: Branch(10)
B2:
	5: CopyLoc[0](Arg0: u64)
	6: LdU64(42)
	7: Eq
	8: BrFalse(12)
B3:
	9: Branch(10)
B4:
	10: MoveLoc[0](Arg0: u64)
	11: Ret
B5:
	12: CopyLoc[0](Arg0: u64)
	13: LdU64(21)
	14: Eq
	15: BrFalse(17)
B6:
	16: Branch(0)
B7:
	17: MoveLoc[0](Arg0: u64)
	18: LdU64(1)
	19: Sub
	20: StLoc[0](Arg0: u64)
	21: Branch(0)
}
}
============ bytecode verification succeeded ========
