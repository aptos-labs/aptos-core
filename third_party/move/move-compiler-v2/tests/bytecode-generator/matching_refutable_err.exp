// -- Model dump before bytecode pipeline
module 0x815::m {
    enum E {
        None,
        Some {
            0: u64,
        }
    }
    private fun t(self: E): u64 {
        {
          let m::E::Some{ 0: x } = self;
          x
        }
    }
} // end 0x815::m

// -- Sourcified model before bytecode pipeline
module 0x815::m {
    enum E {
        None,
        Some {
            0: u64,
        }
    }
    fun t(self: E): u64 {
        let E::Some(x) = self;
        x
    }
}

============ initial bytecode ================

[variant baseline]
fun m::t($t0: 0x815::m::E): u64 {
     var $t1: u64
     var $t2: u64
  0: $t2 := unpack_variant 0x815::m::E::Some($t0)
  1: $t1 := infer($t2)
  2: return $t1
}


============ disassembled file-format ==================
// Move bytecode v7
module 815.m {
enum E {
 None{

 },
 Some{
	_0: u64
 }
}

t(Arg0: E): u64 /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](Arg0: E)
	1: UnpackVariant[0](E/Some)
	2: Ret
}
}
============ bytecode verification succeeded ========
