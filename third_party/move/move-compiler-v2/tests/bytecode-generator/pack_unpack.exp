// -- Model dump before bytecode pipeline
module 0x42::pack_unpack {
    struct T {
        h: u64,
    }
    struct S {
        f: u64,
        g: T,
    }
    private fun pack(x: u64,y: u64): S {
        pack pack_unpack::S(x, pack pack_unpack::T(y))
    }
    private fun unpack(s: S): (u64, u64) {
        {
          let pack_unpack::S{ f, g: pack_unpack::T{ h } } = s;
          Tuple(f, h)
        }
    }
} // end 0x42::pack_unpack

// -- Sourcified model before bytecode pipeline
module 0x42::pack_unpack {
    struct T {
        h: u64,
    }
    struct S {
        f: u64,
        g: T,
    }
    fun pack(x: u64, y: u64): S {
        S{f: x,g: T{h: y}}
    }
    fun unpack(s: S): (u64, u64) {
        let S{f: f,g: T{h: h}} = s;
        (f, h)
    }
}

============ initial bytecode ================

[variant baseline]
fun pack_unpack::pack($t0: u64, $t1: u64): 0x42::pack_unpack::S {
     var $t2: 0x42::pack_unpack::S
     var $t3: u64
     var $t4: 0x42::pack_unpack::T
  0: $t3 := infer($t0)
  1: $t4 := pack 0x42::pack_unpack::T($t1)
  2: $t2 := pack 0x42::pack_unpack::S($t3, $t4)
  3: return $t2
}


[variant baseline]
fun pack_unpack::unpack($t0: 0x42::pack_unpack::S): (u64, u64) {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: 0x42::pack_unpack::T
  0: ($t3, $t5) := unpack 0x42::pack_unpack::S($t0)
  1: $t4 := unpack 0x42::pack_unpack::T($t5)
  2: $t1 := infer($t3)
  3: $t2 := infer($t4)
  4: return ($t1, $t2)
}


============ disassembled file-format ==================
// Move bytecode v7
module 42.pack_unpack {
struct T {
	h: u64
}
struct S {
	f: u64,
	g: T
}

pack(Arg0: u64, Arg1: u64): S /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](Arg0: u64)
	1: MoveLoc[1](Arg1: u64)
	2: Pack[0](T)
	3: Pack[1](S)
	4: Ret
}
unpack(Arg0: S): u64 * u64 /* def_idx: 1 */ {
B0:
	0: MoveLoc[0](Arg0: S)
	1: Unpack[1](S)
	2: Unpack[0](T)
	3: Ret
}
}
============ bytecode verification succeeded ========
