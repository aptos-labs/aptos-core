// -- Model dump before bytecode pipeline
module 0x42::pack_unpack {
    struct S {
        f1: u8,
        f2: u8,
        f3: u8,
    }
    private fun pack1(x: u8,y: u8,z: u8): S {
        pack pack_unpack::S(x, y, z)
    }
    private fun pack2(x: u8,y: u8,z: u8): S {
        {
          let $f1: u8 = x;
          {
            let $f3: u8 = y;
            pack pack_unpack::S($f1, z, $f3)
          }
        }
    }
    private fun pack3(x: u8,y: u8,z: u8): S {
        {
          let $f2: u8 = x;
          pack pack_unpack::S(y, $f2, z)
        }
    }
    private fun pack4(x: u8,y: u8,z: u8): S {
        {
          let $f2: u8 = x;
          {
            let $f3: u8 = y;
            pack pack_unpack::S(z, $f2, $f3)
          }
        }
    }
    private fun pack5(x: u8,y: u8,z: u8): S {
        {
          let $f3: u8 = x;
          pack pack_unpack::S(y, z, $f3)
        }
    }
    private fun pack6(x: u8,y: u8,z: u8): S {
        {
          let $f3: u8 = x;
          {
            let $f2: u8 = y;
            pack pack_unpack::S(z, $f2, $f3)
          }
        }
    }
} // end 0x42::pack_unpack

// -- Sourcified model before bytecode pipeline
module 0x42::pack_unpack {
    struct S {
        f1: u8,
        f2: u8,
        f3: u8,
    }
    fun pack1(x: u8, y: u8, z: u8): S {
        S{f1: x,f2: y,f3: z}
    }
    fun pack2(x: u8, y: u8, z: u8): S {
        let $f1 = x;
        let $f3 = y;
        S{f1: $f1,f2: z,f3: $f3}
    }
    fun pack3(x: u8, y: u8, z: u8): S {
        let $f2 = x;
        S{f1: y,f2: $f2,f3: z}
    }
    fun pack4(x: u8, y: u8, z: u8): S {
        let $f2 = x;
        let $f3 = y;
        S{f1: z,f2: $f2,f3: $f3}
    }
    fun pack5(x: u8, y: u8, z: u8): S {
        let $f3 = x;
        S{f1: y,f2: z,f3: $f3}
    }
    fun pack6(x: u8, y: u8, z: u8): S {
        let $f3 = x;
        let $f2 = y;
        S{f1: z,f2: $f2,f3: $f3}
    }
}

============ initial bytecode ================

[variant baseline]
fun pack_unpack::pack1($t0: u8, $t1: u8, $t2: u8): 0x42::pack_unpack::S {
     var $t3: 0x42::pack_unpack::S
     var $t4: u8
     var $t5: u8
  0: $t4 := infer($t0)
  1: $t5 := infer($t1)
  2: $t3 := pack 0x42::pack_unpack::S($t4, $t5, $t2)
  3: return $t3
}


[variant baseline]
fun pack_unpack::pack2($t0: u8, $t1: u8, $t2: u8): 0x42::pack_unpack::S {
     var $t3: 0x42::pack_unpack::S
     var $t4: u8
     var $t5: u8
     var $t6: u8
     var $t7: u8
  0: $t4 := infer($t0)
  1: $t5 := infer($t1)
  2: $t6 := infer($t4)
  3: $t7 := infer($t2)
  4: $t3 := pack 0x42::pack_unpack::S($t6, $t7, $t5)
  5: return $t3
}


[variant baseline]
fun pack_unpack::pack3($t0: u8, $t1: u8, $t2: u8): 0x42::pack_unpack::S {
     var $t3: 0x42::pack_unpack::S
     var $t4: u8
     var $t5: u8
     var $t6: u8
  0: $t4 := infer($t0)
  1: $t5 := infer($t1)
  2: $t6 := infer($t4)
  3: $t3 := pack 0x42::pack_unpack::S($t5, $t6, $t2)
  4: return $t3
}


[variant baseline]
fun pack_unpack::pack4($t0: u8, $t1: u8, $t2: u8): 0x42::pack_unpack::S {
     var $t3: 0x42::pack_unpack::S
     var $t4: u8
     var $t5: u8
     var $t6: u8
     var $t7: u8
  0: $t4 := infer($t0)
  1: $t5 := infer($t1)
  2: $t6 := infer($t2)
  3: $t7 := infer($t4)
  4: $t3 := pack 0x42::pack_unpack::S($t6, $t7, $t5)
  5: return $t3
}


[variant baseline]
fun pack_unpack::pack5($t0: u8, $t1: u8, $t2: u8): 0x42::pack_unpack::S {
     var $t3: 0x42::pack_unpack::S
     var $t4: u8
     var $t5: u8
     var $t6: u8
  0: $t4 := infer($t0)
  1: $t5 := infer($t1)
  2: $t6 := infer($t2)
  3: $t3 := pack 0x42::pack_unpack::S($t5, $t6, $t4)
  4: return $t3
}


[variant baseline]
fun pack_unpack::pack6($t0: u8, $t1: u8, $t2: u8): 0x42::pack_unpack::S {
     var $t3: 0x42::pack_unpack::S
     var $t4: u8
     var $t5: u8
     var $t6: u8
     var $t7: u8
  0: $t4 := infer($t0)
  1: $t5 := infer($t1)
  2: $t6 := infer($t2)
  3: $t7 := infer($t5)
  4: $t3 := pack 0x42::pack_unpack::S($t6, $t7, $t4)
  5: return $t3
}


============ disassembled file-format ==================
// Move bytecode v7
module 42.pack_unpack {
struct S {
	f1: u8,
	f2: u8,
	f3: u8
}

pack1(Arg0: u8, Arg1: u8, Arg2: u8): S /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](Arg0: u8)
	1: MoveLoc[1](Arg1: u8)
	2: MoveLoc[2](Arg2: u8)
	3: Pack[0](S)
	4: Ret
}
pack2(Arg0: u8, Arg1: u8, Arg2: u8): S /* def_idx: 1 */ {
B0:
	0: MoveLoc[0](Arg0: u8)
	1: MoveLoc[2](Arg2: u8)
	2: MoveLoc[1](Arg1: u8)
	3: Pack[0](S)
	4: Ret
}
pack3(Arg0: u8, Arg1: u8, Arg2: u8): S /* def_idx: 2 */ {
B0:
	0: MoveLoc[1](Arg1: u8)
	1: MoveLoc[0](Arg0: u8)
	2: MoveLoc[2](Arg2: u8)
	3: Pack[0](S)
	4: Ret
}
pack4(Arg0: u8, Arg1: u8, Arg2: u8): S /* def_idx: 3 */ {
B0:
	0: MoveLoc[2](Arg2: u8)
	1: MoveLoc[0](Arg0: u8)
	2: MoveLoc[1](Arg1: u8)
	3: Pack[0](S)
	4: Ret
}
pack5(Arg0: u8, Arg1: u8, Arg2: u8): S /* def_idx: 4 */ {
B0:
	0: MoveLoc[1](Arg1: u8)
	1: MoveLoc[2](Arg2: u8)
	2: MoveLoc[0](Arg0: u8)
	3: Pack[0](S)
	4: Ret
}
pack6(Arg0: u8, Arg1: u8, Arg2: u8): S /* def_idx: 5 */ {
B0:
	0: MoveLoc[2](Arg2: u8)
	1: MoveLoc[1](Arg1: u8)
	2: MoveLoc[0](Arg0: u8)
	3: Pack[0](S)
	4: Ret
}
}
============ bytecode verification succeeded ========
