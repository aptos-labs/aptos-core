// -- Model dump before bytecode pipeline
module 0x42::fields {
    struct T {
        h: u64,
    }
    struct G<X> {
        f: X,
    }
    struct S {
        f: u64,
        g: T,
    }
    private fun read_generic_val(x: G<u64>): u64 {
        select fields::G.f<G<u64>>(x)
    }
    private fun read_ref(x: &S): u64 {
        select fields::T.h<T>(select fields::S.g<&S>(x))
    }
    private fun read_val(x: S): u64 {
        select fields::T.h<T>(select fields::S.g<S>(x))
    }
    private fun write_generic_val(x: &mut G<u64>,v: u64) {
        select fields::G.f<&mut G<u64>>(x) = v
    }
    private fun write_local_direct(): S {
        {
          let x: S = pack fields::S(0, pack fields::T(0));
          select fields::T.h<T>(select fields::S.g<S>(x)) = 42;
          x
        }
    }
    private fun write_local_via_ref(): S {
        {
          let x: S = pack fields::S(0, pack fields::T(0));
          {
            let r: &mut S = Borrow(Mutable)(x);
            select fields::T.h<T>(select fields::S.g<&mut S>(r)) = 42;
            x
          }
        }
    }
    private fun write_local_via_ref_2(): S {
        {
          let x: S = pack fields::S(0, pack fields::T(0));
          {
            let r: &mut u64 = Borrow(Mutable)(select fields::T.h<T>(select fields::S.g<S>(x)));
            r = 42;
            x
          }
        }
    }
    private fun write_param(x: &mut S) {
        select fields::T.h<T>(select fields::S.g<&mut S>(x)) = 42;
        Tuple()
    }
    private fun write_val(x: S): S {
        select fields::T.h<T>(select fields::S.g<S>(x)) = 42;
        x
    }
} // end 0x42::fields

// -- Sourcified model before bytecode pipeline
module 0x42::fields {
    struct T has drop {
        h: u64,
    }
    struct G<X> has drop {
        f: X,
    }
    struct S has drop {
        f: u64,
        g: T,
    }
    fun read_generic_val(x: G<u64>): u64 {
        x.f
    }
    fun read_ref(x: &S): u64 {
        x.g.h
    }
    fun read_val(x: S): u64 {
        x.g.h
    }
    fun write_generic_val(x: &mut G<u64>, v: u64) {
        x.f = v
    }
    fun write_local_direct(): S {
        let x = S{f: 0,g: T{h: 0}};
        x.g.h = 42;
        x
    }
    fun write_local_via_ref(): S {
        let x = S{f: 0,g: T{h: 0}};
        let r = &mut x;
        r.g.h = 42;
        x
    }
    fun write_local_via_ref_2(): S {
        let x = S{f: 0,g: T{h: 0}};
        let r = &mut x.g.h;
        *r = 42;
        x
    }
    fun write_param(x: &mut S) {
        x.g.h = 42;
    }
    fun write_val(x: S): S {
        x.g.h = 42;
        x
    }
}

============ initial bytecode ================

[variant baseline]
fun fields::read_generic_val($t0: 0x42::fields::G<u64>): u64 {
     var $t1: u64
     var $t2: &0x42::fields::G<u64>
     var $t3: &u64
  0: $t2 := borrow_local($t0)
  1: $t3 := borrow_field<0x42::fields::G<u64>>.f($t2)
  2: $t1 := read_ref($t3)
  3: return $t1
}


[variant baseline]
fun fields::read_ref($t0: &0x42::fields::S): u64 {
     var $t1: u64
     var $t2: &0x42::fields::T
     var $t3: &u64
  0: $t2 := borrow_field<0x42::fields::S>.g($t0)
  1: $t3 := borrow_field<0x42::fields::T>.h($t2)
  2: $t1 := read_ref($t3)
  3: return $t1
}


[variant baseline]
fun fields::read_val($t0: 0x42::fields::S): u64 {
     var $t1: u64
     var $t2: &0x42::fields::T
     var $t3: &0x42::fields::S
     var $t4: &u64
  0: $t3 := borrow_local($t0)
  1: $t2 := borrow_field<0x42::fields::S>.g($t3)
  2: $t4 := borrow_field<0x42::fields::T>.h($t2)
  3: $t1 := read_ref($t4)
  4: return $t1
}


[variant baseline]
fun fields::write_generic_val($t0: &mut 0x42::fields::G<u64>, $t1: u64) {
     var $t2: &mut u64
  0: $t2 := borrow_field<0x42::fields::G<u64>>.f($t0)
  1: write_ref($t2, $t1)
  2: return ()
}


[variant baseline]
fun fields::write_local_direct(): 0x42::fields::S {
     var $t0: 0x42::fields::S
     var $t1: 0x42::fields::S
     var $t2: u64
     var $t3: 0x42::fields::T
     var $t4: u64
     var $t5: u64
     var $t6: &mut u64
     var $t7: &mut 0x42::fields::T
     var $t8: &mut 0x42::fields::S
  0: $t2 := 0
  1: $t4 := 0
  2: $t3 := pack 0x42::fields::T($t4)
  3: $t1 := pack 0x42::fields::S($t2, $t3)
  4: $t5 := 42
  5: $t8 := borrow_local($t1)
  6: $t7 := borrow_field<0x42::fields::S>.g($t8)
  7: $t6 := borrow_field<0x42::fields::T>.h($t7)
  8: write_ref($t6, $t5)
  9: $t0 := infer($t1)
 10: return $t0
}


[variant baseline]
fun fields::write_local_via_ref(): 0x42::fields::S {
     var $t0: 0x42::fields::S
     var $t1: 0x42::fields::S
     var $t2: u64
     var $t3: 0x42::fields::T
     var $t4: u64
     var $t5: &mut 0x42::fields::S
     var $t6: u64
     var $t7: &mut u64
     var $t8: &mut 0x42::fields::T
  0: $t2 := 0
  1: $t4 := 0
  2: $t3 := pack 0x42::fields::T($t4)
  3: $t1 := pack 0x42::fields::S($t2, $t3)
  4: $t5 := borrow_local($t1)
  5: $t6 := 42
  6: $t8 := borrow_field<0x42::fields::S>.g($t5)
  7: $t7 := borrow_field<0x42::fields::T>.h($t8)
  8: write_ref($t7, $t6)
  9: $t0 := infer($t1)
 10: return $t0
}


[variant baseline]
fun fields::write_local_via_ref_2(): 0x42::fields::S {
     var $t0: 0x42::fields::S
     var $t1: 0x42::fields::S
     var $t2: u64
     var $t3: 0x42::fields::T
     var $t4: u64
     var $t5: &mut u64
     var $t6: &mut 0x42::fields::T
     var $t7: &mut 0x42::fields::S
     var $t8: u64
  0: $t2 := 0
  1: $t4 := 0
  2: $t3 := pack 0x42::fields::T($t4)
  3: $t1 := pack 0x42::fields::S($t2, $t3)
  4: $t7 := borrow_local($t1)
  5: $t6 := borrow_field<0x42::fields::S>.g($t7)
  6: $t5 := borrow_field<0x42::fields::T>.h($t6)
  7: $t8 := 42
  8: write_ref($t5, $t8)
  9: $t0 := infer($t1)
 10: return $t0
}


[variant baseline]
fun fields::write_param($t0: &mut 0x42::fields::S) {
     var $t1: u64
     var $t2: &mut u64
     var $t3: &mut 0x42::fields::T
  0: $t1 := 42
  1: $t3 := borrow_field<0x42::fields::S>.g($t0)
  2: $t2 := borrow_field<0x42::fields::T>.h($t3)
  3: write_ref($t2, $t1)
  4: return ()
}


[variant baseline]
fun fields::write_val($t0: 0x42::fields::S): 0x42::fields::S {
     var $t1: 0x42::fields::S
     var $t2: u64
     var $t3: &mut u64
     var $t4: &mut 0x42::fields::T
     var $t5: &mut 0x42::fields::S
  0: $t2 := 42
  1: $t5 := borrow_local($t0)
  2: $t4 := borrow_field<0x42::fields::S>.g($t5)
  3: $t3 := borrow_field<0x42::fields::T>.h($t4)
  4: write_ref($t3, $t2)
  5: $t1 := infer($t0)
  6: return $t1
}


============ disassembled file-format ==================
// Move bytecode v7
module 42.fields {
struct T has drop {
	h: u64
}
struct G<Ty0> has drop {
	f: Ty0
}
struct S has drop {
	f: u64,
	g: T
}

read_generic_val(Arg0: G<u64>): u64 /* def_idx: 0 */ {
B0:
	0: ImmBorrowLoc[0](Arg0: G<u64>)
	1: ImmBorrowFieldGeneric[0](G.f: Ty0)
	2: ReadRef
	3: Ret
}
read_ref(Arg0: &S): u64 /* def_idx: 1 */ {
B0:
	0: MoveLoc[0](Arg0: &S)
	1: ImmBorrowField[1](S.g: T)
	2: ImmBorrowField[2](T.h: u64)
	3: ReadRef
	4: Ret
}
read_val(Arg0: S): u64 /* def_idx: 2 */ {
B0:
	0: ImmBorrowLoc[0](Arg0: S)
	1: ImmBorrowField[1](S.g: T)
	2: ImmBorrowField[2](T.h: u64)
	3: ReadRef
	4: Ret
}
write_generic_val(Arg0: &mut G<u64>, Arg1: u64) /* def_idx: 3 */ {
L2:	loc0: &mut u64
B0:
	0: MoveLoc[0](Arg0: &mut G<u64>)
	1: MutBorrowFieldGeneric[0](G.f: Ty0)
	2: StLoc[2](loc0: &mut u64)
	3: MoveLoc[1](Arg1: u64)
	4: MoveLoc[2](loc0: &mut u64)
	5: WriteRef
	6: Ret
}
write_local_direct(): S /* def_idx: 4 */ {
L0:	loc0: S
B0:
	0: LdU64(0)
	1: LdU64(0)
	2: Pack[0](T)
	3: Pack[2](S)
	4: StLoc[0](loc0: S)
	5: LdU64(42)
	6: MutBorrowLoc[0](loc0: S)
	7: MutBorrowField[1](S.g: T)
	8: MutBorrowField[2](T.h: u64)
	9: WriteRef
	10: MoveLoc[0](loc0: S)
	11: Ret
}
write_local_via_ref(): S /* def_idx: 5 */ {
L0:	loc0: S
L1:	loc1: &mut S
B0:
	0: LdU64(0)
	1: LdU64(0)
	2: Pack[0](T)
	3: Pack[2](S)
	4: StLoc[0](loc0: S)
	5: MutBorrowLoc[0](loc0: S)
	6: StLoc[1](loc1: &mut S)
	7: LdU64(42)
	8: MoveLoc[1](loc1: &mut S)
	9: MutBorrowField[1](S.g: T)
	10: MutBorrowField[2](T.h: u64)
	11: WriteRef
	12: MoveLoc[0](loc0: S)
	13: Ret
}
write_local_via_ref_2(): S /* def_idx: 6 */ {
L0:	loc0: S
L1:	loc1: &mut u64
B0:
	0: LdU64(0)
	1: LdU64(0)
	2: Pack[0](T)
	3: Pack[2](S)
	4: StLoc[0](loc0: S)
	5: MutBorrowLoc[0](loc0: S)
	6: MutBorrowField[1](S.g: T)
	7: MutBorrowField[2](T.h: u64)
	8: StLoc[1](loc1: &mut u64)
	9: LdU64(42)
	10: MoveLoc[1](loc1: &mut u64)
	11: WriteRef
	12: MoveLoc[0](loc0: S)
	13: Ret
}
write_param(Arg0: &mut S) /* def_idx: 7 */ {
B0:
	0: LdU64(42)
	1: MoveLoc[0](Arg0: &mut S)
	2: MutBorrowField[1](S.g: T)
	3: MutBorrowField[2](T.h: u64)
	4: WriteRef
	5: Ret
}
write_val(Arg0: S): S /* def_idx: 8 */ {
B0:
	0: LdU64(42)
	1: MutBorrowLoc[0](Arg0: S)
	2: MutBorrowField[1](S.g: T)
	3: MutBorrowField[2](T.h: u64)
	4: WriteRef
	5: MoveLoc[0](Arg0: S)
	6: Ret
}
}
============ bytecode verification succeeded ========
