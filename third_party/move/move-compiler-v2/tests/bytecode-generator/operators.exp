// -- Model dump before bytecode pipeline
module 0x42::operators {
    private fun arithm(x: u64,y: u64): u64 {
        Add<u64>(x, Mod<u64>(Mul<u64>(Div<u64>(y, Sub<u64>(x, y)), y), x))
    }
    private fun bits(x: u64,y: u8): u64 {
        BitAnd<u64>(Shl<u64>(x, y), x)
    }
    private fun bools(x: bool,y: bool): bool {
        Or(Or(Or(And(x, y), And(x, Not(y))), And(Not(x), y)), And(Not(x), Not(y)))
    }
    private fun equality<T>(x: T,y: T): bool {
        Eq<T>(x, y)
    }
    private fun inequality<T>(x: T,y: T): bool {
        Neq<T>(x, y)
    }
    private fun order(x: u64,y: u64): bool {
        And(And(And(Lt<u64>(x, y), Le<u64>(x, y)), Not(Gt<u64>(x, y))), Not(Ge<u64>(x, y)))
    }
} // end 0x42::operators

// -- Sourcified model before bytecode pipeline
module 0x42::operators {
    fun arithm(x: u64, y: u64): u64 {
        x + y / (x - y) * y % x
    }
    fun bits(x: u64, y: u8): u64 {
        x << y & x
    }
    fun bools(x: bool, y: bool): bool {
        x && y || x && !y || !x && y || !x && !y
    }
    fun equality<T: drop>(x: T, y: T): bool {
        x == y
    }
    fun inequality<T: drop>(x: T, y: T): bool {
        x != y
    }
    fun order(x: u64, y: u64): bool {
        x < y && x <= y && !(x > y) && !(x >= y)
    }
}

============ initial bytecode ================

[variant baseline]
fun operators::arithm($t0: u64, $t1: u64): u64 {
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: u64
  0: $t3 := infer($t0)
  1: $t7 := infer($t1)
  2: $t9 := infer($t0)
  3: $t8 := -($t9, $t1)
  4: $t6 := /($t7, $t8)
  5: $t5 := *($t6, $t1)
  6: $t4 := %($t5, $t0)
  7: $t2 := +($t3, $t4)
  8: return $t2
}


[variant baseline]
fun operators::bits($t0: u64, $t1: u8): u64 {
     var $t2: u64
     var $t3: u64
     var $t4: u64
  0: $t4 := infer($t0)
  1: $t3 := <<($t4, $t1)
  2: $t2 := &($t3, $t0)
  3: return $t2
}


[variant baseline]
fun operators::bools($t0: bool, $t1: bool): bool {
     var $t2: bool
     var $t3: bool
     var $t4: bool
     var $t5: bool
     var $t6: bool
     var $t7: bool
  0: if ($t0) goto 1 else goto 4
  1: label L0
  2: $t5 := infer($t1)
  3: goto 6
  4: label L1
  5: $t5 := false
  6: label L2
  7: if ($t5) goto 8 else goto 11
  8: label L3
  9: $t4 := true
 10: goto 19
 11: label L4
 12: if ($t0) goto 13 else goto 16
 13: label L6
 14: $t4 := !($t1)
 15: goto 18
 16: label L7
 17: $t4 := false
 18: label L8
 19: label L5
 20: if ($t4) goto 21 else goto 24
 21: label L9
 22: $t3 := true
 23: goto 33
 24: label L10
 25: $t6 := !($t0)
 26: if ($t6) goto 27 else goto 30
 27: label L12
 28: $t3 := infer($t1)
 29: goto 32
 30: label L13
 31: $t3 := false
 32: label L14
 33: label L11
 34: if ($t3) goto 35 else goto 38
 35: label L15
 36: $t2 := true
 37: goto 47
 38: label L16
 39: $t7 := !($t0)
 40: if ($t7) goto 41 else goto 44
 41: label L18
 42: $t2 := !($t1)
 43: goto 46
 44: label L19
 45: $t2 := false
 46: label L20
 47: label L17
 48: return $t2
}


[variant baseline]
fun operators::equality<#0>($t0: #0, $t1: #0): bool {
     var $t2: bool
     var $t3: #0
  0: $t3 := infer($t0)
  1: $t2 := ==($t3, $t1)
  2: return $t2
}


[variant baseline]
fun operators::inequality<#0>($t0: #0, $t1: #0): bool {
     var $t2: bool
     var $t3: #0
  0: $t3 := infer($t0)
  1: $t2 := !=($t3, $t1)
  2: return $t2
}


[variant baseline]
fun operators::order($t0: u64, $t1: u64): bool {
     var $t2: bool
     var $t3: bool
     var $t4: bool
     var $t5: bool
     var $t6: u64
     var $t7: u64
     var $t8: bool
     var $t9: u64
     var $t10: bool
     var $t11: u64
  0: $t6 := infer($t0)
  1: $t5 := <($t6, $t1)
  2: if ($t5) goto 3 else goto 7
  3: label L0
  4: $t7 := infer($t0)
  5: $t4 := <=($t7, $t1)
  6: goto 9
  7: label L1
  8: $t4 := false
  9: label L2
 10: if ($t4) goto 11 else goto 16
 11: label L3
 12: $t9 := infer($t0)
 13: $t8 := >($t9, $t1)
 14: $t3 := !($t8)
 15: goto 18
 16: label L4
 17: $t3 := false
 18: label L5
 19: if ($t3) goto 20 else goto 25
 20: label L6
 21: $t11 := infer($t0)
 22: $t10 := >=($t11, $t1)
 23: $t2 := !($t10)
 24: goto 27
 25: label L7
 26: $t2 := false
 27: label L8
 28: return $t2
}


============ disassembled file-format ==================
// Move bytecode v7
module 42.operators {


arithm(Arg0: u64, Arg1: u64): u64 /* def_idx: 0 */ {
B0:
	0: CopyLoc[0](Arg0: u64)
	1: CopyLoc[1](Arg1: u64)
	2: CopyLoc[0](Arg0: u64)
	3: CopyLoc[1](Arg1: u64)
	4: Sub
	5: Div
	6: MoveLoc[1](Arg1: u64)
	7: Mul
	8: MoveLoc[0](Arg0: u64)
	9: Mod
	10: Add
	11: Ret
}
bits(Arg0: u64, Arg1: u8): u64 /* def_idx: 1 */ {
B0:
	0: CopyLoc[0](Arg0: u64)
	1: MoveLoc[1](Arg1: u8)
	2: Shl
	3: MoveLoc[0](Arg0: u64)
	4: BitAnd
	5: Ret
}
bools(Arg0: bool, Arg1: bool): bool /* def_idx: 2 */ {
L2:	loc0: bool
L3:	loc1: bool
L4:	loc2: bool
L5:	loc3: bool
B0:
	0: CopyLoc[0](Arg0: bool)
	1: BrFalse(44)
B1:
	2: CopyLoc[1](Arg1: bool)
	3: StLoc[2](loc0: bool)
B2:
	4: MoveLoc[2](loc0: bool)
	5: BrFalse(35)
B3:
	6: LdTrue
	7: StLoc[3](loc1: bool)
B4:
	8: MoveLoc[3](loc1: bool)
	9: BrFalse(27)
B5:
	10: LdTrue
	11: StLoc[4](loc2: bool)
B6:
	12: MoveLoc[4](loc2: bool)
	13: BrFalse(18)
B7:
	14: LdTrue
	15: StLoc[5](loc3: bool)
B8:
	16: MoveLoc[5](loc3: bool)
	17: Ret
B9:
	18: MoveLoc[0](Arg0: bool)
	19: BrTrue(24)
B10:
	20: MoveLoc[1](Arg1: bool)
	21: Not
	22: StLoc[5](loc3: bool)
	23: Branch(16)
B11:
	24: LdFalse
	25: StLoc[5](loc3: bool)
	26: Branch(16)
B12:
	27: CopyLoc[0](Arg0: bool)
	28: BrTrue(32)
B13:
	29: CopyLoc[1](Arg1: bool)
	30: StLoc[4](loc2: bool)
	31: Branch(12)
B14:
	32: LdFalse
	33: StLoc[4](loc2: bool)
	34: Branch(12)
B15:
	35: CopyLoc[0](Arg0: bool)
	36: BrFalse(41)
B16:
	37: CopyLoc[1](Arg1: bool)
	38: Not
	39: StLoc[3](loc1: bool)
	40: Branch(8)
B17:
	41: LdFalse
	42: StLoc[3](loc1: bool)
	43: Branch(8)
B18:
	44: LdFalse
	45: StLoc[2](loc0: bool)
	46: Branch(4)
}
equality<Ty0: drop>(Arg0: Ty0, Arg1: Ty0): bool /* def_idx: 3 */ {
B0:
	0: MoveLoc[0](Arg0: Ty0)
	1: MoveLoc[1](Arg1: Ty0)
	2: Eq
	3: Ret
}
inequality<Ty0: drop>(Arg0: Ty0, Arg1: Ty0): bool /* def_idx: 4 */ {
B0:
	0: MoveLoc[0](Arg0: Ty0)
	1: MoveLoc[1](Arg1: Ty0)
	2: Neq
	3: Ret
}
order(Arg0: u64, Arg1: u64): bool /* def_idx: 5 */ {
L2:	loc0: bool
L3:	loc1: bool
L4:	loc2: bool
B0:
	0: CopyLoc[0](Arg0: u64)
	1: CopyLoc[1](Arg1: u64)
	2: Lt
	3: BrFalse(30)
B1:
	4: CopyLoc[0](Arg0: u64)
	5: CopyLoc[1](Arg1: u64)
	6: Le
	7: StLoc[2](loc0: bool)
B2:
	8: MoveLoc[2](loc0: bool)
	9: BrFalse(27)
B3:
	10: CopyLoc[0](Arg0: u64)
	11: CopyLoc[1](Arg1: u64)
	12: Gt
	13: Not
	14: StLoc[3](loc1: bool)
B4:
	15: MoveLoc[3](loc1: bool)
	16: BrFalse(24)
B5:
	17: MoveLoc[0](Arg0: u64)
	18: MoveLoc[1](Arg1: u64)
	19: Ge
	20: Not
	21: StLoc[4](loc2: bool)
B6:
	22: MoveLoc[4](loc2: bool)
	23: Ret
B7:
	24: LdFalse
	25: StLoc[4](loc2: bool)
	26: Branch(22)
B8:
	27: LdFalse
	28: StLoc[3](loc1: bool)
	29: Branch(15)
B9:
	30: LdFalse
	31: StLoc[2](loc0: bool)
	32: Branch(8)
}
}
============ bytecode verification succeeded ========
