
Diagnostics:
warning: Unused parameter `x`. Consider removing or prefixing with an underscore: `_x`
   ┌─ tests/bytecode-generator/globals.move:18:27
   │
18 │     fun write(a: address, x: u64): u64 acquires R {
   │                           ^

// -- Model dump before bytecode pipeline
module 0x42::globals {
    struct R {
        f: u64,
    }
    private fun check(a: address): bool {
        exists<R>(a)
    }
    private fun publish(s: &signer) {
        MoveTo<R>(s, pack globals::R(1));
        Tuple()
    }
    private fun read(a: address): u64
        acquires R(*)
     {
        {
          let r: &R = BorrowGlobal(Immutable)<R>(a);
          select globals::R.f<&R>(r)
        }
    }
    private fun write(a: address,x: u64): u64
        acquires R(*)
     {
        {
          let r: &mut R = BorrowGlobal(Mutable)<R>(a);
          select globals::R.f<&mut R>(r) = 2;
          9
        }
    }
} // end 0x42::globals

// -- Sourcified model before bytecode pipeline
module 0x42::globals {
    struct R has store, key {
        f: u64,
    }
    fun check(a: address): bool {
        exists<R>(a)
    }
    fun publish(s: &signer) {
        move_to<R>(s, R{f: 1});
    }
    fun read(a: address): u64
        acquires R
    {
        let r = borrow_global<R>(a);
        r.f
    }
    fun write(a: address, x: u64): u64
        acquires R
    {
        let r = borrow_global_mut<R>(a);
        r.f = 2;
        9
    }
}

============ initial bytecode ================

[variant baseline]
fun globals::check($t0: address): bool {
     var $t1: bool
  0: $t1 := exists<0x42::globals::R>($t0)
  1: return $t1
}


[variant baseline]
fun globals::publish($t0: &signer) {
     var $t1: &signer
     var $t2: 0x42::globals::R
     var $t3: u64
  0: $t1 := infer($t0)
  1: $t3 := 1
  2: $t2 := pack 0x42::globals::R($t3)
  3: move_to<0x42::globals::R>($t1, $t2)
  4: return ()
}


[variant baseline]
fun globals::read($t0: address): u64 {
     var $t1: u64
     var $t2: &0x42::globals::R
     var $t3: &u64
  0: $t2 := borrow_global<0x42::globals::R>($t0)
  1: $t3 := borrow_field<0x42::globals::R>.f($t2)
  2: $t1 := read_ref($t3)
  3: return $t1
}


[variant baseline]
fun globals::write($t0: address, $t1: u64): u64 {
     var $t2: u64
     var $t3: &mut 0x42::globals::R
     var $t4: u64
     var $t5: &mut u64
  0: $t3 := borrow_global<0x42::globals::R>($t0)
  1: $t4 := 2
  2: $t5 := borrow_field<0x42::globals::R>.f($t3)
  3: write_ref($t5, $t4)
  4: $t2 := 9
  5: return $t2
}


============ disassembled file-format ==================
// Move bytecode v7
module 42.globals {
struct R has store, key {
	f: u64
}

check(Arg0: address): bool /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](Arg0: address)
	1: Exists[0](R)
	2: Ret
}
publish(Arg0: &signer) /* def_idx: 1 */ {
B0:
	0: MoveLoc[0](Arg0: &signer)
	1: LdU64(1)
	2: Pack[0](R)
	3: MoveTo[0](R)
	4: Ret
}
read(Arg0: address): u64 /* def_idx: 2 */ {
B0:
	0: MoveLoc[0](Arg0: address)
	1: ImmBorrowGlobal[0](R)
	2: ImmBorrowField[0](R.f: u64)
	3: ReadRef
	4: Ret
}
write(Arg0: address, Arg1: u64): u64 /* def_idx: 3 */ {
L2:	loc0: &mut R
B0:
	0: MoveLoc[0](Arg0: address)
	1: MutBorrowGlobal[0](R)
	2: StLoc[2](loc0: &mut R)
	3: LdU64(2)
	4: MoveLoc[2](loc0: &mut R)
	5: MutBorrowField[0](R.f: u64)
	6: WriteRef
	7: LdU64(9)
	8: Ret
}
}
============ bytecode verification succeeded ========
