// -- Model dump before bytecode pipeline
module 0xc0ffee::m {
    struct Box {
        x: u64,
    }
    enum Inner {
        Inner1 {
            x: u64,
        }
        Inner2 {
            x: u64,
            y: u64,
        }
    }
    enum Outer {
        None,
        One {
            i: Inner,
        }
        Two {
            i: Inner,
            b: Box,
        }
    }
    public fun exhaustive_tuple(i: &Inner) {
        match (Tuple(i, i)) {
          (m::Inner::Inner1{ x: _ }, _: &Inner): (&Inner, &Inner) => {
            Tuple()
          }
          (m::Inner::Inner2{ x: _, y: _ }, _: &Inner): (&Inner, &Inner) => {
            Tuple()
          }
        }

    }
    public fun exhaustive_via_merge(o: &Outer) {
        match (o) {
          m::Outer::None => {
            Tuple()
          }
          m::Outer::One{ i: m::Inner::Inner1{ x: _ } } => {
            Tuple()
          }
          m::Outer::One{ i: m::Inner::Inner2{ x: _, y: _ } } => {
            Tuple()
          }
          m::Outer::Two{ i: _, b: _ } => {
            Tuple()
          }
        }

    }
    public fun non_exhaustive(o: &Outer) {
        match (o) {
          m::Outer::None => {
            Tuple()
          }
          m::Outer::One{ i: _ } => {
            Tuple()
          }
        }

    }
    public fun non_exhaustive_because_of_cond(o: &Outer) {
        match (o) {
          m::Outer::None => {
            Tuple()
          }
          m::Outer::One{ i: _ } => {
            Tuple()
          }
          m::Outer::Two{ i: _, b } if Gt<u64>(select m::Box.x<&Box>(b), 0) => {
            Tuple()
          }
        }

    }
    public fun non_exhaustive_because_of_nested(o: &Outer) {
        match (o) {
          m::Outer::None => {
            Tuple()
          }
          m::Outer::One{ i: m::Inner::Inner1{ x: _ } } => {
            Tuple()
          }
          m::Outer::Two{ i: _, b: _ } => {
            Tuple()
          }
        }

    }
    public fun non_exhaustive_tuple(i: &Inner) {
        match (Tuple(i, i)) {
          (m::Inner::Inner1{ x: _ }, _: &Inner): (&Inner, &Inner) => {
            Tuple()
          }
        }

    }
    public fun non_exhaustive_tuple2(i: &Inner) {
        match (Tuple(i, i)) {
          (m::Inner::Inner1{ x: _ }, _: &Inner): (&Inner, &Inner) => {
            Tuple()
          }
          (_: &Inner, m::Inner::Inner2{ x: _, y: _ }): (&Inner, &Inner) => {
            Tuple()
          }
        }

    }
    public fun unreachable(o: &Outer) {
        match (o) {
          m::Outer::None => {
            Tuple()
          }
          m::Outer::One{ i: _ } => {
            Tuple()
          }
          m::Outer::Two{ i: _, b: _ } => {
            Tuple()
          }
          _: &Outer => {
            Tuple()
          }
        }

    }
    public fun unreachable_via_overlaying_pattern(o: &Outer) {
        match (o) {
          m::Outer::None => {
            Tuple()
          }
          m::Outer::One{ i: m::Inner::Inner1{ x: _ } } => {
            Tuple()
          }
          m::Outer::One{ i: _ } => {
            Tuple()
          }
          m::Outer::One{ i: m::Inner::Inner1{ x: _ } } => {
            Tuple()
          }
          _: &Outer => {
            Tuple()
          }
        }

    }
    public fun unreachable_via_repeated_pattern(o: &Outer) {
        match (o) {
          m::Outer::None => {
            Tuple()
          }
          m::Outer::One{ i: _ } => {
            Tuple()
          }
          m::Outer::One{ i: _ } => {
            Tuple()
          }
          _: &Outer => {
            Tuple()
          }
        }

    }
} // end 0xc0ffee::m

// -- Sourcified model before bytecode pipeline
module 0xc0ffee::m {
    struct Box has drop {
        x: u64,
    }
    enum Inner {
        Inner1 {
            x: u64,
        }
        Inner2 {
            x: u64,
            y: u64,
        }
    }
    enum Outer {
        None,
        One {
            i: Inner,
        }
        Two {
            i: Inner,
            b: Box,
        }
    }
    public fun exhaustive_tuple(i: &Inner) {
        match ((i, i)) {
            (Inner::Inner1{x: _},_) => (),
            (Inner::Inner2{x: _,y: _},_) => (),
        }
    }
    public fun exhaustive_via_merge(o: &Outer) {
        match (o) {
            Outer::None{} => (),
            Outer::One{i: Inner::Inner1{x: _}} => (),
            Outer::One{i: Inner::Inner2{x: _,y: _}} => (),
            Outer::Two{i: _,b: _} => (),
        }
    }
    public fun non_exhaustive(o: &Outer) {
        match (o) {
            Outer::None{} => (),
            Outer::One{i: _} => (),
        }
    }
    public fun non_exhaustive_because_of_cond(o: &Outer) {
        match (o) {
            Outer::None{} => (),
            Outer::One{i: _} => (),
            Outer::Two{i: _,b: b} if b.x > 0 => (),
        }
    }
    public fun non_exhaustive_because_of_nested(o: &Outer) {
        match (o) {
            Outer::None{} => (),
            Outer::One{i: Inner::Inner1{x: _}} => (),
            Outer::Two{i: _,b: _} => (),
        }
    }
    public fun non_exhaustive_tuple(i: &Inner) {
        match ((i, i)) {
            (Inner::Inner1{x: _},_) => (),
        }
    }
    public fun non_exhaustive_tuple2(i: &Inner) {
        match ((i, i)) {
            (Inner::Inner1{x: _},_) => (),
            (_,Inner::Inner2{x: _,y: _}) => (),
        }
    }
    public fun unreachable(o: &Outer) {
        match (o) {
            Outer::None{} => (),
            Outer::One{i: _} => (),
            Outer::Two{i: _,b: _} => (),
            _ => (),
        }
    }
    public fun unreachable_via_overlaying_pattern(o: &Outer) {
        match (o) {
            Outer::None{} => (),
            Outer::One{i: Inner::Inner1{x: _}} => (),
            Outer::One{i: _} => (),
            Outer::One{i: Inner::Inner1{x: _}} => (),
            _ => (),
        }
    }
    public fun unreachable_via_repeated_pattern(o: &Outer) {
        match (o) {
            Outer::None{} => (),
            Outer::One{i: _} => (),
            Outer::One{i: _} => (),
            _ => (),
        }
    }
}


Diagnostics:
error: match not exhaustive
   ┌─ tests/bytecode-generator/matching_coverage_err.move:21:16
   │
21 │         match (o) {
   │                ^
   │
   = missing `Outer::Two{..}`

error: match not exhaustive
   ┌─ tests/bytecode-generator/matching_coverage_err.move:28:16
   │
28 │         match (o) {
   │                ^
   │
   = missing `Outer::Two{..}`

error: match not exhaustive
   ┌─ tests/bytecode-generator/matching_coverage_err.move:36:16
   │
36 │         match (o) {
   │                ^
   │
   = missing `Outer::One{i: Inner::Inner2{..}}`

error: match not exhaustive
   ┌─ tests/bytecode-generator/matching_coverage_err.move:52:16
   │
52 │         match ((i, i)) {
   │                ^^^^^^
   │
   = missing `(Inner::Inner2{..},_)`

error: match not exhaustive
   ┌─ tests/bytecode-generator/matching_coverage_err.move:65:16
   │
65 │         match ((i, i)) {
   │                ^^^^^^
   │
   = missing `(_,Inner::Inner1{..})`

error: unreachable pattern
   ┌─ tests/bytecode-generator/matching_coverage_err.move:78:14
   │
78 │              _ => {}
   │              ^

error: unreachable pattern
   ┌─ tests/bytecode-generator/matching_coverage_err.move:86:14
   │
86 │              One{i: _} => {}
   │              ^^^^^^^^^

error: unreachable pattern
   ┌─ tests/bytecode-generator/matching_coverage_err.move:96:14
   │
96 │              One{i: Inner1{x:_}} => {}
   │              ^^^^^^^^^^^^^^^^^^^
