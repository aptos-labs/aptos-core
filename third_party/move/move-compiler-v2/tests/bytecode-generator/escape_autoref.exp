// -- Model dump before bytecode pipeline
module 0x42::m {
    struct Object {
        inner: address,
    }
    struct ObjectCore {
        owner: address,
    }
    private fun make(): Object {
        Abort(0)
    }
    private fun owner_correct(o: Object): address
        acquires ObjectCore(*)
     {
        {
          let addr: address = select m::Object.inner<Object>(o);
          select m::ObjectCore.owner<&ObjectCore>(BorrowGlobal(Immutable)<ObjectCore>(addr))
        }
    }
    private fun owner_read_ref_missing(o: Object): address
        acquires ObjectCore(*)
     {
        select m::ObjectCore.owner<&ObjectCore>(BorrowGlobal(Immutable)<ObjectCore>(select m::Object.inner<Object>(o)))
    }
    private fun will_autoref(): address {
        select m::Object.inner<Object>(m::make())
    }
} // end 0x42::m

// -- Sourcified model before bytecode pipeline
module 0x42::m {
    struct Object has copy, drop {
        inner: address,
    }
    struct ObjectCore has key {
        owner: address,
    }
    fun make(): Object {
        abort 0
    }
    fun owner_correct(o: Object): address
        acquires ObjectCore
    {
        let addr = o.inner;
        borrow_global<ObjectCore>(addr).owner
    }
    fun owner_read_ref_missing(o: Object): address
        acquires ObjectCore
    {
        borrow_global<ObjectCore>(o.inner).owner
    }
    fun will_autoref(): address {
        make().inner
    }
}

============ initial bytecode ================

[variant baseline]
fun m::make(): 0x42::m::Object {
     var $t0: 0x42::m::Object
     var $t1: u64
  0: $t1 := 0
  1: abort($t1)
  2: return $t0
}


[variant baseline]
fun m::owner_correct($t0: 0x42::m::Object): address {
     var $t1: address
     var $t2: address
     var $t3: &0x42::m::Object
     var $t4: &address
     var $t5: &0x42::m::ObjectCore
     var $t6: &address
  0: $t3 := borrow_local($t0)
  1: $t4 := borrow_field<0x42::m::Object>.inner($t3)
  2: $t2 := read_ref($t4)
  3: $t5 := borrow_global<0x42::m::ObjectCore>($t2)
  4: $t6 := borrow_field<0x42::m::ObjectCore>.owner($t5)
  5: $t1 := read_ref($t6)
  6: return $t1
}


[variant baseline]
fun m::owner_read_ref_missing($t0: 0x42::m::Object): address {
     var $t1: address
     var $t2: &0x42::m::ObjectCore
     var $t3: address
     var $t4: &0x42::m::Object
     var $t5: &address
     var $t6: &address
  0: $t4 := borrow_local($t0)
  1: $t5 := borrow_field<0x42::m::Object>.inner($t4)
  2: $t3 := read_ref($t5)
  3: $t2 := borrow_global<0x42::m::ObjectCore>($t3)
  4: $t6 := borrow_field<0x42::m::ObjectCore>.owner($t2)
  5: $t1 := read_ref($t6)
  6: return $t1
}


[variant baseline]
fun m::will_autoref(): address {
     var $t0: address
     var $t1: 0x42::m::Object
     var $t2: &0x42::m::Object
     var $t3: &address
  0: $t1 := m::make()
  1: $t2 := borrow_local($t1)
  2: $t3 := borrow_field<0x42::m::Object>.inner($t2)
  3: $t0 := read_ref($t3)
  4: return $t0
}


============ disassembled file-format ==================
// Move bytecode v7
module 42.m {
struct Object has copy, drop {
	inner: address
}
struct ObjectCore has key {
	owner: address
}

make(): Object /* def_idx: 0 */ {
B0:
	0: LdU64(0)
	1: Abort
}
owner_correct(Arg0: Object): address /* def_idx: 1 */ {
B0:
	0: ImmBorrowLoc[0](Arg0: Object)
	1: ImmBorrowField[0](Object.inner: address)
	2: ReadRef
	3: ImmBorrowGlobal[1](ObjectCore)
	4: ImmBorrowField[1](ObjectCore.owner: address)
	5: ReadRef
	6: Ret
}
owner_read_ref_missing(Arg0: Object): address /* def_idx: 2 */ {
B0:
	0: ImmBorrowLoc[0](Arg0: Object)
	1: ImmBorrowField[0](Object.inner: address)
	2: ReadRef
	3: ImmBorrowGlobal[1](ObjectCore)
	4: ImmBorrowField[1](ObjectCore.owner: address)
	5: ReadRef
	6: Ret
}
will_autoref(): address /* def_idx: 3 */ {
L0:	loc0: Object
B0:
	0: Call make(): Object
	1: StLoc[0](loc0: Object)
	2: ImmBorrowLoc[0](loc0: Object)
	3: ImmBorrowField[0](Object.inner: address)
	4: ReadRef
	5: Ret
}
}
============ bytecode verification succeeded ========
