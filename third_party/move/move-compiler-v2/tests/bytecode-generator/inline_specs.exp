// -- Model dump before bytecode pipeline
module 0x42::inline_specs {
    private fun specs(): u64 {
        {
          let x: u64 = 0;
          spec {
            assert Eq<u64>(x, 0);
          }
          ;
          x: u64 = inline_specs::succ(x);
          spec {
            assert Eq<u64>(x, 1);
          }
          ;
          x
        }
    }
    private fun succ(x: u64): u64 {
        Add<u64>(x, 1)
    }
} // end 0x42::inline_specs

// -- Sourcified model before bytecode pipeline
module 0x42::inline_specs {
    fun specs(): u64 {
        let x = 0;

        /* spec {
          assert Eq<u64>(x, 0);
        }
         */
        ;
        x = succ(x);

        /* spec {
          assert Eq<u64>(x, 1);
        }
         */
        ;
        x
    }
    fun succ(x: u64): u64 {
        x + 1
    }
}

============ initial bytecode ================

[variant baseline]
fun inline_specs::specs(): u64 {
     var $t0: u64
     var $t1: u64
     var $t2: u64
  0: $t1 := 0
  1: spec {
  assert Eq<u64>($t1, 0);
}

  2: $t2 := inline_specs::succ($t1)
  3: $t1 := infer($t2)
  4: spec {
  assert Eq<u64>($t1, 1);
}

  5: $t0 := infer($t1)
  6: return $t0
}


[variant baseline]
fun inline_specs::succ($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
  0: $t2 := infer($t0)
  1: $t3 := 1
  2: $t1 := +($t2, $t3)
  3: return $t1
}


============ disassembled file-format ==================
// Move bytecode v7
module 42.inline_specs {


specs(): u64 /* def_idx: 0 */ {
L0:	loc0: u64
B0:
	0: LdU64(0)
	1: StLoc[0](loc0: u64)
	2: Nop
	3: MoveLoc[0](loc0: u64)
	4: Call succ(u64): u64
	5: StLoc[0](loc0: u64)
	6: Nop
	7: MoveLoc[0](loc0: u64)
	8: Ret
}
succ(Arg0: u64): u64 /* def_idx: 1 */ {
B0:
	0: MoveLoc[0](Arg0: u64)
	1: LdU64(1)
	2: Add
	3: Ret
}
}
============ bytecode verification succeeded ========
