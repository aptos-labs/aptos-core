// -- Model dump before bytecode pipeline
module 0x42::freeze_mut_ref {
    use std::vector;
    struct G {
        f: u64,
    }
    struct S {
        dummy_field: bool,
    }
    public fun borrow_mut<Element>(map: &mut vector<Element>): &Element {
        Freeze(false)(vector::borrow_mut<Element>(map, 0))
    }
    public fun borrow_mut2<Element>(v: &mut Element): &Element {
        Freeze(false)(v)
    }
    public fun borrow_mut3<Element>(v1: &mut Element,v2: &Element): &Element {
        if true {
          Freeze(false)(v1)
        } else {
          v2
        }
    }
    public fun borrow_mut4<Element>(v: &mut Element): &Element {
        return Freeze(false)(v)
    }
    private fun t0() {
        {
          let x: &u64 = Freeze(false)(Borrow(Mutable)(0));
          x;
          Tuple()
        }
    }
    private fun t1(s: &mut S): &S {
        Freeze(false)(s)
    }
    private fun t2(u1: &mut u64,u2: &mut u64): (&u64, &mut u64) {
        Tuple(Freeze(false)(u1), u2)
    }
    public fun t4() {
        {
          let x: &u64;
          {
            let y: &u64;
            (x: &u64, y: &u64): (&u64, &u64) = Tuple(Freeze(false)(Borrow(Mutable)(0)), Freeze(false)(Borrow(Mutable)(0)));
            Tuple()
          }
        }
    }
    public fun t5(s: &mut G) {
        {
          let x: u64 = 0;
          {
            let f: &mut u64 = Borrow(Mutable)(select freeze_mut_ref::G.f<&mut G>(x: u64 = Add<u64>(x, 1);
            s));
            {
              let g: &mut u64 = Borrow(Mutable)(select freeze_mut_ref::G.f<&mut G>(x: u64 = Add<u64>(x, 1);
              s));
              {
                let y: &mut u64 = Borrow(Mutable)(2);
                {
                  let z: &u64;
                  f = 0;
                  z: &u64 = Freeze(false)(y);
                  g = 2;
                  Tuple()
                }
              }
            }
          }
        }
    }
    private fun t6(cond: bool,s: &mut S,other: &S) {
        {
          let x: &S;
          if cond {
            x: &S = Freeze(false)(Copy(s))
          } else {
            x: &S = other
          };
          Tuple()
        }
    }
    private fun t7(cond: bool,s: &mut S,other: &S) {
        {
          let _x: &S;
          _x: &S = if cond {
            Freeze(false)(s)
          } else {
            other
          };
          Tuple()
        }
    }
    private fun t8(cond: bool,s: &mut S,other: &S) {
        {
          let _x: &S = if cond {
            Freeze(false)(s)
          } else {
            other
          };
          Tuple()
        }
    }
} // end 0x42::freeze_mut_ref

// -- Sourcified model before bytecode pipeline
module 0x42::freeze_mut_ref {
    struct G {
        f: u64,
    }
    struct S has drop {
    }
    public fun borrow_mut<Element>(map: &mut vector<Element>): &Element {
        /*freeze*/0x1::vector::borrow_mut<Element>(map, 0)
    }
    public fun borrow_mut2<Element>(v: &mut Element): &Element {
        /*freeze*/v
    }
    public fun borrow_mut3<Element>(v1: &mut Element, v2: &Element): &Element {
        if (true) /*freeze*/v1 else v2
    }
    public fun borrow_mut4<Element>(v: &mut Element): &Element {
        /*freeze*/v
    }
    fun t0() {
        let x = /*freeze*/&mut 0;
        x;
    }
    fun t1(s: &mut S): &S {
        /*freeze*/s
    }
    fun t2(u1: &mut u64, u2: &mut u64): (&u64, &mut u64) {
        (/*freeze*/u1, u2)
    }
    public fun t4() {
        let x;
        let y;
        (x,y) = (/*freeze*/&mut 0, /*freeze*/&mut 0);
    }
    public fun t5(s: &mut G) {
        let x = 0;
        let f = &mut {
            x = x + 1;
            s
        }.f;
        let g = &mut {
            x = x + 1;
            s
        }.f;
        let y = &mut 2;
        let z;
        *{
            *f = 0;
            z = /*freeze*/y;
            g
        } = 2;
    }
    fun t6(cond: bool, s: &mut S, other: &S) {
        let x;
        if (cond) x = /*freeze*/copy s else x = other;
    }
    fun t7(cond: bool, s: &mut S, other: &S) {
        let _x;
        _x = if (cond) /*freeze*/s else other;
    }
    fun t8(cond: bool, s: &mut S, other: &S) {
        let _x = if (cond) /*freeze*/s else other;
    }
}

============ initial bytecode ================

[variant baseline]
public fun freeze_mut_ref::borrow_mut<#0>($t0: &mut vector<#0>): &#0 {
     var $t1: &#0
     var $t2: &mut #0
     var $t3: &mut vector<#0>
     var $t4: u64
  0: $t3 := infer($t0)
  1: $t4 := 0
  2: $t2 := vector::borrow_mut<#0>($t3, $t4)
  3: $t1 := freeze_ref(implicit)($t2)
  4: return $t1
}


[variant baseline]
public fun freeze_mut_ref::borrow_mut2<#0>($t0: &mut #0): &#0 {
     var $t1: &#0
  0: $t1 := freeze_ref(implicit)($t0)
  1: return $t1
}


[variant baseline]
public fun freeze_mut_ref::borrow_mut3<#0>($t0: &mut #0, $t1: &#0): &#0 {
     var $t2: &#0
     var $t3: bool
  0: $t3 := true
  1: if ($t3) goto 2 else goto 5
  2: label L0
  3: $t2 := freeze_ref(implicit)($t0)
  4: goto 7
  5: label L1
  6: $t2 := infer($t1)
  7: label L2
  8: return $t2
}


[variant baseline]
public fun freeze_mut_ref::borrow_mut4<#0>($t0: &mut #0): &#0 {
     var $t1: &#0
  0: $t1 := freeze_ref(implicit)($t0)
  1: return $t1
  2: return $t1
}


[variant baseline]
fun freeze_mut_ref::t0() {
     var $t0: &u64
     var $t1: &mut u64
     var $t2: u64
     var $t3: &u64
  0: $t2 := 0
  1: $t1 := borrow_local($t2)
  2: $t0 := freeze_ref(implicit)($t1)
  3: $t3 := infer($t0)
  4: return ()
}


[variant baseline]
fun freeze_mut_ref::t1($t0: &mut 0x42::freeze_mut_ref::S): &0x42::freeze_mut_ref::S {
     var $t1: &0x42::freeze_mut_ref::S
  0: $t1 := freeze_ref(implicit)($t0)
  1: return $t1
}


[variant baseline]
fun freeze_mut_ref::t2($t0: &mut u64, $t1: &mut u64): (&u64, &mut u64) {
     var $t2: &u64
     var $t3: &mut u64
  0: $t2 := freeze_ref(implicit)($t0)
  1: $t3 := infer($t1)
  2: return ($t2, $t3)
}


[variant baseline]
public fun freeze_mut_ref::t4() {
     var $t0: &u64
     var $t1: &u64
     var $t2: &u64
     var $t3: &mut u64
     var $t4: u64
     var $t5: &u64
     var $t6: &mut u64
     var $t7: u64
  0: $t4 := 0
  1: $t3 := borrow_local($t4)
  2: $t2 := freeze_ref(implicit)($t3)
  3: $t0 := infer($t2)
  4: $t7 := 0
  5: $t6 := borrow_local($t7)
  6: $t5 := freeze_ref(implicit)($t6)
  7: $t1 := infer($t5)
  8: return ()
}


[variant baseline]
public fun freeze_mut_ref::t5($t0: &mut 0x42::freeze_mut_ref::G) {
     var $t1: u64
     var $t2: &mut u64
     var $t3: &mut 0x42::freeze_mut_ref::G
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: &mut u64
     var $t8: &mut 0x42::freeze_mut_ref::G
     var $t9: u64
     var $t10: u64
     var $t11: u64
     var $t12: &mut u64
     var $t13: u64
     var $t14: &u64
     var $t15: u64
     var $t16: &mut u64
     var $t17: u64
     var $t18: &u64
  0: $t1 := 0
  1: $t5 := infer($t1)
  2: $t6 := 1
  3: $t4 := +($t5, $t6)
  4: $t1 := infer($t4)
  5: $t3 := infer($t0)
  6: $t2 := borrow_field<0x42::freeze_mut_ref::G>.f($t3)
  7: $t10 := infer($t1)
  8: $t11 := 1
  9: $t9 := +($t10, $t11)
 10: $t1 := infer($t9)
 11: $t8 := infer($t0)
 12: $t7 := borrow_field<0x42::freeze_mut_ref::G>.f($t8)
 13: $t13 := 2
 14: $t12 := borrow_local($t13)
 15: $t15 := 2
 16: $t17 := 0
 17: write_ref($t2, $t17)
 18: $t18 := freeze_ref(implicit)($t12)
 19: $t14 := infer($t18)
 20: $t16 := infer($t7)
 21: write_ref($t16, $t15)
 22: return ()
}


[variant baseline]
fun freeze_mut_ref::t6($t0: bool, $t1: &mut 0x42::freeze_mut_ref::S, $t2: &0x42::freeze_mut_ref::S) {
     var $t3: &0x42::freeze_mut_ref::S
     var $t4: &0x42::freeze_mut_ref::S
     var $t5: &mut 0x42::freeze_mut_ref::S
  0: if ($t0) goto 1 else goto 6
  1: label L0
  2: $t5 := copy($t1)
  3: $t4 := freeze_ref(implicit)($t5)
  4: $t3 := infer($t4)
  5: goto 8
  6: label L1
  7: $t3 := infer($t2)
  8: label L2
  9: return ()
}


[variant baseline]
fun freeze_mut_ref::t7($t0: bool, $t1: &mut 0x42::freeze_mut_ref::S, $t2: &0x42::freeze_mut_ref::S) {
     var $t3: &0x42::freeze_mut_ref::S
     var $t4: &0x42::freeze_mut_ref::S
  0: if ($t0) goto 1 else goto 4
  1: label L0
  2: $t4 := freeze_ref(implicit)($t1)
  3: goto 6
  4: label L1
  5: $t4 := infer($t2)
  6: label L2
  7: $t3 := infer($t4)
  8: return ()
}


[variant baseline]
fun freeze_mut_ref::t8($t0: bool, $t1: &mut 0x42::freeze_mut_ref::S, $t2: &0x42::freeze_mut_ref::S) {
     var $t3: &0x42::freeze_mut_ref::S
  0: if ($t0) goto 1 else goto 4
  1: label L0
  2: $t3 := freeze_ref(implicit)($t1)
  3: goto 6
  4: label L1
  5: $t3 := infer($t2)
  6: label L2
  7: return ()
}


Diagnostics:
warning: Unused assignment to `x`. Consider removing or prefixing with an underscore: `_x`
   ┌─ tests/bytecode-generator/freeze_mut_ref.move:58:9
   │
58 │         (x, y) = (&mut 0, &mut 0);
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: Unused assignment to `y`. Consider removing or prefixing with an underscore: `_y`
   ┌─ tests/bytecode-generator/freeze_mut_ref.move:58:9
   │
58 │         (x, y) = (&mut 0, &mut 0);
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: Unused assignment to `x`. Consider removing or prefixing with an underscore: `_x`
   ┌─ tests/bytecode-generator/freeze_mut_ref.move:66:24
   │
66 │         let g = &mut ({x = x + 1; s}).f;
   │                        ^^^^^^^^^

warning: Unused assignment to `z`. Consider removing or prefixing with an underscore: `_z`
   ┌─ tests/bytecode-generator/freeze_mut_ref.move:69:20
   │
69 │         *({*f = 0; z = y; g}) = 2;
   │                    ^^^^^

warning: Unused assignment to `x`. Consider removing or prefixing with an underscore: `_x`
   ┌─ tests/bytecode-generator/freeze_mut_ref.move:74:19
   │
74 │         if (cond) x = copy s else x = other;
   │                   ^^^^^^^^^^

warning: Unused assignment to `x`. Consider removing or prefixing with an underscore: `_x`
   ┌─ tests/bytecode-generator/freeze_mut_ref.move:74:35
   │
74 │         if (cond) x = copy s else x = other;
   │                                   ^^^^^^^^^


============ disassembled file-format ==================
// Move bytecode v7
module 42.freeze_mut_ref {
struct G {
	f: u64
}
struct S has drop {
	dummy_field: bool
}

public borrow_mut<Ty0>(Arg0: &mut vector<Ty0>): &Ty0 /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](Arg0: &mut vector<Ty0>)
	1: LdU64(0)
	2: VecMutBorrow(2)
	3: FreezeRef
	4: Ret
}
public borrow_mut2<Ty0>(Arg0: &mut Ty0): &Ty0 /* def_idx: 1 */ {
B0:
	0: MoveLoc[0](Arg0: &mut Ty0)
	1: FreezeRef
	2: Ret
}
public borrow_mut3<Ty0>(Arg0: &mut Ty0, Arg1: &Ty0): &Ty0 /* def_idx: 2 */ {
L2:	loc0: &Ty0
B0:
	0: MoveLoc[1](Arg1: &Ty0)
	1: Pop
	2: MoveLoc[0](Arg0: &mut Ty0)
	3: FreezeRef
	4: StLoc[2](loc0: &Ty0)
B1:
	5: MoveLoc[2](loc0: &Ty0)
	6: Ret
B2:
	7: MoveLoc[0](Arg0: &mut Ty0)
	8: Pop
	9: MoveLoc[1](Arg1: &Ty0)
	10: StLoc[2](loc0: &Ty0)
	11: Branch(5)
}
public borrow_mut4<Ty0>(Arg0: &mut Ty0): &Ty0 /* def_idx: 3 */ {
B0:
	0: MoveLoc[0](Arg0: &mut Ty0)
	1: FreezeRef
	2: Ret
}
t0() /* def_idx: 4 */ {
L0:	loc0: u64
L1:	loc1: &u64
B0:
	0: LdU64(0)
	1: StLoc[0](loc0: u64)
	2: MutBorrowLoc[0](loc0: u64)
	3: FreezeRef
	4: Pop
	5: Ret
}
t1(Arg0: &mut S): &S /* def_idx: 5 */ {
B0:
	0: MoveLoc[0](Arg0: &mut S)
	1: FreezeRef
	2: Ret
}
t2(Arg0: &mut u64, Arg1: &mut u64): &u64 * &mut u64 /* def_idx: 6 */ {
B0:
	0: MoveLoc[0](Arg0: &mut u64)
	1: FreezeRef
	2: MoveLoc[1](Arg1: &mut u64)
	3: Ret
}
public t4() /* def_idx: 7 */ {
L0:	loc0: u64
L1:	loc1: &u64
L2:	loc2: u64
B0:
	0: LdU64(0)
	1: StLoc[0](loc0: u64)
	2: MutBorrowLoc[0](loc0: u64)
	3: FreezeRef
	4: Pop
	5: LdU64(0)
	6: StLoc[2](loc2: u64)
	7: MutBorrowLoc[2](loc2: u64)
	8: FreezeRef
	9: Pop
	10: Ret
}
public t5(Arg0: &mut G) /* def_idx: 8 */ {
L1:	loc0: &mut u64
L2:	loc1: &mut u64
L3:	loc2: u64
L4:	loc3: &mut u64
L5:	loc4: &u64
B0:
	0: LdU64(0)
	1: LdU64(1)
	2: Add
	3: CopyLoc[0](Arg0: &mut G)
	4: MutBorrowField[0](G.f: u64)
	5: StLoc[1](loc0: &mut u64)
	6: LdU64(1)
	7: Add
	8: Pop
	9: MoveLoc[0](Arg0: &mut G)
	10: MutBorrowField[0](G.f: u64)
	11: StLoc[2](loc1: &mut u64)
	12: LdU64(2)
	13: StLoc[3](loc2: u64)
	14: MutBorrowLoc[3](loc2: u64)
	15: StLoc[4](loc3: &mut u64)
	16: LdU64(2)
	17: LdU64(0)
	18: MoveLoc[1](loc0: &mut u64)
	19: WriteRef
	20: MoveLoc[4](loc3: &mut u64)
	21: FreezeRef
	22: Pop
	23: MoveLoc[2](loc1: &mut u64)
	24: WriteRef
	25: Ret
}
t6(Arg0: bool, Arg1: &mut S, Arg2: &S) /* def_idx: 9 */ {
L3:	loc0: &S
B0:
	0: MoveLoc[0](Arg0: bool)
	1: BrFalse(10)
B1:
	2: MoveLoc[2](Arg2: &S)
	3: Pop
	4: CopyLoc[1](Arg1: &mut S)
	5: MoveLoc[1](Arg1: &mut S)
	6: Pop
	7: FreezeRef
	8: Pop
B2:
	9: Ret
B3:
	10: MoveLoc[1](Arg1: &mut S)
	11: Pop
	12: MoveLoc[2](Arg2: &S)
	13: Pop
	14: Branch(9)
}
t7(Arg0: bool, Arg1: &mut S, Arg2: &S) /* def_idx: 10 */ {
L3:	loc0: &S
L4:	loc1: &S
B0:
	0: MoveLoc[0](Arg0: bool)
	1: BrFalse(10)
B1:
	2: MoveLoc[2](Arg2: &S)
	3: Pop
	4: MoveLoc[1](Arg1: &mut S)
	5: FreezeRef
	6: StLoc[3](loc0: &S)
B2:
	7: MoveLoc[3](loc0: &S)
	8: Pop
	9: Ret
B3:
	10: MoveLoc[1](Arg1: &mut S)
	11: Pop
	12: MoveLoc[2](Arg2: &S)
	13: StLoc[3](loc0: &S)
	14: Branch(7)
}
t8(Arg0: bool, Arg1: &mut S, Arg2: &S) /* def_idx: 11 */ {
L3:	loc0: &S
B0:
	0: MoveLoc[0](Arg0: bool)
	1: BrFalse(8)
B1:
	2: MoveLoc[2](Arg2: &S)
	3: Pop
	4: MoveLoc[1](Arg1: &mut S)
	5: FreezeRef
	6: Pop
B2:
	7: Ret
B3:
	8: MoveLoc[1](Arg1: &mut S)
	9: Pop
	10: MoveLoc[2](Arg2: &S)
	11: Pop
	12: Branch(7)
}
}
============ bytecode verification succeeded ========
