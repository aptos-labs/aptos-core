// -- Model dump before first bytecode pipeline
module 0x42::assign {
    public inline fun expose(x: u64): (u64, u64) {
        Tuple(1, x)
    }
    public fun main(): (u64, u64) {
        {
          let (a: u64, b: u64): (u64, u64) = {
            let (x: u64): (u64) = Tuple(3);
            Tuple(1, x)
          };
          Tuple(a, b)
        }
    }
} // end 0x42::assign

// -- Sourcified model before first bytecode pipeline
module 0x42::assign {
    public inline fun expose(x: u64): (u64, u64) {
        (1, x)
    }
    public fun main(): (u64, u64) {
        let (a,b) = {
            let (x) = (3);
            (1, x)
        };
        (a, b)
    }
}

============ bytecode before first stackless bytecode pipeline ================

[variant baseline]
public fun assign::main(): (u64, u64) {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
  0: $t5 := 3
  1: $t4 := infer($t5)
  2: $t2 := 1
  3: $t3 := infer($t4)
  4: $t0 := infer($t2)
  5: $t1 := infer($t3)
  6: return ($t0, $t1)
}

// -- Model dump before second bytecode pipeline
module 0x42::assign {
    public inline fun expose(x: u64): (u64, u64) {
        Tuple(1, x)
    }
    public fun main(): (u64, u64) {
        Tuple(1, 3)
    }
} // end 0x42::assign

============ bytecode before second stackless bytecode pipeline ================

[variant baseline]
public fun assign::main(): (u64, u64) {
     var $t0: u64
     var $t1: u64
  0: $t0 := 1
  1: $t1 := 3
  2: return ($t0, $t1)
}


============ disassembled file-format ==================
// Move bytecode v8
module 42.assign {


public main(): u64 * u64 /* def_idx: 0 */ {
B0:
	0: LdU64(1)
	1: LdU64(3)
	2: Ret
}
}
============ bytecode verification succeeded ========
