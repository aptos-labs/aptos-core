// -- Model dump before bytecode pipeline
module 0x42::if_else {
    private fun if_else(cond: bool,x: u64): u64 {
        if cond {
          Add<u64>(x, 1)
        } else {
          Sub<u64>(x, 1)
        }
    }
    private fun if_else_nested(cond: bool,x: u64): u64 {
        if Gt<u64>(if cond {
          Add<u64>(x, 1)
        } else {
          Sub<u64>(x, 1)
        }, 10) {
          Mul<u64>(x, 2)
        } else {
          Div<u64>(x, 2)
        }
    }
} // end 0x42::if_else

// -- Sourcified model before bytecode pipeline
module 0x42::if_else {
    fun if_else(cond: bool, x: u64): u64 {
        if (cond) x + 1 else x - 1
    }
    fun if_else_nested(cond: bool, x: u64): u64 {
        if ((if (cond) x + 1 else x - 1) > 10) x * 2 else x / 2
    }
}

============ initial bytecode ================

[variant baseline]
fun if_else::if_else($t0: bool, $t1: u64): u64 {
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
  0: if ($t0) goto 1 else goto 6
  1: label L0
  2: $t3 := infer($t1)
  3: $t4 := 1
  4: $t2 := +($t3, $t4)
  5: goto 10
  6: label L1
  7: $t5 := infer($t1)
  8: $t6 := 1
  9: $t2 := -($t5, $t6)
 10: label L2
 11: return $t2
}


[variant baseline]
fun if_else::if_else_nested($t0: bool, $t1: u64): u64 {
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: u64
     var $t11: u64
     var $t12: u64
     var $t13: u64
  0: if ($t0) goto 1 else goto 6
  1: label L0
  2: $t5 := infer($t1)
  3: $t6 := 1
  4: $t4 := +($t5, $t6)
  5: goto 10
  6: label L1
  7: $t7 := infer($t1)
  8: $t8 := 1
  9: $t4 := -($t7, $t8)
 10: label L2
 11: $t9 := 10
 12: $t3 := >($t4, $t9)
 13: if ($t3) goto 14 else goto 19
 14: label L3
 15: $t10 := infer($t1)
 16: $t11 := 2
 17: $t2 := *($t10, $t11)
 18: goto 23
 19: label L4
 20: $t12 := infer($t1)
 21: $t13 := 2
 22: $t2 := /($t12, $t13)
 23: label L5
 24: return $t2
}


============ disassembled file-format ==================
// Move bytecode v7
module 42.if_else {


if_else(Arg0: bool, Arg1: u64): u64 /* def_idx: 0 */ {
L2:	loc0: u64
B0:
	0: MoveLoc[0](Arg0: bool)
	1: BrFalse(8)
B1:
	2: MoveLoc[1](Arg1: u64)
	3: LdU64(1)
	4: Add
	5: StLoc[2](loc0: u64)
B2:
	6: MoveLoc[2](loc0: u64)
	7: Ret
B3:
	8: MoveLoc[1](Arg1: u64)
	9: LdU64(1)
	10: Sub
	11: StLoc[2](loc0: u64)
	12: Branch(6)
}
if_else_nested(Arg0: bool, Arg1: u64): u64 /* def_idx: 1 */ {
L2:	loc0: u64
L3:	loc1: u64
B0:
	0: MoveLoc[0](Arg0: bool)
	1: BrFalse(21)
B1:
	2: CopyLoc[1](Arg1: u64)
	3: LdU64(1)
	4: Add
	5: StLoc[2](loc0: u64)
B2:
	6: MoveLoc[2](loc0: u64)
	7: LdU64(10)
	8: Gt
	9: BrFalse(16)
B3:
	10: MoveLoc[1](Arg1: u64)
	11: LdU64(2)
	12: Mul
	13: StLoc[3](loc1: u64)
B4:
	14: MoveLoc[3](loc1: u64)
	15: Ret
B5:
	16: MoveLoc[1](Arg1: u64)
	17: LdU64(2)
	18: Div
	19: StLoc[3](loc1: u64)
	20: Branch(14)
B6:
	21: CopyLoc[1](Arg1: u64)
	22: LdU64(1)
	23: Sub
	24: StLoc[2](loc0: u64)
	25: Branch(6)
}
}
============ bytecode verification succeeded ========
