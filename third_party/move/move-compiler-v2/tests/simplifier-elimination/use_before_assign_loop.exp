// -- Model dump before bytecode pipeline
module 0x8675309::M {
    private fun tborrow1() {
        {
          let x: u64;
          loop {
            {
              let y: &u64 = Borrow(Immutable)(x);
              _: &u64 = Move(y);
              x: u64 = 0
            }
          }
        }
    }
    private fun tborrow2(cond: bool) {
        {
          let x: u64;
          loop {
            {
              let y: &u64 = Borrow(Immutable)(x);
              _: &u64 = Move(y);
              if cond {
                x: u64 = 0
              } else {
                Tuple()
              };
              break
            }
          };
          x;
          Tuple()
        }
    }
    private fun tcopy(cond: bool) {
        {
          let x: u64;
          loop {
            {
              let y: u64 = Add<u64>(x, 1);
              if cond {
                continue
              } else {
                Tuple()
              };
              x: u64 = 0;
              y;
              Tuple()
            }
          }
        }
    }
    private fun tmove() {
        {
          let x: u64;
          loop {
            {
              let y: u64 = Add<u64>(Move(x), 1);
              x: u64 = 0;
              y;
              Tuple()
            }
          }
        }
    }
} // end 0x8675309::M

// -- Sourcified model before bytecode pipeline
module 0x8675309::M {
    fun tborrow1() {
        let x;
        loop {
            let y = &x;
            _ = move y;
            x = 0
        }
    }
    fun tborrow2(cond: bool) {
        let x;
        loop {
            let y = &x;
            _ = move y;
            if (cond) x = 0;
            break
        };
        x;
    }
    fun tcopy(cond: bool) {
        let x;
        loop {
            let y = x + 1;
            if (cond) continue;
            x = 0;
            y;
        }
    }
    fun tmove() {
        let x;
        loop {
            let y = (move x) + 1;
            x = 0;
            y;
        }
    }
}


Diagnostics:
error: use of possibly unassigned local `x`
  ┌─ tests/simplifier-elimination/use_before_assign_loop.move:4:24
  │
4 │         loop { let y = move x + 1; x = 0; y; }
  │                        ^^^^^^

error: use of possibly unassigned local `x`
  ┌─ tests/simplifier-elimination/use_before_assign_loop.move:9:24
  │
9 │         loop { let y = x + 1; if (cond) { continue }; x = 0; y; }
  │                        ^

error: use of possibly unassigned local `x`
   ┌─ tests/simplifier-elimination/use_before_assign_loop.move:14:24
   │
14 │         loop { let y = &x; _ = move y; x = 0 }
   │                        ^^

error: use of unassigned local `x`
   ┌─ tests/simplifier-elimination/use_before_assign_loop.move:19:24
   │
19 │         loop { let y = &x; _ = move y; if (cond) { x = 0 }; break };
   │                        ^^

error: use of possibly unassigned local `x`
   ┌─ tests/simplifier-elimination/use_before_assign_loop.move:20:9
   │
20 │         x;
   │         ^
