============ initial bytecode ================

[variant baseline]
fun m::copy_kill($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
  0: $t2 := infer($t0)
  1: $t3 := infer($t2)
  2: $t5 := infer($t0)
  3: $t6 := 1
  4: $t4 := +($t5, $t6)
  5: $t0 := infer($t4)
  6: $t7 := infer($t3)
  7: $t1 := +($t7, $t2)
  8: return $t1
}


Diagnostics:
warning: Unused assignment to `p`. Consider removing or prefixing with an underscore: `_p`
  ┌─ tests/variable-coalescing/straight_line_kills.move:5:9
  │
5 │         p = p + 1;
  │         ^^^^^^^^^

============ after DeadStoreElimination: ================

[variant baseline]
fun m::copy_kill($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
  0: $t2 := copy($t0)
  1: $t3 := copy($t2)
  2: $t5 := move($t0)
  3: $t6 := 1
  4: $t4 := +($t5, $t6)
  5: $t7 := move($t3)
  6: $t1 := +($t7, $t2)
  7: return $t1
}

============ after VariableCoalescingAnnotator: ================

[variant baseline]
fun m::copy_kill($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
     # live vars: $t0
     # events: b:$t0, b:$t2
  0: $t2 := copy($t0)
     # live vars: $t0, $t2
     # events: b:$t3
  1: $t3 := copy($t2)
     # live vars: $t0, $t2, $t3
     # events: e:$t0, b:$t5
  2: $t5 := move($t0)
     # live vars: $t2, $t3, $t5
     # events: b:$t6
  3: $t6 := 1
     # live vars: $t2, $t3, $t5, $t6
     # events: e:$t4, e:$t5, e:$t6, b:$t4
  4: $t4 := +($t5, $t6)
     # live vars: $t2, $t3
     # events: e:$t3, b:$t7
  5: $t7 := move($t3)
     # live vars: $t2, $t7
     # events: e:$t2, e:$t7, b:$t1
  6: $t1 := +($t7, $t2)
     # live vars: $t1
     # events: e:$t1
  7: return $t1
}

============ after VariableCoalescingTransformer: ================

[variant baseline]
fun m::copy_kill($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: u64
     var $t3: u64
     var $t4: u64 [unused]
     var $t5: u64 [unused]
     var $t6: u64
     var $t7: u64 [unused]
  0: $t2 := copy($t0)
  1: $t3 := copy($t2)
  2: $t0 := move($t0)
  3: $t6 := 1
  4: $t0 := +($t0, $t6)
  5: $t3 := move($t3)
  6: $t2 := +($t3, $t2)
  7: return $t2
}

============ after DeadStoreElimination: ================

[variant baseline]
fun m::copy_kill($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: u64
     var $t3: u64
     var $t4: u64 [unused]
     var $t5: u64 [unused]
     var $t6: u64
     var $t7: u64 [unused]
  0: $t2 := copy($t0)
  1: $t3 := copy($t2)
  2: $t0 := move($t0)
  3: $t6 := 1
  4: $t0 := +($t0, $t6)
  5: $t2 := +($t3, $t2)
  6: return $t2
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


copy_kill(Arg0: u64): u64 /* def_idx: 0 */ {
L1:	loc0: u64
B0:
	0: CopyLoc[0](Arg0: u64)
	1: StLoc[1](loc0: u64)
	2: CopyLoc[1](loc0: u64)
	3: MoveLoc[0](Arg0: u64)
	4: LdU64(1)
	5: Add
	6: Pop
	7: MoveLoc[1](loc0: u64)
	8: Add
	9: Ret
}
}
============ bytecode verification succeeded ========
