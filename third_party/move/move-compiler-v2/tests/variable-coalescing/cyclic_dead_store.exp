============ initial bytecode ================

[variant baseline]
public fun m::test1($t0: u64, $t1: u64, $t2: u64) {
     var $t3: u64
     var $t4: bool
     var $t5: u64
     var $t6: u64
  0: $t3 := 0
  1: label L0
  2: $t4 := <($t3, $t0)
  3: if ($t4) goto 4 else goto 11
  4: label L2
  5: $t1 := infer($t2)
  6: $t2 := infer($t1)
  7: $t6 := 1
  8: $t5 := +($t3, $t6)
  9: $t3 := infer($t5)
 10: goto 13
 11: label L3
 12: goto 15
 13: label L4
 14: goto 1
 15: label L1
 16: return ()
}


[variant baseline]
public fun m::test2($t0: u64, $t1: u64) {
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: u64
  0: $t2 := 0
  1: label L0
  2: $t3 := <($t2, $t0)
  3: if ($t3) goto 4 else goto 10
  4: label L2
  5: $t1 := infer($t1)
  6: $t5 := 1
  7: $t4 := +($t2, $t5)
  8: $t2 := infer($t4)
  9: goto 12
 10: label L3
 11: goto 14
 12: label L4
 13: goto 1
 14: label L1
 15: return ()
}

============ after DeadStoreElimination: ================

[variant baseline]
public fun m::test1($t0: u64, $t1: u64, $t2: u64) {
     var $t3: u64
     var $t4: bool
     var $t5: u64
     var $t6: u64
  0: $t3 := 0
  1: label L0
  2: $t4 := <($t3, $t0)
  3: if ($t4) goto 4 else goto 11
  4: label L2
  5: $t1 := move($t2)
  6: $t2 := move($t1)
  7: $t6 := 1
  8: $t5 := +($t3, $t6)
  9: $t3 := move($t5)
 10: goto 1
 11: label L3
 12: return ()
}


[variant baseline]
public fun m::test2($t0: u64, $t1: u64) {
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: u64
  0: $t2 := 0
  1: label L0
  2: $t3 := <($t2, $t0)
  3: if ($t3) goto 4 else goto 9
  4: label L2
  5: $t5 := 1
  6: $t4 := +($t2, $t5)
  7: $t2 := move($t4)
  8: goto 1
  9: label L3
 10: return ()
}

============ after VariableCoalescingAnnotator: ================

[variant baseline]
public fun m::test1($t0: u64, $t1: u64, $t2: u64) {
     var $t3: u64
     var $t4: bool
     var $t5: u64
     var $t6: u64
     # live vars: $t0, $t1, $t2
     # events: b:$t0, b:$t1, b:$t2, b:$t3
  0: $t3 := 0
     # live vars: $t0, $t2, $t3
  1: label L0
     # live vars: $t0, $t2, $t3
     # events: b:$t4
  2: $t4 := <($t3, $t0)
     # live vars: $t0, $t2, $t3, $t4
     # events: e:$t4
  3: if ($t4) goto 4 else goto 11
     # live vars: $t0, $t2, $t3
  4: label L2
     # live vars: $t0, $t2, $t3
  5: $t1 := move($t2)
     # live vars: $t0, $t1, $t3
     # events: e:$t1
  6: $t2 := move($t1)
     # live vars: $t0, $t2, $t3
     # events: b:$t6
  7: $t6 := 1
     # live vars: $t0, $t2, $t3, $t6
     # events: e:$t6, b:$t5
  8: $t5 := +($t3, $t6)
     # live vars: $t0, $t2, $t5
     # events: e:$t5
  9: $t3 := move($t5)
     # live vars: $t0, $t2, $t3
 10: goto 1
     # live vars: $t0, $t2, $t3
     # events: e:$t0, e:$t2, e:$t3
 11: label L3
     # live vars:
 12: return ()
}


[variant baseline]
public fun m::test2($t0: u64, $t1: u64) {
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: u64
     # live vars: $t0, $t1
     # events: b:$t0, b:$t1, e:$t1, b:$t2
  0: $t2 := 0
     # live vars: $t0, $t2
  1: label L0
     # live vars: $t0, $t2
     # events: b:$t3
  2: $t3 := <($t2, $t0)
     # live vars: $t0, $t2, $t3
     # events: e:$t3
  3: if ($t3) goto 4 else goto 9
     # live vars: $t0, $t2
  4: label L2
     # live vars: $t0, $t2
     # events: b:$t5
  5: $t5 := 1
     # live vars: $t0, $t2, $t5
     # events: e:$t5, b:$t4
  6: $t4 := +($t2, $t5)
     # live vars: $t0, $t4
     # events: e:$t4
  7: $t2 := move($t4)
     # live vars: $t0, $t2
  8: goto 1
     # live vars: $t0, $t2
     # events: e:$t0, e:$t2
  9: label L3
     # live vars:
 10: return ()
}

============ after VariableCoalescingTransformer: ================

[variant baseline]
public fun m::test1($t0: u64, $t1: u64, $t2: u64) {
     var $t3: u64
     var $t4: bool
     var $t5: u64 [unused]
     var $t6: u64 [unused]
  0: $t3 := 0
  1: label L0
  2: $t4 := <($t3, $t0)
  3: if ($t4) goto 4 else goto 11
  4: label L2
  5: $t1 := move($t2)
  6: $t2 := move($t1)
  7: $t1 := 1
  8: $t1 := +($t3, $t1)
  9: $t3 := move($t1)
 10: goto 1
 11: label L3
 12: return ()
}


[variant baseline]
public fun m::test2($t0: u64, $t1: u64) {
     var $t2: u64 [unused]
     var $t3: bool
     var $t4: u64 [unused]
     var $t5: u64
  0: $t1 := 0
  1: label L0
  2: $t3 := <($t1, $t0)
  3: if ($t3) goto 4 else goto 9
  4: label L2
  5: $t5 := 1
  6: $t5 := +($t1, $t5)
  7: $t1 := move($t5)
  8: goto 1
  9: label L3
 10: return ()
}

============ after DeadStoreElimination: ================

[variant baseline]
public fun m::test1($t0: u64, $t1: u64, $t2: u64) {
     var $t3: u64
     var $t4: bool
     var $t5: u64 [unused]
     var $t6: u64 [unused]
  0: $t3 := 0
  1: label L0
  2: $t4 := <($t3, $t0)
  3: if ($t4) goto 4 else goto 11
  4: label L2
  5: $t1 := move($t2)
  6: $t2 := move($t1)
  7: $t1 := 1
  8: $t1 := +($t3, $t1)
  9: $t3 := move($t1)
 10: goto 1
 11: label L3
 12: return ()
}


[variant baseline]
public fun m::test2($t0: u64, $t1: u64) {
     var $t2: u64 [unused]
     var $t3: bool
     var $t4: u64 [unused]
     var $t5: u64
  0: $t1 := 0
  1: label L0
  2: $t3 := <($t1, $t0)
  3: if ($t3) goto 4 else goto 9
  4: label L2
  5: $t5 := 1
  6: $t5 := +($t1, $t5)
  7: $t1 := move($t5)
  8: goto 1
  9: label L3
 10: return ()
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


public test1(Arg0: u64, Arg1: u64, Arg2: u64) /* def_idx: 0 */ {
L3:	loc0: u64
B0:
	0: LdU64(0)
	1: StLoc[3](loc0: u64)
B1:
	2: CopyLoc[3](loc0: u64)
	3: CopyLoc[0](Arg0: u64)
	4: Lt
	5: BrFalse(13)
B2:
	6: MoveLoc[2](Arg2: u64)
	7: MoveLoc[3](loc0: u64)
	8: LdU64(1)
	9: Add
	10: StLoc[3](loc0: u64)
	11: StLoc[2](Arg2: u64)
	12: Branch(2)
B3:
	13: Ret
}
public test2(Arg0: u64, Arg1: u64) /* def_idx: 1 */ {
L2:	loc0: u64
B0:
	0: LdU64(0)
	1: StLoc[1](Arg1: u64)
B1:
	2: CopyLoc[1](Arg1: u64)
	3: CopyLoc[0](Arg0: u64)
	4: Lt
	5: BrFalse(11)
B2:
	6: MoveLoc[1](Arg1: u64)
	7: LdU64(1)
	8: Add
	9: StLoc[1](Arg1: u64)
	10: Branch(2)
B3:
	11: Ret
}
}
============ bytecode verification succeeded ========
