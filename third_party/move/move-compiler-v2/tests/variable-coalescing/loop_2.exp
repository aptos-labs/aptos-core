============ initial bytecode ================

[variant baseline]
fun m::test($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: bool
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: u64
  0: $t2 := infer($t0)
  1: $t3 := 0
  2: label L0
  3: $t5 := infer($t3)
  4: $t6 := 10
  5: $t4 := <($t5, $t6)
  6: if ($t4) goto 7 else goto 14
  7: label L2
  8: $t2 := infer($t0)
  9: $t8 := infer($t3)
 10: $t9 := 1
 11: $t7 := +($t8, $t9)
 12: $t3 := infer($t7)
 13: goto 16
 14: label L3
 15: goto 18
 16: label L4
 17: goto 2
 18: label L1
 19: $t1 := infer($t2)
 20: return $t1
}

============ after DeadStoreElimination: ================

[variant baseline]
fun m::test($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: bool
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: u64
  0: $t2 := copy($t0)
  1: $t3 := 0
  2: label L0
  3: $t5 := copy($t3)
  4: $t6 := 10
  5: $t4 := <($t5, $t6)
  6: if ($t4) goto 7 else goto 14
  7: label L2
  8: $t2 := copy($t0)
  9: $t8 := move($t3)
 10: $t9 := 1
 11: $t7 := +($t8, $t9)
 12: $t3 := move($t7)
 13: goto 2
 14: label L3
 15: $t1 := move($t2)
 16: return $t1
}

============ after VariableCoalescingAnnotator: ================

[variant baseline]
fun m::test($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: bool
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: u64
     # live vars: $t0
     # events: b:$t0, b:$t2
  0: $t2 := copy($t0)
     # live vars: $t0, $t2
     # events: b:$t3
  1: $t3 := 0
     # live vars: $t0, $t2, $t3
  2: label L0
     # live vars: $t0, $t2, $t3
     # events: b:$t5
  3: $t5 := copy($t3)
     # live vars: $t0, $t2, $t3, $t5
     # events: b:$t6
  4: $t6 := 10
     # live vars: $t0, $t2, $t3, $t5, $t6
     # events: e:$t5, e:$t6, b:$t4
  5: $t4 := <($t5, $t6)
     # live vars: $t0, $t2, $t3, $t4
     # events: e:$t4
  6: if ($t4) goto 7 else goto 14
     # live vars: $t0, $t2, $t3
  7: label L2
     # live vars: $t0, $t3
  8: $t2 := copy($t0)
     # live vars: $t0, $t2, $t3
     # events: b:$t8
  9: $t8 := move($t3)
     # live vars: $t0, $t2, $t8
     # events: b:$t9
 10: $t9 := 1
     # live vars: $t0, $t2, $t8, $t9
     # events: e:$t8, e:$t9, b:$t7
 11: $t7 := +($t8, $t9)
     # live vars: $t0, $t2, $t7
     # events: e:$t7
 12: $t3 := move($t7)
     # live vars: $t0, $t2, $t3
 13: goto 2
     # live vars: $t0, $t2, $t3
     # events: e:$t0, e:$t3
 14: label L3
     # live vars: $t2
     # events: e:$t2, b:$t1
 15: $t1 := move($t2)
     # live vars: $t1
     # events: e:$t1
 16: return $t1
}

============ after VariableCoalescingTransformer: ================

[variant baseline]
fun m::test($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: u64
     var $t3: u64
     var $t4: bool
     var $t5: u64
     var $t6: u64
     var $t7: u64 [unused]
     var $t8: u64 [unused]
     var $t9: u64 [unused]
  0: $t2 := copy($t0)
  1: $t3 := 0
  2: label L0
  3: $t5 := copy($t3)
  4: $t6 := 10
  5: $t4 := <($t5, $t6)
  6: if ($t4) goto 7 else goto 14
  7: label L2
  8: $t2 := copy($t0)
  9: $t5 := move($t3)
 10: $t6 := 1
 11: $t5 := +($t5, $t6)
 12: $t3 := move($t5)
 13: goto 2
 14: label L3
 15: $t2 := move($t2)
 16: return $t2
}

============ after DeadStoreElimination: ================

[variant baseline]
fun m::test($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: u64
     var $t3: u64
     var $t4: bool
     var $t5: u64
     var $t6: u64
     var $t7: u64 [unused]
     var $t8: u64 [unused]
     var $t9: u64 [unused]
  0: $t2 := copy($t0)
  1: $t3 := 0
  2: label L0
  3: $t5 := copy($t3)
  4: $t6 := 10
  5: $t4 := <($t5, $t6)
  6: if ($t4) goto 7 else goto 14
  7: label L2
  8: $t2 := copy($t0)
  9: $t5 := move($t3)
 10: $t6 := 1
 11: $t5 := +($t5, $t6)
 12: $t3 := move($t5)
 13: goto 2
 14: label L3
 15: $t2 := move($t2)
 16: return $t2
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


test(Arg0: u64): u64 /* def_idx: 0 */ {
L1:	loc0: u64
L2:	loc1: u64
B0:
	0: CopyLoc[0](Arg0: u64)
	1: StLoc[1](loc0: u64)
	2: LdU64(0)
	3: StLoc[2](loc1: u64)
B1:
	4: CopyLoc[2](loc1: u64)
	5: LdU64(10)
	6: Lt
	7: BrFalse(15)
B2:
	8: CopyLoc[0](Arg0: u64)
	9: StLoc[1](loc0: u64)
	10: MoveLoc[2](loc1: u64)
	11: LdU64(1)
	12: Add
	13: StLoc[2](loc1: u64)
	14: Branch(4)
B3:
	15: MoveLoc[1](loc0: u64)
	16: Ret
}
}
============ bytecode verification succeeded ========
