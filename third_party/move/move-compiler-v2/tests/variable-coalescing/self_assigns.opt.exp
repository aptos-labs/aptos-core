============ initial bytecode ================

[variant baseline]
public fun m::test1($t0: u64) {
  0: $t0 := infer($t0)
  1: return ()
}


[variant baseline]
public fun m::test2($t0: u64): u64 {
     var $t1: u64
  0: $t0 := infer($t0)
  1: $t1 := infer($t0)
  2: return $t1
}


[variant baseline]
public fun m::test3(): u64 {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
  0: $t1 := 0
  1: $t2 := 1
  2: label L0
  3: $t4 := infer($t1)
  4: $t5 := 42
  5: $t3 := <($t4, $t5)
  6: if ($t3) goto 7 else goto 14
  7: label L2
  8: $t2 := infer($t2)
  9: $t7 := infer($t1)
 10: $t8 := 1
 11: $t6 := +($t7, $t8)
 12: $t1 := infer($t6)
 13: goto 16
 14: label L3
 15: goto 18
 16: label L4
 17: goto 2
 18: label L1
 19: $t0 := infer($t2)
 20: return $t0
}


[variant baseline]
public fun m::test4($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
  0: $t2 := 0
  1: label L0
  2: $t4 := infer($t2)
  3: $t5 := 42
  4: $t3 := <($t4, $t5)
  5: if ($t3) goto 6 else goto 13
  6: label L2
  7: $t0 := infer($t0)
  8: $t7 := infer($t2)
  9: $t8 := 1
 10: $t6 := +($t7, $t8)
 11: $t2 := infer($t6)
 12: goto 15
 13: label L3
 14: goto 17
 15: label L4
 16: goto 1
 17: label L1
 18: $t1 := infer($t0)
 19: return $t1
}


Diagnostics:
warning: Unused assignment to `x`. Consider removing or prefixing with an underscore: `_x`
  ┌─ tests/variable-coalescing/self_assigns.move:3:9
  │
3 │         x = x;
  │         ^^^^^

============ after DeadStoreElimination: ================

[variant baseline]
public fun m::test1($t0: u64) {
  0: return ()
}


[variant baseline]
public fun m::test2($t0: u64): u64 {
     var $t1: u64
  0: $t1 := move($t0)
  1: return $t1
}


[variant baseline]
public fun m::test3(): u64 {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
  0: $t1 := 0
  1: $t2 := 1
  2: label L0
  3: $t4 := copy($t1)
  4: $t5 := 42
  5: $t3 := <($t4, $t5)
  6: if ($t3) goto 7 else goto 13
  7: label L2
  8: $t7 := move($t1)
  9: $t8 := 1
 10: $t6 := +($t7, $t8)
 11: $t1 := move($t6)
 12: goto 2
 13: label L3
 14: $t0 := move($t2)
 15: return $t0
}


[variant baseline]
public fun m::test4($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
  0: $t2 := 0
  1: label L0
  2: $t4 := copy($t2)
  3: $t5 := 42
  4: $t3 := <($t4, $t5)
  5: if ($t3) goto 6 else goto 12
  6: label L2
  7: $t7 := move($t2)
  8: $t8 := 1
  9: $t6 := +($t7, $t8)
 10: $t2 := move($t6)
 11: goto 1
 12: label L3
 13: $t1 := move($t0)
 14: return $t1
}

============ after VariableCoalescingAnnotator: ================

[variant baseline]
public fun m::test1($t0: u64) {
     # live vars: $t0
     # events: b:$t0, e:$t0
  0: return ()
}


[variant baseline]
public fun m::test2($t0: u64): u64 {
     var $t1: u64
     # live vars: $t0
     # events: b:$t0, e:$t0, b:$t1
  0: $t1 := move($t0)
     # live vars: $t1
     # events: e:$t1
  1: return $t1
}


[variant baseline]
public fun m::test3(): u64 {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
     # live vars:
     # events: b:$t1
  0: $t1 := 0
     # live vars: $t1
     # events: b:$t2
  1: $t2 := 1
     # live vars: $t1, $t2
  2: label L0
     # live vars: $t1, $t2
     # events: b:$t4
  3: $t4 := copy($t1)
     # live vars: $t1, $t2, $t4
     # events: b:$t5
  4: $t5 := 42
     # live vars: $t1, $t2, $t4, $t5
     # events: e:$t4, e:$t5, b:$t3
  5: $t3 := <($t4, $t5)
     # live vars: $t1, $t2, $t3
     # events: e:$t3
  6: if ($t3) goto 7 else goto 13
     # live vars: $t1, $t2
  7: label L2
     # live vars: $t1, $t2
     # events: b:$t7
  8: $t7 := move($t1)
     # live vars: $t2, $t7
     # events: b:$t8
  9: $t8 := 1
     # live vars: $t2, $t7, $t8
     # events: e:$t7, e:$t8, b:$t6
 10: $t6 := +($t7, $t8)
     # live vars: $t2, $t6
     # events: e:$t6
 11: $t1 := move($t6)
     # live vars: $t1, $t2
 12: goto 2
     # live vars: $t1, $t2
     # events: e:$t1
 13: label L3
     # live vars: $t2
     # events: e:$t2, b:$t0
 14: $t0 := move($t2)
     # live vars: $t0
     # events: e:$t0
 15: return $t0
}


[variant baseline]
public fun m::test4($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
     # live vars: $t0
     # events: b:$t0, b:$t2
  0: $t2 := 0
     # live vars: $t0, $t2
  1: label L0
     # live vars: $t0, $t2
     # events: b:$t4
  2: $t4 := copy($t2)
     # live vars: $t0, $t2, $t4
     # events: b:$t5
  3: $t5 := 42
     # live vars: $t0, $t2, $t4, $t5
     # events: e:$t4, e:$t5, b:$t3
  4: $t3 := <($t4, $t5)
     # live vars: $t0, $t2, $t3
     # events: e:$t3
  5: if ($t3) goto 6 else goto 12
     # live vars: $t0, $t2
  6: label L2
     # live vars: $t0, $t2
     # events: b:$t7
  7: $t7 := move($t2)
     # live vars: $t0, $t7
     # events: b:$t8
  8: $t8 := 1
     # live vars: $t0, $t7, $t8
     # events: e:$t7, e:$t8, b:$t6
  9: $t6 := +($t7, $t8)
     # live vars: $t0, $t6
     # events: e:$t6
 10: $t2 := move($t6)
     # live vars: $t0, $t2
 11: goto 1
     # live vars: $t0, $t2
     # events: e:$t2
 12: label L3
     # live vars: $t0
     # events: e:$t0, b:$t1
 13: $t1 := move($t0)
     # live vars: $t1
     # events: e:$t1
 14: return $t1
}

============ after VariableCoalescingTransformer: ================

[variant baseline]
public fun m::test1($t0: u64) {
  0: return ()
}


[variant baseline]
public fun m::test2($t0: u64): u64 {
     var $t1: u64 [unused]
  0: $t0 := move($t0)
  1: return $t0
}


[variant baseline]
public fun m::test3(): u64 {
     var $t0: u64 [unused]
     var $t1: u64
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: u64
     var $t6: u64 [unused]
     var $t7: u64 [unused]
     var $t8: u64 [unused]
  0: $t1 := 0
  1: $t2 := 1
  2: label L0
  3: $t4 := copy($t1)
  4: $t5 := 42
  5: $t3 := <($t4, $t5)
  6: if ($t3) goto 7 else goto 13
  7: label L2
  8: $t4 := move($t1)
  9: $t5 := 1
 10: $t4 := +($t4, $t5)
 11: $t1 := move($t4)
 12: goto 2
 13: label L3
 14: $t2 := move($t2)
 15: return $t2
}


[variant baseline]
public fun m::test4($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: u64
     var $t6: u64 [unused]
     var $t7: u64 [unused]
     var $t8: u64 [unused]
  0: $t2 := 0
  1: label L0
  2: $t4 := copy($t2)
  3: $t5 := 42
  4: $t3 := <($t4, $t5)
  5: if ($t3) goto 6 else goto 12
  6: label L2
  7: $t4 := move($t2)
  8: $t5 := 1
  9: $t4 := +($t4, $t5)
 10: $t2 := move($t4)
 11: goto 1
 12: label L3
 13: $t0 := move($t0)
 14: return $t0
}

============ after DeadStoreElimination: ================

[variant baseline]
public fun m::test1($t0: u64) {
  0: return ()
}


[variant baseline]
public fun m::test2($t0: u64): u64 {
     var $t1: u64 [unused]
  0: $t0 := move($t0)
  1: return $t0
}


[variant baseline]
public fun m::test3(): u64 {
     var $t0: u64 [unused]
     var $t1: u64
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: u64
     var $t6: u64 [unused]
     var $t7: u64 [unused]
     var $t8: u64 [unused]
  0: $t1 := 0
  1: $t2 := 1
  2: label L0
  3: $t4 := copy($t1)
  4: $t5 := 42
  5: $t3 := <($t4, $t5)
  6: if ($t3) goto 7 else goto 13
  7: label L2
  8: $t4 := move($t1)
  9: $t5 := 1
 10: $t4 := +($t4, $t5)
 11: $t1 := move($t4)
 12: goto 2
 13: label L3
 14: $t2 := move($t2)
 15: return $t2
}


[variant baseline]
public fun m::test4($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: u64
     var $t6: u64 [unused]
     var $t7: u64 [unused]
     var $t8: u64 [unused]
  0: $t2 := 0
  1: label L0
  2: $t4 := copy($t2)
  3: $t5 := 42
  4: $t3 := <($t4, $t5)
  5: if ($t3) goto 6 else goto 12
  6: label L2
  7: $t4 := move($t2)
  8: $t5 := 1
  9: $t4 := +($t4, $t5)
 10: $t2 := move($t4)
 11: goto 1
 12: label L3
 13: $t0 := move($t0)
 14: return $t0
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


public test1(Arg0: u64) /* def_idx: 0 */ {
B0:
	0: Ret
}
public test2(Arg0: u64): u64 /* def_idx: 1 */ {
B0:
	0: MoveLoc[0](Arg0: u64)
	1: Ret
}
public test3(): u64 /* def_idx: 2 */ {
L0:	loc0: u64
L1:	loc1: u64
B0:
	0: LdU64(0)
	1: StLoc[0](loc0: u64)
	2: LdU64(1)
	3: StLoc[1](loc1: u64)
B1:
	4: CopyLoc[0](loc0: u64)
	5: LdU64(42)
	6: Lt
	7: BrFalse(13)
B2:
	8: MoveLoc[0](loc0: u64)
	9: LdU64(1)
	10: Add
	11: StLoc[0](loc0: u64)
	12: Branch(4)
B3:
	13: MoveLoc[1](loc1: u64)
	14: Ret
}
public test4(Arg0: u64): u64 /* def_idx: 3 */ {
L1:	loc0: u64
B0:
	0: LdU64(0)
	1: StLoc[1](loc0: u64)
B1:
	2: CopyLoc[1](loc0: u64)
	3: LdU64(42)
	4: Lt
	5: BrFalse(11)
B2:
	6: MoveLoc[1](loc0: u64)
	7: LdU64(1)
	8: Add
	9: StLoc[1](loc0: u64)
	10: Branch(2)
B3:
	11: MoveLoc[0](Arg0: u64)
	12: Ret
}
}
============ bytecode verification succeeded ========
