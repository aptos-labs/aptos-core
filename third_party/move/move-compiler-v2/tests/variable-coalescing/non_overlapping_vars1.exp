============ initial bytecode ================

[variant baseline]
fun m::test() {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
  0: $t0 := 1
  1: $t2 := infer($t0)
  2: $t3 := 1
  3: $t1 := +($t2, $t3)
  4: $t0 := infer($t1)
  5: $t4 := 2
  6: $t6 := infer($t4)
  7: $t7 := 1
  8: $t5 := +($t6, $t7)
  9: $t4 := infer($t5)
 10: return ()
}


Diagnostics:
warning: Unused assignment to `x`. Consider removing or prefixing with an underscore: `_x`
  ┌─ tests/variable-coalescing/non_overlapping_vars1.move:4:9
  │
4 │         x = x + 1;
  │         ^^^^^^^^^

warning: Unused assignment to `y`. Consider removing or prefixing with an underscore: `_y`
  ┌─ tests/variable-coalescing/non_overlapping_vars1.move:6:9
  │
6 │         y = y + 1;
  │         ^^^^^^^^^

============ after DeadStoreElimination: ================

[variant baseline]
fun m::test() {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
  0: $t0 := 1
  1: $t2 := move($t0)
  2: $t3 := 1
  3: $t1 := +($t2, $t3)
  4: $t4 := 2
  5: $t6 := move($t4)
  6: $t7 := 1
  7: $t5 := +($t6, $t7)
  8: return ()
}

============ after VariableCoalescingAnnotator: ================

[variant baseline]
fun m::test() {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
     # live vars:
     # events: b:$t0
  0: $t0 := 1
     # live vars: $t0
     # events: e:$t0, b:$t2
  1: $t2 := move($t0)
     # live vars: $t2
     # events: b:$t3
  2: $t3 := 1
     # live vars: $t2, $t3
     # events: e:$t1, e:$t2, e:$t3, b:$t1
  3: $t1 := +($t2, $t3)
     # live vars:
     # events: b:$t4
  4: $t4 := 2
     # live vars: $t4
     # events: e:$t4, b:$t6
  5: $t6 := move($t4)
     # live vars: $t6
     # events: b:$t7
  6: $t7 := 1
     # live vars: $t6, $t7
     # events: e:$t5, e:$t6, e:$t7, b:$t5
  7: $t5 := +($t6, $t7)
     # live vars:
  8: return ()
}

============ after VariableCoalescingTransformer: ================

[variant baseline]
fun m::test() {
     var $t0: u64
     var $t1: u64
     var $t2: u64 [unused]
     var $t3: u64
     var $t4: u64 [unused]
     var $t5: u64 [unused]
     var $t6: u64 [unused]
     var $t7: u64 [unused]
  0: $t0 := 1
  1: $t0 := move($t0)
  2: $t3 := 1
  3: $t0 := +($t0, $t3)
  4: $t1 := 2
  5: $t1 := move($t1)
  6: $t3 := 1
  7: $t1 := +($t1, $t3)
  8: return ()
}

============ after DeadStoreElimination: ================

[variant baseline]
fun m::test() {
     var $t0: u64
     var $t1: u64
     var $t2: u64 [unused]
     var $t3: u64
     var $t4: u64 [unused]
     var $t5: u64 [unused]
     var $t6: u64 [unused]
     var $t7: u64 [unused]
  0: $t0 := 1
  1: $t3 := 1
  2: $t0 := +($t0, $t3)
  3: $t1 := 2
  4: $t3 := 1
  5: $t1 := +($t1, $t3)
  6: return ()
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


test() /* def_idx: 0 */ {
B0:
	0: LdU64(1)
	1: LdU64(1)
	2: Add
	3: Pop
	4: LdU64(2)
	5: LdU64(1)
	6: Add
	7: Pop
	8: Ret
}
}
============ bytecode verification succeeded ========
