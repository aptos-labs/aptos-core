============ initial bytecode ================

[variant baseline]
fun m::consume($t0: u32) {
  0: return ()
}


[variant baseline]
fun m::consume_($t0: 0xc0ffee::m::W) {
  0: return ()
}


[variant baseline]
public fun m::test($t0: bool, $t1: u32) {
     var $t2: u32
     var $t3: bool
  0: $t2 := copy($t1)
  1: if ($t0) goto 2 else goto 5
  2: label L0
  3: m::consume($t2)
  4: goto 7
  5: label L1
  6: m::consume($t1)
  7: label L2
  8: $t3 := !($t0)
  9: if ($t3) goto 10 else goto 13
 10: label L3
 11: m::consume($t1)
 12: goto 15
 13: label L4
 14: m::consume($t2)
 15: label L5
 16: return ()
}


[variant baseline]
public fun m::test_struct($t0: bool, $t1: 0xc0ffee::m::W) {
     var $t2: 0xc0ffee::m::W
     var $t3: bool
  0: $t2 := copy($t1)
  1: if ($t0) goto 2 else goto 5
  2: label L0
  3: m::consume_($t2)
  4: goto 7
  5: label L1
  6: m::consume_($t1)
  7: label L2
  8: $t3 := !($t0)
  9: if ($t3) goto 10 else goto 13
 10: label L3
 11: m::consume_($t1)
 12: goto 15
 13: label L4
 14: m::consume_($t2)
 15: label L5
 16: return ()
}

============ after DeadStoreElimination: ================

[variant baseline]
fun m::consume($t0: u32) {
  0: return ()
}


[variant baseline]
fun m::consume_($t0: 0xc0ffee::m::W) {
  0: return ()
}


[variant baseline]
public fun m::test($t0: bool, $t1: u32) {
     var $t2: u32
     var $t3: bool
  0: $t2 := copy($t1)
  1: if ($t0) goto 2 else goto 14
  2: label L0
  3: m::consume($t2)
  4: label L2
  5: $t3 := !($t0)
  6: if ($t3) goto 7 else goto 11
  7: label L3
  8: m::consume($t1)
  9: label L5
 10: return ()
 11: label L4
 12: m::consume($t2)
 13: goto 9
 14: label L1
 15: m::consume($t1)
 16: goto 4
}


[variant baseline]
public fun m::test_struct($t0: bool, $t1: 0xc0ffee::m::W) {
     var $t2: 0xc0ffee::m::W
     var $t3: bool
  0: $t2 := copy($t1)
  1: if ($t0) goto 2 else goto 14
  2: label L0
  3: m::consume_($t2)
  4: label L2
  5: $t3 := !($t0)
  6: if ($t3) goto 7 else goto 11
  7: label L3
  8: m::consume_($t1)
  9: label L5
 10: return ()
 11: label L4
 12: m::consume_($t2)
 13: goto 9
 14: label L1
 15: m::consume_($t1)
 16: goto 4
}

============ after VariableCoalescingAnnotator: ================

[variant baseline]
fun m::consume($t0: u32) {
     # live vars: $t0
     # events: b:$t0, e:$t0
  0: return ()
}


[variant baseline]
fun m::consume_($t0: 0xc0ffee::m::W) {
     # live vars: $t0
     # events: b:$t0, e:$t0
  0: return ()
}


[variant baseline]
public fun m::test($t0: bool, $t1: u32) {
     var $t2: u32
     var $t3: bool
     # live vars: $t0, $t1
     # events: b:$t0, b:$t1, b:$t2
  0: $t2 := copy($t1)
     # live vars: $t0, $t1, $t2
  1: if ($t0) goto 2 else goto 14
     # live vars: $t0, $t1, $t2
  2: label L0
     # live vars: $t0, $t1, $t2
  3: m::consume($t2)
     # live vars: $t0, $t1, $t2
  4: label L2
     # live vars: $t0, $t1, $t2
     # events: b:$t3
  5: $t3 := !($t0)
     # live vars: $t1, $t2, $t3
     # events: e:$t3
  6: if ($t3) goto 7 else goto 11
     # live vars: $t1, $t2
  7: label L3
     # live vars: $t1
  8: m::consume($t1)
     # live vars:
  9: label L5
     # live vars:
 10: return ()
     # live vars: $t1, $t2
 11: label L4
     # live vars: $t2
 12: m::consume($t2)
     # live vars:
 13: goto 9
     # live vars: $t0, $t1, $t2
 14: label L1
     # live vars: $t0, $t1, $t2
 15: m::consume($t1)
     # live vars: $t0, $t1, $t2
     # events: e:$t0, e:$t1, e:$t2
 16: goto 4
}


[variant baseline]
public fun m::test_struct($t0: bool, $t1: 0xc0ffee::m::W) {
     var $t2: 0xc0ffee::m::W
     var $t3: bool
     # live vars: $t0, $t1
     # events: b:$t0, b:$t1, b:$t2
  0: $t2 := copy($t1)
     # live vars: $t0, $t1, $t2
  1: if ($t0) goto 2 else goto 14
     # live vars: $t0, $t1, $t2
  2: label L0
     # live vars: $t0, $t1, $t2
  3: m::consume_($t2)
     # live vars: $t0, $t1, $t2
  4: label L2
     # live vars: $t0, $t1, $t2
     # events: b:$t3
  5: $t3 := !($t0)
     # live vars: $t1, $t2, $t3
     # events: e:$t3
  6: if ($t3) goto 7 else goto 11
     # live vars: $t1, $t2
  7: label L3
     # live vars: $t1
  8: m::consume_($t1)
     # live vars:
  9: label L5
     # live vars:
 10: return ()
     # live vars: $t1, $t2
 11: label L4
     # live vars: $t2
 12: m::consume_($t2)
     # live vars:
 13: goto 9
     # live vars: $t0, $t1, $t2
 14: label L1
     # live vars: $t0, $t1, $t2
 15: m::consume_($t1)
     # live vars: $t0, $t1, $t2
     # events: e:$t0, e:$t1, e:$t2
 16: goto 4
}

============ after VariableCoalescingTransformer: ================

[variant baseline]
fun m::consume($t0: u32) {
  0: return ()
}


[variant baseline]
fun m::consume_($t0: 0xc0ffee::m::W) {
  0: return ()
}


[variant baseline]
public fun m::test($t0: bool, $t1: u32) {
     var $t2: u32
     var $t3: bool
  0: $t2 := copy($t1)
  1: if ($t0) goto 2 else goto 14
  2: label L0
  3: m::consume($t2)
  4: label L2
  5: $t3 := !($t0)
  6: if ($t3) goto 7 else goto 11
  7: label L3
  8: m::consume($t1)
  9: label L5
 10: return ()
 11: label L4
 12: m::consume($t2)
 13: goto 9
 14: label L1
 15: m::consume($t1)
 16: goto 4
}


[variant baseline]
public fun m::test_struct($t0: bool, $t1: 0xc0ffee::m::W) {
     var $t2: 0xc0ffee::m::W
     var $t3: bool
  0: $t2 := copy($t1)
  1: if ($t0) goto 2 else goto 14
  2: label L0
  3: m::consume_($t2)
  4: label L2
  5: $t3 := !($t0)
  6: if ($t3) goto 7 else goto 11
  7: label L3
  8: m::consume_($t1)
  9: label L5
 10: return ()
 11: label L4
 12: m::consume_($t2)
 13: goto 9
 14: label L1
 15: m::consume_($t1)
 16: goto 4
}

============ after DeadStoreElimination: ================

[variant baseline]
fun m::consume($t0: u32) {
  0: return ()
}


[variant baseline]
fun m::consume_($t0: 0xc0ffee::m::W) {
  0: return ()
}


[variant baseline]
public fun m::test($t0: bool, $t1: u32) {
     var $t2: u32
     var $t3: bool
  0: $t2 := copy($t1)
  1: if ($t0) goto 2 else goto 14
  2: label L0
  3: m::consume($t2)
  4: label L2
  5: $t3 := !($t0)
  6: if ($t3) goto 7 else goto 11
  7: label L3
  8: m::consume($t1)
  9: label L5
 10: return ()
 11: label L4
 12: m::consume($t2)
 13: goto 9
 14: label L1
 15: m::consume($t1)
 16: goto 4
}


[variant baseline]
public fun m::test_struct($t0: bool, $t1: 0xc0ffee::m::W) {
     var $t2: 0xc0ffee::m::W
     var $t3: bool
  0: $t2 := copy($t1)
  1: if ($t0) goto 2 else goto 14
  2: label L0
  3: m::consume_($t2)
  4: label L2
  5: $t3 := !($t0)
  6: if ($t3) goto 7 else goto 11
  7: label L3
  8: m::consume_($t1)
  9: label L5
 10: return ()
 11: label L4
 12: m::consume_($t2)
 13: goto 9
 14: label L1
 15: m::consume_($t1)
 16: goto 4
}


============ disassembled file-format ==================
// Move bytecode v8
module c0ffee.m {
struct W has copy, drop {
	x: u32
}

consume(Arg0: u32) /* def_idx: 0 */ {
B0:
	0: Ret
}
consume_(Arg0: W) /* def_idx: 1 */ {
B0:
	0: Ret
}
public test(Arg0: bool, Arg1: u32) /* def_idx: 2 */ {
L2:	loc0: u32
B0:
	0: CopyLoc[1](Arg1: u32)
	1: StLoc[2](loc0: u32)
	2: CopyLoc[0](Arg0: bool)
	3: BrFalse(14)
B1:
	4: CopyLoc[2](loc0: u32)
	5: Call consume(u32)
B2:
	6: MoveLoc[0](Arg0: bool)
	7: BrTrue(11)
B3:
	8: MoveLoc[1](Arg1: u32)
	9: Call consume(u32)
B4:
	10: Ret
B5:
	11: MoveLoc[2](loc0: u32)
	12: Call consume(u32)
	13: Branch(10)
B6:
	14: CopyLoc[1](Arg1: u32)
	15: Call consume(u32)
	16: Branch(6)
}
public test_struct(Arg0: bool, Arg1: W) /* def_idx: 3 */ {
L2:	loc0: W
B0:
	0: CopyLoc[1](Arg1: W)
	1: StLoc[2](loc0: W)
	2: CopyLoc[0](Arg0: bool)
	3: BrFalse(14)
B1:
	4: CopyLoc[2](loc0: W)
	5: Call consume_(W)
B2:
	6: MoveLoc[0](Arg0: bool)
	7: BrTrue(11)
B3:
	8: MoveLoc[1](Arg1: W)
	9: Call consume_(W)
B4:
	10: Ret
B5:
	11: MoveLoc[2](loc0: W)
	12: Call consume_(W)
	13: Branch(10)
B6:
	14: CopyLoc[1](Arg1: W)
	15: Call consume_(W)
	16: Branch(6)
}
}
============ bytecode verification succeeded ========
