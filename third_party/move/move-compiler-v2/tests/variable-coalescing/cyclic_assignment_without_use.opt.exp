============ bytecode before first stackless bytecode pipeline ================

[variant baseline]
public fun m::test($t0: u64) {
     var $t1: u64
     var $t2: u64
     var $t3: u64
  0: $t1 := infer($t0)
  1: $t2 := infer($t1)
  2: $t3 := infer($t2)
  3: $t1 := infer($t3)
  4: return ()
}


Diagnostics:
warning: This assignment/binding to the left-hand-side variable `a` is unused. Consider removing this assignment/binding, or prefixing the left-hand-side variable with an underscore (e.g., `_a`), or renaming to `_`
  ┌─ tests/variable-coalescing/cyclic_assignment_without_use.move:6:9
  │
6 │         a = c;
  │         ^^^^^

============ bytecode before second stackless bytecode pipeline ================

[variant baseline]
public fun m::test($t0: u64) {
     var $t1: u64
     var $t2: u64
     var $t3: u64
  0: $t1 := infer($t0)
  1: $t2 := infer($t1)
  2: $t3 := infer($t2)
  3: $t1 := infer($t3)
  4: return ()
}

============ after DeadStoreElimination: ================

[variant baseline]
public fun m::test($t0: u64) {
     var $t1: u64 [unused]
     var $t2: u64 [unused]
     var $t3: u64 [unused]
  0: return ()
}

============ after VariableCoalescingAnnotator: ================

[variant baseline]
public fun m::test($t0: u64) {
     var $t1: u64 [unused]
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     # live vars: $t0
     # events: b:$t0, e:$t0
  0: return ()
}

============ after VariableCoalescingTransformer: ================

[variant baseline]
public fun m::test($t0: u64) {
     var $t1: u64 [unused]
     var $t2: u64 [unused]
     var $t3: u64 [unused]
  0: return ()
}

============ after DeadStoreElimination: ================

[variant baseline]
public fun m::test($t0: u64) {
     var $t1: u64 [unused]
     var $t2: u64 [unused]
     var $t3: u64 [unused]
  0: return ()
}


============ disassembled file-format ==================
// Move bytecode v8
module c0ffee.m {


public test(x: u64) /* def_idx: 0 */ {
B0:
	0: Ret
}
}
============ bytecode verification succeeded ========
