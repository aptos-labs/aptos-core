============ initial bytecode ================

[variant baseline]
fun m::add($t0: u64, $t1: u64): u64 {
     var $t2: u64
     var $t3: u64
  0: $t3 := infer($t0)
  1: $t2 := +($t3, $t1)
  2: return $t2
}


[variant baseline]
public fun m::test($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
  0: $t2 := infer($t0)
  1: $t5 := infer($t0)
  2: $t6 := 1
  3: $t4 := +($t5, $t6)
  4: $t0 := infer($t4)
  5: $t3 := infer($t0)
  6: $t1 := m::add($t2, $t3)
  7: return $t1
}

============ after DeadStoreElimination: ================

[variant baseline]
fun m::add($t0: u64, $t1: u64): u64 {
     var $t2: u64
     var $t3: u64
  0: $t3 := move($t0)
  1: $t2 := +($t3, $t1)
  2: return $t2
}


[variant baseline]
public fun m::test($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
  0: $t2 := copy($t0)
  1: $t5 := move($t0)
  2: $t6 := 1
  3: $t4 := +($t5, $t6)
  4: $t0 := move($t4)
  5: $t3 := move($t0)
  6: $t1 := m::add($t2, $t3)
  7: return $t1
}

============ after VariableCoalescingAnnotator: ================

[variant baseline]
fun m::add($t0: u64, $t1: u64): u64 {
     var $t2: u64
     var $t3: u64
     # live vars: $t0, $t1
     # events: b:$t0, b:$t1, e:$t0, b:$t3
  0: $t3 := move($t0)
     # live vars: $t1, $t3
     # events: e:$t1, e:$t3, b:$t2
  1: $t2 := +($t3, $t1)
     # live vars: $t2
     # events: e:$t2
  2: return $t2
}


[variant baseline]
public fun m::test($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     # live vars: $t0
     # events: b:$t0, b:$t2
  0: $t2 := copy($t0)
     # live vars: $t0, $t2
     # events: b:$t5
  1: $t5 := move($t0)
     # live vars: $t2, $t5
     # events: b:$t6
  2: $t6 := 1
     # live vars: $t2, $t5, $t6
     # events: e:$t5, e:$t6, b:$t4
  3: $t4 := +($t5, $t6)
     # live vars: $t2, $t4
     # events: e:$t4
  4: $t0 := move($t4)
     # live vars: $t0, $t2
     # events: e:$t0, b:$t3
  5: $t3 := move($t0)
     # live vars: $t2, $t3
     # events: e:$t2, e:$t3, b:$t1
  6: $t1 := m::add($t2, $t3)
     # live vars: $t1
     # events: e:$t1
  7: return $t1
}

============ after VariableCoalescingTransformer: ================

[variant baseline]
fun m::add($t0: u64, $t1: u64): u64 {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
  0: $t0 := move($t0)
  1: $t0 := +($t0, $t1)
  2: return $t0
}


[variant baseline]
public fun m::test($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: u64
     var $t3: u64 [unused]
     var $t4: u64 [unused]
     var $t5: u64
     var $t6: u64
  0: $t2 := copy($t0)
  1: $t5 := move($t0)
  2: $t6 := 1
  3: $t5 := +($t5, $t6)
  4: $t0 := move($t5)
  5: $t0 := move($t0)
  6: $t0 := m::add($t2, $t0)
  7: return $t0
}

============ after DeadStoreElimination: ================

[variant baseline]
fun m::add($t0: u64, $t1: u64): u64 {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
  0: $t0 := move($t0)
  1: $t0 := +($t0, $t1)
  2: return $t0
}


[variant baseline]
public fun m::test($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: u64
     var $t3: u64 [unused]
     var $t4: u64 [unused]
     var $t5: u64
     var $t6: u64
  0: $t2 := copy($t0)
  1: $t5 := move($t0)
  2: $t6 := 1
  3: $t5 := +($t5, $t6)
  4: $t0 := move($t5)
  5: $t0 := m::add($t2, $t0)
  6: return $t0
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


add(Arg0: u64, Arg1: u64): u64 /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](Arg0: u64)
	1: MoveLoc[1](Arg1: u64)
	2: Add
	3: Ret
}
public test(Arg0: u64): u64 /* def_idx: 1 */ {
B0:
	0: CopyLoc[0](Arg0: u64)
	1: MoveLoc[0](Arg0: u64)
	2: LdU64(1)
	3: Add
	4: Call add(u64, u64): u64
	5: Ret
}
}
============ bytecode verification succeeded ========
