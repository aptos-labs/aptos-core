============ initial bytecode ================

[variant baseline]
fun m::consume($t0: u64) {
     var $t1: u64
  0: $t1 := infer($t0)
  1: return ()
}


[variant baseline]
fun m::test($t0: u64, $t1: bool) {
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
  0: $t2 := move($t0)
  1: if ($t1) goto 2 else goto 5
  2: label L0
  3: m::consume($t2)
  4: goto 13
  5: label L1
  6: $t3 := 99
  7: $t0 := infer($t3)
  8: $t4 := infer($t2)
  9: $t6 := infer($t4)
 10: $t7 := 1
 11: $t5 := +($t6, $t7)
 12: $t4 := infer($t5)
 13: label L2
 14: return ()
}


Diagnostics:
warning: Unused assignment to `a`. Consider removing or prefixing with an underscore: `_a`
   ┌─ tests/variable-coalescing/cant_copy_propagate.move:11:13
   │
11 │             a = 99;
   │             ^^^^^^

warning: Unused assignment to `c`. Consider removing or prefixing with an underscore: `_c`
   ┌─ tests/variable-coalescing/cant_copy_propagate.move:13:13
   │
13 │             c = c + 1;
   │             ^^^^^^^^^

============ after DeadStoreElimination: ================

[variant baseline]
fun m::consume($t0: u64) {
     var $t1: u64 [unused]
  0: return ()
}


[variant baseline]
fun m::test($t0: u64, $t1: bool) {
     var $t2: u64
     var $t3: u64 [unused]
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
  0: $t2 := move($t0)
  1: if ($t1) goto 2 else goto 6
  2: label L0
  3: m::consume($t2)
  4: label L2
  5: return ()
  6: label L1
  7: $t4 := move($t2)
  8: $t6 := move($t4)
  9: $t7 := 1
 10: $t5 := +($t6, $t7)
 11: goto 4
}

============ after VariableCoalescingAnnotator: ================

[variant baseline]
fun m::consume($t0: u64) {
     var $t1: u64 [unused]
     # live vars: $t0
     # events: b:$t0, e:$t0
  0: return ()
}


[variant baseline]
fun m::test($t0: u64, $t1: bool) {
     var $t2: u64
     var $t3: u64 [unused]
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
     # live vars: $t0, $t1
     # events: b:$t0, b:$t1, e:$t0, b:$t2
  0: $t2 := move($t0)
     # live vars: $t1, $t2
     # events: e:$t1
  1: if ($t1) goto 2 else goto 6
     # live vars: $t2
  2: label L0
     # live vars: $t2
  3: m::consume($t2)
     # live vars:
  4: label L2
     # live vars:
  5: return ()
     # live vars: $t2
  6: label L1
     # live vars: $t2
     # events: e:$t2, b:$t4
  7: $t4 := move($t2)
     # live vars: $t4
     # events: e:$t4, b:$t6
  8: $t6 := move($t4)
     # live vars: $t6
     # events: b:$t7
  9: $t7 := 1
     # live vars: $t6, $t7
     # events: e:$t5, e:$t6, e:$t7, b:$t5
 10: $t5 := +($t6, $t7)
     # live vars:
 11: goto 4
}

============ after VariableCoalescingTransformer: ================

[variant baseline]
fun m::consume($t0: u64) {
     var $t1: u64 [unused]
  0: return ()
}


[variant baseline]
fun m::test($t0: u64, $t1: bool) {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     var $t4: u64 [unused]
     var $t5: u64 [unused]
     var $t6: u64 [unused]
     var $t7: u64
  0: $t0 := move($t0)
  1: if ($t1) goto 2 else goto 6
  2: label L0
  3: m::consume($t0)
  4: label L2
  5: return ()
  6: label L1
  7: $t0 := move($t0)
  8: $t0 := move($t0)
  9: $t7 := 1
 10: $t0 := +($t0, $t7)
 11: goto 4
}

============ after DeadStoreElimination: ================

[variant baseline]
fun m::consume($t0: u64) {
     var $t1: u64 [unused]
  0: return ()
}


[variant baseline]
fun m::test($t0: u64, $t1: bool) {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     var $t4: u64 [unused]
     var $t5: u64 [unused]
     var $t6: u64 [unused]
     var $t7: u64
  0: $t0 := move($t0)
  1: if ($t1) goto 2 else goto 6
  2: label L0
  3: m::consume($t0)
  4: label L2
  5: return ()
  6: label L1
  7: $t0 := move($t0)
  8: $t7 := 1
  9: $t0 := +($t0, $t7)
 10: goto 4
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


consume(Arg0: u64) /* def_idx: 0 */ {
B0:
	0: Ret
}
test(Arg0: u64, Arg1: bool) /* def_idx: 1 */ {
B0:
	0: MoveLoc[1](Arg1: bool)
	1: BrFalse(5)
B1:
	2: MoveLoc[0](Arg0: u64)
	3: Call consume(u64)
B2:
	4: Ret
B3:
	5: MoveLoc[0](Arg0: u64)
	6: LdU64(1)
	7: Add
	8: Pop
	9: Branch(4)
}
}
============ bytecode verification succeeded ========
