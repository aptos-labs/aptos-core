
Diagnostics:
warning: Unused local variable `x`. Consider removing or prefixing with an underscore: `_x`
  ┌─ tests/variable-coalescing/dead_assignment_4.move:3:13
  │
3 │         let x = 1;
  │             ^

warning: Unused local variable `x`. Consider removing or prefixing with an underscore: `_x`
  ┌─ tests/variable-coalescing/dead_assignment_4.move:9:13
  │
9 │         let x = y;
  │             ^

warning: Unused local variable `x`. Consider removing or prefixing with an underscore: `_x`
   ┌─ tests/variable-coalescing/dead_assignment_4.move:14:13
   │
14 │         let x = y;
   │             ^

warning: Unused parameter `y`. Consider removing or prefixing with an underscore: `_y`
   ┌─ tests/variable-coalescing/dead_assignment_4.move:18:22
   │
18 │     public fun test4(y: u64): u64 {
   │                      ^

============ initial bytecode ================

[variant baseline]
public fun m::test1(): u64 {
     var $t0: u64
  0: $t0 := 3
  1: return $t0
}


[variant baseline]
public fun m::test2($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
  0: $t2 := infer($t0)
  1: $t1 := infer($t0)
  2: return $t1
}


[variant baseline]
public fun m::test3($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
  0: $t2 := infer($t0)
  1: $t1 := 8
  2: return $t1
}


[variant baseline]
public fun m::test4($t0: u64): u64 {
     var $t1: u64
  0: $t1 := 1
  1: return $t1
}


Diagnostics:
warning: Unused assignment to `x`. Consider removing or prefixing with an underscore: `_x`
  ┌─ tests/variable-coalescing/dead_assignment_4.move:9:17
  │
9 │         let x = y;
  │                 ^

warning: Unused assignment to `x`. Consider removing or prefixing with an underscore: `_x`
   ┌─ tests/variable-coalescing/dead_assignment_4.move:14:17
   │
14 │         let x = y;
   │                 ^

============ after DeadStoreElimination: ================

[variant baseline]
public fun m::test1(): u64 {
     var $t0: u64
  0: $t0 := 3
  1: return $t0
}


[variant baseline]
public fun m::test2($t0: u64): u64 {
     var $t1: u64
     var $t2: u64 [unused]
  0: $t1 := move($t0)
  1: return $t1
}


[variant baseline]
public fun m::test3($t0: u64): u64 {
     var $t1: u64
     var $t2: u64 [unused]
  0: $t1 := 8
  1: return $t1
}


[variant baseline]
public fun m::test4($t0: u64): u64 {
     var $t1: u64
  0: $t1 := 1
  1: return $t1
}

============ after VariableCoalescingAnnotator: ================

[variant baseline]
public fun m::test1(): u64 {
     var $t0: u64
     # live vars:
     # events: b:$t0
  0: $t0 := 3
     # live vars: $t0
     # events: e:$t0
  1: return $t0
}


[variant baseline]
public fun m::test2($t0: u64): u64 {
     var $t1: u64
     var $t2: u64 [unused]
     # live vars: $t0
     # events: b:$t0, e:$t0, b:$t1
  0: $t1 := move($t0)
     # live vars: $t1
     # events: e:$t1
  1: return $t1
}


[variant baseline]
public fun m::test3($t0: u64): u64 {
     var $t1: u64
     var $t2: u64 [unused]
     # live vars: $t0
     # events: b:$t0, e:$t0, b:$t1
  0: $t1 := 8
     # live vars: $t1
     # events: e:$t1
  1: return $t1
}


[variant baseline]
public fun m::test4($t0: u64): u64 {
     var $t1: u64
     # live vars: $t0
     # events: b:$t0, e:$t0, b:$t1
  0: $t1 := 1
     # live vars: $t1
     # events: e:$t1
  1: return $t1
}

============ after VariableCoalescingTransformer: ================

[variant baseline]
public fun m::test1(): u64 {
     var $t0: u64
  0: $t0 := 3
  1: return $t0
}


[variant baseline]
public fun m::test2($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: u64 [unused]
  0: $t0 := move($t0)
  1: return $t0
}


[variant baseline]
public fun m::test3($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: u64 [unused]
  0: $t0 := 8
  1: return $t0
}


[variant baseline]
public fun m::test4($t0: u64): u64 {
     var $t1: u64 [unused]
  0: $t0 := 1
  1: return $t0
}

============ after DeadStoreElimination: ================

[variant baseline]
public fun m::test1(): u64 {
     var $t0: u64
  0: $t0 := 3
  1: return $t0
}


[variant baseline]
public fun m::test2($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: u64 [unused]
  0: $t0 := move($t0)
  1: return $t0
}


[variant baseline]
public fun m::test3($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: u64 [unused]
  0: $t0 := 8
  1: return $t0
}


[variant baseline]
public fun m::test4($t0: u64): u64 {
     var $t1: u64 [unused]
  0: $t0 := 1
  1: return $t0
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


public test1(): u64 /* def_idx: 0 */ {
B0:
	0: LdU64(3)
	1: Ret
}
public test2(Arg0: u64): u64 /* def_idx: 1 */ {
B0:
	0: MoveLoc[0](Arg0: u64)
	1: Ret
}
public test3(Arg0: u64): u64 /* def_idx: 2 */ {
B0:
	0: LdU64(8)
	1: Ret
}
public test4(Arg0: u64): u64 /* def_idx: 3 */ {
B0:
	0: LdU64(1)
	1: Ret
}
}
============ bytecode verification succeeded ========
