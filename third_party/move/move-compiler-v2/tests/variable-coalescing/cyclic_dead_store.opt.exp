============ initial bytecode ================

[variant baseline]
public fun m::test1($t0: u64, $t1: u64, $t2: u64) {
     var $t3: u64
     var $t4: bool
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
  0: $t3 := 0
  1: label L0
  2: $t5 := infer($t3)
  3: $t4 := <($t5, $t0)
  4: if ($t4) goto 5 else goto 13
  5: label L2
  6: $t1 := infer($t2)
  7: $t2 := infer($t1)
  8: $t7 := infer($t3)
  9: $t8 := 1
 10: $t6 := +($t7, $t8)
 11: $t3 := infer($t6)
 12: goto 15
 13: label L3
 14: goto 17
 15: label L4
 16: goto 1
 17: label L1
 18: return ()
}


[variant baseline]
public fun m::test2($t0: u64, $t1: u64) {
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
  0: $t2 := 0
  1: label L0
  2: $t4 := infer($t2)
  3: $t3 := <($t4, $t0)
  4: if ($t3) goto 5 else goto 12
  5: label L2
  6: $t1 := infer($t1)
  7: $t6 := infer($t2)
  8: $t7 := 1
  9: $t5 := +($t6, $t7)
 10: $t2 := infer($t5)
 11: goto 14
 12: label L3
 13: goto 16
 14: label L4
 15: goto 1
 16: label L1
 17: return ()
}

============ after DeadStoreElimination: ================

[variant baseline]
public fun m::test1($t0: u64, $t1: u64, $t2: u64) {
     var $t3: u64
     var $t4: bool
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
  0: $t3 := 0
  1: label L0
  2: $t5 := copy($t3)
  3: $t4 := <($t5, $t0)
  4: if ($t4) goto 5 else goto 13
  5: label L2
  6: $t1 := move($t2)
  7: $t2 := move($t1)
  8: $t7 := move($t3)
  9: $t8 := 1
 10: $t6 := +($t7, $t8)
 11: $t3 := move($t6)
 12: goto 1
 13: label L3
 14: return ()
}


[variant baseline]
public fun m::test2($t0: u64, $t1: u64) {
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
  0: $t2 := 0
  1: label L0
  2: $t4 := copy($t2)
  3: $t3 := <($t4, $t0)
  4: if ($t3) goto 5 else goto 11
  5: label L2
  6: $t6 := move($t2)
  7: $t7 := 1
  8: $t5 := +($t6, $t7)
  9: $t2 := move($t5)
 10: goto 1
 11: label L3
 12: return ()
}

============ after VariableCoalescingAnnotator: ================

[variant baseline]
public fun m::test1($t0: u64, $t1: u64, $t2: u64) {
     var $t3: u64
     var $t4: bool
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
     # live vars: $t0, $t1, $t2
     # events: b:$t0, b:$t1, b:$t2, b:$t3
  0: $t3 := 0
     # live vars: $t0, $t2, $t3
  1: label L0
     # live vars: $t0, $t2, $t3
     # events: b:$t5
  2: $t5 := copy($t3)
     # live vars: $t0, $t2, $t3, $t5
     # events: e:$t5, b:$t4
  3: $t4 := <($t5, $t0)
     # live vars: $t0, $t2, $t3, $t4
     # events: e:$t4
  4: if ($t4) goto 5 else goto 13
     # live vars: $t0, $t2, $t3
  5: label L2
     # live vars: $t0, $t2, $t3
  6: $t1 := move($t2)
     # live vars: $t0, $t1, $t3
     # events: e:$t1
  7: $t2 := move($t1)
     # live vars: $t0, $t2, $t3
     # events: b:$t7
  8: $t7 := move($t3)
     # live vars: $t0, $t2, $t7
     # events: b:$t8
  9: $t8 := 1
     # live vars: $t0, $t2, $t7, $t8
     # events: e:$t7, e:$t8, b:$t6
 10: $t6 := +($t7, $t8)
     # live vars: $t0, $t2, $t6
     # events: e:$t6
 11: $t3 := move($t6)
     # live vars: $t0, $t2, $t3
 12: goto 1
     # live vars: $t0, $t2, $t3
     # events: e:$t0, e:$t2, e:$t3
 13: label L3
     # live vars:
 14: return ()
}


[variant baseline]
public fun m::test2($t0: u64, $t1: u64) {
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
     # live vars: $t0, $t1
     # events: b:$t0, b:$t1, e:$t1, b:$t2
  0: $t2 := 0
     # live vars: $t0, $t2
  1: label L0
     # live vars: $t0, $t2
     # events: b:$t4
  2: $t4 := copy($t2)
     # live vars: $t0, $t2, $t4
     # events: e:$t4, b:$t3
  3: $t3 := <($t4, $t0)
     # live vars: $t0, $t2, $t3
     # events: e:$t3
  4: if ($t3) goto 5 else goto 11
     # live vars: $t0, $t2
  5: label L2
     # live vars: $t0, $t2
     # events: b:$t6
  6: $t6 := move($t2)
     # live vars: $t0, $t6
     # events: b:$t7
  7: $t7 := 1
     # live vars: $t0, $t6, $t7
     # events: e:$t6, e:$t7, b:$t5
  8: $t5 := +($t6, $t7)
     # live vars: $t0, $t5
     # events: e:$t5
  9: $t2 := move($t5)
     # live vars: $t0, $t2
 10: goto 1
     # live vars: $t0, $t2
     # events: e:$t0, e:$t2
 11: label L3
     # live vars:
 12: return ()
}

============ after VariableCoalescingTransformer: ================

[variant baseline]
public fun m::test1($t0: u64, $t1: u64, $t2: u64) {
     var $t3: u64
     var $t4: bool
     var $t5: u64
     var $t6: u64 [unused]
     var $t7: u64 [unused]
     var $t8: u64 [unused]
  0: $t3 := 0
  1: label L0
  2: $t5 := copy($t3)
  3: $t4 := <($t5, $t0)
  4: if ($t4) goto 5 else goto 13
  5: label L2
  6: $t1 := move($t2)
  7: $t2 := move($t1)
  8: $t1 := move($t3)
  9: $t5 := 1
 10: $t1 := +($t1, $t5)
 11: $t3 := move($t1)
 12: goto 1
 13: label L3
 14: return ()
}


[variant baseline]
public fun m::test2($t0: u64, $t1: u64) {
     var $t2: u64 [unused]
     var $t3: bool
     var $t4: u64
     var $t5: u64 [unused]
     var $t6: u64 [unused]
     var $t7: u64
  0: $t1 := 0
  1: label L0
  2: $t4 := copy($t1)
  3: $t3 := <($t4, $t0)
  4: if ($t3) goto 5 else goto 11
  5: label L2
  6: $t4 := move($t1)
  7: $t7 := 1
  8: $t4 := +($t4, $t7)
  9: $t1 := move($t4)
 10: goto 1
 11: label L3
 12: return ()
}

============ after DeadStoreElimination: ================

[variant baseline]
public fun m::test1($t0: u64, $t1: u64, $t2: u64) {
     var $t3: u64
     var $t4: bool
     var $t5: u64
     var $t6: u64 [unused]
     var $t7: u64 [unused]
     var $t8: u64 [unused]
  0: $t3 := 0
  1: label L0
  2: $t5 := copy($t3)
  3: $t4 := <($t5, $t0)
  4: if ($t4) goto 5 else goto 13
  5: label L2
  6: $t1 := move($t2)
  7: $t2 := move($t1)
  8: $t1 := move($t3)
  9: $t5 := 1
 10: $t1 := +($t1, $t5)
 11: $t3 := move($t1)
 12: goto 1
 13: label L3
 14: return ()
}


[variant baseline]
public fun m::test2($t0: u64, $t1: u64) {
     var $t2: u64 [unused]
     var $t3: bool
     var $t4: u64
     var $t5: u64 [unused]
     var $t6: u64 [unused]
     var $t7: u64
  0: $t1 := 0
  1: label L0
  2: $t4 := copy($t1)
  3: $t3 := <($t4, $t0)
  4: if ($t3) goto 5 else goto 11
  5: label L2
  6: $t4 := move($t1)
  7: $t7 := 1
  8: $t4 := +($t4, $t7)
  9: $t1 := move($t4)
 10: goto 1
 11: label L3
 12: return ()
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


public test1(Arg0: u64, Arg1: u64, Arg2: u64) /* def_idx: 0 */ {
L3:	loc0: u64
B0:
	0: LdU64(0)
	1: StLoc[3](loc0: u64)
B1:
	2: CopyLoc[3](loc0: u64)
	3: CopyLoc[0](Arg0: u64)
	4: Lt
	5: BrFalse(11)
B2:
	6: MoveLoc[3](loc0: u64)
	7: LdU64(1)
	8: Add
	9: StLoc[3](loc0: u64)
	10: Branch(2)
B3:
	11: Ret
}
public test2(Arg0: u64, Arg1: u64) /* def_idx: 1 */ {
B0:
	0: LdU64(0)
	1: StLoc[1](Arg1: u64)
B1:
	2: CopyLoc[1](Arg1: u64)
	3: CopyLoc[0](Arg0: u64)
	4: Lt
	5: BrFalse(11)
B2:
	6: MoveLoc[1](Arg1: u64)
	7: LdU64(1)
	8: Add
	9: StLoc[1](Arg1: u64)
	10: Branch(2)
B3:
	11: Ret
}
}
============ bytecode verification succeeded ========
