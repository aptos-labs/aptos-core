============ initial bytecode ================

[variant baseline]
fun m::consume($t0: u64) {
  0: return ()
}


[variant baseline]
fun m::consume_($t0: 0xc0ffee::m::W) {
  0: return ()
}


[variant baseline]
public fun m::test1($t0: u64) {
     var $t1: u64
  0: $t1 := infer($t0)
  1: m::consume($t0)
  2: m::consume($t1)
  3: return ()
}


[variant baseline]
public fun m::test2($t0: u64) {
     var $t1: u64
  0: $t1 := infer($t0)
  1: m::consume($t1)
  2: m::consume($t0)
  3: return ()
}


[variant baseline]
public fun m::test3($t0: 0xc0ffee::m::W) {
     var $t1: 0xc0ffee::m::W
  0: $t1 := infer($t0)
  1: m::consume_($t0)
  2: m::consume_($t1)
  3: return ()
}


[variant baseline]
public fun m::test4($t0: 0xc0ffee::m::W) {
     var $t1: 0xc0ffee::m::W
  0: $t1 := infer($t0)
  1: m::consume_($t1)
  2: m::consume_($t0)
  3: return ()
}

============ after DeadStoreElimination: ================

[variant baseline]
fun m::consume($t0: u64) {
  0: return ()
}


[variant baseline]
fun m::consume_($t0: 0xc0ffee::m::W) {
  0: return ()
}


[variant baseline]
public fun m::test1($t0: u64) {
     var $t1: u64
  0: $t1 := copy($t0)
  1: m::consume($t0)
  2: m::consume($t1)
  3: return ()
}


[variant baseline]
public fun m::test2($t0: u64) {
     var $t1: u64
  0: $t1 := copy($t0)
  1: m::consume($t1)
  2: m::consume($t0)
  3: return ()
}


[variant baseline]
public fun m::test3($t0: 0xc0ffee::m::W) {
     var $t1: 0xc0ffee::m::W
  0: $t1 := copy($t0)
  1: m::consume_($t0)
  2: m::consume_($t1)
  3: return ()
}


[variant baseline]
public fun m::test4($t0: 0xc0ffee::m::W) {
     var $t1: 0xc0ffee::m::W
  0: $t1 := copy($t0)
  1: m::consume_($t1)
  2: m::consume_($t0)
  3: return ()
}

============ after VariableCoalescingAnnotator: ================

[variant baseline]
fun m::consume($t0: u64) {
     # live vars: $t0
     # events: b:$t0, e:$t0
  0: return ()
}


[variant baseline]
fun m::consume_($t0: 0xc0ffee::m::W) {
     # live vars: $t0
     # events: b:$t0, e:$t0
  0: return ()
}


[variant baseline]
public fun m::test1($t0: u64) {
     var $t1: u64
     # live vars: $t0
     # events: b:$t0, b:$t1
  0: $t1 := copy($t0)
     # live vars: $t0, $t1
     # events: e:$t0
  1: m::consume($t0)
     # live vars: $t1
     # events: e:$t1
  2: m::consume($t1)
     # live vars:
  3: return ()
}


[variant baseline]
public fun m::test2($t0: u64) {
     var $t1: u64
     # live vars: $t0
     # events: b:$t0, b:$t1
  0: $t1 := copy($t0)
     # live vars: $t0, $t1
     # events: e:$t1
  1: m::consume($t1)
     # live vars: $t0
     # events: e:$t0
  2: m::consume($t0)
     # live vars:
  3: return ()
}


[variant baseline]
public fun m::test3($t0: 0xc0ffee::m::W) {
     var $t1: 0xc0ffee::m::W
     # live vars: $t0
     # events: b:$t0, b:$t1
  0: $t1 := copy($t0)
     # live vars: $t0, $t1
     # events: e:$t0
  1: m::consume_($t0)
     # live vars: $t1
     # events: e:$t1
  2: m::consume_($t1)
     # live vars:
  3: return ()
}


[variant baseline]
public fun m::test4($t0: 0xc0ffee::m::W) {
     var $t1: 0xc0ffee::m::W
     # live vars: $t0
     # events: b:$t0, b:$t1
  0: $t1 := copy($t0)
     # live vars: $t0, $t1
     # events: e:$t1
  1: m::consume_($t1)
     # live vars: $t0
     # events: e:$t0
  2: m::consume_($t0)
     # live vars:
  3: return ()
}

============ after VariableCoalescingTransformer: ================

[variant baseline]
fun m::consume($t0: u64) {
  0: return ()
}


[variant baseline]
fun m::consume_($t0: 0xc0ffee::m::W) {
  0: return ()
}


[variant baseline]
public fun m::test1($t0: u64) {
     var $t1: u64
  0: $t1 := copy($t0)
  1: m::consume($t0)
  2: m::consume($t1)
  3: return ()
}


[variant baseline]
public fun m::test2($t0: u64) {
     var $t1: u64
  0: $t1 := copy($t0)
  1: m::consume($t1)
  2: m::consume($t0)
  3: return ()
}


[variant baseline]
public fun m::test3($t0: 0xc0ffee::m::W) {
     var $t1: 0xc0ffee::m::W
  0: $t1 := copy($t0)
  1: m::consume_($t0)
  2: m::consume_($t1)
  3: return ()
}


[variant baseline]
public fun m::test4($t0: 0xc0ffee::m::W) {
     var $t1: 0xc0ffee::m::W
  0: $t1 := copy($t0)
  1: m::consume_($t1)
  2: m::consume_($t0)
  3: return ()
}

============ after DeadStoreElimination: ================

[variant baseline]
fun m::consume($t0: u64) {
  0: return ()
}


[variant baseline]
fun m::consume_($t0: 0xc0ffee::m::W) {
  0: return ()
}


[variant baseline]
public fun m::test1($t0: u64) {
     var $t1: u64
  0: $t1 := copy($t0)
  1: m::consume($t0)
  2: m::consume($t1)
  3: return ()
}


[variant baseline]
public fun m::test2($t0: u64) {
     var $t1: u64
  0: $t1 := copy($t0)
  1: m::consume($t1)
  2: m::consume($t0)
  3: return ()
}


[variant baseline]
public fun m::test3($t0: 0xc0ffee::m::W) {
     var $t1: 0xc0ffee::m::W
  0: $t1 := copy($t0)
  1: m::consume_($t0)
  2: m::consume_($t1)
  3: return ()
}


[variant baseline]
public fun m::test4($t0: 0xc0ffee::m::W) {
     var $t1: 0xc0ffee::m::W
  0: $t1 := copy($t0)
  1: m::consume_($t1)
  2: m::consume_($t0)
  3: return ()
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {
struct W has copy, drop {
	x: u64
}

consume(Arg0: u64) /* def_idx: 0 */ {
B0:
	0: Ret
}
consume_(Arg0: W) /* def_idx: 1 */ {
B0:
	0: Ret
}
public test1(Arg0: u64) /* def_idx: 2 */ {
B0:
	0: CopyLoc[0](Arg0: u64)
	1: MoveLoc[0](Arg0: u64)
	2: Call consume(u64)
	3: Call consume(u64)
	4: Ret
}
public test2(Arg0: u64) /* def_idx: 3 */ {
B0:
	0: CopyLoc[0](Arg0: u64)
	1: Call consume(u64)
	2: MoveLoc[0](Arg0: u64)
	3: Call consume(u64)
	4: Ret
}
public test3(Arg0: W) /* def_idx: 4 */ {
B0:
	0: CopyLoc[0](Arg0: W)
	1: MoveLoc[0](Arg0: W)
	2: Call consume_(W)
	3: Call consume_(W)
	4: Ret
}
public test4(Arg0: W) /* def_idx: 5 */ {
B0:
	0: CopyLoc[0](Arg0: W)
	1: Call consume_(W)
	2: MoveLoc[0](Arg0: W)
	3: Call consume_(W)
	4: Ret
}
}
============ bytecode verification succeeded ========
