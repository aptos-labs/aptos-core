============ initial bytecode ================

[variant baseline]
public fun m::test($t0: u64, $t1: u64): (u64, u64) {
     var $t2: u64
     var $t3: u64
     var $t4: u64
  0: $t4 := infer($t0)
  1: $t0 := infer($t1)
  2: $t1 := infer($t4)
  3: $t2 := infer($t0)
  4: $t3 := infer($t1)
  5: return ($t2, $t3)
}

============ after DeadStoreElimination: ================

[variant baseline]
public fun m::test($t0: u64, $t1: u64): (u64, u64) {
     var $t2: u64
     var $t3: u64
     var $t4: u64
  0: $t4 := move($t0)
  1: $t0 := move($t1)
  2: $t1 := move($t4)
  3: $t2 := move($t0)
  4: $t3 := move($t1)
  5: return ($t2, $t3)
}

============ after VariableCoalescingAnnotator: ================

[variant baseline]
public fun m::test($t0: u64, $t1: u64): (u64, u64) {
     var $t2: u64
     var $t3: u64
     var $t4: u64
     # live vars: $t0, $t1
     # events: b:$t0, b:$t1, b:$t4
  0: $t4 := move($t0)
     # live vars: $t1, $t4
  1: $t0 := move($t1)
     # live vars: $t0, $t4
     # events: e:$t4
  2: $t1 := move($t4)
     # live vars: $t0, $t1
     # events: e:$t0, b:$t2
  3: $t2 := move($t0)
     # live vars: $t1, $t2
     # events: e:$t1, b:$t3
  4: $t3 := move($t1)
     # live vars: $t2, $t3
     # events: e:$t2, e:$t3
  5: return ($t2, $t3)
}

============ after VariableCoalescingTransformer: ================

[variant baseline]
public fun m::test($t0: u64, $t1: u64): (u64, u64) {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     var $t4: u64
  0: $t4 := move($t0)
  1: $t0 := move($t1)
  2: $t1 := move($t4)
  3: $t0 := move($t0)
  4: $t1 := move($t1)
  5: return ($t0, $t1)
}

============ after DeadStoreElimination: ================

[variant baseline]
public fun m::test($t0: u64, $t1: u64): (u64, u64) {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     var $t4: u64
  0: $t4 := move($t0)
  1: $t0 := move($t1)
  2: $t1 := move($t4)
  3: return ($t0, $t1)
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


public test(Arg0: u64, Arg1: u64): u64 * u64 /* def_idx: 0 */ {
L2:	loc0: u64
B0:
	0: MoveLoc[0](Arg0: u64)
	1: StLoc[2](loc0: u64)
	2: MoveLoc[1](Arg1: u64)
	3: MoveLoc[2](loc0: u64)
	4: Ret
}
}
============ bytecode verification succeeded ========
