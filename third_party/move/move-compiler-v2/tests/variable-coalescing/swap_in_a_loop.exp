============ initial bytecode ================

[variant baseline]
public fun m::test($t0: u64, $t1: u64): (u64, u64) {
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: bool
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: u64
     var $t11: u64
  0: $t4 := infer($t0)
  1: label L0
  2: $t7 := infer($t4)
  3: $t8 := 0
  4: $t6 := >($t7, $t8)
  5: if ($t6) goto 6 else goto 15
  6: label L2
  7: $t5 := infer($t0)
  8: $t0 := infer($t1)
  9: $t1 := infer($t5)
 10: $t10 := infer($t4)
 11: $t11 := 1
 12: $t9 := -($t10, $t11)
 13: $t4 := infer($t9)
 14: goto 17
 15: label L3
 16: goto 19
 17: label L4
 18: goto 1
 19: label L1
 20: $t2 := infer($t0)
 21: $t3 := infer($t1)
 22: return ($t2, $t3)
}

============ after DeadStoreElimination: ================

[variant baseline]
public fun m::test($t0: u64, $t1: u64): (u64, u64) {
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: bool
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: u64
     var $t11: u64
  0: $t4 := copy($t0)
  1: label L0
  2: $t7 := copy($t4)
  3: $t8 := 0
  4: $t6 := >($t7, $t8)
  5: if ($t6) goto 6 else goto 15
  6: label L2
  7: $t5 := move($t0)
  8: $t0 := move($t1)
  9: $t1 := move($t5)
 10: $t10 := move($t4)
 11: $t11 := 1
 12: $t9 := -($t10, $t11)
 13: $t4 := move($t9)
 14: goto 1
 15: label L3
 16: $t2 := move($t0)
 17: $t3 := move($t1)
 18: return ($t2, $t3)
}

============ after VariableCoalescingAnnotator: ================

[variant baseline]
public fun m::test($t0: u64, $t1: u64): (u64, u64) {
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: bool
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: u64
     var $t11: u64
     # live vars: $t0, $t1
     # events: b:$t0, b:$t1, b:$t4
  0: $t4 := copy($t0)
     # live vars: $t0, $t1, $t4
  1: label L0
     # live vars: $t0, $t1, $t4
     # events: b:$t7
  2: $t7 := copy($t4)
     # live vars: $t0, $t1, $t4, $t7
     # events: b:$t8
  3: $t8 := 0
     # live vars: $t0, $t1, $t4, $t7, $t8
     # events: e:$t7, e:$t8, b:$t6
  4: $t6 := >($t7, $t8)
     # live vars: $t0, $t1, $t4, $t6
     # events: e:$t6
  5: if ($t6) goto 6 else goto 15
     # live vars: $t0, $t1, $t4
  6: label L2
     # live vars: $t0, $t1, $t4
     # events: b:$t5
  7: $t5 := move($t0)
     # live vars: $t1, $t4, $t5
  8: $t0 := move($t1)
     # live vars: $t0, $t4, $t5
     # events: e:$t5
  9: $t1 := move($t5)
     # live vars: $t0, $t1, $t4
     # events: b:$t10
 10: $t10 := move($t4)
     # live vars: $t0, $t1, $t10
     # events: b:$t11
 11: $t11 := 1
     # live vars: $t0, $t1, $t10, $t11
     # events: e:$t10, e:$t11, b:$t9
 12: $t9 := -($t10, $t11)
     # live vars: $t0, $t1, $t9
     # events: e:$t9
 13: $t4 := move($t9)
     # live vars: $t0, $t1, $t4
 14: goto 1
     # live vars: $t0, $t1, $t4
     # events: e:$t4
 15: label L3
     # live vars: $t0, $t1
     # events: e:$t0, b:$t2
 16: $t2 := move($t0)
     # live vars: $t1, $t2
     # events: e:$t1, b:$t3
 17: $t3 := move($t1)
     # live vars: $t2, $t3
     # events: e:$t2, e:$t3
 18: return ($t2, $t3)
}

============ after VariableCoalescingTransformer: ================

[variant baseline]
public fun m::test($t0: u64, $t1: u64): (u64, u64) {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     var $t4: u64
     var $t5: u64 [unused]
     var $t6: bool
     var $t7: u64
     var $t8: u64
     var $t9: u64 [unused]
     var $t10: u64 [unused]
     var $t11: u64 [unused]
  0: $t4 := copy($t0)
  1: label L0
  2: $t7 := copy($t4)
  3: $t8 := 0
  4: $t6 := >($t7, $t8)
  5: if ($t6) goto 6 else goto 15
  6: label L2
  7: $t7 := move($t0)
  8: $t0 := move($t1)
  9: $t1 := move($t7)
 10: $t7 := move($t4)
 11: $t8 := 1
 12: $t7 := -($t7, $t8)
 13: $t4 := move($t7)
 14: goto 1
 15: label L3
 16: $t0 := move($t0)
 17: $t1 := move($t1)
 18: return ($t0, $t1)
}

============ after DeadStoreElimination: ================

[variant baseline]
public fun m::test($t0: u64, $t1: u64): (u64, u64) {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     var $t4: u64
     var $t5: u64 [unused]
     var $t6: bool
     var $t7: u64
     var $t8: u64
     var $t9: u64 [unused]
     var $t10: u64 [unused]
     var $t11: u64 [unused]
  0: $t4 := copy($t0)
  1: label L0
  2: $t7 := copy($t4)
  3: $t8 := 0
  4: $t6 := >($t7, $t8)
  5: if ($t6) goto 6 else goto 15
  6: label L2
  7: $t7 := move($t0)
  8: $t0 := move($t1)
  9: $t1 := move($t7)
 10: $t7 := move($t4)
 11: $t8 := 1
 12: $t7 := -($t7, $t8)
 13: $t4 := move($t7)
 14: goto 1
 15: label L3
 16: $t0 := move($t0)
 17: $t1 := move($t1)
 18: return ($t0, $t1)
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


public test(Arg0: u64, Arg1: u64): u64 * u64 /* def_idx: 0 */ {
L2:	loc0: u64
B0:
	0: CopyLoc[0](Arg0: u64)
	1: StLoc[2](loc0: u64)
B1:
	2: CopyLoc[2](loc0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(15)
B2:
	6: MoveLoc[0](Arg0: u64)
	7: MoveLoc[1](Arg1: u64)
	8: StLoc[0](Arg0: u64)
	9: StLoc[1](Arg1: u64)
	10: MoveLoc[2](loc0: u64)
	11: LdU64(1)
	12: Sub
	13: StLoc[2](loc0: u64)
	14: Branch(2)
B3:
	15: MoveLoc[0](Arg0: u64)
	16: MoveLoc[1](Arg1: u64)
	17: Ret
}
}
============ bytecode verification succeeded ========
