============ initial bytecode ================

[variant baseline]
public fun m::test($t0: u64, $t1: u64): (u64, u64) {
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: bool
     var $t7: u64
     var $t8: u64
     var $t9: u64
  0: $t4 := infer($t0)
  1: label L0
  2: $t7 := 0
  3: $t6 := >($t4, $t7)
  4: if ($t6) goto 5 else goto 13
  5: label L2
  6: $t5 := infer($t0)
  7: $t0 := infer($t1)
  8: $t1 := infer($t5)
  9: $t9 := 1
 10: $t8 := -($t4, $t9)
 11: $t4 := infer($t8)
 12: goto 15
 13: label L3
 14: goto 17
 15: label L4
 16: goto 1
 17: label L1
 18: $t2 := infer($t0)
 19: $t3 := infer($t1)
 20: return ($t2, $t3)
}

============ after DeadStoreElimination: ================

[variant baseline]
public fun m::test($t0: u64, $t1: u64): (u64, u64) {
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: bool
     var $t7: u64
     var $t8: u64
     var $t9: u64
  0: $t4 := copy($t0)
  1: label L0
  2: $t7 := 0
  3: $t6 := >($t4, $t7)
  4: if ($t6) goto 5 else goto 13
  5: label L2
  6: $t5 := move($t0)
  7: $t0 := move($t1)
  8: $t1 := move($t5)
  9: $t9 := 1
 10: $t8 := -($t4, $t9)
 11: $t4 := move($t8)
 12: goto 1
 13: label L3
 14: $t2 := move($t0)
 15: $t3 := move($t1)
 16: return ($t2, $t3)
}

============ after VariableCoalescingAnnotator: ================

[variant baseline]
public fun m::test($t0: u64, $t1: u64): (u64, u64) {
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: bool
     var $t7: u64
     var $t8: u64
     var $t9: u64
     # live vars: $t0, $t1
     # events: b:$t0, b:$t1, b:$t4
  0: $t4 := copy($t0)
     # live vars: $t0, $t1, $t4
  1: label L0
     # live vars: $t0, $t1, $t4
     # events: b:$t7
  2: $t7 := 0
     # live vars: $t0, $t1, $t4, $t7
     # events: e:$t7, b:$t6
  3: $t6 := >($t4, $t7)
     # live vars: $t0, $t1, $t4, $t6
     # events: e:$t6
  4: if ($t6) goto 5 else goto 13
     # live vars: $t0, $t1, $t4
  5: label L2
     # live vars: $t0, $t1, $t4
     # events: b:$t5
  6: $t5 := move($t0)
     # live vars: $t1, $t4, $t5
  7: $t0 := move($t1)
     # live vars: $t0, $t4, $t5
     # events: e:$t5
  8: $t1 := move($t5)
     # live vars: $t0, $t1, $t4
     # events: b:$t9
  9: $t9 := 1
     # live vars: $t0, $t1, $t4, $t9
     # events: e:$t9, b:$t8
 10: $t8 := -($t4, $t9)
     # live vars: $t0, $t1, $t8
     # events: e:$t8
 11: $t4 := move($t8)
     # live vars: $t0, $t1, $t4
 12: goto 1
     # live vars: $t0, $t1, $t4
     # events: e:$t4
 13: label L3
     # live vars: $t0, $t1
     # events: e:$t0, b:$t2
 14: $t2 := move($t0)
     # live vars: $t1, $t2
     # events: e:$t1, b:$t3
 15: $t3 := move($t1)
     # live vars: $t2, $t3
     # events: e:$t2, e:$t3
 16: return ($t2, $t3)
}

============ after VariableCoalescingTransformer: ================

[variant baseline]
public fun m::test($t0: u64, $t1: u64): (u64, u64) {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     var $t4: u64
     var $t5: u64 [unused]
     var $t6: bool
     var $t7: u64
     var $t8: u64 [unused]
     var $t9: u64 [unused]
  0: $t4 := copy($t0)
  1: label L0
  2: $t7 := 0
  3: $t6 := >($t4, $t7)
  4: if ($t6) goto 5 else goto 13
  5: label L2
  6: $t7 := move($t0)
  7: $t0 := move($t1)
  8: $t1 := move($t7)
  9: $t7 := 1
 10: $t7 := -($t4, $t7)
 11: $t4 := move($t7)
 12: goto 1
 13: label L3
 14: $t0 := move($t0)
 15: $t1 := move($t1)
 16: return ($t0, $t1)
}

============ after DeadStoreElimination: ================

[variant baseline]
public fun m::test($t0: u64, $t1: u64): (u64, u64) {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     var $t4: u64
     var $t5: u64 [unused]
     var $t6: bool
     var $t7: u64
     var $t8: u64 [unused]
     var $t9: u64 [unused]
  0: $t4 := copy($t0)
  1: label L0
  2: $t7 := 0
  3: $t6 := >($t4, $t7)
  4: if ($t6) goto 5 else goto 13
  5: label L2
  6: $t7 := move($t0)
  7: $t0 := move($t1)
  8: $t1 := move($t7)
  9: $t7 := 1
 10: $t7 := -($t4, $t7)
 11: $t4 := move($t7)
 12: goto 1
 13: label L3
 14: return ($t0, $t1)
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


public test(Arg0: u64, Arg1: u64): u64 * u64 /* def_idx: 0 */ {
L2:	loc0: u64
L3:	loc1: u64
B0:
	0: CopyLoc[0](Arg0: u64)
	1: StLoc[2](loc0: u64)
B1:
	2: CopyLoc[2](loc0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(15)
B2:
	6: MoveLoc[0](Arg0: u64)
	7: MoveLoc[1](Arg1: u64)
	8: StLoc[0](Arg0: u64)
	9: MoveLoc[2](loc0: u64)
	10: LdU64(1)
	11: Sub
	12: StLoc[2](loc0: u64)
	13: StLoc[1](Arg1: u64)
	14: Branch(2)
B3:
	15: MoveLoc[0](Arg0: u64)
	16: MoveLoc[1](Arg1: u64)
	17: Ret
}
}
============ bytecode verification succeeded ========
