// -- Model dump before first bytecode pipeline
module 0xc0ffee::m {
    private fun read(r: &u64): u64 {
        Deref(r)
    }
    private fun read_then_write(r: &mut u64) {
        {
          let v: u64 = m::read(Freeze(false)(r));
          r = Add<u64>(v, 1);
          Tuple()
        }
    }
} // end 0xc0ffee::m

// -- Sourcified model before first bytecode pipeline
module 0xc0ffee::m {
    fun read(r: &u64): u64 {
        *r
    }
    fun read_then_write(r: &mut u64) {
        let v = read(/*freeze*/r);
        *r = v + 1;
    }
}

// -- Model dump before second bytecode pipeline
module 0xc0ffee::m {
    private fun read(r: &u64): u64 {
        Deref(r)
    }
    private fun read_then_write(r: &mut u64) {
        {
          let v: u64 = {
            let (r: &u64): (&u64) = Tuple(Freeze(false)(r));
            Deref(r)
          };
          r = Add<u64>(v, 1);
          Tuple()
        }
    }
} // end 0xc0ffee::m


============ disassembled file-format ==================
// Move bytecode v8
module c0ffee.m {


read(r: &u64): u64 /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](r: &u64)
	1: ReadRef
	2: Ret
}
read_then_write(r: &mut u64) /* def_idx: 1 */ {
B0:
	0: CopyLoc[0](r: &mut u64)
	1: FreezeRef
	2: ReadRef
	3: LdU64(1)
	4: Add
	5: MoveLoc[0](r: &mut u64)
	6: WriteRef
	7: Ret
}
}
============ bytecode verification succeeded ========
