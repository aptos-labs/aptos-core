// -- Model dump before first bytecode pipeline
module 0xc0ffee::m {
    public fun code(is_sell: bool): u64 {
        if is_sell {
          m::one()
        } else {
          m::two()
        }
    }
    private fun one(): u64 {
        1
    }
    private fun sum_codes(): u64 {
        Add<u64>(m::code(true), m::code(false))
    }
    private fun two(): u64 {
        2
    }
} // end 0xc0ffee::m

// -- Sourcified model before first bytecode pipeline
module 0xc0ffee::m {
    public fun code(is_sell: bool): u64 {
        if (is_sell) one() else two()
    }
    fun one(): u64 {
        1
    }
    fun sum_codes(): u64 {
        code(true) + code(false)
    }
    fun two(): u64 {
        2
    }
}

// -- Model dump before second bytecode pipeline
module 0xc0ffee::m {
    public fun code(is_sell: bool): u64 {
        if is_sell {
          1
        } else {
          2
        }
    }
    private fun one(): u64 {
        1
    }
    private fun sum_codes(): u64 {
        3
    }
    private fun two(): u64 {
        2
    }
} // end 0xc0ffee::m


============ disassembled file-format ==================
// Move bytecode v8
module c0ffee.m {


public code(is_sell: bool): u64 /* def_idx: 0 */ {
L1:	return: u64
B0:
	0: MoveLoc[0](is_sell: bool)
	1: BrFalse(6)
B1:
	2: LdU64(1)
	3: StLoc[1](return: u64)
B2:
	4: MoveLoc[1](return: u64)
	5: Ret
B3:
	6: LdU64(2)
	7: StLoc[1](return: u64)
	8: Branch(4)
}
one(): u64 /* def_idx: 1 */ {
B0:
	0: LdU64(1)
	1: Ret
}
sum_codes(): u64 /* def_idx: 2 */ {
B0:
	0: LdU64(3)
	1: Ret
}
two(): u64 /* def_idx: 3 */ {
B0:
	0: LdU64(2)
	1: Ret
}
}
============ bytecode verification succeeded ========
