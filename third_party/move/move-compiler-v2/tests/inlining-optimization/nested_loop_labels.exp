// -- Model dump before first bytecode pipeline
module 0xc0ffee::m {
    private fun inner(x: u64): u64 {
        loop {
          x: u64 = Add<u64>(x, 10);
          break;
          Tuple()
        };
        x
    }
    private fun outer(x: u64): u64 {
        loop {
          m::inner(x);
          x: u64 = Add<u64>(x, 1);
          break;
          Tuple()
        };
        x
    }
} // end 0xc0ffee::m

// -- Sourcified model before first bytecode pipeline
module 0xc0ffee::m {
    fun inner(x: u64): u64 {
        loop {
            x = x + 10;
            break;
        };
        x
    }
    fun outer(x: u64): u64 {
        loop {
            inner(x);
            x = x + 1;
            break;
        };
        x
    }
}

// -- Model dump before second bytecode pipeline
module 0xc0ffee::m {
    private fun inner(x: u64): u64 {
        loop {
          x: u64 = Add<u64>(x, 10);
          break;
          Tuple()
        };
        x
    }
    private fun outer(x: u64): u64 {
        loop {
          {
            let (x: u64): (u64) = Tuple(x);
            loop {
              x: u64 = Add<u64>(x, 10);
              break;
              Tuple()
            };
            x
          };
          x: u64 = Add<u64>(x, 1);
          break;
          Tuple()
        };
        x
    }
} // end 0xc0ffee::m


============ disassembled file-format ==================
// Move bytecode v8
module c0ffee.m {


inner(x: u64): u64 /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](x: u64)
	1: LdU64(10)
	2: Add
	3: Ret
}
outer(x: u64): u64 /* def_idx: 1 */ {
B0:
	0: CopyLoc[0](x: u64)
	1: LdU64(10)
	2: Add
	3: Pop
	4: MoveLoc[0](x: u64)
	5: LdU64(1)
	6: Add
	7: Ret
}
}
============ bytecode verification succeeded ========
