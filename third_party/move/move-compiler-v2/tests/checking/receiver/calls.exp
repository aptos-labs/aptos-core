// -- Model dump before first bytecode pipeline
module 0x42::m {
    struct S {
        x: u64,
    }
    private inline fun inline_receiver_ref_mut(self: &mut S,y: u64): u64 {
        Add<u64>(select m::S.x<&mut S>(self), y)
    }
    private fun receiver(self: S,y: u64): u64 {
        Add<u64>(select m::S.x<S>(self), y)
    }
    private fun receiver_ref(self: &S,y: u64): u64 {
        Add<u64>(select m::S.x<&S>(self), y)
    }
    private fun receiver_ref_mut(self: &mut S,y: u64): u64 {
        Add<u64>(select m::S.x<&mut S>(self), y)
    }
    private fun test_call_styles(s: S): u64 {
        m::receiver(s, 1);
        m::receiver_ref(Borrow(Immutable)(s), 1);
        m::receiver_ref_mut(Borrow(Mutable)(s), 1);
        {
          let (self: &mut S, y: u64): (&mut S, u64) = Tuple(Borrow(Mutable)(s), 1);
          Add<u64>(select m::S.x<&mut S>(self), y)
        }
    }
} // end 0x42::m

// -- Sourcified model before first bytecode pipeline
module 0x42::m {
    struct S {
        x: u64,
    }
    inline fun inline_receiver_ref_mut(self: &mut S, y: u64): u64 {
        self.x + y
    }
    fun receiver(self: S, y: u64): u64 {
        self.x + y
    }
    fun receiver_ref(self: &S, y: u64): u64 {
        self.x + y
    }
    fun receiver_ref_mut(self: &mut S, y: u64): u64 {
        self.x + y
    }
    fun test_call_styles(s: S): u64 {
        receiver(s, 1);
        receiver_ref(&s, 1);
        receiver_ref_mut(&mut s, 1);
        let (self,y) = (&mut s, 1);
        self.x + y
    }
}
