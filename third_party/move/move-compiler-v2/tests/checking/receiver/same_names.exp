// -- Model dump before bytecode pipeline
module 0x42::a {
    struct MyList {
        len: u64,
    }
    public fun len(self: &MyList): u64 {
        select a::MyList.len<&MyList>(self)
    }
} // end 0x42::a
module 0x42::b {
    struct MyOtherList {
        len: u64,
    }
    public fun len(self: &MyOtherList): u64 {
        select b::MyOtherList.len<&MyOtherList>(self)
    }
} // end 0x42::b
module 0x42::c {
    use 0x42::a; // resolved as: 0x42::a
    use 0x42::b; // resolved as: 0x42::b
    private inline fun foo(f: |(a::MyList, b::MyOtherList)|,x: a::MyList,y: b::MyOtherList) {
        (f)(x, y)
    }
    private fun test(x: a::MyList,y: b::MyOtherList) {
        {
          let (x: a::MyList, y: b::MyOtherList): (a::MyList, b::MyOtherList) = Tuple(x, y);
          {
            let (x: a::MyList, y: b::MyOtherList): (a::MyList, b::MyOtherList) = Tuple(x, y);
            if Eq<u64>(Add<u64>(a::len(Borrow(Immutable)(x)), b::len(Borrow(Immutable)(y))), 1) {
              Tuple()
            } else {
              Abort(1)
            }
          }
        }
    }
} // end 0x42::c

// -- Sourcified model before bytecode pipeline
module 0x42::a {
    struct MyList {
        len: u64,
    }
    public fun len(self: &MyList): u64 {
        self.len
    }
}
module 0x42::b {
    struct MyOtherList {
        len: u64,
    }
    public fun len(self: &MyOtherList): u64 {
        self.len
    }
}
module 0x42::c {
    use 0x42::a;
    use 0x42::b;
    inline fun foo(f: |(a::MyList, b::MyOtherList)|, x: a::MyList, y: b::MyOtherList) {
        f(x, y)
    }
    fun test(x: a::MyList, y: b::MyOtherList) {
        let (x,y) = (x, y);
        let (x,y) = (x, y);
        if (a::len(&x) + b::len(&y) == 1) () else abort 1
    }
}
