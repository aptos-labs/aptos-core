// -- Model dump before bytecode pipeline
module 0x42::test {
    enum E1 {
        A {
            0: u8,
            1: bool,
        }
        B {
            0: u8,
        }
        C {
            x: u8,
            y: S1,
        }
    }
    struct S0 {
        dummy_field: bool,
    }
    struct S1 {
        0: u8,
    }
    struct S2 {
        0: bool,
        1: S0,
    }
    struct S3 {
        x: bool,
        y: u8,
    }
    struct S4<T> {
        x: T,
        y: S3,
    }
    struct S5<T,U> {
        0: T,
        1: U,
    }
    struct S6<T,U> {
        x: T,
        y: U,
    }
    struct S7 {
        0: u8,
        1: u16,
        2: u32,
        3: u64,
    }
    private inline fun lambda_param(f: |S2|bool): bool {
        {
          let x: S2 = pack test::S2(true, pack test::S0(false));
          (f)(x)
        }
    }
    private fun nested1(x: S4<bool>) {
        {
          let test::S4<bool>{ x: _x, y: _ } = x;
          {
            let test::S4<bool>{ x: _, y: _y } = x;
            {
              let test::S4<bool>{ x: _, y: test::S3{ x: _, y: _ } } = x;
              {
                let test::S4<bool>{ x: _, y: test::S3{ x: _x, y: _ } } = x;
                {
                  let test::S4<bool>{ x: _x2, y: test::S3{ x: _x1, y: _ } } = x;
                  {
                    let test::S4<bool>{ x: _, y: test::S3{ x: _, y: _y } } = x;
                    {
                      let test::S4<bool>{ x: _x2, y: test::S3{ x: _x1, y: _ } } = x;
                      Tuple()
                    }
                  }
                }
              }
            }
          }
        }
    }
    private fun nested1_ref(x: &S4<bool>) {
        {
          let test::S4<bool>{ x: _x, y: _ } = x;
          {
            let test::S4<bool>{ x: _, y: _y } = x;
            {
              let test::S4<bool>{ x: _, y: test::S3{ x: _, y: _ } } = x;
              {
                let test::S4<bool>{ x: _, y: test::S3{ x: _x, y: _ } } = x;
                {
                  let test::S4<bool>{ x: _x2, y: test::S3{ x: _x1, y: _ } } = x;
                  {
                    let test::S4<bool>{ x: _, y: test::S3{ x: _, y: _y } } = x;
                    {
                      let test::S4<bool>{ x: _x2, y: test::S3{ x: _x1, y: _ } } = x;
                      Tuple()
                    }
                  }
                }
              }
            }
          }
        }
    }
    private fun nested2(x: S5<bool, S1>) {
        {
          let test::S5<bool, S1>{ 0: _, 1: test::S1{ 0: _ } } = x;
          Tuple()
        }
    }
    private fun nested2_ref(x: &S5<bool, S1>) {
        {
          let test::S5<bool, S1>{ 0: _, 1: test::S1{ 0: _ } } = x;
          Tuple()
        }
    }
    private fun nested3(x: S5<bool, S4<bool>>) {
        {
          let test::S5<bool, S4<bool>>{ 0: _, 1: test::S4<bool>{ x: _, y: _ } } = x;
          Tuple()
        }
    }
    private fun nested3_ref(x: &S5<bool, S4<bool>>) {
        {
          let test::S5<bool, S4<bool>>{ 0: _, 1: test::S4<bool>{ x: _, y: _ } } = x;
          Tuple()
        }
    }
    private fun nested4(x: S4<S1>) {
        {
          let test::S4<S1>{ x: test::S1{ 0: _ }, y: _ } = x;
          Tuple()
        }
    }
    private fun nested4_ref(x: &S4<S1>) {
        {
          let test::S4<S1>{ x: test::S1{ 0: _ }, y: _ } = x;
          Tuple()
        }
    }
    private fun simple_0(x: S0) {
        {
          let test::S0{ dummy_field: _ } = x;
          Tuple()
        }
    }
    private fun simple_0_ref(x: &S0) {
        {
          let test::S0{ dummy_field: _ } = x;
          Tuple()
        }
    }
    private fun simple_1(x: S1) {
        {
          let test::S1{ 0: _ } = x;
          Tuple()
        }
    }
    private fun simple_1_ref(x: &mut S1) {
        {
          let test::S1{ 0: _ } = x;
          Tuple()
        }
    }
    private fun simple_2(x: S2) {
        {
          let test::S2{ 0: _, 1: _ } = x;
          {
            let test::S2{ 0: _x, 1: _ } = x;
            {
              let test::S2{ 0: _, 1: _x } = x;
              {
                let test::S2{ 0: _, 1: _ } = x;
                {
                  let test::S2{ 0: _, 1: _ } = x;
                  {
                    let test::S2{ 0: _x, 1: _y } = x;
                    {
                      let test::S2{ 0: _x, 1: _y } = x;
                      {
                        let test::S2{ 0: _x, 1: _y } = x;
                        Tuple()
                      }
                    }
                  }
                }
              }
            }
          }
        }
    }
    private fun simple_2_ref(x: &S2) {
        {
          let test::S2{ 0: _, 1: _ } = x;
          {
            let test::S2{ 0: _x, 1: _ } = x;
            {
              let test::S2{ 0: _, 1: _x } = x;
              {
                let test::S2{ 0: _, 1: _ } = x;
                {
                  let test::S2{ 0: _, 1: _ } = x;
                  {
                    let test::S2{ 0: _x, 1: _y } = x;
                    {
                      let test::S2{ 0: _x, 1: _y } = x;
                      {
                        let test::S2{ 0: _x, 1: _y } = x;
                        Tuple()
                      }
                    }
                  }
                }
              }
            }
          }
        }
    }
    private fun simple_3(x: S3) {
        {
          let test::S3{ x: _, y: _ } = x;
          {
            let test::S3{ x: _x, y: _ } = x;
            {
              let test::S3{ x: _, y: _y } = x;
              Tuple()
            }
          }
        }
    }
    private fun simple_3_ref(x: S3) {
        {
          let test::S3{ x: _, y: _ } = x;
          {
            let test::S3{ x: _x, y: _ } = x;
            {
              let test::S3{ x: _, y: _y } = x;
              Tuple()
            }
          }
        }
    }
    private fun simple_4(x: E1): u8 {
        match (x) {
          test::E1::A{ 0: x, 1: _ } => {
            x
          }
          test::E1::B{ 0: x } => {
            x
          }
          test::E1::C{ x, y: _ } => {
            x
          }
        }

    }
    private fun simple_4_ref(x: &E1): &u8 {
        match (x) {
          test::E1::A{ 0: x, 1: _ } => {
            x
          }
          test::E1::B{ 0: x } => {
            x
          }
        }

    }
    private fun simple_5(x: E1): u8 {
        match (x) {
          test::E1::A{ 0: _, 1: y } => {
            if y {
              1
            } else {
              0
            }
          }
          test::E1::B{ 0: x } => {
            x
          }
          test::E1::C{ x: _, y: test::S1{ 0: x } } => {
            x
          }
        }

    }
    private fun simple_6(x: &S7) {
        {
          let test::S7{ 0: _w, 1: _, 2: _, 3: _z } = x;
          {
            let test::S7{ 0: _w, 1: _x, 2: _y, 3: _z } = x;
            Tuple()
          }
        }
    }
    private fun test_lambda_param(): bool {
        {
          let x: S2 = pack test::S2(true, pack test::S0(false));
          {
            let (test::S2{ 0: x, 1: _ }): (S2) = Tuple(x);
            x
          }
        }
    }
} // end 0x42::test

// -- Sourcified model before bytecode pipeline
module 0x42::test {
    enum E1 has drop {
        A {
            0: u8,
            1: bool,
        }
        B {
            0: u8,
        }
        C {
            x: u8,
            y: S1,
        }
    }
    struct S0 has copy {
    }
    struct S1 has copy, drop {
        0: u8,
    }
    struct S2 has copy {
        0: bool,
        1: S0,
    }
    struct S3 has copy {
        x: bool,
        y: u8,
    }
    struct S4<T> has copy {
        x: T,
        y: S3,
    }
    struct S5<T, U> {
        0: T,
        1: U,
    }
    struct S6<T, U> {
        x: T,
        y: U,
    }
    struct S7 {
        0: u8,
        1: u16,
        2: u32,
        3: u64,
    }
    inline fun lambda_param(f: |S2|bool): bool {
        let x = S2(true,S0{});
        f(x)
    }
    fun nested1(x: S4<bool>) {
        let S4<bool>{x: _x,y: _} = x;
        let S4<bool>{x: _,y: _y} = x;
        let S4<bool>{x: _,y: S3{x: _,y: _}} = x;
        let S4<bool>{x: _,y: S3{x: _x,y: _}} = x;
        let S4<bool>{x: _x2,y: S3{x: _x1,y: _}} = x;
        let S4<bool>{x: _,y: S3{x: _,y: _y}} = x;
        let S4<bool>{x: _x2,y: S3{x: _x1,y: _}} = x;
    }
    fun nested1_ref(x: &S4<bool>) {
        let S4<bool>{x: _x,y: _} = x;
        let S4<bool>{x: _,y: _y} = x;
        let S4<bool>{x: _,y: S3{x: _,y: _}} = x;
        let S4<bool>{x: _,y: S3{x: _x,y: _}} = x;
        let S4<bool>{x: _x2,y: S3{x: _x1,y: _}} = x;
        let S4<bool>{x: _,y: S3{x: _,y: _y}} = x;
        let S4<bool>{x: _x2,y: S3{x: _x1,y: _}} = x;
    }
    fun nested2(x: S5<bool, S1>) {
        let S5<bool,S1>(_,S1(_)) = x;
    }
    fun nested2_ref(x: &S5<bool, S1>) {
        let S5<bool,S1>(_,S1(_)) = x;
    }
    fun nested3(x: S5<bool, S4<bool>>) {
        let S5<bool,S4<bool>>(_,S4<bool>{x: _,y: _}) = x;
    }
    fun nested3_ref(x: &S5<bool, S4<bool>>) {
        let S5<bool,S4<bool>>(_,S4<bool>{x: _,y: _}) = x;
    }
    fun nested4(x: S4<S1>) {
        let S4<S1>{x: S1(_),y: _} = x;
    }
    fun nested4_ref(x: &S4<S1>) {
        let S4<S1>{x: S1(_),y: _} = x;
    }
    fun simple_0(x: S0) {
        let S0{} = x;
    }
    fun simple_0_ref(x: &S0) {
        let S0{} = x;
    }
    fun simple_1(x: S1) {
        let S1(_) = x;
    }
    fun simple_1_ref(x: &mut S1) {
        let S1(_) = x;
    }
    fun simple_2(x: S2) {
        let S2(_,_) = x;
        let S2(_x,_) = x;
        let S2(_,_x) = x;
        let S2(_,_) = x;
        let S2(_,_) = x;
        let S2(_x,_y) = x;
        let S2(_x,_y) = x;
        let S2(_x,_y) = x;
    }
    fun simple_2_ref(x: &S2) {
        let S2(_,_) = x;
        let S2(_x,_) = x;
        let S2(_,_x) = x;
        let S2(_,_) = x;
        let S2(_,_) = x;
        let S2(_x,_y) = x;
        let S2(_x,_y) = x;
        let S2(_x,_y) = x;
    }
    fun simple_3(x: S3) {
        let S3{x: _,y: _} = x;
        let S3{x: _x,y: _} = x;
        let S3{x: _,y: _y} = x;
    }
    fun simple_3_ref(x: S3) {
        let S3{x: _,y: _} = x;
        let S3{x: _x,y: _} = x;
        let S3{x: _,y: _y} = x;
    }
    fun simple_4(x: E1): u8 {
        match (x) {
            E1::A(x,_) => x,
            E1::B(x) => x,
            E1::C{x: x,y: _} => x,
        }
    }
    fun simple_4_ref(x: &E1): &u8 {
        match (x) {
            E1::A(x,_) => x,
            E1::B(x) => x,
        }
    }
    fun simple_5(x: E1): u8 {
        match (x) {
            E1::A(_,y) => if (y) 1u8 else 0u8,
            E1::B(x) => x,
            E1::C{x: _,y: S1(x)} => x,
        }
    }
    fun simple_6(x: &S7) {
        let S7(_w,_,_,_z) = x;
        let S7(_w,_x,_y,_z) = x;
    }
    fun test_lambda_param(): bool {
        let x = S2(true,S0{});
        let (S2(x,_)) = (x);
        x
    }
}


Diagnostics:
error: match not exhaustive
    ┌─ tests/checking/dotdot/dotdot_valid.move:142:16
    │
142 │         match (x) {
    │                ^
    │
    = missing `E1::C{..}`
