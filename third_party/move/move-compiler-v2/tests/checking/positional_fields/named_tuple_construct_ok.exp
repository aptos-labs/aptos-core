// -- Model dump before first bytecode pipeline
module 0x42::test {
    enum E1 {
        V1,
        V2,
        V3 {
            0: u8,
            1: bool,
        }
    }
    struct S0 {
        dummy_field: bool,
    }
    struct S1 {
        0: u8,
    }
    struct S2 {
        0: u8,
        1: bool,
    }
    struct S3<T> {
        0: T,
        1: u8,
    }
    struct S4 {
        dummy_field: bool,
    }
    struct S5<T> {
        x: T,
        y: u8,
    }
    private fun S0_inhabited(): S0 {
        pack test::S0(false)
    }
    private fun S1_inhabited(): S1 {
        pack test::S1(0)
    }
    private fun S2_inhabited(): S2 {
        pack test::S2(0, false)
    }
    private fun S3_test<T>(x: T): S3<T> {
        pack test::S3<T>(x, 0)
    }
    private fun nested_0(): S3<S4> {
        pack test::S3<S4>(pack test::S4(false), 0)
    }
    private fun nested_1(): S5<S0> {
        pack test::S5<S0>(pack test::S0(false), 0)
    }
    private fun test_variant() {
        pack test::E1::V1();
        pack test::E1::V2();
        pack test::E1::V3(42, true);
        Tuple()
    }
} // end 0x42::test

// -- Sourcified model before first bytecode pipeline
module 0x42::test {
    enum E1 {
        V1,
        V2,
        V3 {
            0: u8,
            1: bool,
        }
    }
    struct S0 {
    }
    struct S1 {
        0: u8,
    }
    struct S2 {
        0: u8,
        1: bool,
    }
    struct S3<T> {
        0: T,
        1: u8,
    }
    struct S4 {
    }
    struct S5<T> {
        x: T,
        y: u8,
    }
    fun S0_inhabited(): S0 {
        S0{}
    }
    fun S1_inhabited(): S1 {
        S1(0u8)
    }
    fun S2_inhabited(): S2 {
        S2(0u8,false)
    }
    fun S3_test<T>(x: T): S3<T> {
        S3<T>(x,0u8)
    }
    fun nested_0(): S3<S4> {
        S3<S4>(S4{},0u8)
    }
    fun nested_1(): S5<S0> {
        S5<S0>{x: S0{},y: 0u8}
    }
    fun test_variant() {
        E1::V1{};
        E1::V2{};
        E1::V3(42u8,true);
    }
}
