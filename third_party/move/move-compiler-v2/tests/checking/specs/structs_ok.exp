// -- Model dump before first bytecode pipeline
module 0x42::M {
    struct T {
        x: u64,
    }
    struct G<T> {
        x: T,
        y: bool,
    }
    struct R {
        s: S,
    }
    struct S {
        x: u64,
        y: bool,
        z: vector<u64>,
    }
    public fun f(r: R): T {
        pack M::T(select M::S.x<S>(select M::R.s<R>(r)))
    }
    spec fun struct_access(s: S): u64 {
        select M::S.x<0x42::M::S>(s)
    }
    spec fun nested_struct_access(r: R): bool {
        select M::S.y<0x42::M::S>(select M::R.s<0x42::M::R>(r))
    }
    spec fun struct_pack(x: u64,y: bool,z: vector<u64>): S {
        pack M::S(x, y, z)
    }
    spec fun struct_pack_other_order(x: u64,y: bool,z: vector<u64>): S {
        {
          let $z: vector<u64> = z;
          {
            let $y: bool = y;
            pack M::S(x, $y, $z)
          }
        }
    }
    spec fun generic_struct_pack(x: u64,y: bool): G<u64> {
        pack M::G<u64>(x, y)
    }
    spec fun generic_struct_pack_instantiated(x: u64,y: bool): G<u64> {
        pack M::G<u64>(x, y)
    }
    spec fun resource_global(addr: address): T {
        global<0x42::M::T>(addr)
    }
    spec fun resource_global_exists(addr: address): bool {
        exists<0x42::M::T>(addr)
    }
} // end 0x42::M

// -- Sourcified model before first bytecode pipeline
module 0x42::M {
    struct T has key {
        x: u64,
    }
    struct G<T> {
        x: T,
        y: bool,
    }
    struct R has drop {
        s: S,
    }
    struct S has drop {
        x: u64,
        y: bool,
        z: vector<u64>,
    }
    public fun f(r: R): T {
        T{x: r.s.x}
    }
}
