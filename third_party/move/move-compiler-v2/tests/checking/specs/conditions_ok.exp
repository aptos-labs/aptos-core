// -- Model dump before first bytecode pipeline
module 0x42::M {
    struct Ghost$some_global {
        v: u64,
    }
    private fun add_some(x: &mut u64): u64 {
        x = Add<u64>(Deref(x), 1);
        Deref(x)
    }
    spec {
      aborts_if Or(Eq<u64>(Freeze(false)($t0), 0), Eq<u64>(select M::Ghost$some_global.v(global<0x42::M::Ghost$some_global>(0x0)), 0));
      ensures Gt(Old<u64>($t0), $t0);
      ensures Eq<u64>(result0(), Freeze(false)($t0));
    }

    private fun multiple_results(x: u64): (u64, bool) {
        Tuple(x, true)
    }
    spec {
      ensures And(Eq<u64>($t0, result0()), Eq<bool>(result1(), true));
    }

    private fun with_emits<T>(_guid: vector<u8>,_msg: T,x: u64): u64 {
        x
    }
    spec {
      emit $t1 to $t0;
      emit $t1 to $t0 if true;
      emit $t1 to $t0 if Gt($t2, 7);
    }

} // end 0x42::M

// -- Sourcified model before first bytecode pipeline
module 0x42::M {
    struct Ghost$some_global has copy, drop, store, key {
        v: u64,
    }
    fun add_some(x: &mut u64): u64 {
        *x = *x + 1;
        *x
    }
    fun multiple_results(x: u64): (u64, bool) {
        (x, true)
    }
    fun with_emits<T: drop>(_guid: vector<u8>, _msg: T, x: u64): u64 {
        x
    }
}
