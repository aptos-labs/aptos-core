// -- Model dump before bytecode pipeline
module 0x42::M {
    struct MyTable1<K,V> {
        dummy_field: bool,
    }
    spec {
    }

    struct MyTable2<K,V> {
        dummy_field: bool,
    }
    spec {
    }

    private native fun contains<K,V>(t: &MyTable2<K, V>,k: K): bool;
    private native fun borrow<K,V>(t: &MyTable2<K, V>,k: K): &V;
    private native fun borrow_mut<K,V>(t: &mut MyTable1<K, V>,k: K): &mut V;
    private native fun destroy_empty<K,V>(t: MyTable1<K, V>);
    private native fun length<K,V>(t: &MyTable1<K, V>): u64;
    private native fun remove<K,V>(t: &mut MyTable2<K, V>,k: K): V;
    private native fun new<K,V>(): MyTable1<K, V>;
    private native fun new2<K,V>(): MyTable2<K, V>;
    spec fun spec_len<K,V>(t: MyTable1<#0, #1>): num;
    spec fun spec_set<K,V>(t: MyTable1<#0, #1>,k: #0,v: #1): MyTable1<#0, #1>;
    spec fun spec_get<K,V>(t: MyTable1<#0, #1>,k: #0): #1;
    spec fun spec_len2<K,V>(t: MyTable2<#0, #1>): num;
    spec fun spec_del<K,V>(t: MyTable2<#0, #1>): num;
    spec fun spec_has_key<K,V>(t: MyTable2<#0, #1>,k: #0): bool;
} // end 0x42::M

// -- Sourcified model before bytecode pipeline
module 0x42::M {
    struct MyTable1<phantom K, phantom V> {
    }
    /*
     spec {
    }

    */
    struct MyTable2<phantom K, phantom V> {
    }
    /*
     spec {
    }

    */
    native fun contains<K, V>(t: &MyTable2<K, V>, k: K): bool;
    native fun borrow<K, V>(t: &MyTable2<K, V>, k: K): &V;
    native fun borrow_mut<K, V>(t: &mut MyTable1<K, V>, k: K): &mut V;
    native fun destroy_empty<K, V>(t: MyTable1<K, V>);
    native fun length<K, V>(t: &MyTable1<K, V>): u64;
    native fun remove<K, V>(t: &mut MyTable2<K, V>, k: K): V;
    native fun new<K, V>(): MyTable1<K, V>;
    native fun new2<K, V>(): MyTable2<K, V>;
}
