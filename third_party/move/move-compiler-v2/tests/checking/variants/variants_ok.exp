// -- Model dump before bytecode pipeline
module 0x815::m {
    use 0x815::m; // resolved as: 0x815::m
    enum Color {
        RGB {
            red: u64,
            green: u64,
            blue: u64,
        }
        Red,
        Blue,
    }
    enum ColorUsesBlockNoComma {
        RGB {
            red: u64,
            green: u64,
            blue: u64,
        }
        Red,
        Blue,
    }
    enum CommonFields {
        Foo {
            x: u64,
            y: u8,
        }
        Bar {
            x: u64,
            z: u32,
        }
        Baz {
            other: u32,
        }
    }
    private fun t1(self: Color): bool {
        match (self) {
          m::Color::RGB{ red, green, blue } => {
            Gt<u64>(Add<u64>(Add<u64>(red, green), blue), 0)
          }
          m::Color::Red => {
            true
          }
          m::Color::Blue => {
            false
          }
        }

    }
    private fun t1_address_qualified(self: Color): bool {
        match (self) {
          m::Color::RGB{ red, green, blue } => {
            Gt<u64>(Add<u64>(Add<u64>(red, green), blue), 0)
          }
          m::Color::Red => {
            true
          }
          m::Color::Blue => {
            false
          }
        }

    }
    private fun t1_field_named(self: Color): bool {
        match (self) {
          m::Color::RGB{ red: r, green: g, blue } => {
            Gt<u64>(Add<u64>(Add<u64>(r, g), blue), 0)
          }
          m::Color::Red => {
            true
          }
          m::Color::Blue => {
            false
          }
        }

    }
    private fun t1_module_qualified(self: Color): bool {
        match (self) {
          m::Color::RGB{ red, green, blue } => {
            Gt<u64>(Add<u64>(Add<u64>(red, green), blue), 0)
          }
          m::Color::Red => {
            true
          }
          m::Color::Blue => {
            false
          }
        }

    }
    private fun t1_uses_block(self: Color): bool {
        match (self) {
          m::Color::RGB{ red, green, blue } => {
            Gt<u64>(Add<u64>(Add<u64>(red, green), blue), 0)
          }
          m::Color::Red => {
            true
          }
          m::Color::Blue => {
            false
          }
        }

    }
    private fun t1_uses_block_no_comma(self: Color): bool {
        match (self) {
          m::Color::RGB{ red, green, blue } => {
            Gt<u64>(Add<u64>(Add<u64>(red, green), blue), 0)
          }
          m::Color::Red => {
            true
          }
          m::Color::Blue => {
            false
          }
        }

    }
    private fun t2(self: Color): bool {
        match (self) {
          m::Color::RGB{ red, green, blue } => {
            Gt<u64>(Add<u64>(Add<u64>(red, green), blue), 0)
          }
          _: Color => {
            true
          }
        }

    }
    private fun t3(self: Color): bool {
        match (Borrow(Immutable)(self)) {
          m::Color::RGB{ red, green, blue } => {
            Gt<u64>(Add<u64>(Add<u64>(Deref(red), Deref(green)), Deref(blue)), 0)
          }
          _: &Color => {
            true
          }
        }

    }
    private fun t4(self: Color): Color {
        match (Borrow(Mutable)(self)) {
          m::Color::RGB{ red, green: _, blue: _ } => {
            red = 2
          }
          _: &mut Color => {
            Tuple()
          }
        }
        ;
        self
    }
    private fun t5_freeze(self: Color): u64 {
        {
          let x: u64 = 1;
          {
            let r: &u64 = match (Borrow(Mutable)(self)) {
              m::Color::Red => {
                Borrow(Immutable)(x)
              }
              m::Color::Blue => {
                Freeze(false)(Borrow(Mutable)(x))
              }
              _: &mut Color => {
                Freeze(false)(Borrow(Mutable)(x))
              }
            }
            ;
            Deref(r)
          }
        }
    }
    private fun t6_construct(self: Color): Color {
        match (self) {
          m::Color::RGB{ red, green, blue } => {
            pack m::Color::RGB(Add<u64>(red, 1), Sub<u64>(green, 1), blue)
          }
          _: Color => {
            self
          }
        }

    }
    private fun t7_let_unpack(self: Color): u64 {
        {
          let m::Color::RGB{ red, green, blue } = self;
          Add<u64>(Add<u64>(red, green), blue)
        }
    }
    private fun t8_unqualified_variant(self: Color): bool {
        match (self) {
          m::Color::RGB{ red, green, blue } => {
            And(Neq<u64>(red, green), Neq<u64>(green, blue))
          }
          m::Color::Red => {
            true
          }
          m::Color::Blue => {
            false
          }
        }

    }
    private fun t9_common_field(self: CommonFields): u64 {
        select_variants m::CommonFields.Foo.x|m::CommonFields.Bar.x<CommonFields>(self)
    }
    private fun t9_common_field_ref(self: &CommonFields): &u64 {
        Borrow(Immutable)(select_variants m::CommonFields.Foo.x|m::CommonFields.Bar.x<&CommonFields>(self))
    }
} // end 0x815::m

// -- Sourcified model before bytecode pipeline
module 0x815::m {
    use 0x815::m;
    enum Color {
        RGB {
            red: u64,
            green: u64,
            blue: u64,
        }
        Red,
        Blue,
    }
    enum ColorUsesBlockNoComma {
        RGB {
            red: u64,
            green: u64,
            blue: u64,
        }
        Red,
        Blue,
    }
    enum CommonFields {
        Foo {
            x: u64,
            y: u8,
        }
        Bar {
            x: u64,
            z: u32,
        }
        Baz {
            other: u32,
        }
    }
    fun t1(self: Color): bool {
        match (self) {
            Color::RGB{red: red,green: green,blue: blue} => red + green + blue > 0,
            Color::Red{} => true,
            Color::Blue{} => false,
        }
    }
    fun t1_address_qualified(self: Color): bool {
        match (self) {
            Color::RGB{red: red,green: green,blue: blue} => red + green + blue > 0,
            Color::Red{} => true,
            Color::Blue{} => false,
        }
    }
    fun t1_field_named(self: Color): bool {
        match (self) {
            Color::RGB{red: r,green: g,blue: blue} => r + g + blue > 0,
            Color::Red{} => true,
            Color::Blue{} => false,
        }
    }
    fun t1_module_qualified(self: Color): bool {
        match (self) {
            Color::RGB{red: red,green: green,blue: blue} => red + green + blue > 0,
            Color::Red{} => true,
            Color::Blue{} => false,
        }
    }
    fun t1_uses_block(self: Color): bool {
        match (self) {
            Color::RGB{red: red,green: green,blue: blue} => red + green + blue > 0,
            Color::Red{} => true,
            Color::Blue{} => false,
        }
    }
    fun t1_uses_block_no_comma(self: Color): bool {
        match (self) {
            Color::RGB{red: red,green: green,blue: blue} => red + green + blue > 0,
            Color::Red{} => true,
            Color::Blue{} => false,
        }
    }
    fun t2(self: Color): bool {
        match (self) {
            Color::RGB{red: red,green: green,blue: blue} => red + green + blue > 0,
            _ => true,
        }
    }
    fun t3(self: Color): bool {
        match (&self) {
            Color::RGB{red: red,green: green,blue: blue} => *red + *green + *blue > 0,
            _ => true,
        }
    }
    fun t4(self: Color): Color {
        match (&mut self) {
            Color::RGB{red: red,green: _,blue: _} => *red = 2,
            _ => (),
        };
        self
    }
    fun t5_freeze(self: Color): u64 {
        let x = 1;
        let r = match (&mut self) {
            Color::Red{} => &x,
            Color::Blue{} => /*freeze*/&mut x,
            _ => /*freeze*/&mut x,
        };
        *r
    }
    fun t6_construct(self: Color): Color {
        match (self) {
            Color::RGB{red: red,green: green,blue: blue} => Color::RGB{red: red + 1,green: green - 1,blue: blue},
            _ => self,
        }
    }
    fun t7_let_unpack(self: Color): u64 {
        let Color::RGB{red: red,green: green,blue: blue} = self;
        red + green + blue
    }
    fun t8_unqualified_variant(self: Color): bool {
        match (self) {
            Color::RGB{red: red,green: green,blue: blue} => red != green && green != blue,
            Color::Red{} => true,
            Color::Blue{} => false,
        }
    }
    fun t9_common_field(self: CommonFields): u64 {
        self.x
    }
    fun t9_common_field_ref(self: &CommonFields): &u64 {
        &self.x
    }
}
