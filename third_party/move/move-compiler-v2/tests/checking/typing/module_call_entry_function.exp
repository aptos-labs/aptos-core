// -- Model dump before first bytecode pipeline
module 0x2::Y {
    friend fun f_friend() {
        Tuple()
    }
} // end 0x2::Y
module 0x2::X {
    public fun f_public() {
        Tuple()
    }
    public entry fun f_script() {
        Tuple()
    }
} // end 0x2::X
module 0x2::M {
    use 0x2::X; // resolved as: 0x2::X
    use 0x2::Y; // resolved as: 0x2::Y
    friend fun f_friend() {
        Tuple()
    }
    public fun f_public() {
        Tuple()
    }
    public entry fun f_script() {
        Tuple()
    }
    private fun f_private() {
        Tuple()
    }
    public entry fun f_script_call_friend() {
        Y::f_friend()
    }
    public entry fun f_script_call_public() {
        X::f_public()
    }
    public entry fun f_script_call_script() {
        X::f_script()
    }
    public entry fun f_script_call_self_friend() {
        M::f_friend()
    }
    public entry fun f_script_call_self_private() {
        M::f_private()
    }
    public entry fun f_script_call_self_public() {
        M::f_public()
    }
    public entry fun f_script_call_self_script() {
        M::f_script()
    }
} // end 0x2::M

// -- Sourcified model before first bytecode pipeline
module 0x2::Y {
    friend 0x2::M;
    friend fun f_friend() {
    }
}
module 0x2::X {
    public fun f_public() {
    }
    public entry fun f_script() {
    }
}
module 0x2::M {
    use 0x2::Y;
    use 0x2::X;
    friend fun f_friend() {
    }
    public fun f_public() {
    }
    public entry fun f_script() {
    }
    fun f_private() {
    }
    public entry fun f_script_call_friend() {
        Y::f_friend()
    }
    public entry fun f_script_call_public() {
        X::f_public()
    }
    public entry fun f_script_call_script() {
        X::f_script()
    }
    public entry fun f_script_call_self_friend() {
        f_friend()
    }
    public entry fun f_script_call_self_private() {
        f_private()
    }
    public entry fun f_script_call_self_public() {
        f_public()
    }
    public entry fun f_script_call_self_script() {
        f_script()
    }
}
