
Diagnostics:
warning: unused type parameter
  ┌─ tests/checking/typing/v1-examples/multi_pool_money_market_token.move:5:21
  │
5 │     native struct T<K, V> has copy, drop, store;
  │                     ^
  │                     │
  │                     Unused type parameter `K`. Consider declaring it as phantom

warning: unused type parameter
  ┌─ tests/checking/typing/v1-examples/multi_pool_money_market_token.move:5:24
  │
5 │     native struct T<K, V> has copy, drop, store;
  │                        ^
  │                        │
  │                        Unused type parameter `V`. Consider declaring it as phantom

// -- Model dump before bytecode pipeline
module 0x2::Token {
    struct Coin<AssetType> {
        type: AssetType,
        value: u64,
    }
    public fun create<ATy>(type: ATy,value: u64): Coin<ATy> {
        pack Token::Coin<ATy>(type, value)
    }
    public fun value<ATy>(coin: &Coin<ATy>): u64 {
        select Token::Coin.value<&Coin<ATy>>(coin)
    }
    public fun deposit<ATy>(coin: &mut Coin<ATy>,check: Coin<ATy>) {
        {
          let Token::Coin<ATy>{ type, value } = check;
          if Eq<ATy>(Borrow(Immutable)(select Token::Coin.type<&mut Coin<ATy>>(coin)), Borrow(Immutable)(type)) {
            Tuple()
          } else {
            Abort(42)
          };
          select Token::Coin.value<&mut Coin<ATy>>(coin) = Add<u64>(select Token::Coin.value<&mut Coin<ATy>>(coin), value);
          Tuple()
        }
    }
    public fun destroy_zero<ATy>(coin: Coin<ATy>) {
        {
          let Token::Coin<ATy>{ type: _, value } = coin;
          if Eq<u64>(value, 0) {
            Tuple()
          } else {
            Abort(11)
          }
        }
    }
    public fun join<ATy>(xus: Coin<ATy>,coin2: Coin<ATy>): Coin<ATy> {
        Token::deposit<ATy>(Borrow(Mutable)(xus), coin2);
        xus
    }
    public fun split<ATy>(coin: Coin<ATy>,amount: u64): (Coin<ATy>, Coin<ATy>) {
        {
          let other: Coin<ATy> = Token::withdraw<ATy>(Borrow(Mutable)(coin), amount);
          Tuple(coin, other)
        }
    }
    public fun withdraw<ATy>(coin: &mut Coin<ATy>,amount: u64): Coin<ATy> {
        if Ge<u64>(select Token::Coin.value<&mut Coin<ATy>>(coin), amount) {
          Tuple()
        } else {
          Abort(10)
        };
        select Token::Coin.value<&mut Coin<ATy>>(coin) = Sub<u64>(select Token::Coin.value<&mut Coin<ATy>>(coin), amount);
        pack Token::Coin<ATy>(Deref(Borrow(Immutable)(select Token::Coin.type<&mut Coin<ATy>>(coin))), amount)
    }
} // end 0x2::Token
module 0x2::Map {
    struct T<K,V> {
    }
    public native fun empty<K,V>(): T<K, V>;
    public native fun remove<K,V>(m: &T<K, V>,k: &K): V;
    public native fun contains_key<K,V>(m: &T<K, V>,k: &K): bool;
    public native fun get<K,V>(m: &T<K, V>,k: &K): &V;
    public native fun get_mut<K,V>(m: &mut T<K, V>,k: &K): &mut V;
    public native fun insert<K,V>(m: &T<K, V>,k: K,v: V);
} // end 0x2::Map
module 0x3::OneToOneMarket {
    use std::signer;
    use 0x2::Map; // resolved as: 0x2::Map
    use 0x2::Token; // resolved as: 0x2::Token
    struct BorrowRecord<InputAsset,OutputAsset> {
        record: Map::T<address, u64>,
    }
    struct DepositRecord<InputAsset,OutputAsset> {
        record: Map::T<address, u64>,
    }
    struct Pool<AssetType> {
        coin: Token::Coin<AssetType>,
    }
    struct Price<InputAsset,OutputAsset> {
        price: u64,
    }
    public fun borrow<In,Out>(account: &signer,pool_owner: address,amount: u64): Token::Coin<Out>
        acquires Price(*)
        acquires Pool(*)
        acquires DepositRecord(*)
        acquires BorrowRecord(*)
     {
        if Le<u64>(amount, OneToOneMarket::max_borrow_amount<In, Out>(account, pool_owner)) {
          Tuple()
        } else {
          Abort(1025)
        };
        OneToOneMarket::update_borrow_record<In, Out>(account, pool_owner, amount);
        {
          let pool: &mut Pool<Out> = BorrowGlobal(Mutable)<Pool<Out>>(pool_owner);
          Token::withdraw<Out>(Borrow(Mutable)(select OneToOneMarket::Pool.coin<&mut Pool<Out>>(pool)), amount)
        }
    }
    public fun deposit<In,Out>(account: &signer,pool_owner: address,coin: Token::Coin<In>)
        acquires Pool(*)
        acquires DepositRecord(*)
     {
        {
          let amount: u64 = Token::value<In>(Borrow(Immutable)(coin));
          OneToOneMarket::update_deposit_record<In, Out>(account, pool_owner, amount);
          {
            let pool: &mut Pool<In> = BorrowGlobal(Mutable)<Pool<In>>(pool_owner);
            Token::deposit<In>(Borrow(Mutable)(select OneToOneMarket::Pool.coin<&mut Pool<In>>(pool)), coin)
          }
        }
    }
    private fun accept<AssetType>(account: &signer,init: Token::Coin<AssetType>) {
        {
          let sender: address = signer::address_of(account);
          if Not(exists<Pool<AssetType>>(sender)) {
            Tuple()
          } else {
            Abort(42)
          };
          MoveTo<Pool<AssetType>>(account, pack OneToOneMarket::Pool<AssetType>(init))
        }
    }
    private fun borrowed_amount<In,Out>(account: &signer,pool_owner: address): u64
        acquires BorrowRecord(*)
     {
        {
          let sender: address = signer::address_of(account);
          if Not(exists<BorrowRecord<In, Out>>(sender)) {
            return 0
          } else {
            Tuple()
          };
          {
            let record: &Map::T<address, u64> = Borrow(Immutable)(select OneToOneMarket::BorrowRecord.record<&BorrowRecord<In, Out>>(BorrowGlobal(Immutable)<BorrowRecord<In, Out>>(sender)));
            if Map::contains_key<address, u64>(record, Borrow(Immutable)(pool_owner)) {
              Deref(Map::get<address, u64>(record, Borrow(Immutable)(pool_owner)))
            } else {
              0
            }
          }
        }
    }
    private fun deposited_amount<In,Out>(account: &signer,pool_owner: address): u64
        acquires DepositRecord(*)
     {
        {
          let sender: address = signer::address_of(account);
          if Not(exists<DepositRecord<In, Out>>(sender)) {
            return 0
          } else {
            Tuple()
          };
          {
            let record: &Map::T<address, u64> = Borrow(Immutable)(select OneToOneMarket::DepositRecord.record<&DepositRecord<In, Out>>(BorrowGlobal(Immutable)<DepositRecord<In, Out>>(sender)));
            if Map::contains_key<address, u64>(record, Borrow(Immutable)(pool_owner)) {
              Deref(Map::get<address, u64>(record, Borrow(Immutable)(pool_owner)))
            } else {
              0
            }
          }
        }
    }
    private fun max_borrow_amount<In,Out>(account: &signer,pool_owner: address): u64
        acquires Price(*)
        acquires Pool(*)
        acquires DepositRecord(*)
        acquires BorrowRecord(*)
     {
        {
          let input_deposited: u64 = OneToOneMarket::deposited_amount<In, Out>(account, pool_owner);
          {
            let output_deposited: u64 = OneToOneMarket::borrowed_amount<In, Out>(account, pool_owner);
            {
              let input_into_output: u64 = Mul<u64>(input_deposited, select OneToOneMarket::Price.price<&Price<In, Out>>(BorrowGlobal(Immutable)<Price<In, Out>>(pool_owner)));
              {
                let max_output: u64 = if Lt<u64>(input_into_output, output_deposited) {
                  0
                } else {
                  Sub<u64>(input_into_output, output_deposited)
                };
                {
                  let available_output: u64 = {
                    let pool: &Pool<Out> = BorrowGlobal(Immutable)<Pool<Out>>(pool_owner);
                    Token::value<Out>(Borrow(Immutable)(select OneToOneMarket::Pool.coin<&Pool<Out>>(pool)))
                  };
                  if Lt<u64>(max_output, available_output) {
                    max_output
                  } else {
                    available_output
                  }
                }
              }
            }
          }
        }
    }
    public fun register_price<In,Out>(account: &signer,initial_in: Token::Coin<In>,initial_out: Token::Coin<Out>,price: u64) {
        OneToOneMarket::accept<In>(account, initial_in);
        OneToOneMarket::accept<Out>(account, initial_out);
        MoveTo<Price<In, Out>>(account, pack OneToOneMarket::Price<In, Out>(price))
    }
    private fun update_borrow_record<In,Out>(account: &signer,pool_owner: address,amount: u64)
        acquires BorrowRecord(*)
     {
        {
          let sender: address = signer::address_of(account);
          if Not(exists<BorrowRecord<In, Out>>(sender)) {
            MoveTo<BorrowRecord<In, Out>>(account, pack OneToOneMarket::BorrowRecord<In, Out>(Map::empty<address, u64>()))
          } else {
            Tuple()
          };
          {
            let record: &mut Map::T<address, u64> = Borrow(Mutable)(select OneToOneMarket::BorrowRecord.record<&mut BorrowRecord<In, Out>>(BorrowGlobal(Mutable)<BorrowRecord<In, Out>>(sender)));
            if Map::contains_key<address, u64>(Freeze(false)(record), Borrow(Immutable)(pool_owner)) {
              {
                let old_amount: u64 = Map::remove<address, u64>(Freeze(false)(record), Borrow(Immutable)(pool_owner));
                amount: u64 = Add<u64>(amount, old_amount);
                Tuple()
              }
            } else {
              Tuple()
            };
            Map::insert<address, u64>(Freeze(false)(record), pool_owner, amount)
          }
        }
    }
    private fun update_deposit_record<In,Out>(account: &signer,pool_owner: address,amount: u64)
        acquires DepositRecord(*)
     {
        {
          let sender: address = signer::address_of(account);
          if Not(exists<DepositRecord<In, Out>>(sender)) {
            MoveTo<DepositRecord<In, Out>>(account, pack OneToOneMarket::DepositRecord<In, Out>(Map::empty<address, u64>()))
          } else {
            Tuple()
          };
          {
            let record: &mut Map::T<address, u64> = Borrow(Mutable)(select OneToOneMarket::DepositRecord.record<&mut DepositRecord<In, Out>>(BorrowGlobal(Mutable)<DepositRecord<In, Out>>(sender)));
            if Map::contains_key<address, u64>(Freeze(false)(record), Borrow(Immutable)(pool_owner)) {
              {
                let old_amount: u64 = Map::remove<address, u64>(Freeze(false)(record), Borrow(Immutable)(pool_owner));
                amount: u64 = Add<u64>(amount, old_amount);
                Tuple()
              }
            } else {
              Tuple()
            };
            Map::insert<address, u64>(Freeze(false)(record), pool_owner, amount)
          }
        }
    }
} // end 0x3::OneToOneMarket
module 0x70dd::ToddNickels {
    use 0x2::Token; // resolved as: 0x2::Token
    use std::signer;
    struct T {
        dummy_field: bool,
    }
    struct Wallet {
        nickels: Token::Coin<T>,
    }
    public fun init(account: &signer) {
        if Eq<address>(signer::address_of(account), 0x70dd) {
          Tuple()
        } else {
          Abort(42)
        };
        MoveTo<Wallet>(account, pack ToddNickels::Wallet(Token::create<T>(pack ToddNickels::T(false), 0)))
    }
    public fun destroy(c: Token::Coin<T>)
        acquires Wallet(*)
     {
        Token::deposit<T>(Borrow(Mutable)(select ToddNickels::Wallet.nickels<&mut Wallet>(BorrowGlobal(Mutable)<Wallet>(0x70dd))), c)
    }
    public fun mint(account: &signer): Token::Coin<T> {
        if Eq<address>(signer::address_of(account), 0x70dd) {
          Tuple()
        } else {
          Abort(42)
        };
        Token::create<T>(pack ToddNickels::T(false), 5)
    }
} // end 0x70dd::ToddNickels

// -- Sourcified model before bytecode pipeline
module 0x2::Token {
    struct Coin<AssetType: copy + drop> has store {
        type: AssetType,
        value: u64,
    }
    public fun create<ATy: copy + drop>(type: ATy, value: u64): Coin<ATy> {
        Coin<ATy>{type: type,value: value}
    }
    public fun value<ATy: copy + drop>(coin: &Coin<ATy>): u64 {
        coin.value
    }
    public fun deposit<ATy: copy + drop>(coin: &mut Coin<ATy>, check: Coin<ATy>) {
        let Coin<ATy>{type: type,value: value} = check;
        if (&coin.type == &type) () else abort 42;
        coin.value = coin.value + value;
    }
    public fun destroy_zero<ATy: copy + drop>(coin: Coin<ATy>) {
        let Coin<ATy>{type: _,value: value} = coin;
        if (value == 0) () else abort 11
    }
    public fun join<ATy: copy + drop>(xus: Coin<ATy>, coin2: Coin<ATy>): Coin<ATy> {
        deposit<ATy>(&mut xus, coin2);
        xus
    }
    public fun split<ATy: copy + drop>(coin: Coin<ATy>, amount: u64): (Coin<ATy>, Coin<ATy>) {
        let other = withdraw<ATy>(&mut coin, amount);
        (coin, other)
    }
    public fun withdraw<ATy: copy + drop>(coin: &mut Coin<ATy>, amount: u64): Coin<ATy> {
        if (coin.value >= amount) () else abort 10;
        coin.value = coin.value - amount;
        Coin<ATy>{type: *&coin.type,value: amount}
    }
}
module 0x2::Map {
    struct T<K, V> has copy, drop, store {
    }
    public native fun empty<K, V>(): T<K, V>;
    public native fun remove<K, V>(m: &T<K, V>, k: &K): V;
    public native fun contains_key<K, V>(m: &T<K, V>, k: &K): bool;
    public native fun get<K, V>(m: &T<K, V>, k: &K): &V;
    public native fun get_mut<K, V>(m: &mut T<K, V>, k: &K): &mut V;
    public native fun insert<K, V>(m: &T<K, V>, k: K, v: V);
}
module 0x3::OneToOneMarket {
    use 0x2::Token;
    use 0x2::Map;
    struct BorrowRecord<phantom InputAsset: copy + drop, phantom OutputAsset: copy + drop> has key {
        record: Map::T<address, u64>,
    }
    struct DepositRecord<phantom InputAsset: copy + drop, phantom OutputAsset: copy + drop> has key {
        record: Map::T<address, u64>,
    }
    struct Pool<AssetType: copy + drop> has key {
        coin: Token::Coin<AssetType>,
    }
    struct Price<phantom InputAsset: copy + drop, phantom OutputAsset: copy + drop> has key {
        price: u64,
    }
    public fun borrow<In: copy + drop + store, Out: copy + drop + store>(account: &signer, pool_owner: address, amount: u64): Token::Coin<Out>
        acquires Price
        acquires Pool
        acquires DepositRecord
        acquires BorrowRecord
    {
        if (amount <= max_borrow_amount<In,Out>(account, pool_owner)) () else abort 1025;
        update_borrow_record<In,Out>(account, pool_owner, amount);
        let pool = borrow_global_mut<Pool<Out>>(pool_owner);
        Token::withdraw<Out>(&mut pool.coin, amount)
    }
    public fun deposit<In: copy + drop + store, Out: copy + drop + store>(account: &signer, pool_owner: address, coin: Token::Coin<In>)
        acquires Pool
        acquires DepositRecord
    {
        let amount = Token::value<In>(&coin);
        update_deposit_record<In,Out>(account, pool_owner, amount);
        let pool = borrow_global_mut<Pool<In>>(pool_owner);
        Token::deposit<In>(&mut pool.coin, coin)
    }
    fun accept<AssetType: copy + drop + store>(account: &signer, init: Token::Coin<AssetType>) {
        let sender = 0x1::signer::address_of(account);
        if (!exists<Pool<AssetType>>(sender)) () else abort 42;
        move_to<Pool<AssetType>>(account, Pool<AssetType>{coin: init})
    }
    fun borrowed_amount<In: copy + drop + store, Out: copy + drop + store>(account: &signer, pool_owner: address): u64
        acquires BorrowRecord
    {
        let sender = 0x1::signer::address_of(account);
        if (!exists<BorrowRecord<In, Out>>(sender)) return 0;
        let record = &borrow_global<BorrowRecord<In, Out>>(sender).record;
        if (Map::contains_key<address,u64>(record, &pool_owner)) *Map::get<address,u64>(record, &pool_owner) else 0
    }
    fun deposited_amount<In: copy + drop + store, Out: copy + drop + store>(account: &signer, pool_owner: address): u64
        acquires DepositRecord
    {
        let sender = 0x1::signer::address_of(account);
        if (!exists<DepositRecord<In, Out>>(sender)) return 0;
        let record = &borrow_global<DepositRecord<In, Out>>(sender).record;
        if (Map::contains_key<address,u64>(record, &pool_owner)) *Map::get<address,u64>(record, &pool_owner) else 0
    }
    fun max_borrow_amount<In: copy + drop + store, Out: copy + drop + store>(account: &signer, pool_owner: address): u64
        acquires Price
        acquires Pool
        acquires DepositRecord
        acquires BorrowRecord
    {
        let input_deposited = deposited_amount<In,Out>(account, pool_owner);
        let output_deposited = borrowed_amount<In,Out>(account, pool_owner);
        let input_into_output = input_deposited * borrow_global<Price<In, Out>>(pool_owner).price;
        let max_output = if (input_into_output < output_deposited) 0 else input_into_output - output_deposited;
        let available_output = {
            let pool = borrow_global<Pool<Out>>(pool_owner);
            Token::value<Out>(&pool.coin)
        };
        if (max_output < available_output) max_output else available_output
    }
    public fun register_price<In: copy + drop + store, Out: copy + drop + store>(account: &signer, initial_in: Token::Coin<In>, initial_out: Token::Coin<Out>, price: u64) {
        accept<In>(account, initial_in);
        accept<Out>(account, initial_out);
        move_to<Price<In, Out>>(account, Price<In,Out>{price: price})
    }
    fun update_borrow_record<In: copy + drop + store, Out: copy + drop + store>(account: &signer, pool_owner: address, amount: u64)
        acquires BorrowRecord
    {
        let sender = 0x1::signer::address_of(account);
        if (!exists<BorrowRecord<In, Out>>(sender)) move_to<BorrowRecord<In, Out>>(account, BorrowRecord<In,Out>{record: Map::empty<address,u64>()});
        let record = &mut borrow_global_mut<BorrowRecord<In, Out>>(sender).record;
        if (Map::contains_key<address,u64>(/*freeze*/record, &pool_owner)) {
            let old_amount = Map::remove<address,u64>(/*freeze*/record, &pool_owner);
            amount = amount + old_amount;
        };
        Map::insert<address,u64>(/*freeze*/record, pool_owner, amount)
    }
    fun update_deposit_record<In: copy + drop + store, Out: copy + drop + store>(account: &signer, pool_owner: address, amount: u64)
        acquires DepositRecord
    {
        let sender = 0x1::signer::address_of(account);
        if (!exists<DepositRecord<In, Out>>(sender)) move_to<DepositRecord<In, Out>>(account, DepositRecord<In,Out>{record: Map::empty<address,u64>()});
        let record = &mut borrow_global_mut<DepositRecord<In, Out>>(sender).record;
        if (Map::contains_key<address,u64>(/*freeze*/record, &pool_owner)) {
            let old_amount = Map::remove<address,u64>(/*freeze*/record, &pool_owner);
            amount = amount + old_amount;
        };
        Map::insert<address,u64>(/*freeze*/record, pool_owner, amount)
    }
}
module 0x70dd::ToddNickels {
    use 0x2::Token;
    struct T has copy, drop, store {
    }
    struct Wallet has key {
        nickels: Token::Coin<T>,
    }
    public fun init(account: &signer) {
        if (0x1::signer::address_of(account) == 0x70dd) () else abort 42;
        move_to<Wallet>(account, Wallet{nickels: Token::create<T>(T{}, 0)})
    }
    public fun destroy(c: Token::Coin<T>)
        acquires Wallet
    {
        Token::deposit<T>(&mut borrow_global_mut<Wallet>(0x70dd).nickels, c)
    }
    public fun mint(account: &signer): Token::Coin<T> {
        if (0x1::signer::address_of(account) == 0x70dd) () else abort 42;
        Token::create<T>(T{}, 5)
    }
}
