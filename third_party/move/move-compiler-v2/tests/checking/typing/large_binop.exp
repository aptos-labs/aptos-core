// -- Model dump before first bytecode pipeline
module <SELF>_0 {
    private fun main() {
        Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(And(true, true), Not(false)), And(Eq<u64>(Shl<u64>(1, 7), 128), Eq<u64>(Shr<u64>(128, 7), 1))), And(Eq<u64>(Div<u64>(255, 2), 127), Eq<u64>(Mod<u64>(255, 2), 1))), And(Eq<u64>(Add<u64>(254, 1), 255), Eq<u64>(Sub<u64>(255, 255), 0))), And(Eq<u64>(BitAnd<u64>(255, 255), 255), Eq<u64>(BitOr<u64>(255, 255), 255))), And(Eq<u64>(Xor<u64>(255, 255), 0), Eq<vector<u8>>([66], [66]))), And(And(Neq<vector<u8>>([104, 101, 108, 108, 111], [98, 121, 101]), And(true, true)), Not(false))), And(Eq<u64>(Shl<u64>(1, 7), 128), Eq<u64>(Shr<u64>(128, 7), 1))), And(Eq<u64>(Div<u64>(255, 2), 127), Eq<u64>(Mod<u64>(255, 2), 1))), And(Eq<u64>(Add<u64>(254, 1), 255), Eq<u64>(Sub<u64>(255, 255), 0))), And(Eq<u64>(BitAnd<u64>(255, 255), 255), Eq<u64>(BitOr<u64>(255, 255), 255))), And(Eq<u64>(Xor<u64>(255, 255), 0), Eq<vector<u8>>([66], [66]))), And(And(Neq<vector<u8>>([104, 101, 108, 108, 111], [98, 121, 101]), And(true, true)), Not(false))), And(Eq<u64>(Shl<u64>(1, 7), 128), Eq<u64>(Shr<u64>(128, 7), 1))), And(Eq<u64>(Div<u64>(255, 2), 127), Eq<u64>(Mod<u64>(255, 2), 1))), And(Eq<u64>(Add<u64>(254, 1), 255), Eq<u64>(Sub<u64>(255, 255), 0))), And(Eq<u64>(BitAnd<u64>(255, 255), 255), Eq<u64>(BitOr<u64>(255, 255), 255))), And(Eq<u64>(Xor<u64>(255, 255), 0), Eq<vector<u8>>([66], [66]))), And(And(Neq<vector<u8>>([104, 101, 108, 108, 111], [98, 121, 101]), And(true, true)), Not(false))), And(Eq<u64>(Shl<u64>(1, 7), 128), Eq<u64>(Shr<u64>(128, 7), 1))), And(Eq<u64>(Div<u64>(255, 2), 127), Eq<u64>(Mod<u64>(255, 2), 1))), And(Eq<u64>(Add<u64>(254, 1), 255), Eq<u64>(Sub<u64>(255, 255), 0))), And(Eq<u64>(BitAnd<u64>(255, 255), 255), Eq<u64>(BitOr<u64>(255, 255), 255))), And(Eq<u64>(Xor<u64>(255, 255), 0), Eq<vector<u8>>([66], [66]))), And(And(Neq<vector<u8>>([104, 101, 108, 108, 111], [98, 121, 101]), And(true, true)), Not(false))), And(Eq<u64>(Shl<u64>(1, 7), 128), Eq<u64>(Shr<u64>(128, 7), 1))), And(Eq<u64>(Div<u64>(255, 2), 127), Eq<u64>(Mod<u64>(255, 2), 1))), And(Eq<u64>(Add<u64>(254, 1), 255), Eq<u64>(Sub<u64>(255, 255), 0))), And(Eq<u64>(BitAnd<u64>(255, 255), 255), Eq<u64>(BitOr<u64>(255, 255), 255))), And(Eq<u64>(Xor<u64>(255, 255), 0), Eq<vector<u8>>([66], [66]))), And(And(Neq<vector<u8>>([104, 101, 108, 108, 111], [98, 121, 101]), And(true, true)), Not(false))), And(Eq<u64>(Shl<u64>(1, 7), 128), Eq<u64>(Shr<u64>(128, 7), 1))), And(Eq<u64>(Div<u64>(255, 2), 127), Eq<u64>(Mod<u64>(255, 2), 1))), And(Eq<u64>(Add<u64>(254, 1), 255), Eq<u64>(Sub<u64>(255, 255), 0))), And(Eq<u64>(BitAnd<u64>(255, 255), 255), Eq<u64>(BitOr<u64>(255, 255), 255))), And(Eq<u64>(Xor<u64>(255, 255), 0), Eq<vector<u8>>([66], [66]))), And(And(Neq<vector<u8>>([104, 101, 108, 108, 111], [98, 121, 101]), And(true, true)), Not(false))), And(Eq<u64>(Shl<u64>(1, 7), 128), Eq<u64>(Shr<u64>(128, 7), 1))), And(Eq<u64>(Div<u64>(255, 2), 127), Eq<u64>(Mod<u64>(255, 2), 1))), And(Eq<u64>(Add<u64>(254, 1), 255), Eq<u64>(Sub<u64>(255, 255), 0))), And(Eq<u64>(BitAnd<u64>(255, 255), 255), Eq<u64>(BitOr<u64>(255, 255), 255))), And(Eq<u64>(Xor<u64>(255, 255), 0), Eq<vector<u8>>([66], [66]))), And(And(Neq<vector<u8>>([104, 101, 108, 108, 111], [98, 121, 101]), And(true, true)), Not(false))), And(Eq<u64>(Shl<u64>(1, 7), 128), Eq<u64>(Shr<u64>(128, 7), 1))), And(Eq<u64>(Div<u64>(255, 2), 127), Eq<u64>(Mod<u64>(255, 2), 1))), And(Eq<u64>(Add<u64>(254, 1), 255), Eq<u64>(Sub<u64>(255, 255), 0))), And(Eq<u64>(BitAnd<u64>(255, 255), 255), Eq<u64>(BitOr<u64>(255, 255), 255))), And(Eq<u64>(Xor<u64>(255, 255), 0), Eq<vector<u8>>([66], [66]))), And(And(Neq<vector<u8>>([104, 101, 108, 108, 111], [98, 121, 101]), And(true, true)), Not(false))), And(Eq<u64>(Shl<u64>(1, 7), 128), Eq<u64>(Shr<u64>(128, 7), 1))), And(Eq<u64>(Div<u64>(255, 2), 127), Eq<u64>(Mod<u64>(255, 2), 1))), And(Eq<u64>(Add<u64>(254, 1), 255), Eq<u64>(Sub<u64>(255, 255), 0))), And(Eq<u64>(BitAnd<u64>(255, 255), 255), Eq<u64>(BitOr<u64>(255, 255), 255))), And(Eq<u64>(Xor<u64>(255, 255), 0), Eq<vector<u8>>([66], [66]))), And(And(Neq<vector<u8>>([104, 101, 108, 108, 111], [98, 121, 101]), And(true, true)), Not(false))), And(Eq<u64>(Shl<u64>(1, 7), 128), Eq<u64>(Shr<u64>(128, 7), 1))), And(Eq<u64>(Div<u64>(255, 2), 127), Eq<u64>(Mod<u64>(255, 2), 1))), And(Eq<u64>(Add<u64>(254, 1), 255), Eq<u64>(Sub<u64>(255, 255), 0))), And(Eq<u64>(BitAnd<u64>(255, 255), 255), Eq<u64>(BitOr<u64>(255, 255), 255))), And(Eq<u64>(Xor<u64>(255, 255), 0), Eq<vector<u8>>([66], [66])));
        Tuple()
    }
} // end <SELF>_0

// -- Sourcified model before first bytecode pipeline
script {
    fun main() {
        true && true && !false || 1 << 7u8 == 128 && 128 >> 7u8 == 1 || 255 / 2 == 127 && 255 % 2 == 1 || 254 + 1 == 255 && 255 - 255 == 0 || 255 & 255 == 255 && 255 | 255 == 255 || 255 ^ 255 == 0 && vector[66u8] == vector[66u8] || vector[104u8, 101u8, 108u8, 108u8, 111u8] != vector[98u8, 121u8, 101u8] && (true && true) && !false || 1 << 7u8 == 128 && 128 >> 7u8 == 1 || 255 / 2 == 127 && 255 % 2 == 1 || 254 + 1 == 255 && 255 - 255 == 0 || 255 & 255 == 255 && 255 | 255 == 255 || 255 ^ 255 == 0 && vector[66u8] == vector[66u8] || vector[104u8, 101u8, 108u8, 108u8, 111u8] != vector[98u8, 121u8, 101u8] && (true && true) && !false || 1 << 7u8 == 128 && 128 >> 7u8 == 1 || 255 / 2 == 127 && 255 % 2 == 1 || 254 + 1 == 255 && 255 - 255 == 0 || 255 & 255 == 255 && 255 | 255 == 255 || 255 ^ 255 == 0 && vector[66u8] == vector[66u8] || vector[104u8, 101u8, 108u8, 108u8, 111u8] != vector[98u8, 121u8, 101u8] && (true && true) && !false || 1 << 7u8 == 128 && 128 >> 7u8 == 1 || 255 / 2 == 127 && 255 % 2 == 1 || 254 + 1 == 255 && 255 - 255 == 0 || 255 & 255 == 255 && 255 | 255 == 255 || 255 ^ 255 == 0 && vector[66u8] == vector[66u8] || vector[104u8, 101u8, 108u8, 108u8, 111u8] != vector[98u8, 121u8, 101u8] && (true && true) && !false || 1 << 7u8 == 128 && 128 >> 7u8 == 1 || 255 / 2 == 127 && 255 % 2 == 1 || 254 + 1 == 255 && 255 - 255 == 0 || 255 & 255 == 255 && 255 | 255 == 255 || 255 ^ 255 == 0 && vector[66u8] == vector[66u8] || vector[104u8, 101u8, 108u8, 108u8, 111u8] != vector[98u8, 121u8, 101u8] && (true && true) && !false || 1 << 7u8 == 128 && 128 >> 7u8 == 1 || 255 / 2 == 127 && 255 % 2 == 1 || 254 + 1 == 255 && 255 - 255 == 0 || 255 & 255 == 255 && 255 | 255 == 255 || 255 ^ 255 == 0 && vector[66u8] == vector[66u8] || vector[104u8, 101u8, 108u8, 108u8, 111u8] != vector[98u8, 121u8, 101u8] && (true && true) && !false || 1 << 7u8 == 128 && 128 >> 7u8 == 1 || 255 / 2 == 127 && 255 % 2 == 1 || 254 + 1 == 255 && 255 - 255 == 0 || 255 & 255 == 255 && 255 | 255 == 255 || 255 ^ 255 == 0 && vector[66u8] == vector[66u8] || vector[104u8, 101u8, 108u8, 108u8, 111u8] != vector[98u8, 121u8, 101u8] && (true && true) && !false || 1 << 7u8 == 128 && 128 >> 7u8 == 1 || 255 / 2 == 127 && 255 % 2 == 1 || 254 + 1 == 255 && 255 - 255 == 0 || 255 & 255 == 255 && 255 | 255 == 255 || 255 ^ 255 == 0 && vector[66u8] == vector[66u8] || vector[104u8, 101u8, 108u8, 108u8, 111u8] != vector[98u8, 121u8, 101u8] && (true && true) && !false || 1 << 7u8 == 128 && 128 >> 7u8 == 1 || 255 / 2 == 127 && 255 % 2 == 1 || 254 + 1 == 255 && 255 - 255 == 0 || 255 & 255 == 255 && 255 | 255 == 255 || 255 ^ 255 == 0 && vector[66u8] == vector[66u8] || vector[104u8, 101u8, 108u8, 108u8, 111u8] != vector[98u8, 121u8, 101u8] && (true && true) && !false || 1 << 7u8 == 128 && 128 >> 7u8 == 1 || 255 / 2 == 127 && 255 % 2 == 1 || 254 + 1 == 255 && 255 - 255 == 0 || 255 & 255 == 255 && 255 | 255 == 255 || 255 ^ 255 == 0 && vector[66u8] == vector[66u8];
    }
}
