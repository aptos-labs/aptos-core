// -- Model dump before first bytecode pipeline
module 0x8675309::M {
    private fun any<T>(): T {
        Abort(0)
    }
    private fun foo(x: &mut u64) {
        Freeze(true)<u64>(x);
        Freeze(true)<vector<bool>>(Borrow(Mutable)(M::any<vector<bool>>()));
        if And(true, false) {
          Tuple()
        } else {
          Abort(Deref(x))
        };
        if Or(true, false) {
          Tuple()
        } else {
          Abort(Cast<u64>(0))
        };
        Tuple()
    }
} // end 0x8675309::M

// -- Sourcified model before first bytecode pipeline
module 0x8675309::M {
    fun any<T>(): T {
        abort 0
    }
    fun foo(x: &mut u64) {
        /*freeze*/x;
        /*freeze*/&mut any<vector<bool>>();
        if (true && false) () else abort *x;
        if (true || false) () else abort 0u8 as u64;
    }
}
