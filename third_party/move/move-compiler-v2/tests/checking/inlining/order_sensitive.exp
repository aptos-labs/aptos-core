// -- Model dump before first bytecode pipeline
module 0x42::OrderSensitiveTest1 {
    public inline fun inline_fun1(a: u64,b: u64): u64 {
        Mul<u64>(a, b)
    }
    public inline fun inline_fun2(a: u64,b: u64): u64 {
        Add<u64>({
          let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
          Mul<u64>(a, b)
        }, Mul<u64>(2, {
          let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
          Add<u64>(Mul<u64>(a, b), 2)
        }))
    }
    public inline fun inline_fun3(a: u64,b: u64): u64 {
        Add<u64>(Mul<u64>(a, b), 2)
    }
} // end 0x42::OrderSensitiveTest1
module 0x42::OrderSensitiveTest2 {
    use 0x42::OrderSensitiveTest1; // resolved as: 0x42::OrderSensitiveTest1
    public inline fun inline_fun1(a: u64,b: u64): u64 {
        Add<u64>(Mul<u64>(a, b), 3)
    }
    public inline fun inline_fun2(a: u64,b: u64): u64 {
        Add<u64>(Add<u64>({
          let (a: u64, b: u64): (u64, u64) = Tuple({
            let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
            Add<u64>(Mul<u64>(a, b), 3)
          }, {
            let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
            Add<u64>(Mul<u64>(a, b), 4)
          });
          Add<u64>({
            let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
            Mul<u64>(a, b)
          }, Mul<u64>(2, {
            let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
            Add<u64>(Mul<u64>(a, b), 2)
          }))
        }, Mul<u64>(3, {
          let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
          Add<u64>(Mul<u64>(a, b), 3)
        })), Mul<u64>(5, {
          let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
          Add<u64>(Mul<u64>(a, b), 4)
        }))
    }
    public inline fun inline_fun3(a: u64,b: u64): u64 {
        Add<u64>(Mul<u64>(a, b), 4)
    }
} // end 0x42::OrderSensitiveTest2
module 0x42::OrderSensitiveTest3 {
    use 0x42::OrderSensitiveTest2; // resolved as: 0x42::OrderSensitiveTest2
    public inline fun fun1(a: u64,b: u64): u64 {
        Add<u64>(Mul<u64>(a, b), 5)
    }
    public fun fun2(a: u64,b: u64): u64 {
        Add<u64>({
          let (a: u64, b: u64): (u64, u64) = Tuple(Mul<u64>(7, {
            let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
            Add<u64>(Mul<u64>(a, b), 5)
          }), b);
          Add<u64>(Add<u64>({
            let (a: u64, b: u64): (u64, u64) = Tuple({
              let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
              Add<u64>(Mul<u64>(a, b), 3)
            }, {
              let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
              Add<u64>(Mul<u64>(a, b), 4)
            });
            Add<u64>({
              let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
              Mul<u64>(a, b)
            }, Mul<u64>(2, {
              let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
              Add<u64>(Mul<u64>(a, b), 2)
            }))
          }, Mul<u64>(3, {
            let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
            Add<u64>(Mul<u64>(a, b), 3)
          })), Mul<u64>(5, {
            let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
            Add<u64>(Mul<u64>(a, b), 4)
          }))
        }, Mul<u64>(9, {
          let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
          Add<u64>(Mul<u64>(a, b), 6)
        }))
    }
    public inline fun fun3(a: u64,b: u64): u64 {
        Add<u64>(Mul<u64>(a, b), 6)
    }
} // end 0x42::OrderSensitiveTest3

// -- Sourcified model before first bytecode pipeline
module 0x42::OrderSensitiveTest1 {
    public inline fun inline_fun1(a: u64, b: u64): u64 {
        a * b
    }
    public inline fun inline_fun2(a: u64, b: u64): u64 {
        {
            let (a,b) = (a, b);
            a * b
        } + 2 * {
            let (a,b) = (a, b);
            a * b + 2
        }
    }
    public inline fun inline_fun3(a: u64, b: u64): u64 {
        a * b + 2
    }
}
module 0x42::OrderSensitiveTest2 {
    use 0x42::OrderSensitiveTest1;
    public inline fun inline_fun1(a: u64, b: u64): u64 {
        a * b + 3
    }
    public inline fun inline_fun2(a: u64, b: u64): u64 {
        {
            let (a,b) = ({
                let (a,b) = (a, b);
                a * b + 3
            }, {
                let (a,b) = (a, b);
                a * b + 4
            });
            {
                let (a,b) = (a, b);
                a * b
            } + 2 * {
                let (a,b) = (a, b);
                a * b + 2
            }
        } + 3 * {
            let (a,b) = (a, b);
            a * b + 3
        } + 5 * {
            let (a,b) = (a, b);
            a * b + 4
        }
    }
    public inline fun inline_fun3(a: u64, b: u64): u64 {
        a * b + 4
    }
}
module 0x42::OrderSensitiveTest3 {
    use 0x42::OrderSensitiveTest2;
    public inline fun fun1(a: u64, b: u64): u64 {
        a * b + 5
    }
    public fun fun2(a: u64, b: u64): u64 {
        {
            let (a,b) = (7 * {
                let (a,b) = (a, b);
                a * b + 5
            }, b);
            {
                let (a,b) = ({
                    let (a,b) = (a, b);
                    a * b + 3
                }, {
                    let (a,b) = (a, b);
                    a * b + 4
                });
                {
                    let (a,b) = (a, b);
                    a * b
                } + 2 * {
                    let (a,b) = (a, b);
                    a * b + 2
                }
            } + 3 * {
                let (a,b) = (a, b);
                a * b + 3
            } + 5 * {
                let (a,b) = (a, b);
                a * b + 4
            }
        } + 9 * {
            let (a,b) = (a, b);
            a * b + 6
        }
    }
    public inline fun fun3(a: u64, b: u64): u64 {
        a * b + 6
    }
}

// -- Model dump before second bytecode pipeline
module 0x42::OrderSensitiveTest1 {
    public inline fun inline_fun1(a: u64,b: u64): u64 {
        Mul<u64>(a, b)
    }
    public inline fun inline_fun2(a: u64,b: u64): u64 {
        Add<u64>({
          let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
          Mul<u64>(a, b)
        }, Mul<u64>(2, {
          let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
          Add<u64>(Mul<u64>(a, b), 2)
        }))
    }
    public inline fun inline_fun3(a: u64,b: u64): u64 {
        Add<u64>(Mul<u64>(a, b), 2)
    }
} // end 0x42::OrderSensitiveTest1
module 0x42::OrderSensitiveTest2 {
    use 0x42::OrderSensitiveTest1; // resolved as: 0x42::OrderSensitiveTest1
    public inline fun inline_fun1(a: u64,b: u64): u64 {
        Add<u64>(Mul<u64>(a, b), 3)
    }
    public inline fun inline_fun2(a: u64,b: u64): u64 {
        Add<u64>(Add<u64>({
          let (a: u64, b: u64): (u64, u64) = Tuple({
            let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
            Add<u64>(Mul<u64>(a, b), 3)
          }, {
            let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
            Add<u64>(Mul<u64>(a, b), 4)
          });
          Add<u64>({
            let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
            Mul<u64>(a, b)
          }, Mul<u64>(2, {
            let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
            Add<u64>(Mul<u64>(a, b), 2)
          }))
        }, Mul<u64>(3, {
          let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
          Add<u64>(Mul<u64>(a, b), 3)
        })), Mul<u64>(5, {
          let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
          Add<u64>(Mul<u64>(a, b), 4)
        }))
    }
    public inline fun inline_fun3(a: u64,b: u64): u64 {
        Add<u64>(Mul<u64>(a, b), 4)
    }
} // end 0x42::OrderSensitiveTest2
module 0x42::OrderSensitiveTest3 {
    use 0x42::OrderSensitiveTest2; // resolved as: 0x42::OrderSensitiveTest2
    public inline fun fun1(a: u64,b: u64): u64 {
        Add<u64>(Mul<u64>(a, b), 5)
    }
    public fun fun2(a: u64,b: u64): u64 {
        Add<u64>({
          let (a: u64, b: u64): (u64, u64) = Tuple(Mul<u64>(7, {
            let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
            Add<u64>(Mul<u64>(a, b), 5)
          }), b);
          Add<u64>(Add<u64>({
            let (a: u64, b: u64): (u64, u64) = Tuple({
              let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
              Add<u64>(Mul<u64>(a, b), 3)
            }, {
              let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
              Add<u64>(Mul<u64>(a, b), 4)
            });
            Add<u64>({
              let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
              Mul<u64>(a, b)
            }, Mul<u64>(2, {
              let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
              Add<u64>(Mul<u64>(a, b), 2)
            }))
          }, Mul<u64>(3, {
            let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
            Add<u64>(Mul<u64>(a, b), 3)
          })), Mul<u64>(5, {
            let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
            Add<u64>(Mul<u64>(a, b), 4)
          }))
        }, Mul<u64>(9, {
          let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
          Add<u64>(Mul<u64>(a, b), 6)
        }))
    }
    public inline fun fun3(a: u64,b: u64): u64 {
        Add<u64>(Mul<u64>(a, b), 6)
    }
} // end 0x42::OrderSensitiveTest3


============ bytecode verification succeeded ========
