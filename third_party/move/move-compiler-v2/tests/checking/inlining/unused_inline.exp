// -- Model dump before first bytecode pipeline
module 0xc0ffee::m {
    public fun bar(): u64 {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, 10) {
              i: u64 = Add<u64>(i, 1);
              if Eq<u64>(i, 5) {
                break;
                Tuple()
              } else {
                Tuple()
              }
            } else {
              break
            }
          };
          i
        }
    }
    private inline fun foo(): u64 {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, 10) {
              i: u64 = Add<u64>(i, 1);
              if Eq<u64>(i, 5) {
                break;
                Tuple()
              } else {
                Tuple()
              }
            } else {
              break
            }
          };
          i
        }
    }
} // end 0xc0ffee::m

// -- Sourcified model before first bytecode pipeline
module 0xc0ffee::m {
    public fun bar(): u64 {
        let i = 0;
        while (i < 10) {
            i = i + 1;
            if (i == 5) {
                break;
            }
        };
        i
    }
    inline fun foo(): u64 {
        let i = 0;
        while (i < 10) {
            i = i + 1;
            if (i == 5) {
                break;
            }
        };
        i
    }
}

// -- Model dump before second bytecode pipeline
module 0xc0ffee::m {
    public fun bar(): u64 {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, 10) {
              i: u64 = Add<u64>(i, 1);
              if Eq<u64>(i, 5) {
                break;
                Tuple()
              } else {
                Tuple()
              }
            } else {
              break
            }
          };
          i
        }
    }
    private inline fun foo(): u64 {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, 10) {
              i: u64 = Add<u64>(i, 1);
              if Eq<u64>(i, 5) {
                break;
                Tuple()
              } else {
                Tuple()
              }
            } else {
              break
            }
          };
          i
        }
    }
} // end 0xc0ffee::m


============ bytecode verification succeeded ========
