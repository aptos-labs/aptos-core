// -- Model dump before first bytecode pipeline
module 0xcafe::vectors {
    use std::vector;
    public entry fun guess_flips(flips: vector<u8>) {
        {
          let (flips: &vector<u8>): (&vector<u8>) = Tuple(Borrow(Immutable)(flips));
          {
            let i: u64 = 0;
            loop {
              if Lt<u64>(i, vector::length<u8>(flips)) {
                if Neq<u8>(Deref(vector::borrow<u8>(flips, i)), 0) {
                  break
                } else {
                  Tuple()
                };
                i: u64 = Add<u64>(i, 1);
                Tuple()
              } else {
                break
              }
            };
            Tuple()
          }
        };
        {
          let _v: vector<u8> = Copy(flips);
          {
            let _v2: vector<u8> = flips;
            Tuple()
          }
        }
    }
    public entry fun guess_flips_directly(flips: vector<u8>) {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, vector::length<u8>(Borrow(Immutable)(flips))) {
              if Neq<u8>(Deref(vector::borrow<u8>(Borrow(Immutable)(flips), i)), 0) {
                break
              } else {
                Tuple()
              };
              i: u64 = Add<u64>(i, 1);
              Tuple()
            } else {
              break
            }
          };
          {
            let _v: vector<u8> = Copy(flips);
            {
              let _v2: vector<u8> = flips;
              Tuple()
            }
          }
        }
    }
    public entry fun guess_with_break_without_inline(flips: vector<u8>) {
        vectors::loops_with_break_no_inline(Borrow(Immutable)(flips));
        {
          let _v: vector<u8> = Copy(flips);
          {
            let _v2: vector<u8> = flips;
            Tuple()
          }
        }
    }
    public entry fun guess_without_break_with_inline(flips: vector<u8>) {
        {
          let (flips: &vector<u8>): (&vector<u8>) = Tuple(Borrow(Immutable)(flips));
          {
            let i: u64 = 0;
            loop {
              if Lt<u64>(i, vector::length<u8>(flips)) {
                if Eq<u8>(Deref(vector::borrow<u8>(flips, i)), 0) {
                  Tuple()
                } else {
                  Abort(3)
                };
                i: u64 = Add<u64>(i, 1);
                Tuple()
              } else {
                break
              }
            };
            Tuple()
          }
        };
        {
          let _v: vector<u8> = flips;
          {
            let _v2: vector<u8> = Copy(flips);
            Tuple()
          }
        }
    }
    private inline fun loops_with_break(flips: &vector<u8>) {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, vector::length<u8>(flips)) {
              if Neq<u8>(Deref(vector::borrow<u8>(flips, i)), 0) {
                break
              } else {
                Tuple()
              };
              i: u64 = Add<u64>(i, 1);
              Tuple()
            } else {
              break
            }
          };
          Tuple()
        }
    }
    private fun loops_with_break_no_inline(flips: &vector<u8>) {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, vector::length<u8>(flips)) {
              if Neq<u8>(Deref(vector::borrow<u8>(flips, i)), 0) {
                break
              } else {
                Tuple()
              };
              i: u64 = Add<u64>(i, 1);
              Tuple()
            } else {
              break
            }
          };
          Tuple()
        }
    }
    private inline fun loops_without_break(flips: &vector<u8>) {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, vector::length<u8>(flips)) {
              if Eq<u8>(Deref(vector::borrow<u8>(flips, i)), 0) {
                Tuple()
              } else {
                Abort(3)
              };
              i: u64 = Add<u64>(i, 1);
              Tuple()
            } else {
              break
            }
          };
          Tuple()
        }
    }
    private fun test_guess_directly() {
        {
          let flips: vector<u8> = Vector<u8>(0, 0, 0, 0);
          vectors::guess_flips_directly(flips);
          Tuple()
        }
    }
    private fun test_guess_with_break_no_inline() {
        {
          let flips: vector<u8> = Vector<u8>(0, 0, 0, 0);
          vectors::guess_with_break_without_inline(flips);
          Tuple()
        }
    }
    private fun test_guess_with_inline_break() {
        {
          let flips: vector<u8> = Vector<u8>(0, 0, 0, 0);
          vectors::guess_flips(flips);
          Tuple()
        }
    }
    private fun test_guess_without_break() {
        {
          let flips: vector<u8> = Vector<u8>(0, 0, 0, 0);
          vectors::guess_without_break_with_inline(flips);
          Tuple()
        }
    }
} // end 0xcafe::vectors

// -- Sourcified model before first bytecode pipeline
module 0xcafe::vectors {
    public entry fun guess_flips(flips: vector<u8>) {
        {
            let (flips) = (&flips);
            let i = 0;
            while (i < 0x1::vector::length<u8>(flips)) {
                if (*0x1::vector::borrow<u8>(flips, i) != 0u8) break;
                i = i + 1;
            };
        };
        let _v = copy flips;
        let _v2 = flips;
    }
    public entry fun guess_flips_directly(flips: vector<u8>) {
        let i = 0;
        while (i < 0x1::vector::length<u8>(&flips)) {
            if (*0x1::vector::borrow<u8>(&flips, i) != 0u8) break;
            i = i + 1;
        };
        let _v = copy flips;
        let _v2 = flips;
    }
    public entry fun guess_with_break_without_inline(flips: vector<u8>) {
        loops_with_break_no_inline(&flips);
        let _v = copy flips;
        let _v2 = flips;
    }
    public entry fun guess_without_break_with_inline(flips: vector<u8>) {
        {
            let (flips) = (&flips);
            let i = 0;
            while (i < 0x1::vector::length<u8>(flips)) {
                if (*0x1::vector::borrow<u8>(flips, i) == 0u8) () else abort 3;
                i = i + 1;
            };
        };
        let _v = flips;
        let _v2 = copy flips;
    }
    inline fun loops_with_break(flips: &vector<u8>) {
        let i = 0;
        while (i < 0x1::vector::length<u8>(flips)) {
            if (*0x1::vector::borrow<u8>(flips, i) != 0u8) break;
            i = i + 1;
        };
    }
    fun loops_with_break_no_inline(flips: &vector<u8>) {
        let i = 0;
        while (i < 0x1::vector::length<u8>(flips)) {
            if (*0x1::vector::borrow<u8>(flips, i) != 0u8) break;
            i = i + 1;
        };
    }
    inline fun loops_without_break(flips: &vector<u8>) {
        let i = 0;
        while (i < 0x1::vector::length<u8>(flips)) {
            if (*0x1::vector::borrow<u8>(flips, i) == 0u8) () else abort 3;
            i = i + 1;
        };
    }
    fun test_guess_directly() {
        let flips = vector[0u8, 0u8, 0u8, 0u8];
        guess_flips_directly(flips);
    }
    fun test_guess_with_break_no_inline() {
        let flips = vector[0u8, 0u8, 0u8, 0u8];
        guess_with_break_without_inline(flips);
    }
    fun test_guess_with_inline_break() {
        let flips = vector[0u8, 0u8, 0u8, 0u8];
        guess_flips(flips);
    }
    fun test_guess_without_break() {
        let flips = vector[0u8, 0u8, 0u8, 0u8];
        guess_without_break_with_inline(flips);
    }
}

// -- Model dump before second bytecode pipeline
module 0xcafe::vectors {
    use std::vector;
    public entry fun guess_flips(flips: vector<u8>) {
        {
          let (flips: &vector<u8>): (&vector<u8>) = Tuple(Borrow(Immutable)(flips));
          {
            let i: u64 = 0;
            loop {
              if Lt<u64>(i, vector::length<u8>(flips)) {
                if Neq<u8>(Deref(vector::borrow<u8>(flips, i)), 0) {
                  break
                } else {
                  Tuple()
                };
                i: u64 = Add<u64>(i, 1);
                Tuple()
              } else {
                break
              }
            };
            Tuple()
          }
        };
        {
          let _v: vector<u8> = Copy(flips);
          {
            let _v2: vector<u8> = flips;
            Tuple()
          }
        }
    }
    public entry fun guess_flips_directly(flips: vector<u8>) {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, vector::length<u8>(Borrow(Immutable)(flips))) {
              if Neq<u8>(Deref(vector::borrow<u8>(Borrow(Immutable)(flips), i)), 0) {
                break
              } else {
                Tuple()
              };
              i: u64 = Add<u64>(i, 1);
              Tuple()
            } else {
              break
            }
          };
          {
            let _v: vector<u8> = Copy(flips);
            {
              let _v2: vector<u8> = flips;
              Tuple()
            }
          }
        }
    }
    public entry fun guess_with_break_without_inline(flips: vector<u8>) {
        vectors::loops_with_break_no_inline(Borrow(Immutable)(flips));
        {
          let _v: vector<u8> = Copy(flips);
          {
            let _v2: vector<u8> = flips;
            Tuple()
          }
        }
    }
    public entry fun guess_without_break_with_inline(flips: vector<u8>) {
        {
          let (flips: &vector<u8>): (&vector<u8>) = Tuple(Borrow(Immutable)(flips));
          {
            let i: u64 = 0;
            loop {
              if Lt<u64>(i, vector::length<u8>(flips)) {
                if Eq<u8>(Deref(vector::borrow<u8>(flips, i)), 0) {
                  Tuple()
                } else {
                  Abort(3)
                };
                i: u64 = Add<u64>(i, 1);
                Tuple()
              } else {
                break
              }
            };
            Tuple()
          }
        };
        {
          let _v: vector<u8> = flips;
          {
            let _v2: vector<u8> = Copy(flips);
            Tuple()
          }
        }
    }
    private inline fun loops_with_break(flips: &vector<u8>) {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, vector::length<u8>(flips)) {
              if Neq<u8>(Deref(vector::borrow<u8>(flips, i)), 0) {
                break
              } else {
                Tuple()
              };
              i: u64 = Add<u64>(i, 1);
              Tuple()
            } else {
              break
            }
          };
          Tuple()
        }
    }
    private fun loops_with_break_no_inline(flips: &vector<u8>) {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, vector::length<u8>(flips)) {
              if Neq<u8>(Deref(vector::borrow<u8>(flips, i)), 0) {
                break
              } else {
                Tuple()
              };
              i: u64 = Add<u64>(i, 1);
              Tuple()
            } else {
              break
            }
          };
          Tuple()
        }
    }
    private inline fun loops_without_break(flips: &vector<u8>) {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, vector::length<u8>(flips)) {
              if Eq<u8>(Deref(vector::borrow<u8>(flips, i)), 0) {
                Tuple()
              } else {
                Abort(3)
              };
              i: u64 = Add<u64>(i, 1);
              Tuple()
            } else {
              break
            }
          };
          Tuple()
        }
    }
    private fun test_guess_directly() {
        vectors::guess_flips_directly([Number(0), Number(0), Number(0), Number(0)]);
        Tuple()
    }
    private fun test_guess_with_break_no_inline() {
        vectors::guess_with_break_without_inline([Number(0), Number(0), Number(0), Number(0)]);
        Tuple()
    }
    private fun test_guess_with_inline_break() {
        vectors::guess_flips([Number(0), Number(0), Number(0), Number(0)]);
        Tuple()
    }
    private fun test_guess_without_break() {
        vectors::guess_without_break_with_inline([Number(0), Number(0), Number(0), Number(0)]);
        Tuple()
    }
} // end 0xcafe::vectors


============ bytecode verification succeeded ========
