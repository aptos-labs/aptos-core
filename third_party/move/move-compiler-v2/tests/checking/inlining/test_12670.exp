// -- Model dump before first bytecode pipeline
module 0x1::Test {
    use std::vector::{for_each_ref};
    struct S {
        x: u8,
    }
    private fun foo(xs: vector<S>) {
        {
          let sum: u8 = 0;
          {
            let (v: &vector<S>): (&vector<S>) = Tuple(Borrow(Immutable)(xs));
            {
              let i: u64 = 0;
              loop {
                if Lt<u64>(i, vector::length<S>(v)) {
                  {
                    let (e: &S): (&S) = Tuple(vector::borrow<S>(v, i));
                    sum: u8 = Add<u8>(sum, select Test::S.x<&S>(e));
                    Tuple()
                  };
                  i: u64 = Add<u64>(i, 1)
                } else {
                  break
                }
              }
            }
          };
          Tuple()
        }
    }
} // end 0x1::Test

// -- Sourcified model before first bytecode pipeline
module 0x1::Test {
    struct S has drop {
        x: u8,
    }
    fun foo(xs: vector<S>) {
        let sum = 0u8;
        {
            let (v) = (&xs);
            let i = 0;
            while (i < 0x1::vector::length<S>(v)) {
                {
                    let (e) = (0x1::vector::borrow<S>(v, i));
                    sum = sum + e.x;
                };
                i = i + 1
            }
        };
    }
}

// -- Model dump before second bytecode pipeline
module 0x1::Test {
    use std::vector::{for_each_ref};
    struct S {
        x: u8,
    }
    private fun foo(xs: vector<S>) {
        {
          let sum: u8 = 0;
          {
            let (v: &vector<S>): (&vector<S>) = Tuple(Borrow(Immutable)(xs));
            {
              let i: u64 = 0;
              loop {
                if Lt<u64>(i, vector::length<S>(v)) {
                  {
                    let (e: &S): (&S) = Tuple(vector::borrow<S>(v, i));
                    sum: u8 = Add<u8>(sum, select Test::S.x<&S>(e));
                    Tuple()
                  };
                  i: u64 = Add<u64>(i, 1)
                } else {
                  break
                }
              }
            }
          };
          Tuple()
        }
    }
} // end 0x1::Test


============ bytecode verification succeeded ========
