// -- Model dump before first bytecode pipeline
module 0xcafe::vectors {
    use std::vector;
    public entry fun guess_flips_break2(flips: vector<u8>): u64 {
        {
          let i: u64 = 0;
          {
            let flipsref5: &vector<u8> = Borrow(Immutable)(flips);
            loop {
              if Lt<u64>(i, vector::length<u8>(flipsref5)) {
                if Neq<u8>(Deref(vector::borrow<u8>(flipsref5, i)), 0) {
                  break
                } else {
                  Tuple()
                };
                i: u64 = Add<u64>(i, 1);
                if Eq<u8>(Deref(vector::borrow<u8>(flipsref5, i)), 5) {
                  break
                } else {
                  Tuple()
                };
                Tuple()
              } else {
                break
              }
            };
            {
              let _v: vector<u8> = Copy(flips);
              {
                let _v2: vector<u8> = flips;
                {
                  let x: &vector<u8> = flipsref5;
                  vector::length<u8>(x)
                }
              }
            }
          }
        }
    }
} // end 0xcafe::vectors

// -- Sourcified model before first bytecode pipeline
module 0xcafe::vectors {
    public entry fun guess_flips_break2(flips: vector<u8>): u64 {
        let i = 0;
        let flipsref5 = &flips;
        while (i < 0x1::vector::length<u8>(flipsref5)) {
            if (*0x1::vector::borrow<u8>(flipsref5, i) != 0u8) break;
            i = i + 1;
            if (*0x1::vector::borrow<u8>(flipsref5, i) == 5u8) break;
        };
        let _v = copy flips;
        let _v2 = flips;
        let x = flipsref5;
        0x1::vector::length<u8>(x)
    }
}

// -- Model dump before second bytecode pipeline
module 0xcafe::vectors {
    use std::vector;
    public entry fun guess_flips_break2(flips: vector<u8>): u64 {
        {
          let i: u64 = 0;
          {
            let flipsref5: &vector<u8> = Borrow(Immutable)(flips);
            loop {
              if Lt<u64>(i, vector::length<u8>(flipsref5)) {
                if Neq<u8>(Deref(vector::borrow<u8>(flipsref5, i)), 0) {
                  break
                } else {
                  Tuple()
                };
                i: u64 = Add<u64>(i, 1);
                if Eq<u8>(Deref(vector::borrow<u8>(flipsref5, i)), 5) {
                  break
                } else {
                  Tuple()
                };
                Tuple()
              } else {
                break
              }
            };
            {
              let _v: vector<u8> = Copy(flips);
              {
                let _v2: vector<u8> = flips;
                {
                  let x: &vector<u8> = flipsref5;
                  vector::length<u8>(x)
                }
              }
            }
          }
        }
    }
} // end 0xcafe::vectors


============ bytecode verification succeeded ========
