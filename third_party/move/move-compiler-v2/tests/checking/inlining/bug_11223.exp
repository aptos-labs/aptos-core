// -- Model dump before first bytecode pipeline
module 0xcafe::vectors {
    use std::vector;
    public entry fun guess_flips_break2(flips: vector<u8>): u64 {
        {
          let flipsref5: &vector<u8> = Borrow(Immutable)(flips);
          {
            let _v: vector<u8> = Copy(flips);
            {
              let _v2: vector<u8> = flips;
              {
                let x: &vector<u8> = flipsref5;
                vector::length<u8>(x)
              }
            }
          }
        }
    }
} // end 0xcafe::vectors

// -- Sourcified model before first bytecode pipeline
module 0xcafe::vectors {
    public entry fun guess_flips_break2(flips: vector<u8>): u64 {
        let flipsref5 = &flips;
        let _v = copy flips;
        let _v2 = flips;
        let x = flipsref5;
        0x1::vector::length<u8>(x)
    }
}

// -- Model dump before second bytecode pipeline
module 0xcafe::vectors {
    use std::vector;
    public entry fun guess_flips_break2(flips: vector<u8>): u64 {
        {
          let flipsref5: &vector<u8> = Borrow(Immutable)(flips);
          {
            let _v: vector<u8> = Copy(flips);
            {
              let _v2: vector<u8> = flips;
              {
                let x: &vector<u8> = flipsref5;
                vector::length<u8>(x)
              }
            }
          }
        }
    }
} // end 0xcafe::vectors


============ bytecode verification succeeded ========
