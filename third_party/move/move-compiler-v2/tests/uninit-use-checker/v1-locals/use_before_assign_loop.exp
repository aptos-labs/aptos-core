============ initial bytecode ================

[variant baseline]
fun M::tborrow1() {
     var $t0: u64
     var $t1: &u64
     var $t2: &u64
     var $t3: &u64
     var $t4: u64
  0: label L0
  1: $t1 := borrow_local($t0)
  2: $t2 := move($t1)
  3: $t3 := infer($t2)
  4: $t4 := 0
  5: $t0 := infer($t4)
  6: goto 0
  7: label L1
  8: return ()
}


[variant baseline]
fun M::tborrow2($t0: bool) {
     var $t1: u64
     var $t2: &u64
     var $t3: &u64
     var $t4: &u64
     var $t5: u64
     var $t6: u64
  0: label L0
  1: $t2 := borrow_local($t1)
  2: $t3 := move($t2)
  3: $t4 := infer($t3)
  4: if ($t0) goto 5 else goto 9
  5: label L2
  6: $t5 := 0
  7: $t1 := infer($t5)
  8: goto 10
  9: label L3
 10: label L4
 11: goto 13
 12: goto 0
 13: label L1
 14: $t6 := infer($t1)
 15: return ()
}


[variant baseline]
fun M::tcopy($t0: bool) {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
  0: label L0
  1: $t3 := infer($t1)
  2: $t4 := 1
  3: $t2 := +($t3, $t4)
  4: if ($t0) goto 5 else goto 8
  5: label L2
  6: goto 0
  7: goto 9
  8: label L3
  9: label L4
 10: $t5 := 0
 11: $t1 := infer($t5)
 12: $t6 := infer($t2)
 13: goto 0
 14: label L1
 15: return ()
}


[variant baseline]
fun M::tmove() {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
  0: label L0
  1: $t2 := move($t0)
  2: $t3 := 1
  3: $t1 := +($t2, $t3)
  4: $t4 := 0
  5: $t0 := infer($t4)
  6: $t5 := infer($t1)
  7: goto 0
  8: label L1
  9: return ()
}


Diagnostics:
error: use of possibly unassigned local `x`
  ┌─ tests/uninit-use-checker/v1-locals/use_before_assign_loop.move:4:24
  │
4 │         loop { let y = move x + 1; x = 0; y; }
  │                        ^^^^^^

error: use of possibly unassigned local `x`
  ┌─ tests/uninit-use-checker/v1-locals/use_before_assign_loop.move:9:24
  │
9 │         loop { let y = x + 1; if (cond) { continue }; x = 0; y; }
  │                        ^

error: use of possibly unassigned local `x`
   ┌─ tests/uninit-use-checker/v1-locals/use_before_assign_loop.move:14:24
   │
14 │         loop { let y = &x; _ = move y; x = 0 }
   │                        ^^

error: use of unassigned local `x`
   ┌─ tests/uninit-use-checker/v1-locals/use_before_assign_loop.move:19:24
   │
19 │         loop { let y = &x; _ = move y; if (cond) { x = 0 }; break };
   │                        ^^

error: use of possibly unassigned local `x`
   ┌─ tests/uninit-use-checker/v1-locals/use_before_assign_loop.move:20:9
   │
20 │         x;
   │         ^

============ after uninitialized_use_checker: ================

[variant baseline]
fun M::tborrow1() {
     var $t0: u64
     var $t1: &u64
     var $t2: &u64
     var $t3: &u64
     var $t4: u64
     # before: { maybe: $t0, $t1, $t2, $t3, $t4 }, after: { maybe: $t0, $t1, $t2, $t3, $t4 }
  0: label L0
     # before: { maybe: $t0, $t1, $t2, $t3, $t4 }, after: { maybe: $t0, $t2, $t3, $t4 }
  1: $t1 := borrow_local($t0)
     # before: { maybe: $t0, $t2, $t3, $t4 }, after: { maybe: $t0, $t3, $t4 }
  2: $t2 := move($t1)
     # before: { maybe: $t0, $t3, $t4 }, after: { maybe: $t0, $t4 }
  3: $t3 := infer($t2)
     # before: { maybe: $t0, $t4 }, after: { maybe: $t0 }
  4: $t4 := 0
     # before: { maybe: $t0 }, after: all initialized
  5: $t0 := infer($t4)
     # before: all initialized, after: all initialized
  6: goto 0
  7: label L1
  8: return ()
}


[variant baseline]
fun M::tborrow2($t0: bool) {
     var $t1: u64
     var $t2: &u64
     var $t3: &u64
     var $t4: &u64
     var $t5: u64
     var $t6: u64
     # before: { no: $t1, $t2, $t3, $t4, $t5, $t6 }, after: { no: $t1, $t2, $t3, $t4, $t5, $t6 }
  0: label L0
     # before: { no: $t1, $t2, $t3, $t4, $t5, $t6 }, after: { no: $t1, $t3, $t4, $t5, $t6 }
  1: $t2 := borrow_local($t1)
     # before: { no: $t1, $t3, $t4, $t5, $t6 }, after: { no: $t1, $t4, $t5, $t6 }
  2: $t3 := move($t2)
     # before: { no: $t1, $t4, $t5, $t6 }, after: { no: $t1, $t5, $t6 }
  3: $t4 := infer($t3)
     # before: { no: $t1, $t5, $t6 }, after: { no: $t1, $t5, $t6 }
  4: if ($t0) goto 5 else goto 9
     # before: { no: $t1, $t5, $t6 }, after: { no: $t1, $t5, $t6 }
  5: label L2
     # before: { no: $t1, $t5, $t6 }, after: { no: $t1, $t6 }
  6: $t5 := 0
     # before: { no: $t1, $t6 }, after: { no: $t6 }
  7: $t1 := infer($t5)
     # before: { no: $t6 }, after: { no: $t6 }
  8: goto 10
     # before: { no: $t1, $t5, $t6 }, after: { no: $t1, $t5, $t6 }
  9: label L3
     # before: { no: $t6 }{ maybe: $t1, $t5 }, after: { no: $t6 }{ maybe: $t1, $t5 }
 10: label L4
     # before: { no: $t6 }{ maybe: $t1, $t5 }, after: { no: $t6 }{ maybe: $t1, $t5 }
 11: goto 13
 12: goto 0
     # before: { no: $t6 }{ maybe: $t1, $t5 }, after: { no: $t6 }{ maybe: $t1, $t5 }
 13: label L1
     # before: { no: $t6 }{ maybe: $t1, $t5 }, after: { maybe: $t1, $t5 }
 14: $t6 := infer($t1)
     # before: { maybe: $t1, $t5 }, after: { maybe: $t1, $t5 }
 15: return ()
}


[variant baseline]
fun M::tcopy($t0: bool) {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     # before: { maybe: $t1, $t2, $t3, $t4, $t5, $t6 }, after: { maybe: $t1, $t2, $t3, $t4, $t5, $t6 }
  0: label L0
     # before: { maybe: $t1, $t2, $t3, $t4, $t5, $t6 }, after: { maybe: $t1, $t2, $t4, $t5, $t6 }
  1: $t3 := infer($t1)
     # before: { maybe: $t1, $t2, $t4, $t5, $t6 }, after: { maybe: $t1, $t2, $t5, $t6 }
  2: $t4 := 1
     # before: { maybe: $t1, $t2, $t5, $t6 }, after: { maybe: $t1, $t5, $t6 }
  3: $t2 := +($t3, $t4)
     # before: { maybe: $t1, $t5, $t6 }, after: { maybe: $t1, $t5, $t6 }
  4: if ($t0) goto 5 else goto 8
     # before: { maybe: $t1, $t5, $t6 }, after: { maybe: $t1, $t5, $t6 }
  5: label L2
     # before: { maybe: $t1, $t5, $t6 }, after: { maybe: $t1, $t5, $t6 }
  6: goto 0
  7: goto 9
     # before: { maybe: $t1, $t5, $t6 }, after: { maybe: $t1, $t5, $t6 }
  8: label L3
     # before: { maybe: $t1, $t5, $t6 }, after: { maybe: $t1, $t5, $t6 }
  9: label L4
     # before: { maybe: $t1, $t5, $t6 }, after: { maybe: $t1, $t6 }
 10: $t5 := 0
     # before: { maybe: $t1, $t6 }, after: { maybe: $t6 }
 11: $t1 := infer($t5)
     # before: { maybe: $t6 }, after: all initialized
 12: $t6 := infer($t2)
     # before: all initialized, after: all initialized
 13: goto 0
 14: label L1
 15: return ()
}


[variant baseline]
fun M::tmove() {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     # before: { maybe: $t0, $t1, $t2, $t3, $t4, $t5 }, after: { maybe: $t0, $t1, $t2, $t3, $t4, $t5 }
  0: label L0
     # before: { maybe: $t0, $t1, $t2, $t3, $t4, $t5 }, after: { maybe: $t0, $t1, $t3, $t4, $t5 }
  1: $t2 := move($t0)
     # before: { maybe: $t0, $t1, $t3, $t4, $t5 }, after: { maybe: $t0, $t1, $t4, $t5 }
  2: $t3 := 1
     # before: { maybe: $t0, $t1, $t4, $t5 }, after: { maybe: $t0, $t4, $t5 }
  3: $t1 := +($t2, $t3)
     # before: { maybe: $t0, $t4, $t5 }, after: { maybe: $t0, $t5 }
  4: $t4 := 0
     # before: { maybe: $t0, $t5 }, after: { maybe: $t5 }
  5: $t0 := infer($t4)
     # before: { maybe: $t5 }, after: all initialized
  6: $t5 := infer($t1)
     # before: all initialized, after: all initialized
  7: goto 0
  8: label L1
  9: return ()
}
