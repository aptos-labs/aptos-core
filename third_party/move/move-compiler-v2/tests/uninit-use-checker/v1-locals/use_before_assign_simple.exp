============ initial bytecode ================

[variant baseline]
fun M::tborrow() {
     var $t0: u64
     var $t1: &u64
     var $t2: &u64
     var $t3: 0x8675309::M::S
     var $t4: &0x8675309::M::S
  0: $t1 := borrow_local($t0)
  1: $t2 := infer($t1)
  2: $t4 := borrow_local($t3)
  3: return ()
}


[variant baseline]
fun M::tcopy() {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: 0x8675309::M::S
     var $t6: 0x8675309::M::S
  0: $t2 := infer($t0)
  1: $t3 := 1
  2: $t1 := +($t2, $t3)
  3: $t4 := infer($t1)
  4: $t6 := copy($t5)
  5: return ()
}


[variant baseline]
fun M::tmove() {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: 0x8675309::M::S
     var $t6: 0x8675309::M::S
  0: $t2 := move($t0)
  1: $t3 := 1
  2: $t1 := +($t2, $t3)
  3: $t4 := infer($t1)
  4: $t6 := infer($t5)
  5: return ()
}


Diagnostics:
error: use of unassigned local `x`
  ┌─ tests/uninit-use-checker/v1-locals/use_before_assign_simple.move:6:17
  │
6 │         let _ = move x + 1;
  │                 ^^^^^^

error: use of unassigned local `s`
  ┌─ tests/uninit-use-checker/v1-locals/use_before_assign_simple.move:9:19
  │
9 │         let _s2 = s;
  │                   ^

error: use of unassigned local `x`
   ┌─ tests/uninit-use-checker/v1-locals/use_before_assign_simple.move:14:17
   │
14 │         let _ = x + 1;
   │                 ^

error: use of unassigned local `s`
   ┌─ tests/uninit-use-checker/v1-locals/use_before_assign_simple.move:17:19
   │
17 │         let _s3 = copy s;
   │                   ^^^^^^

error: use of unassigned local `x`
   ┌─ tests/uninit-use-checker/v1-locals/use_before_assign_simple.move:22:17
   │
22 │         let _ = &x;
   │                 ^^

error: use of unassigned local `s`
   ┌─ tests/uninit-use-checker/v1-locals/use_before_assign_simple.move:25:19
   │
25 │         let _s2 = &s;
   │                   ^^

============ after uninitialized_use_checker: ================

[variant baseline]
fun M::tborrow() {
     var $t0: u64
     var $t1: &u64
     var $t2: &u64
     var $t3: 0x8675309::M::S
     var $t4: &0x8675309::M::S
     # before: { no: $t0, $t1, $t2, $t3, $t4 }, after: { no: $t0, $t2, $t3, $t4 }
  0: $t1 := borrow_local($t0)
     # before: { no: $t0, $t2, $t3, $t4 }, after: { no: $t0, $t3, $t4 }
  1: $t2 := infer($t1)
     # before: { no: $t0, $t3, $t4 }, after: { no: $t0, $t3 }
  2: $t4 := borrow_local($t3)
     # before: { no: $t0, $t3 }, after: { no: $t0, $t3 }
  3: return ()
}


[variant baseline]
fun M::tcopy() {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: 0x8675309::M::S
     var $t6: 0x8675309::M::S
     # before: { no: $t0, $t1, $t2, $t3, $t4, $t5, $t6 }, after: { no: $t0, $t1, $t3, $t4, $t5, $t6 }
  0: $t2 := infer($t0)
     # before: { no: $t0, $t1, $t3, $t4, $t5, $t6 }, after: { no: $t0, $t1, $t4, $t5, $t6 }
  1: $t3 := 1
     # before: { no: $t0, $t1, $t4, $t5, $t6 }, after: { no: $t0, $t4, $t5, $t6 }
  2: $t1 := +($t2, $t3)
     # before: { no: $t0, $t4, $t5, $t6 }, after: { no: $t0, $t5, $t6 }
  3: $t4 := infer($t1)
     # before: { no: $t0, $t5, $t6 }, after: { no: $t0, $t5 }
  4: $t6 := copy($t5)
     # before: { no: $t0, $t5 }, after: { no: $t0, $t5 }
  5: return ()
}


[variant baseline]
fun M::tmove() {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: 0x8675309::M::S
     var $t6: 0x8675309::M::S
     # before: { no: $t0, $t1, $t2, $t3, $t4, $t5, $t6 }, after: { no: $t0, $t1, $t3, $t4, $t5, $t6 }
  0: $t2 := move($t0)
     # before: { no: $t0, $t1, $t3, $t4, $t5, $t6 }, after: { no: $t0, $t1, $t4, $t5, $t6 }
  1: $t3 := 1
     # before: { no: $t0, $t1, $t4, $t5, $t6 }, after: { no: $t0, $t4, $t5, $t6 }
  2: $t1 := +($t2, $t3)
     # before: { no: $t0, $t4, $t5, $t6 }, after: { no: $t0, $t5, $t6 }
  3: $t4 := infer($t1)
     # before: { no: $t0, $t5, $t6 }, after: { no: $t0, $t5 }
  4: $t6 := infer($t5)
     # before: { no: $t0, $t5 }, after: { no: $t0, $t5 }
  5: return ()
}
