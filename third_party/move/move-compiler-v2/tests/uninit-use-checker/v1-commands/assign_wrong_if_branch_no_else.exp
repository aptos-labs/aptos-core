============ initial bytecode ================

[variant baseline]
fun <SELF>_0::main() {
     var $t0: u64
     var $t1: bool
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: u64
     var $t6: u64
  0: $t1 := false
  1: if ($t1) goto 2 else goto 6
  2: label L0
  3: $t2 := 100
  4: $t0 := infer($t2)
  5: goto 7
  6: label L1
  7: label L2
  8: $t4 := infer($t0)
  9: $t5 := 100
 10: $t3 := ==($t4, $t5)
 11: if ($t3) goto 12 else goto 14
 12: label L3
 13: goto 17
 14: label L4
 15: $t6 := 42
 16: abort($t6)
 17: label L5
 18: return ()
}


Diagnostics:
error: use of possibly unassigned local `x`
  ┌─ tests/uninit-use-checker/v1-commands/assign_wrong_if_branch_no_else.move:5:13
  │
5 │     assert!(x == 100, 42);
  │             ^

============ after uninitialized_use_checker: ================

[variant baseline]
fun <SELF>_0::main() {
     var $t0: u64
     var $t1: bool
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: u64
     var $t6: u64
     # before: { no: $t0, $t1, $t2, $t3, $t4, $t5, $t6 }, after: { no: $t0, $t2, $t3, $t4, $t5, $t6 }
  0: $t1 := false
     # before: { no: $t0, $t2, $t3, $t4, $t5, $t6 }, after: { no: $t0, $t2, $t3, $t4, $t5, $t6 }
  1: if ($t1) goto 2 else goto 6
     # before: { no: $t0, $t2, $t3, $t4, $t5, $t6 }, after: { no: $t0, $t2, $t3, $t4, $t5, $t6 }
  2: label L0
     # before: { no: $t0, $t2, $t3, $t4, $t5, $t6 }, after: { no: $t0, $t3, $t4, $t5, $t6 }
  3: $t2 := 100
     # before: { no: $t0, $t3, $t4, $t5, $t6 }, after: { no: $t3, $t4, $t5, $t6 }
  4: $t0 := infer($t2)
     # before: { no: $t3, $t4, $t5, $t6 }, after: { no: $t3, $t4, $t5, $t6 }
  5: goto 7
     # before: { no: $t0, $t2, $t3, $t4, $t5, $t6 }, after: { no: $t0, $t2, $t3, $t4, $t5, $t6 }
  6: label L1
     # before: { no: $t3, $t4, $t5, $t6 }{ maybe: $t0, $t2 }, after: { no: $t3, $t4, $t5, $t6 }{ maybe: $t0, $t2 }
  7: label L2
     # before: { no: $t3, $t4, $t5, $t6 }{ maybe: $t0, $t2 }, after: { no: $t3, $t5, $t6 }{ maybe: $t0, $t2 }
  8: $t4 := infer($t0)
     # before: { no: $t3, $t5, $t6 }{ maybe: $t0, $t2 }, after: { no: $t3, $t6 }{ maybe: $t0, $t2 }
  9: $t5 := 100
     # before: { no: $t3, $t6 }{ maybe: $t0, $t2 }, after: { no: $t6 }{ maybe: $t0, $t2 }
 10: $t3 := ==($t4, $t5)
     # before: { no: $t6 }{ maybe: $t0, $t2 }, after: { no: $t6 }{ maybe: $t0, $t2 }
 11: if ($t3) goto 12 else goto 14
     # before: { no: $t6 }{ maybe: $t0, $t2 }, after: { no: $t6 }{ maybe: $t0, $t2 }
 12: label L3
     # before: { no: $t6 }{ maybe: $t0, $t2 }, after: { no: $t6 }{ maybe: $t0, $t2 }
 13: goto 17
     # before: { no: $t6 }{ maybe: $t0, $t2 }, after: { no: $t6 }{ maybe: $t0, $t2 }
 14: label L4
     # before: { no: $t6 }{ maybe: $t0, $t2 }, after: { maybe: $t0, $t2 }
 15: $t6 := 42
     # before: { maybe: $t0, $t2 }, after: { maybe: $t0, $t2 }
 16: abort($t6)
     # before: { no: $t6 }{ maybe: $t0, $t2 }, after: { no: $t6 }{ maybe: $t0, $t2 }
 17: label L5
     # before: { no: $t6 }{ maybe: $t0, $t2 }, after: { no: $t6 }{ maybe: $t0, $t2 }
 18: return ()
}
