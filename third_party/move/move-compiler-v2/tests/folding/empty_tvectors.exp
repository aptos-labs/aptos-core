// -- Model dump before first bytecode pipeline
module 0x42::m {
    use std::bcs;
    use std::string::{Self};
    use std::vector;
    public entry fun init() {
        {
          let _: vector<0x1::string::String> = {
            let (v: vector<vector<u8>>): (vector<vector<u8>>) = Tuple([]);
            {
              let result: vector<0x1::string::String> = Vector<0x1::string::String>();
              {
                let (v: vector<vector<u8>>): (vector<vector<u8>>) = Tuple(v);
                vector::reverse<vector<u8>>(Borrow(Mutable)(v));
                loop {
                  if Not(vector::is_empty<vector<u8>>(Borrow(Immutable)(v))) {
                    {
                      let e: vector<u8> = vector::pop_back<vector<u8>>(Borrow(Mutable)(v));
                      {
                        let (elem: vector<u8>): (vector<u8>) = Tuple(e);
                        vector::push_back<0x1::string::String>(Borrow(Mutable)(result), {
                          let (key: vector<u8>): (vector<u8>) = Tuple(elem);
                          string::utf8(key)
                        })
                      };
                      Tuple()
                    }
                  } else {
                    break
                  }
                };
                Tuple()
              };
              result
            }
          };
          {
            let _: vector<vector<u8>> = {
              let (v: vector<u64>): (vector<u64>) = Tuple([]);
              {
                let result: vector<vector<u8>> = Vector<vector<u8>>();
                {
                  let (v: vector<u64>): (vector<u64>) = Tuple(v);
                  vector::reverse<u64>(Borrow(Mutable)(v));
                  loop {
                    if Not(vector::is_empty<u64>(Borrow(Immutable)(v))) {
                      {
                        let e: u64 = vector::pop_back<u64>(Borrow(Mutable)(v));
                        {
                          let (elem: u64): (u64) = Tuple(e);
                          vector::push_back<vector<u8>>(Borrow(Mutable)(result), {
                            let (v: u64): (u64) = Tuple(elem);
                            bcs::to_bytes<u64>(Borrow(Immutable)(v))
                          })
                        };
                        Tuple()
                      }
                    } else {
                      break
                    }
                  };
                  Tuple()
                };
                result
              }
            };
            Tuple()
          }
        }
    }
} // end 0x42::m

// -- Sourcified model before first bytecode pipeline
module 0x42::m {
    public entry fun init() {
        let _ = {
            let (v) = (vector[]);
            let result = vector[];
            {
                let (v) = (v);
                0x1::vector::reverse<vector<u8>>(&mut v);
                while (!0x1::vector::is_empty<vector<u8>>(&v)) {
                    let e = 0x1::vector::pop_back<vector<u8>>(&mut v);
                    {
                        let (elem) = (e);
                        0x1::vector::push_back<0x1::string::String>(&mut result, {
                            let (key) = (elem);
                            0x1::string::utf8(key)
                        })
                    };
                };
            };
            result
        };
        let _ = {
            let (v) = (vector[]);
            let result = vector[];
            {
                let (v) = (v);
                0x1::vector::reverse<u64>(&mut v);
                while (!0x1::vector::is_empty<u64>(&v)) {
                    let e = 0x1::vector::pop_back<u64>(&mut v);
                    {
                        let (elem) = (e);
                        0x1::vector::push_back<vector<u8>>(&mut result, {
                            let (v) = (elem);
                            0x1::bcs::to_bytes<u64>(&v)
                        })
                    };
                };
            };
            result
        };
    }
}

// -- Model dump before second bytecode pipeline
module 0x42::m {
    use std::bcs;
    use std::string::{Self};
    use std::vector;
    public entry fun init() {
        {
          let _: vector<0x1::string::String> = {
            let result: vector<0x1::string::String> = Vector<0x1::string::String>();
            {
              let (v: vector<vector<u8>>): (vector<vector<u8>>) = Tuple([]);
              vector::reverse<vector<u8>>(Borrow(Mutable)(v));
              loop {
                if Not(vector::is_empty<vector<u8>>(Borrow(Immutable)(v))) {
                  {
                    let e: vector<u8> = vector::pop_back<vector<u8>>(Borrow(Mutable)(v));
                    {
                      let (elem: vector<u8>): (vector<u8>) = Tuple(e);
                      vector::push_back<0x1::string::String>(Borrow(Mutable)(result), {
                        let (key: vector<u8>): (vector<u8>) = Tuple(elem);
                        string::utf8(key)
                      })
                    };
                    Tuple()
                  }
                } else {
                  break
                }
              };
              Tuple()
            };
            result
          };
          {
            let _: vector<vector<u8>> = {
              let result: vector<vector<u8>> = Vector<vector<u8>>();
              {
                let (v: vector<u64>): (vector<u64>) = Tuple([]);
                vector::reverse<u64>(Borrow(Mutable)(v));
                loop {
                  if Not(vector::is_empty<u64>(Borrow(Immutable)(v))) {
                    {
                      let e: u64 = vector::pop_back<u64>(Borrow(Mutable)(v));
                      {
                        let (elem: u64): (u64) = Tuple(e);
                        vector::push_back<vector<u8>>(Borrow(Mutable)(result), {
                          let (v: u64): (u64) = Tuple(elem);
                          bcs::to_bytes<u64>(Borrow(Immutable)(v))
                        })
                      };
                      Tuple()
                    }
                  } else {
                    break
                  }
                };
                Tuple()
              };
              result
            };
            Tuple()
          }
        }
    }
} // end 0x42::m


============ bytecode verification succeeded ========
