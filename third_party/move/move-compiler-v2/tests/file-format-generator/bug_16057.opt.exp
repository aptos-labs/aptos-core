
============ disassembled file-format ==================
// Move bytecode v8
module c0ffee.m {
struct S<K, V> has store {
	keys: vector<K>,
	values: vector<V>,
	num: u64
}

add<K, V>(self: &mut S<K, V>, k: K, v: V) /* def_idx: 0 */ {
L3:	$t1: &mut u64
B0:
	0: CopyLoc[0](self: &mut S<K, V>)
	1: MutBorrowFieldGeneric[0](S.keys: vector<K>)
	2: MoveLoc[1](k: K)
	3: VecPushBack(3)
	4: CopyLoc[0](self: &mut S<K, V>)
	5: MutBorrowFieldGeneric[1](S.values: vector<V>)
	6: MoveLoc[2](v: V)
	7: VecPushBack(4)
	8: MoveLoc[0](self: &mut S<K, V>)
	9: MutBorrowFieldGeneric[2](S.num: u64)
	10: StLoc[3]($t1: &mut u64)
	11: CopyLoc[3]($t1: &mut u64)
	12: ReadRef
	13: LdU64(1)
	14: Add
	15: MoveLoc[3]($t1: &mut u64)
	16: WriteRef
	17: Ret
}
destroy<K: drop, V: drop>(self: S<K, V>) /* def_idx: 1 */ {
L1:	values: vector<V>
B0:
	0: MutBorrowLoc[0](self: S<K, V>)
	1: MutBorrowFieldGeneric[0](S.keys: vector<K>)
	2: VecPopBack(3)
	3: Pop
	4: MutBorrowLoc[0](self: S<K, V>)
	5: MutBorrowFieldGeneric[1](S.values: vector<V>)
	6: VecPopBack(4)
	7: Pop
	8: MoveLoc[0](self: S<K, V>)
	9: UnpackGeneric[0](S<K, V>)
	10: Pop
	11: StLoc[1](values: vector<V>)
	12: VecUnpack(3, 0)
	13: MoveLoc[1](values: vector<V>)
	14: VecUnpack(4, 0)
	15: Ret
}
kp<K: copy + drop + store, V: copy + store>(self: &S<K, V>, i: u64): vector<K> * u64 /* def_idx: 2 */ {
L2:	return[0]: vector<K>
B0:
	0: MoveLoc[0](self: &S<K, V>)
	1: ImmBorrowFieldGeneric[0](S.keys: vector<K>)
	2: ReadRef
	3: MoveLoc[1](i: u64)
	4: Ret
}
new<K: copy + drop + store, V: store>(): S<K, V> /* def_idx: 3 */ {
B0:
	0: VecPack(3, 0)
	1: VecPack(4, 0)
	2: LdU64(0)
	3: PackGeneric[0](S<K, V>)
	4: Ret
}
public test() /* def_idx: 4 */ {
L0:	t: S<u64, u64>
L1:	$t2: u64
B0:
	0: Call new<u64, u64>(): S<u64, u64>
	1: StLoc[0](t: S<u64, u64>)
	2: MutBorrowLoc[0](t: S<u64, u64>)
	3: LdU64(1)
	4: LdU64(0)
	5: Call add<u64, u64>(&mut S<u64, u64>, u64, u64)
	6: ImmBorrowLoc[0](t: S<u64, u64>)
	7: ImmBorrowFieldGeneric[3](S.num: u64)
	8: ReadRef
	9: StLoc[1]($t2: u64)
	10: ImmBorrowLoc[0](t: S<u64, u64>)
	11: MoveLoc[1]($t2: u64)
	12: Call kp<u64, u64>(&S<u64, u64>, u64): vector<u64> * u64
	13: Pop
	14: Pop
	15: MoveLoc[0](t: S<u64, u64>)
	16: Call destroy<u64, u64>(S<u64, u64>)
	17: Ret
}
}
============ bytecode verification succeeded ========
