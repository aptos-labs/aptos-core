
============ disassembled file-format ==================
// Move bytecode v8
module 42.vector {
use 0000000000000000000000000000000000000000000000000000000000000001::vector as 1vector;




public remove<Element>(v: &mut vector<Element>, i: u64): Element /* def_idx: 0 */ {
L2:	len: u64
B0:
	0: CopyLoc[0](v: &mut vector<Element>)
	1: FreezeRef
	2: VecLen(1)
	3: StLoc[2](len: u64)
	4: CopyLoc[1](i: u64)
	5: CopyLoc[2](len: u64)
	6: Ge
	7: BrFalse(12)
B1:
	8: MoveLoc[0](v: &mut vector<Element>)
	9: Pop
	10: LdU64(1)
	11: Abort
B2:
	12: MoveLoc[2](len: u64)
	13: LdU64(1)
	14: Sub
	15: StLoc[2](len: u64)
B3:
	16: CopyLoc[1](i: u64)
	17: CopyLoc[2](len: u64)
	18: Lt
	19: BrFalse(29)
B4:
	20: CopyLoc[0](v: &mut vector<Element>)
	21: CopyLoc[1](i: u64)
	22: MoveLoc[1](i: u64)
	23: LdU64(1)
	24: Add
	25: StLoc[1](i: u64)
	26: CopyLoc[1](i: u64)
	27: VecSwap(1)
	28: Branch(16)
B5:
	29: MoveLoc[0](v: &mut vector<Element>)
	30: VecPopBack(1)
	31: Ret
}
create(): vector<u64> /* def_idx: 1 */ {
B0:
	0: LdConst[0](Vector(U64): [3, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0])
	1: Ret
}
test_fold() /* def_idx: 2 */ {
L0:	accu: u64
L1:	v: vector<u64>
B0:
	0: LdU64(0)
	1: StLoc[0](accu: u64)
	2: LdConst[1](Vector(U64): [1, 1, 0, 0, 0, 0, 0, 0, 0])
	3: StLoc[1](v: vector<u64>)
	4: MutBorrowLoc[1](v: vector<u64>)
	5: Call 1vector::reverse<u64>(&mut vector<u64>)
B1:
	6: ImmBorrowLoc[1](v: vector<u64>)
	7: Call 1vector::is_empty<u64>(&vector<u64>): bool
	8: BrTrue(15)
B2:
	9: MutBorrowLoc[1](v: vector<u64>)
	10: VecPopBack(2)
	11: Pop
	12: LdU64(0)
	13: StLoc[0](accu: u64)
	14: Branch(6)
B3:
	15: MoveLoc[0](accu: u64)
	16: LdU64(0)
	17: Eq
	18: BrFalse(20)
B4:
	19: Ret
B5:
	20: LdU64(0)
	21: Abort
}
}
============ bytecode verification succeeded ========
