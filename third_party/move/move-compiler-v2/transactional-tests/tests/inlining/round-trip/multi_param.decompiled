//**** Cross-compiled for `move` syntax from `tests/inlining/multi_param.move`

//# publish
module 0x42::Test {
    struct Elem<T0, T1> has drop {
        k: T0,
        v: T1,
    }
    public fun test() {
        let _t8 = Elem<u64,u64>{k: 1, v: 2};
        let _t9 = 0x1::vector::empty<Elem<u64, u64>>();
        0x1::vector::push_back<Elem<u64, u64>>(&mut _t9, _t8);
        let _t0 = _t9;
        let _t1 = &mut _t0;
        let _t2 = 0;
        let _t3 = 0;
        loop {
            let _t17 = 0x1::vector::length<Elem<u64, u64>>(freeze(_t1));
            if (!(_t3 < _t17)) break;
            let _t4 = 0x1::vector::borrow_mut<Elem<u64, u64>>(_t1, _t3);
            let _t24 = &_t4.k;
            let _t5 = &mut _t4.v;
            let _t27 = *_t24;
            let _t29 = *_t5;
            let _t30 = _t27 + _t29;
            _t2 = _t2 + _t30;
            _t3 = _t3 + 1;
            continue
        };
        if (!(_t2 == 3)) abort 0;
    }
}


//# run 0x42::Test::test