//**** Cross-compiled for `move` syntax from `tests/misc/fibonacci.move`

//# publish
module 0x42::fibonacci {
    public fun fib(p0: u64): u64 {
        if (p0 == 0) return 0;
        if (p0 == 1) return 1;
        let _t12 = fib(p0 - 1);
        let _t16 = fib(p0 - 2);
        _t12 + _t16
    }
    public fun test_fib() {
        if (!(fib(0) == 0)) abort 0;
        if (!(fib(1) == 1)) abort 1;
        if (!(fib(2) == 1)) abort 2;
        if (!(fib(3) == 2)) abort 3;
        if (!(fib(4) == 3)) abort 4;
        if (!(fib(5) == 5)) abort 5;
        if (!(fib(6) == 8)) abort 6;
        if (!(fib(7) == 13)) abort 7;
        if (!(fib(8) == 21)) abort 8;
        if (!(fib(9) == 34)) abort 9;
        if (!(fib(10) == 55)) abort 10;
    }
}


//# run 0x42::fibonacci::test_fib