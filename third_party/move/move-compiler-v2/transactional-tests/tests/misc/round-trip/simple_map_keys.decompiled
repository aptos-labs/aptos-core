//**** Cross-compiled for `move` syntax from `tests/misc/simple_map_keys.move`

//# publish
module 0x42::simple_map {
    struct Element<T0, T1> has copy, drop, store {
        key: T0,
        value: T1,
    }
    struct SimpleMap<T0, T1> has copy, drop, store {
        data: vector<Element<T0, T1>>,
    }
    public fun keys<T0: copy, T1>(p0: &SimpleMap<T0, T1>): vector<T0> {
        let _t1 = &p0.data;
        let _t2 = 0x1::vector::empty<T0>();
        let _t3 = 0;
        let _t4 = 0x1::vector::length<Element<T0, T1>>(_t1);
        while (_t3 < _t4) {
            let _t5 = 0x1::vector::borrow<Element<T0, T1>>(_t1, _t3);
            let _t18 = &mut _t2;
            let _t21 = *&_t5.key;
            0x1::vector::push_back<T0>(_t18, _t21);
            _t3 = _t3 + 1;
            continue
        };
        _t2
    }
    public fun run() {
        let _t0 = Element<u64,u64>{key: 1, value: 2};
        let _t8 = 0x1::vector::empty<Element<u64, u64>>();
        let _t9 = &mut _t8;
        0x1::vector::push_back<Element<u64, u64>>(_t9, _t0);
        0x1::vector::push_back<Element<u64, u64>>(_t9, _t0);
        0x1::vector::push_back<Element<u64, u64>>(_t9, _t0);
        let _t1 = SimpleMap<u64,u64>{data: _t8};
        if (!(keys<u64,u64>(&_t1) == vector[1, 1, 1])) abort 33;
    }
}


//# run  0x42::simple_map::run