//**** Cross-compiled for `move` syntax from `tests/misc/vector_popback.move`

//# publish
module 0x42::vector {
    use 0x1::vector;
    public fun remove<T0>(p0: &mut vector<T0>, p1: u64): T0 {
        let _t2 = vector::length<T0>(freeze(p0));
        if (p1 >= _t2) abort 1;
        _t2 = _t2 - 1;
        while (p1 < _t2) {
            let _t18 = p1;
            p1 = p1 + 1;
            vector::swap<T0>(p0, _t18, p1);
            continue
        };
        vector::pop_back<T0>(p0)
    }
    fun create(): vector<u64> {
        vector[1, 2, 3]
    }
    public fun test_fold() {
        let _t0 = 0;
        let _t1 = vector[1];
        vector::reverse<u64>(&mut _t1);
        while (!vector::is_empty<u64>(&_t1)) {
            let _t8 = vector::pop_back<u64>(&mut _t1);
            _t0 = 0;
            continue
        };
        if (!(_t0 == 0)) abort 0;
    }
    public fun test_remove() {
        let _t0 = create();
        if (!(remove<u64>(&mut _t0, 1) == 2)) abort 0;
        if (!(vector::length<u64>(&_t0) == 2)) abort 0;
        if (!(*vector::borrow<u64>(&_t0, 0) == 1)) abort 0;
        if (!(*vector::borrow<u64>(&_t0, 1) == 3)) abort 0;
    }
}


//# run 0x42::vector::test_fold

//# run 0x42::vector::test_remove