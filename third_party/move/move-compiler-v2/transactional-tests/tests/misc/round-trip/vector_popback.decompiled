//**** Cross-compiled for `move` syntax from `tests/misc/vector_popback.move`

//# publish
module 0x42::vector {
    use 0x1::vector;
    public fun remove<T0>(p0: &mut vector<T0>, p1: u64): T0 {
        let _v0 = vector::length<T0>(freeze(p0));
        if (p1 >= _v0) abort 1;
        _v0 = _v0 - 1;
        while (p1 < _v0) {
            let _v1 = p1;
            p1 = p1 + 1;
            vector::swap<T0>(p0, _v1, p1);
            continue
        };
        vector::pop_back<T0>(p0)
    }
    fun create(): vector<u64> {
        vector[1, 2, 3]
    }
    public fun test_fold() {
        let _v0 = 0;
        let _v1 = vector[1];
        vector::reverse<u64>(&mut _v1);
        while (!vector::is_empty<u64>(&_v1)) {
            let _v2 = vector::pop_back<u64>(&mut _v1);
            _v0 = 0;
            continue
        };
        assert!(_v0 == 0, 0);
    }
    public fun test_remove() {
        let _v0 = create();
        assert!(remove<u64>(&mut _v0, 1) == 2, 0);
        assert!(vector::length<u64>(&_v0) == 2, 0);
        assert!(*vector::borrow<u64>(&_v0, 0) == 1, 0);
        assert!(*vector::borrow<u64>(&_v0, 1) == 3, 0);
    }
}


//# run 0x42::vector::test_fold

//# run 0x42::vector::test_remove