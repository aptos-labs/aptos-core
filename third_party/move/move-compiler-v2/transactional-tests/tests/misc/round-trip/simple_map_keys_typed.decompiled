//**** Cross-compiled for `move` syntax from `tests/misc/simple_map_keys_typed.move`

//# publish
module 0x42::simple_map {
    struct Element<T0, T1> has copy, drop, store {
        key: T0,
        value: T1,
    }
    struct SimpleMap<T0, T1> has copy, drop, store {
        data: vector<Element<T0, T1>>,
    }
    public fun keys<T0: copy, T1>(p0: &SimpleMap<T0, T1>): vector<T0> {
        let _v0 = &p0.data;
        let _v1 = 0x1::vector::empty<T0>();
        let _v2 = 0;
        let _v3 = 0x1::vector::length<Element<T0, T1>>(_v0);
        while (_v2 < _v3) {
            let _v4 = 0x1::vector::borrow<Element<T0, T1>>(_v0, _v2);
            let _v5 = &mut _v1;
            let _v6 = *&_v4.key;
            0x1::vector::push_back<T0>(_v5, _v6);
            _v2 = _v2 + 1;
            continue
        };
        _v1
    }
    public fun run() {
        let _v0 = Element<u64,u64>{key: 1, value: 2};
        let _v1 = 0x1::vector::empty<Element<u64, u64>>();
        let _v2 = &mut _v1;
        0x1::vector::push_back<Element<u64, u64>>(_v2, _v0);
        0x1::vector::push_back<Element<u64, u64>>(_v2, _v0);
        0x1::vector::push_back<Element<u64, u64>>(_v2, _v0);
        let _v3 = SimpleMap<u64,u64>{data: _v1};
        assert!(keys<u64,u64>(&_v3) == vector[1, 1, 1], 33);
    }
}


//# run  0x42::simple_map::run