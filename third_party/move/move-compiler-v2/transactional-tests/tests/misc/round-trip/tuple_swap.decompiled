//**** Cross-compiled for `move` syntax from `tests/misc/tuple_swap.move`

//# publish
module 0xc0ffee::m {
    struct W {
        inner: u64,
    }
    fun swap1(p0: u32, p1: u32): (u32, u32) {
        (p1, p0)
    }
    fun swap10(p0: u64): (u64, u64) {
        (88, p0)
    }
    fun swap11(): (u64, u64) {
        (83, 53)
    }
    fun swap2(p0: u64, p1: u64, p2: u64, p3: u64): (u64, u64, u64, u64) {
        (p2, p3, p1, p0)
    }
    fun swap3(p0: u64, p1: u64): (u64, u64) {
        (p1, p0)
    }
    fun swap4(p0: W, p1: W): (W, W) {
        (p1, p0)
    }
    fun swap5(): (u64, u64) {
        let _v0 = W{inner: 258};
        let _v1 = W{inner: 147};
        let W{inner: _v2} = _v0;
        let W{inner: _v3} = _v1;
        (_v2, _v3)
    }
    fun swap6(p0: u64, p1: u64): (u64, u64) {
        let _v0 = p1 + 1;
        let _v1 = p0 + 1;
        (_v0, _v1)
    }
    fun swap7(p0: u64, p1: u64): (u64, u64) {
        let _v0 = &p0;
        let _v1 = *&p1;
        let _v2 = *_v0;
        (_v1, _v2)
    }
    fun swap8(p0: u64, p1: u64, p2: u64): (u64, u64) {
        let _v0 = 0;
        let _v1 = false;
        loop {
            if (_v1) _v0 = _v0 + 1 else _v1 = true;
            if (!(_v0 < p2)) break;
            let _v2 = p0;
            p0 = p1;
            p1 = _v2;
            continue
        };
        (p0, p1)
    }
    fun swap9(): (u64, u64) {
        (23, 51)
    }
    public fun test1(): (u32, u32) {
        let (_v0,_v1) = swap1(1u32, 2u32);
        (_v0, _v1)
    }
    public fun test10(): (u64, u64) {
        let (_v0,_v1) = swap10(10);
        (_v0, _v1)
    }
    public fun test2(): (u64, u64, u64, u64) {
        let (_v0,_v1,_v2,_v3) = swap2(10, 20, 30, 40);
        (_v0, _v1, _v2, _v3)
    }
    public fun test3(): (u64, u64) {
        let (_v0,_v1) = swap3(11, 22);
        (_v0, _v1)
    }
    public fun test4(): (W, W) {
        let _v0 = W{inner: 111};
        let _v1 = W{inner: 222};
        let (_v2,_v3) = swap4(_v0, _v1);
        (_v2, _v3)
    }
    public fun test6(): (u64, u64) {
        let (_v0,_v1) = swap6(4, 40);
        (_v0, _v1)
    }
    public fun test7(): (u64, u64) {
        let (_v0,_v1) = swap7(44, 440);
        (_v0, _v1)
    }
    public fun test8(): (u64, u64, u64, u64) {
        let (_v0,_v1) = swap8(8, 80, 8);
        let (_v2,_v3) = swap8(8, 80, 9);
        (_v0, _v1, _v2, _v3)
    }
}


//# run 0xc0ffee::m::test1

//# run 0xc0ffee::m::test2

//# run 0xc0ffee::m::test3

//# run 0xc0ffee::m::test4

//# run 0xc0ffee::m::swap5

//# run 0xc0ffee::m::test6

//# run 0xc0ffee::m::test7

//# run 0xc0ffee::m::test8

//# run 0xc0ffee::m::swap9

//# run 0xc0ffee::m::test10

//# run 0xc0ffee::m::swap11