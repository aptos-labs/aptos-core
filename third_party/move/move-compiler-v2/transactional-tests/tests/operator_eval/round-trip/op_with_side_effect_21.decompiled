//**** Cross-compiled for `move` syntax from `tests/operator_eval/op_with_side_effect_21.move`

//# publish
module 0xc0ffee::m {
    fun inc(p0: &mut u64): u64 {
        *p0 = *p0 + 1;
        *p0
    }
    public fun test1(): u64 {
        let _v0 = 1;
        let _v1 = inc(&mut _v0);
        let _v2 = inc(&mut _v0);
        let _v3 = inc(&mut _v0);
        let _v4 = inc(&mut _v0);
        let _v5 = _v3 + _v4;
        let _v6 = _v1 + _v5;
        let _v7 = inc(&mut _v0);
        let _v8 = inc(&mut _v0);
        let _v9 = inc(&mut _v0);
        _v6 + _v9
    }
    public fun test2(): u64 {
        let _v0 = 1 + 1;
        let _v1 = _v0;
        let _v2 = inc(&mut _v1);
        let _v3 = inc(&mut _v0);
        let _v4 = inc(&mut _v0);
        let _v5 = inc(&mut _v0);
        let _v6 = _v4 + _v5;
        let _v7 = _v2 + _v6;
        let _v8 = inc(&mut _v0);
        let _v9 = inc(&mut _v0);
        let _v10 = inc(&mut _v0);
        _v7 + _v10
    }
}


//# run 0xc0ffee::m::test1

//# run 0xc0ffee::m::test2