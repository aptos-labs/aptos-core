//# publish
module 0xc0ffee::m {
    use std::bcs;

    public fun test1(): bool {
        let x = 1;
        let y = 2;
        let f: || u64 has drop = || {x + y + 1};
        // Serialization fails!
        let _ = bcs::to_bytes(&f);
        true
    }

    public fun foo() {}

    #[persistent]
    fun bar() {}

    public fun test2() {
        let f: || has drop = foo;
        let b: || has drop = bar;
        assert!(bcs::to_bytes(&f) != bcs::to_bytes(&b), 1);
    }

    public fun test3() {
        let f: || has drop = foo;
        assert!(bcs::to_bytes(&f) == bcs::to_bytes(&f), 2);
    }
}

//# run 0xc0ffee::m::test1

//# run 0xc0ffee::m::test2

//# run 0xc0ffee::m::test3

//# publish
module 0xc0ffee::n {
    public fun test(x: u64): u64 {
        let f = || || || || || || || || || || |x| x;
        let f1 = |x| f()()()()()()()()()()(x);
        let f2 = |f| f(x);
        let f3 = |f1, f2| f1(f2);
        f3(f2, f1)
    }
}

//# run 0xc0ffee::n::test --args 42

//# publish
module 0xc0ffee::o {
    public fun test(x: u64): u64 {
        let f = || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || || |x| x;
        let f1 = |x| fx);
        let f2 = |f| f(x);
        let f3 = |f1, f2| f1(f2);
        f3(f2, f1)
    }
}
