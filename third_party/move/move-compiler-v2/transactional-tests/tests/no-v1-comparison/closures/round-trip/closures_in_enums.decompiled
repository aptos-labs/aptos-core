//**** Cross-compiled for `move` syntax from `tests/no-v1-comparison/closures/closures_in_enums.move`

//# publish
module 0xc0ffee::m {
    enum Function has copy, drop {
        NoParam {
            _0: ||(u64) has copy + drop,
        }
        OneParam {
            _0: |u64|(u64) has copy + drop,
        }
        TwoParam {
            _0: |u64, u64|(u64) has copy + drop,
        }
    }
    fun get_func(p0: &Function): &||(u64) has copy {
        assert!(p0 is NoParam, 42);
        &p0._0
    }
    fun get_func_recursive(p0: Function): ||(u64) {
        let _v0;
        let _v1 = &p0;
        if (_v1 is NoParam) {
            let Function::NoParam{_0: _v2} = p0;
            _v0 = _v2
        } else if (_v1 is OneParam) {
            let Function::OneParam{_0: _v3} = p0;
            _v0 = get_func_recursive(Function::NoParam{_0: || lambda__1__get_func_recursive(_v3)})
        } else if (_v1 is TwoParam) {
            let Function::TwoParam{_0: _v4} = p0;
            _v0 = get_func_recursive(Function::OneParam{_0: |arg0| lambda__2__get_func_recursive(_v4, arg0)})
        } else abort 14566554180833181697;
        _v0
    }
    fun lambda__1__get_func_recursive(p0: |u64|(u64) has copy + drop): u64 {
        p0(0)
    }
    fun lambda__2__get_func_recursive(p0: |u64, u64|(u64) has copy + drop, p1: u64): u64 {
        p0(0, p1)
    }
    fun runner_1(p0: Function): u64 {
        let _v0;
        let _v1 = &p0;
        if (_v1 is NoParam) {
            let Function::NoParam{_0: _v2} = p0;
            _v0 = _v2()
        } else if (_v1 is OneParam) {
            let Function::OneParam{_0: _v3} = p0;
            _v0 = _v3(0)
        } else if (_v1 is TwoParam) {
            let Function::TwoParam{_0: _v4} = p0;
            _v0 = _v4(0, 0)
        } else abort 14566554180833181697;
        _v0
    }
    fun runner_2(p0: Function): u64 {
        let _v0;
        let _v1 = &p0;
        if (_v1 is NoParam) {
            let Function::NoParam{_0: _v2} = p0;
            _v0 = _v2
        } else if (_v1 is OneParam) {
            let Function::OneParam{_0: _v3} = p0;
            _v0 = || lambda__1__runner_2(_v3)
        } else if (_v1 is TwoParam) {
            let Function::TwoParam{_0: _v4} = p0;
            _v0 = || lambda__2__runner_2(_v4)
        } else abort 14566554180833181697;
        _v0()
    }
    fun lambda__1__runner_2(p0: |u64|(u64) has copy + drop): u64 {
        p0(0)
    }
    fun lambda__2__runner_2(p0: |u64, u64|(u64) has copy + drop): u64 {
        p0(0, 0)
    }
    fun runner_3(p0: &Function): u64 {
        let _v0 = *get_func(p0);
        _v0()
    }
    fun runner_4(p0: Function): u64 {
        let _v0 = get_func_recursive(p0);
        _v0()
    }
    public fun test_1() {
        assert!(runner_1(Function::NoParam{_0: || lambda__1__test_1()}) == 0, 14566554180833181696);
        assert!(runner_1(Function::OneParam{_0: |arg0| lambda__2__test_1(arg0)}) == 0, 14566554180833181696);
        assert!(runner_1(Function::TwoParam{_0: |arg0,arg1| lambda__3__test_1(arg0, arg1)}) == 0, 14566554180833181696);
        assert!(runner_1(Function::NoParam{_0: || lambda__4__test_1(1)}) == 1, 14566554180833181696);
        assert!(runner_1(Function::OneParam{_0: |arg0| lambda__5__test_1(1, arg0)}) == 1, 14566554180833181696);
    }
    fun lambda__1__test_1(): u64 {
        0
    }
    fun lambda__2__test_1(p0: u64): u64 {
        p0
    }
    fun lambda__3__test_1(p0: u64, p1: u64): u64 {
        p0 + p1
    }
    fun lambda__4__test_1(p0: u64): u64 {
        p0
    }
    fun lambda__5__test_1(p0: u64, p1: u64): u64 {
        p0 + p1
    }
    public fun test_2() {
        assert!(runner_2(Function::NoParam{_0: || lambda__1__test_2()}) == 0, 14566554180833181696);
        assert!(runner_2(Function::OneParam{_0: |arg0| lambda__2__test_2(arg0)}) == 0, 14566554180833181696);
        assert!(runner_2(Function::TwoParam{_0: |arg0,arg1| lambda__3__test_2(arg0, arg1)}) == 0, 14566554180833181696);
        assert!(runner_2(Function::NoParam{_0: || lambda__4__test_2(1)}) == 1, 14566554180833181696);
        assert!(runner_2(Function::OneParam{_0: |arg0| lambda__5__test_2(1, arg0)}) == 1, 14566554180833181696);
    }
    fun lambda__1__test_2(): u64 {
        0
    }
    fun lambda__2__test_2(p0: u64): u64 {
        p0
    }
    fun lambda__3__test_2(p0: u64, p1: u64): u64 {
        p0 + p1
    }
    fun lambda__4__test_2(p0: u64): u64 {
        p0
    }
    fun lambda__5__test_2(p0: u64, p1: u64): u64 {
        p0 + p1
    }
    fun test_3() {
        let _v0 = Function::NoParam{_0: || lambda__1__test_3()};
        assert!(runner_3(&_v0) == 0, 14566554180833181696);
    }
    fun lambda__1__test_3(): u64 {
        0
    }
    public fun test_4() {
        assert!(runner_4(Function::NoParam{_0: || lambda__1__test_4()}) == 0, 14566554180833181696);
        assert!(runner_4(Function::OneParam{_0: |arg0| lambda__2__test_4(arg0)}) == 0, 14566554180833181696);
        assert!(runner_4(Function::TwoParam{_0: |arg0,arg1| lambda__3__test_4(arg0, arg1)}) == 0, 14566554180833181696);
        assert!(runner_4(Function::NoParam{_0: || lambda__4__test_4(1)}) == 1, 14566554180833181696);
        assert!(runner_4(Function::OneParam{_0: |arg0| lambda__5__test_4(1, arg0)}) == 1, 14566554180833181696);
    }
    fun lambda__1__test_4(): u64 {
        0
    }
    fun lambda__2__test_4(p0: u64): u64 {
        p0
    }
    fun lambda__3__test_4(p0: u64, p1: u64): u64 {
        p0 + p1
    }
    fun lambda__4__test_4(p0: u64): u64 {
        p0
    }
    fun lambda__5__test_4(p0: u64, p1: u64): u64 {
        p0 + p1
    }
}


//# run 0xc0ffee::m::test_1

//# run 0xc0ffee::m::test_2

//# run 0xc0ffee::m::test_3

//# run 0xc0ffee::m::test_4