//**** Cross-compiled for `move` syntax from `tests/no-v1-comparison/closures/closure_equality.move`

//# publish
module 0xc0ffee::m {
    use 0x1::signer;
    struct Wrapper<T0> has copy, drop, key {
        value: T0,
    }
    public fun init(p0: &signer) {
        let _t5 = Wrapper<|u64|(u64) has copy + drop + store>{value: |arg0| identity<u64>(arg0)};
        move_to<Wrapper<|u64|(u64) has copy + drop + store>>(p0, _t5);
    }
    public fun identity<T0>(p0: T0): T0 {
        p0
    }
    public fun compare(p0: |u64|(u64) has copy + drop + store, p1: &signer): bool
        acquires Wrapper
    {
        let _t3 = signer::address_of(p1);
        *&borrow_global<Wrapper<|u64|(u64) has copy + drop + store>>(_t3).value == p0
    }
}


//# run 0xc0ffee::m::init --signers 0xc0ffee

//# run --signers 0xc0ffee
script {
    use 0xc0ffee::m;
    fun main(p0: &signer) {
        if (!m::compare(|arg0| m::identity<u64>(arg0), p0)) abort 14566554180833181696;
    }
}
