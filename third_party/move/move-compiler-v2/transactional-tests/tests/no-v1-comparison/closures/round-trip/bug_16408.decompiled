//**** Cross-compiled for `move` syntax from `tests/no-v1-comparison/closures/bug_16408.move`

//# publish
module 0xc0ffee::m {
    fun make_func_1(): |u64|(|u64|(u64)) has copy + drop {
        |arg0| lambda__2__make_func_1(arg0)
    }
    fun lambda__2__make_func_1(p0: u64): |u64|(u64) {
        |arg0| lambda__1__make_func_1(p0, arg0)
    }
    fun make_func_2(): |u64, u64|(||(u64)) has copy + drop {
        |arg0,arg1| lambda__2__make_func_2(arg0, arg1)
    }
    fun lambda__2__make_func_2(p0: u64, p1: u64): ||(u64) {
        || lambda__1__make_func_2(p0, p1)
    }
    fun make_func_3(): |u64, u64|(||(u64, u64)) has copy + drop {
        |arg0,arg1| lambda__2__make_func_3(arg0, arg1)
    }
    fun lambda__2__make_func_3(p0: u64, p1: u64): ||(u64, u64) {
        || lambda__1__make_func_3(p0, p1)
    }
    fun test() {
        let _v0 = make_func_1();
        let _v1 = _v0(10);
        assert!(_v1(20) == 30, 14566554180833181696);
        let _v2 = make_func_2();
        let _v3 = _v2(10, 20);
        assert!(_v3() == 200, 14566554180833181696);
        let _v4 = make_func_3();
        let _v5 = _v4(10, 20);
        let (_v6,_v7) = _v5();
        assert!(_v6 == 10, 14566554180833181696);
        assert!(_v7 == 20, 14566554180833181696);
    }
    fun lambda__1__make_func_1(p0: u64, p1: u64): u64 {
        p0 + p1
    }
    fun lambda__1__make_func_2(p0: u64, p1: u64): u64 {
        p0 * p1
    }
    fun lambda__1__make_func_3(p0: u64, p1: u64): (u64, u64) {
        (p0, p1)
    }
}


//# run 0xc0ffee::m::test