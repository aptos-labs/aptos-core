//**** Cross-compiled for `move` syntax from `tests/no-v1-comparison/closures/bug_16684.move`

//# publish
module 0xc0ffee::m {
    use 0x1::vector;
    struct Resource {
        _0: u64,
    }
    fun apply<T0>(p0: ||(vector<T0>)): vector<T0> {
        p0()
    }
    public fun test10(): vector<u64> {
        let _t0 = vector[1, 2, 3];
        let _t1 = |arg0| lambda__1__test10(4, arg0);
        let _t5 = &mut _t0;
        _t1(_t5);
        _t0
    }
    fun lambda__1__test10(p0: u64, p1: &mut vector<u64>) {
        vector::push_back<u64>(p1, p0);
    }
    public fun test1a(): vector<u64> {
        let _t0: ||vector<u64> has copy + drop = || lambda__1__test1a();
        _t0()
    }
    fun lambda__1__test1a(): vector<u64> {
        vector::empty<u64>()
    }
    public fun test1b(): vector<u64> {
        let _t0: ||vector<u64> has copy + drop = || lambda__1__test1b();
        _t0()
    }
    fun lambda__1__test1b(): vector<u64> {
        vector::empty<u64>()
    }
    public fun test2a(): vector<u64> {
        let _t0: ||vector<u64> has copy + drop = || lambda__1__test2a();
        _t0()
    }
    fun lambda__1__test2a(): vector<u64> {
        vector::empty<u64>()
    }
    public fun test2b(): vector<u64> {
        let _t0: ||vector<u64> has copy + drop = || lambda__1__test2b();
        _t0()
    }
    fun lambda__1__test2b(): vector<u64> {
        vector::empty<u64>()
    }
    public fun test3a<T0>(): vector<T0> {
        let _t0: ||vector<T0> has copy + drop = || lambda__1__test3a<T0>();
        _t0()
    }
    fun lambda__1__test3a<T0>(): vector<T0> {
        vector::empty<T0>()
    }
    public fun test3b<T0>(): vector<T0> {
        let _t0: ||vector<T0> has copy + drop = || lambda__1__test3b<T0>();
        _t0()
    }
    fun lambda__1__test3b<T0>(): vector<T0> {
        vector::empty<T0>()
    }
    public fun test4a<T0>(): vector<T0> {
        let _t0: ||vector<T0> has copy + drop = || lambda__1__test4a<T0>();
        _t0()
    }
    fun lambda__1__test4a<T0>(): vector<T0> {
        vector::empty<T0>()
    }
    public fun test4b<T0>(): vector<T0> {
        let _t0: ||vector<T0> has copy + drop = || lambda__1__test4b<T0>();
        _t0()
    }
    fun lambda__1__test4b<T0>(): vector<T0> {
        vector::empty<T0>()
    }
    public fun test5(): vector<u64> {
        let _t0: ||vector<u64> has copy + drop = || lambda__2__test5();
        _t0()
    }
    fun lambda__2__test5(): vector<u64> {
        apply<u64>(|| lambda__1__test5())
    }
    public fun test6(): vector<u64> {
        let _t0 = |arg0| vector::singleton<u64>(arg0);
        _t0(42)
    }
    public fun test7() {
        let _t0 = |arg0| lambda__1__test7(arg0);
        let _t2 = vector::empty<Resource>();
        _t0(_t2);
    }
    fun lambda__1__test7(p0: vector<Resource>) {
        vector::destroy_empty<Resource>(p0);
    }
    public fun test8(): u64 {
        let _t0 = |arg0| lambda__1__test8(arg0);
        let _t1 = vector[1, 2, 3];
        let _t4 = &_t1;
        _t0(_t4)
    }
    fun lambda__1__test8(p0: &vector<u64>): u64 {
        vector::length<u64>(p0)
    }
    public fun test9a(): vector<u64> {
        let _t0 = vector[1, 2, 3];
        let _t1 = |arg0,arg1,arg2| lambda__1__test9a(arg0, arg1, arg2);
        let _t4 = &mut _t0;
        _t1(_t4, 0, 2);
        _t0
    }
    fun lambda__1__test9a(p0: &mut vector<u64>, p1: u64, p2: u64) {
        vector::swap<u64>(p0, p1, p2);
    }
    public fun test9b(): vector<u64> {
        let _t0 = vector[1, 2, 3];
        let _t1 = |arg0,arg1,arg2| lambda__1__test9b(arg0, arg1, arg2);
        let _t4 = &mut _t0;
        _t1(_t4, 0, 2);
        _t0
    }
    fun lambda__1__test9b(p0: &mut vector<u64>, p1: u64, p2: u64) {
        vector::swap<u64>(p0, p1, p2);
    }
    fun lambda__1__test5(): vector<u64> {
        vector::empty<u64>()
    }
}


//# run 0xc0ffee::m::test1a

//# run 0xc0ffee::m::test1b

//# run 0xc0ffee::m::test2a

//# run 0xc0ffee::m::test2b

//# run 0xc0ffee::m::test3a --type-args u64

//# run 0xc0ffee::m::test3b --type-args u16

//# run 0xc0ffee::m::test4a --type-args u32

//# run 0xc0ffee::m::test4b --type-args u128

//# run 0xc0ffee::m::test5

//# run 0xc0ffee::m::test6

//# run 0xc0ffee::m::test7

//# run 0xc0ffee::m::test8

//# run 0xc0ffee::m::test9a

//# run 0xc0ffee::m::test9b

//# run 0xc0ffee::m::test10