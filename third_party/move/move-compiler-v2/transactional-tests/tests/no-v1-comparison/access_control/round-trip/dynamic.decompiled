//**** Cross-compiled for `move` syntax from `tests/no-v1-comparison/access_control/dynamic.move`

//# publish
module 0x42::test {
    use 0x1::signer;
    struct R has drop, key {
        value: bool,
    }
    fun init(p0: &signer) {
        let _v0 = R{value: true};
        move_to<R>(p0, _v0);
    }
    fun fail1(p0: address): bool
        acquires R
        reads R(p0)
    {
        *&borrow_global<R>(@0x2).value
    }
    fun fail2(p0: &signer): bool
        acquires R
        reads R(signer::address_of(p0))
    {
        *&borrow_global<R>(@0x2).value
    }
    fun ok1(p0: address): bool
        acquires R
        reads R(p0)
    {
        *&borrow_global<R>(p0).value
    }
    fun ok2(p0: &signer): bool
        acquires R
        reads R(signer::address_of(p0))
    {
        let _v0 = signer::address_of(p0);
        *&borrow_global<R>(_v0).value
    }
}


//# run --verbose --signers 0x1 -- 0x42::test::init

//# run --verbose --args @0x1 -- 0x42::test::ok1

//# run --verbose --signers 0x1 -- 0x42::test::ok2

//# run --verbose --args @0x1 -- 0x42::test::fail1

//# run --verbose --signers 0x1 -- 0x42::test::fail2