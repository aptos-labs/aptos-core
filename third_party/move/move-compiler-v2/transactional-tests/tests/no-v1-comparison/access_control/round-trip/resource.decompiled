//**** Cross-compiled for `move` syntax from `tests/no-v1-comparison/access_control/resource.move`

//# publish
module 0x42::test {
    struct Other has drop, key {
    }
    struct R has drop, key {
        value: bool,
    }
    fun init(p0: &signer) {
        let _t3 = R{value: true};
        move_to<R>(p0, _t3);
    }
    fun fail1(): bool
        reads Other
        acquires R
    {
        !*&borrow_global<R>(@0x1).value
    }
    fun fail2(): bool
        reads Other
    {
        !exists<R>(@0x1)
    }
    fun fail3(): bool
        reads R
        writes Other
        acquires R
    {
        let _t0 = move_from<R>(@0x1);
        !*&(&_t0).value
    }
    fun fail4(): bool
        reads R
        writes Other
        acquires R
    {
        let _t3 = &mut borrow_global_mut<R>(@0x1).value;
        *_t3 = false;
        false
    }
    fun fail5(): bool
        reads Other
        acquires R
    {
        fail_no_subsumes()
    }
    fun fail_no_subsumes(): bool
        reads R
        acquires R
    {
        *&borrow_global<R>(@0x1).value
    }
    fun ok1(): bool
        reads R
        acquires R
    {
        *&borrow_global<R>(@0x1).value
    }
    fun ok2(): bool
        reads R
    {
        exists<R>(@0x1)
    }
    fun ok3(p0: &signer): bool
        writes R
    {
        let _t3 = R{value: true};
        move_to<R>(p0, _t3);
        true
    }
    fun ok4(): bool
        writes R
        acquires R
    {
        let _t3 = &mut borrow_global_mut<R>(@0x1).value;
        *_t3 = false;
        true
    }
}


//# run --verbose --signers 0x1 -- 0x42::test::init

//# run --verbose -- 0x42::test::ok1

//# run --verbose -- 0x42::test::ok2

//# run --verbose --signers 0x2 -- 0x42::test::ok3

//# run --verbose -- 0x42::test::ok4

//# run --verbose -- 0x42::test::fail1

//# run --verbose -- 0x42::test::fail2

//# run --verbose -- 0x42::test::fail3

//# run --verbose -- 0x42::test::fail4

//# run --verbose -- 0x42::test::fail5