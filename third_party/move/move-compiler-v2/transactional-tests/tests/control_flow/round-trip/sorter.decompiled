//**** Cross-compiled for `move` syntax from `tests/control_flow/sorter.move`

//# publish
module 0x42::heap {
    fun array_equals(p0: &vector<u64>, p1: &vector<u64>): bool {
        let _t2 = 0x1::vector::length<u64>(p0);
        let _t3 = 0x1::vector::length<u64>(p1);
        let _t10 = _t2 != _t3;
        'l0: loop {
            'l1: loop {
                if (!_t10) {
                    _t3 = 0;
                    loop {
                        if (!(_t3 < _t2)) break 'l0;
                        let _t21 = *0x1::vector::borrow<u64>(p0, _t3);
                        let _t25 = *0x1::vector::borrow<u64>(p1, _t3);
                        if (_t21 != _t25) break 'l1;
                        _t3 = _t3 + 1;
                        continue
                    }
                };
                return false
            };
            return false
        };
        true
    }
    fun create1(): vector<u64> {
        vector[3, 2, 1, 5, 8, 4]
    }
    fun create2(): vector<u64> {
        vector[1, 2, 3, 4, 5, 8]
    }
    public fun main() {
        let _t0 = create1();
        let _t1 = create2();
        let _t2 = vcopy(&_t0);
        let _t7 = &_t0;
        let _t8 = &_t2;
        if (!array_equals(_t7, _t8)) abort 23;
        let _t10 = &_t1;
        let _t11 = &_t1;
        if (!array_equals(_t10, _t11)) abort 29;
        sort(&mut _t0);
        let _t14 = &_t1;
        let _t15 = &_t0;
        if (!array_equals(_t14, _t15)) abort 31;
        let _t17 = &_t0;
        let _t18 = &_t1;
        if (!array_equals(_t17, _t18)) abort 29;
        let _t20 = &_t0;
        let _t21 = &_t2;
        if (array_equals(_t20, _t21)) abort 31;
    }
    fun vcopy(p0: &vector<u64>): vector<u64> {
        let _t1 = 0x1::vector::empty<u64>();
        let _t2 = 0;
        let _t3 = 0x1::vector::length<u64>(p0);
        while (_t2 < _t3) {
            let _t11 = &mut _t1;
            let _t15 = *0x1::vector::borrow<u64>(p0, _t2);
            0x1::vector::push_back<u64>(_t11, _t15);
            _t2 = _t2 + 1;
            continue
        };
        _t1
    }
    fun sort(p0: &mut vector<u64>) {
        let _t1 = 0;
        loop {
            let _t7 = 0x1::vector::length<u64>(freeze(p0));
            if (!(_t1 < _t7)) break;
            let _t2 = _t1 + 1;
            loop {
                let _t15 = 0x1::vector::length<u64>(freeze(p0));
                if (!(_t2 < _t15)) break;
                let _t21 = *0x1::vector::borrow<u64>(freeze(p0), _t1);
                let _t26 = *0x1::vector::borrow<u64>(freeze(p0), _t2);
                if (_t21 > _t26) 0x1::vector::swap<u64>(p0, _t1, _t2);
                _t2 = _t2 + 1;
                continue
            };
            _t1 = _t1 + 1;
            continue
        };
    }
}


//# run
script {
    use 0x42::heap;
    fun main() {
        heap::main();
    }
}
