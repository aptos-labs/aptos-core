//**** Cross-compiled for `move` syntax from `tests/signed-int/arithmetic_i16.move`

//# run --verbose
script {
    fun main() {
        ()
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = 1i16 + 32767i16;
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = -1i16 + -32768i16;
    }
}


//# run --verbose
script {
    fun main() {
        ()
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = -2i16 - 32767i16;
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = 1i16 - -32767i16;
    }
}


//# run --verbose
script {
    fun main() {
        ()
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = 128i16 * 256i16;
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = -128i16 * -256i16;
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = 129i16 * -256i16;
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = -129i16 * 256i16;
    }
}


//# run --verbose
script {
    fun main() {
        ()
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = 1i16 / 0i16;
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = -1i16 / 0i16;
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = -32768i16 / -1i16;
    }
}


//# run --verbose
script {
    fun main() {
        ()
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = 1i16 % 0i16;
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = -1i16 % 0i16;
    }
}


//# publish
module 0xff::negate_i16 {
    fun negate(p0: i16): i16 {
        -p0
    }
    public fun test1() {
        let _v0 = -20i16;
        let _v1 = negate(20i16);
        assert!(_v0 == _v1, 14566554180833181696);
    }
    public fun test2() {
        let _v0 = negate(-32768i16);
    }
}


//# run 0xff::negate_i16::test1 --verbose

//# run 0xff::negate_i16::test2 --verbose