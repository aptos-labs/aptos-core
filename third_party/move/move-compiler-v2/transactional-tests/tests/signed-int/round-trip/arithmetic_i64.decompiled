//**** Cross-compiled for `move` syntax from `tests/signed-int/arithmetic_i64.move`

//# run --verbose
script {
    fun main() {
        ()
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = 1i64 + 9223372036854775807i64;
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = -1i64 + -9223372036854775808i64;
    }
}


//# run --verbose
script {
    fun main() {
        ()
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = -2i64 - 9223372036854775807i64;
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = 1i64 - -9223372036854775807i64;
    }
}


//# run --verbose
script {
    fun main() {
        ()
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = 3037000500i64 * 3037000500i64;
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = -3037000500i64 * -3037000500i64;
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = 9223372036854775807i64 * 2i64;
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = -9223372036854775808i64 * -1i64;
    }
}


//# run --verbose
script {
    fun main() {
        ()
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = 1i64 / 0i64;
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = -1i64 / 0i64;
    }
}


//# run --verbose
script {
    fun main() {
        ()
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = 1i64 % 0i64;
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = -1i64 % 0i64;
    }
}


//# publish
module 0xff::negate_i64 {
    public fun main() {
        let _v0 = -20i64;
        let _v1 = negate(20i64);
        assert!(_v0 == _v1, 14566554180833181696);
    }
    fun negate(p0: i64): i64 {
        -p0
    }
}


//# run 0xff::negate_i64::main