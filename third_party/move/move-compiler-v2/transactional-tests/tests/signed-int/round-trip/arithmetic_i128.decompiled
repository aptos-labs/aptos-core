//**** Cross-compiled for `move` syntax from `tests/signed-int/arithmetic_i128.move`

//# run --verbose
script {
    fun main() {
        ()
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = 1i128 + 170141183460469231731687303715884105727i128;
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = -1i128 + -170141183460469231731687303715884105728i128;
    }
}


//# run --verbose
script {
    fun main() {
        ()
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = -2i128 - 170141183460469231731687303715884105727i128;
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = 1i128 - -170141183460469231731687303715884105727i128;
    }
}


//# run --verbose
script {
    fun main() {
        ()
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = 13043817825332782213i128 * 13043817825332782213i128;
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = 170141183460469231731687303715884105727i128 * 2i128;
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = -170141183460469231731687303715884105728i128 * -1i128;
    }
}


//# run --verbose
script {
    fun main() {
        ()
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = 1i128 / 0i128;
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = -170141183460469231731687303715884105728i128 / -1i128;
    }
}


//# run --verbose
script {
    fun main() {
        ()
    }
}


//# run --verbose
script {
    fun main() {
        let _v0 = 1i128 % 0i128;
    }
}


//# publish
module 0xff::negate_i128 {
    fun negate(p0: i128): i128 {
        -p0
    }
    public fun test1() {
        let _v0 = -20i128;
        let _v1 = negate(20i128);
        assert!(_v0 == _v1, 14566554180833181696);
    }
    public fun test2() {
        let _v0 = negate(-170141183460469231731687303715884105728i128);
    }
}


//# run 0xff::negate_i128::test1 --verbose

//# run 0xff::negate_i128::test2 --verbose