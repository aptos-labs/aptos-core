//# run --verbose
script {
  fun main() {
    assert!(0i256 + 0i256 == 0i256, 1000);
    assert!(1i256 + -1i256 == 0i256, 1001);
    assert!(13i256 + 67i256 == 80i256, 1002);

    assert!(0i256 + 57896044618658097711785492504343953926634992332820282019728792003956564819967i256
            == 57896044618658097711785492504343953926634992332820282019728792003956564819967i256, 1100);
    assert!(-1i256 + -57896044618658097711785492504343953926634992332820282019728792003956564819967i256
            == -57896044618658097711785492504343953926634992332820282019728792003956564819968i256, 1101);
  }
}

//# run --verbose
script {
  fun main() {
    1i256 + 57896044618658097711785492504343953926634992332820282019728792003956564819967i256; // expect abort
  }
}

//# run --verbose
script {
  fun main() {
    -1i256 + -57896044618658097711785492504343953926634992332820282019728792003956564819968i256; // expect abort
  }
}

//# run --verbose
script {
  fun main() {
    assert!(100i256 - 50i256 == 50i256, 2000);
    assert!(0i256 - -57896044618658097711785492504343953926634992332820282019728792003956564819967i256
            == 57896044618658097711785492504343953926634992332820282019728792003956564819967i256, 2001);
    assert!(-1i256 - 57896044618658097711785492504343953926634992332820282019728792003956564819967i256
            == -57896044618658097711785492504343953926634992332820282019728792003956564819968i256, 2002);
  }
}

//# run --verbose
script {
  fun main() {
    // subtraction underflow
    -2i256 - 57896044618658097711785492504343953926634992332820282019728792003956564819967i256; // expect abort
  }
}

//# run --verbose
script {
  fun main() {
    // subtraction overflow
    1i256 - -57896044618658097711785492504343953926634992332820282019728792003956564819967i256; // expect abort
  }
}

//# run --verbose
script {
  fun main() {
    assert!(6i256 * 7i256 == 42i256, 3000);
    assert!(10i256 * -10i256 == -100i256, 3001);

    // near sqrt(max)
    assert!(170141183460469231731687303715884105727i256 * 170141183460469231731687303715884105727i256
            == 28948022309329048855892746252171976962977213799489202546401021394546514198529i256, 3100);
  }
}

//# run --verbose
script {
  fun main() {
    // min * 2 overflow
    -57896044618658097711785492504343953926634992332820282019728792003956564819967i256 * 2i256; // expect abort
  }
}

//# run --verbose
script {
  fun main() {
    // min * -1 overflow
    -57896044618658097711785492504343953926634992332820282019728792003956564819968i256 * -1i256; // expect abort
  }
}

//# run --verbose
script {
  fun main() {
    assert!(6i256 / 3i256 == 2i256, 4000);
    assert!(57896044618658097711785492504343953926634992332820282019728792003956564819967i256 / 6i256
            == 9649340769776349618630915417390658987772498722136713669954798667326094136661i256, 4001);
    assert!(-57896044618658097711785492504343953926634992332820282019728792003956564819967i256 / 6i256
            == -9649340769776349618630915417390658987772498722136713669954798667326094136661i256, 4002);
  }
}

//# run --verbose
script {
  fun main() {
    // division by zero
    1i256 / 0i256; // expect abort
  }
}

//# run --verbose
script {
  fun main() {
    // division overflow: min / -1
    -57896044618658097711785492504343953926634992332820282019728792003956564819968i256 / -1i256; // expect abort
  }
}

//# run --verbose
script {
  fun main() {
    assert!(8i256 % 3i256 == 2i256, 5000);
    assert!(57896044618658097711785492504343953926634992332820282019728792003956564819967i256 % 6i256 == 1i256, 5001);
    assert!(-57896044618658097711785492504343953926634992332820282019728792003956564819967i256 % 6i256 == -1i256, 5002);
  }
}

//# run --verbose
script {
  fun main() {
    // modulo by zero
    1i256 % 0i256; // expect abort
  }
}

//# run --verbose
script {
  fun main() {
    // modulo by zero
    -57896044618658097711785492504343953926634992332820282019728792003956564819968i256 % -0i256; // expect abort
  }
}

//# publish
module 0xff::negate_i256 {
  fun negate(a: i256): i256 {
    -a
  }
  public fun main(){
    let a = 20i256;
    assert!(-a == negate(a));
  }
}

//# run 0xff::negate_i256::main
