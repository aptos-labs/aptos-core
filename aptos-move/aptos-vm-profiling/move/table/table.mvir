module 0x1.M {
    import 0x1.table;

    struct Foo has store, drop { x: u64 }

    run() {
        let i: u64;
        let t: table.Table<u64, Self.Foo>;

    label entry:
        i = 0;
    label loop_start:
        jump_if_false (copy(i) < 1000) loop_end;

        t = table.new<u64, Self.Foo>();
        
        table.add<u64, Self.Foo>(&mut t, 100, Foo { x: 0 });
        _ = table.contains<u64, Self.Foo>(&t, 100);
        _ = table.borrow<u64, Self.Foo>(&t, 100);
        _ = table.remove<u64, Self.Foo>(&mut t, 100);

        table.destroy_empty<u64, Self.Foo>(move(t));

        i = move(i) + 1;
        jump loop_start;
    label loop_end:
        return;
    }
}
