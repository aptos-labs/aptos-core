module 0x1.M {
    f_fastcall<A, B>(x: u64, y: u64): u64 {
    label b0:
        return (copy(x) + copy(y));
    }

    g_fastcall<T>(): u64 {
    label b0:
        return Self.f_fastcall<T, T>(100, 200);
    }

    h_fastcall<T>(): u64 {
    label b0:
        return Self.g_fastcall<T>();
    }

    run() {
        let i: u64;

    label entry:
        i = 0;
    label loop_start:
        jump_if_false (copy(i) < 1000) loop_end;

        _ = Self.h_fastcall<u64>();

        i = move(i) + 1;
        jump loop_start;
    label loop_end:
        return;
        return;
        return;
    }
}
