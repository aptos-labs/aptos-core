
// ** Expanded prelude

// Copyright (c) The Diem Core Contributors
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0

// Basic theory for vectors using arrays. This version of vectors is not extensional.

datatype Vec<T> {
    Vec(v: [int]T, l: int)
}

function {:builtin "MapConst"} MapConstVec<T>(T): [int]T;
function DefaultVecElem<T>(): T;
function {:inline} DefaultVecMap<T>(): [int]T { MapConstVec(DefaultVecElem()) }

function {:inline} EmptyVec<T>(): Vec T {
    Vec(DefaultVecMap(), 0)
}

function {:inline} MakeVec1<T>(v: T): Vec T {
    Vec(DefaultVecMap()[0 := v], 1)
}

function {:inline} MakeVec2<T>(v1: T, v2: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2], 2)
}

function {:inline} MakeVec3<T>(v1: T, v2: T, v3: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2][2 := v3], 3)
}

function {:inline} MakeVec4<T>(v1: T, v2: T, v3: T, v4: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2][2 := v3][3 := v4], 4)
}

function {:inline} ExtendVec<T>(v: Vec T, elem: T): Vec T {
    (var l := v->l;
    Vec(v->v[l := elem], l + 1))
}

function {:inline} ReadVec<T>(v: Vec T, i: int): T {
    v->v[i]
}

function {:inline} LenVec<T>(v: Vec T): int {
    v->l
}

function {:inline} IsEmptyVec<T>(v: Vec T): bool {
    v->l == 0
}

function {:inline} RemoveVec<T>(v: Vec T): Vec T {
    (var l := v->l - 1;
    Vec(v->v[l := DefaultVecElem()], l))
}

function {:inline} RemoveAtVec<T>(v: Vec T, i: int): Vec T {
    (var l := v->l - 1;
    Vec(
        (lambda j: int ::
           if j >= 0 && j < l then
               if j < i then v->v[j] else v->v[j+1]
           else DefaultVecElem()),
        l))
}

function {:inline} ConcatVec<T>(v1: Vec T, v2: Vec T): Vec T {
    (var l1, m1, l2, m2 := v1->l, v1->v, v2->l, v2->v;
    Vec(
        (lambda i: int ::
          if i >= 0 && i < l1 + l2 then
            if i < l1 then m1[i] else m2[i - l1]
          else DefaultVecElem()),
        l1 + l2))
}

function {:inline} ReverseVec<T>(v: Vec T): Vec T {
    (var l := v->l;
    Vec(
        (lambda i: int :: if 0 <= i && i < l then v->v[l - i - 1] else DefaultVecElem()),
        l))
}

function {:inline} SliceVec<T>(v: Vec T, i: int, j: int): Vec T {
    (var m := v->v;
    Vec(
        (lambda k:int ::
          if 0 <= k && k < j - i then
            m[i + k]
          else
            DefaultVecElem()),
        (if j - i < 0 then 0 else j - i)))
}


function {:inline} UpdateVec<T>(v: Vec T, i: int, elem: T): Vec T {
    Vec(v->v[i := elem], v->l)
}

function {:inline} SwapVec<T>(v: Vec T, i: int, j: int): Vec T {
    (var m := v->v;
    Vec(m[i := m[j]][j := m[i]], v->l))
}

function {:inline} ContainsVec<T>(v: Vec T, e: T): bool {
    (var l := v->l;
    (exists i: int :: InRangeVec(v, i) && v->v[i] == e))
}

function IndexOfVec<T>(v: Vec T, e: T): int;
axiom {:ctor "Vec"} (forall<T> v: Vec T, e: T :: {IndexOfVec(v, e)}
    (var i := IndexOfVec(v,e);
     if (!ContainsVec(v, e)) then i == -1
     else InRangeVec(v, i) && ReadVec(v, i) == e &&
        (forall j: int :: j >= 0 && j < i ==> ReadVec(v, j) != e)));

// This function should stay non-inlined as it guards many quantifiers
// over vectors. It appears important to have this uninterpreted for
// quantifier triggering.
function InRangeVec<T>(v: Vec T, i: int): bool {
    i >= 0 && i < LenVec(v)
}

// Copyright (c) The Diem Core Contributors
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0

// Boogie model for multisets, based on Boogie arrays. This theory assumes extensional equality for element types.

datatype Multiset<T> {
    Multiset(v: [T]int, l: int)
}

function {:builtin "MapConst"} MapConstMultiset<T>(l: int): [T]int;

function {:inline} EmptyMultiset<T>(): Multiset T {
    Multiset(MapConstMultiset(0), 0)
}

function {:inline} LenMultiset<T>(s: Multiset T): int {
    s->l
}

function {:inline} ExtendMultiset<T>(s: Multiset T, v: T): Multiset T {
    (var len := s->l;
    (var cnt := s->v[v];
    Multiset(s->v[v := (cnt + 1)], len + 1)))
}

// This function returns (s1 - s2). This function assumes that s2 is a subset of s1.
function {:inline} SubtractMultiset<T>(s1: Multiset T, s2: Multiset T): Multiset T {
    (var len1 := s1->l;
    (var len2 := s2->l;
    Multiset((lambda v:T :: s1->v[v]-s2->v[v]), len1-len2)))
}

function {:inline} IsEmptyMultiset<T>(s: Multiset T): bool {
    (s->l == 0) &&
    (forall v: T :: s->v[v] == 0)
}

function {:inline} IsSubsetMultiset<T>(s1: Multiset T, s2: Multiset T): bool {
    (s1->l <= s2->l) &&
    (forall v: T :: s1->v[v] <= s2->v[v])
}

function {:inline} ContainsMultiset<T>(s: Multiset T, v: T): bool {
    s->v[v] > 0
}

// Copyright (c) The Diem Core Contributors
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0

// Theory for tables.

// v is the SMT array holding the key-value assignment. e is an array which
// independently determines whether a key is valid or not. l is the length.
//
// Note that even though the program cannot reflect over existence of a key,
// we want the specification to be able to do this, so it can express
// verification conditions like "key has been inserted".
datatype Table <K, V> {
    Table(v: [K]V, e: [K]bool, l: int)
}

// Functions for default SMT arrays. For the table values, we don't care and
// use an uninterpreted function.
function DefaultTableArray<K, V>(): [K]V;
function DefaultTableKeyExistsArray<K>(): [K]bool;
axiom DefaultTableKeyExistsArray() == (lambda i: int :: false);

function {:inline} EmptyTable<K, V>(): Table K V {
    Table(DefaultTableArray(), DefaultTableKeyExistsArray(), 0)
}

function {:inline} GetTable<K,V>(t: Table K V, k: K): V {
    // Notice we do not check whether key is in the table. The result is undetermined if it is not.
    t->v[k]
}

function {:inline} LenTable<K,V>(t: Table K V): int {
    t->l
}


function {:inline} ContainsTable<K,V>(t: Table K V, k: K): bool {
    t->e[k]
}

function {:inline} UpdateTable<K,V>(t: Table K V, k: K, v: V): Table K V {
    Table(t->v[k := v], t->e, t->l)
}

function {:inline} AddTable<K,V>(t: Table K V, k: K, v: V): Table K V {
    // This function has an undetermined result if the key is already in the table
    // (all specification functions have this "partial definiteness" behavior). Thus we can
    // just increment the length.
    Table(t->v[k := v], t->e[k := true], t->l + 1)
}

function {:inline} RemoveTable<K,V>(t: Table K V, k: K): Table K V {
    // Similar as above, we only need to consider the case where the key is in the table.
    Table(t->v, t->e[k := false], t->l - 1)
}

axiom {:ctor "Table"} (forall<K,V> t: Table K V :: {LenTable(t)}
    (exists k: K :: {ContainsTable(t, k)} ContainsTable(t, k)) ==> LenTable(t) >= 1
);
// TODO: we might want to encoder a stronger property that the length of table
// must be more than N given a set of N items. Currently we don't see a need here
// and the above axiom seems to be sufficient.
// Copyright Â© Aptos Foundation
// SPDX-License-Identifier: Apache-2.0

// ==================================================================================
// Native object::exists_at


datatype $1_cmp_Ordering {
    $1_cmp_Ordering_Less(),
    $1_cmp_Ordering_Equal(),
    $1_cmp_Ordering_Greater()
}
function $IsValid'$1_cmp_Ordering_Less'(s: $1_cmp_Ordering): bool {
    true
}
function $IsValid'$1_cmp_Ordering_Equal'(s: $1_cmp_Ordering): bool {
    true
}
function $IsValid'$1_cmp_Ordering_Greater'(s: $1_cmp_Ordering): bool {
    true
}
function $IsValid'$1_cmp_Ordering'(s: $1_cmp_Ordering): bool {
    true
}
function {:inline} $IsEqual'$1_cmp_Ordering'(s1: $1_cmp_Ordering, s2: $1_cmp_Ordering): bool {
    s1 == s2
}

function $Arbitrary_value_of'$1_cmp_Ordering'(): $1_cmp_Ordering;

function {:inline} $1_cmp_$compare'bool'(s1: bool, s2: bool): $1_cmp_Ordering {
    if s1 == s2 then $1_cmp_Ordering_Equal()
    else if s1 == true then $1_cmp_Ordering_Greater()
    else
        $1_cmp_Ordering_Less()
}

procedure {:inline 1} $1_cmp_compare'bool'(s1: bool, s2: bool) returns ($ret0: $1_cmp_Ordering)  {
    $ret0 := $1_cmp_$compare'bool'(s1, s2);
    return;
}

function {:inline} $1_cmp_$compare'signer'(s1: $signer, s2: $signer): $1_cmp_Ordering {
    if s1 == s2 then $1_cmp_Ordering_Equal()
    else if s1 is $signer && s2 is $permissioned_signer then $1_cmp_Ordering_Less()
    else if s1 is $permissioned_signer && s2 is $signer then $1_cmp_Ordering_Greater()
    else if s1 is $signer then
        $compare_int(s1 -> $addr, s2 -> $addr)
    else if s1 -> $addr == s2 -> $addr then
        $compare_int(s1 -> $permission_addr, s2 -> $permission_addr)
    else
        $compare_int(s1 -> $addr, s2 -> $addr)
}

procedure {:inline 1} $1_cmp_compare'signer'(s1: $signer, s2: $signer) returns ($ret0: $1_cmp_Ordering)  {
    $ret0 := $1_cmp_$compare'signer'(s1, s2);
    return;
}

function $compare_int(s1: int, s2: int): $1_cmp_Ordering {
    if s1 == s2 then $1_cmp_Ordering_Equal()
    else if s1 > s2 then $1_cmp_Ordering_Greater()
    else $1_cmp_Ordering_Less()
}

function {:inline} $1_cmp_$compare'num'(s1: int, s2: int): $1_cmp_Ordering {
    $compare_int(s1, s2)
}

procedure {:inline 1} $1_cmp_compare'num'(s1: int, s2: int) returns ($ret0: $1_cmp_Ordering)  {
    $ret0 := $compare_int(s1, s2);
    return;
}

function {:inline} $1_cmp_$compare'int'(s1: int, s2: int): $1_cmp_Ordering {
    $compare_int(s1, s2)
}

procedure {:inline 1} $1_cmp_compare'int'(s1: int, s2: int) returns ($ret0: $1_cmp_Ordering)  {
    $ret0 := $compare_int(s1, s2);
    return;
}

function {:inline} $1_cmp_$compare'bv8'(s1: bv8, s2: bv8): $1_cmp_Ordering {
    if s1 == s2 then $1_cmp_Ordering_Equal()
    else if $Gt'Bv8'(s1,s2) then $1_cmp_Ordering_Greater()
    else $1_cmp_Ordering_Less()
}

procedure {:inline 1} $1_cmp_compare'bv8'(s1: bv8, s2: bv8) returns ($ret0: $1_cmp_Ordering)  {
    $ret0 := $1_cmp_$compare'bv8'(s1, s2);
    return;
}

function {:inline} $1_cmp_$compare'bv16'(s1: bv16, s2: bv16): $1_cmp_Ordering {
    if s1 == s2 then $1_cmp_Ordering_Equal()
    else if $Gt'Bv16'(s1,s2) then $1_cmp_Ordering_Greater()
    else $1_cmp_Ordering_Less()
}

procedure {:inline 1} $1_cmp_compare'bv16'(s1: bv16, s2: bv16) returns ($ret0: $1_cmp_Ordering)  {
    $ret0 := $1_cmp_$compare'bv16'(s1, s2);
    return;
}

function {:inline} $1_cmp_$compare'bv32'(s1: bv32, s2: bv32): $1_cmp_Ordering {
    if s1 == s2 then $1_cmp_Ordering_Equal()
    else if $Gt'Bv32'(s1,s2) then $1_cmp_Ordering_Greater()
    else $1_cmp_Ordering_Less()
}

procedure {:inline 1} $1_cmp_compare'bv32'(s1: bv32, s2: bv32) returns ($ret0: $1_cmp_Ordering)  {
    $ret0 := $1_cmp_$compare'bv32'(s1, s2);
    return;
}

function {:inline} $1_cmp_$compare'bv64'(s1: bv64, s2: bv64): $1_cmp_Ordering {
    if s1 == s2 then $1_cmp_Ordering_Equal()
    else if $Gt'Bv64'(s1,s2) then $1_cmp_Ordering_Greater()
    else $1_cmp_Ordering_Less()
}

procedure {:inline 1} $1_cmp_compare'bv64'(s1: bv64, s2: bv64) returns ($ret0: $1_cmp_Ordering)  {
    $ret0 := $1_cmp_$compare'bv64'(s1, s2);
    return;
}

function {:inline} $1_cmp_$compare'bv128'(s1: bv128, s2: bv128): $1_cmp_Ordering {
    if s1 == s2 then $1_cmp_Ordering_Equal()
    else if $Gt'Bv128'(s1,s2) then $1_cmp_Ordering_Greater()
    else $1_cmp_Ordering_Less()
}

procedure {:inline 1} $1_cmp_compare'bv128'(s1: bv128, s2: bv128) returns ($ret0: $1_cmp_Ordering)  {
    $ret0 := $1_cmp_$compare'bv128'(s1, s2);
    return;
}

function {:inline} $1_cmp_$compare'bv256'(s1: bv256, s2: bv256): $1_cmp_Ordering {
    if s1 == s2 then $1_cmp_Ordering_Equal()
    else if $Gt'Bv256'(s1,s2) then $1_cmp_Ordering_Greater()
    else $1_cmp_Ordering_Less()
}

procedure {:inline 1} $1_cmp_compare'bv256'(s1: bv256, s2: bv256) returns ($ret0: $1_cmp_Ordering)  {
    $ret0 := $1_cmp_$compare'bv256'(s1, s2);
    return;
}function {:inline} $1_cmp_$compare'address'(s1: int, s2: int): $1_cmp_Ordering {
    $compare_int(s1, s2)
}


procedure {:inline 1} $1_cmp_compare'address'(s1: int, s2: int) returns ($ret0: $1_cmp_Ordering)  {
    $ret0 := $compare_int(s1, s2);
    return;
}function {:inline} $1_cmp_$compare'u128'(s1: int, s2: int): $1_cmp_Ordering {
    $compare_int(s1, s2)
}


procedure {:inline 1} $1_cmp_compare'u128'(s1: int, s2: int) returns ($ret0: $1_cmp_Ordering)  {
    $ret0 := $compare_int(s1, s2);
    return;
}function {:inline} $1_cmp_$compare'u256'(s1: int, s2: int): $1_cmp_Ordering {
    $compare_int(s1, s2)
}


procedure {:inline 1} $1_cmp_compare'u256'(s1: int, s2: int) returns ($ret0: $1_cmp_Ordering)  {
    $ret0 := $compare_int(s1, s2);
    return;
}function {:inline} $1_cmp_$compare'u32'(s1: int, s2: int): $1_cmp_Ordering {
    $compare_int(s1, s2)
}


procedure {:inline 1} $1_cmp_compare'u32'(s1: int, s2: int) returns ($ret0: $1_cmp_Ordering)  {
    $ret0 := $compare_int(s1, s2);
    return;
}function {:inline} $1_cmp_$compare'u64'(s1: int, s2: int): $1_cmp_Ordering {
    $compare_int(s1, s2)
}


procedure {:inline 1} $1_cmp_compare'u64'(s1: int, s2: int) returns ($ret0: $1_cmp_Ordering)  {
    $ret0 := $compare_int(s1, s2);
    return;
}function {:inline} $1_cmp_$compare'u8'(s1: int, s2: int): $1_cmp_Ordering {
    $compare_int(s1, s2)
}


procedure {:inline 1} $1_cmp_compare'u8'(s1: int, s2: int) returns ($ret0: $1_cmp_Ordering)  {
    $ret0 := $compare_int(s1, s2);
    return;
}






// ==================================================================================
// Intrinsic implementation of aggregator and aggregator factory

datatype $1_aggregator_Aggregator {
    $1_aggregator_Aggregator($handle: int, $key: int, $limit: int, $val: int)
}
function {:inline} $Update'$1_aggregator_Aggregator'_handle(s: $1_aggregator_Aggregator, x: int): $1_aggregator_Aggregator {
    $1_aggregator_Aggregator(x, s->$key, s->$limit, s->$val)
}
function {:inline} $Update'$1_aggregator_Aggregator'_key(s: $1_aggregator_Aggregator, x: int): $1_aggregator_Aggregator {
    $1_aggregator_Aggregator(s->$handle, x, s->$limit, s->$val)
}
function {:inline} $Update'$1_aggregator_Aggregator'_limit(s: $1_aggregator_Aggregator, x: int): $1_aggregator_Aggregator {
    $1_aggregator_Aggregator(s->$handle, s->$key, x, s->$val)
}
function {:inline} $Update'$1_aggregator_Aggregator'_val(s: $1_aggregator_Aggregator, x: int): $1_aggregator_Aggregator {
    $1_aggregator_Aggregator(s->$handle, s->$key, s->$limit, x)
}
function $IsValid'$1_aggregator_Aggregator'(s: $1_aggregator_Aggregator): bool {
    $IsValid'address'(s->$handle)
      && $IsValid'address'(s->$key)
      && $IsValid'u128'(s->$limit)
      && $IsValid'u128'(s->$val)
}
function {:inline} $IsEqual'$1_aggregator_Aggregator'(s1: $1_aggregator_Aggregator, s2: $1_aggregator_Aggregator): bool {
    s1 == s2
}
function {:inline} $1_aggregator_spec_get_limit(s: $1_aggregator_Aggregator): int {
    s->$limit
}
function {:inline} $1_aggregator_limit(s: $1_aggregator_Aggregator): int {
    s->$limit
}
procedure {:inline 1} $1_aggregator_limit(s: $1_aggregator_Aggregator) returns (res: int) {
    res := s->$limit;
    return;
}
function {:inline} $1_aggregator_spec_get_handle(s: $1_aggregator_Aggregator): int {
    s->$handle
}
function {:inline} $1_aggregator_spec_get_key(s: $1_aggregator_Aggregator): int {
    s->$key
}
function {:inline} $1_aggregator_spec_get_val(s: $1_aggregator_Aggregator): int {
    s->$val
}

function $1_aggregator_spec_read(agg: $1_aggregator_Aggregator): int {
    $1_aggregator_spec_get_val(agg)
}

function $1_aggregator_spec_aggregator_set_val(agg: $1_aggregator_Aggregator, val: int): $1_aggregator_Aggregator {
    $Update'$1_aggregator_Aggregator'_val(agg, val)
}

function $1_aggregator_spec_aggregator_get_val(agg: $1_aggregator_Aggregator): int {
    $1_aggregator_spec_get_val(agg)
}

function $1_aggregator_factory_spec_new_aggregator(limit: int) : $1_aggregator_Aggregator;

axiom (forall limit: int :: {$1_aggregator_factory_spec_new_aggregator(limit)}
    (var agg := $1_aggregator_factory_spec_new_aggregator(limit);
     $1_aggregator_spec_get_limit(agg) == limit));

axiom (forall limit: int :: {$1_aggregator_factory_spec_new_aggregator(limit)}
     (var agg := $1_aggregator_factory_spec_new_aggregator(limit);
     $1_aggregator_spec_aggregator_get_val(agg) == 0));


function {:inline} $1_cmp_$compare'$1_aggregator_Aggregator'(s1: $1_aggregator_Aggregator, s2: $1_aggregator_Aggregator): $1_cmp_Ordering {
    $Arbitrary_value_of'$1_cmp_Ordering'()
}

procedure {:inline 1} $1_cmp_compare'$1_aggregator_Aggregator'(s1: $1_aggregator_Aggregator, s2: $1_aggregator_Aggregator) returns ($ret0: $1_cmp_Ordering)  {
    $ret0 := $1_cmp_$compare'$1_aggregator_Aggregator'(s1, s2);
    return;
}


// ==================================================================================
// Native for function_info

procedure $1_function_info_is_identifier(s: Vec int) returns (res: bool);



// Uninterpreted function for all types


function $Arbitrary_value_of'#0'(): #0;



function $Arbitrary_value_of'$1_any_Any'(): $1_any_Any;



function $Arbitrary_value_of'$1_block_BlockResource'(): $1_block_BlockResource;



function $Arbitrary_value_of'$1_block_CommitHistory'(): $1_block_CommitHistory;



function $Arbitrary_value_of'$1_chain_status_GenesisEndMarker'(): $1_chain_status_GenesisEndMarker;



function $Arbitrary_value_of'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin''(): $1_coin_BurnCapability'$1_aptos_coin_AptosCoin';



function $Arbitrary_value_of'$1_coin_MintCapability'$1_aptos_coin_AptosCoin''(): $1_coin_MintCapability'$1_aptos_coin_AptosCoin';



function $Arbitrary_value_of'$1_comparator_Result'(): $1_comparator_Result;



function $Arbitrary_value_of'$1_config_buffer_PendingConfigs'(): $1_config_buffer_PendingConfigs;



function $Arbitrary_value_of'$1_consensus_config_ConsensusConfig'(): $1_consensus_config_ConsensusConfig;



function $Arbitrary_value_of'$1_copyable_any_Any'(): $1_copyable_any_Any;



function $Arbitrary_value_of'$1_dkg_DKGSessionMetadata'(): $1_dkg_DKGSessionMetadata;



function $Arbitrary_value_of'$1_dkg_DKGSessionState'(): $1_dkg_DKGSessionState;



function $Arbitrary_value_of'$1_dkg_DKGState'(): $1_dkg_DKGState;



function $Arbitrary_value_of'$1_event_EventHandle'$1_block_NewBlockEvent''(): $1_event_EventHandle'$1_block_NewBlockEvent';



function $Arbitrary_value_of'$1_event_EventHandle'$1_block_UpdateEpochIntervalEvent''(): $1_event_EventHandle'$1_block_UpdateEpochIntervalEvent';



function $Arbitrary_value_of'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(): $1_event_EventHandle'$1_reconfiguration_NewEpochEvent';



function $Arbitrary_value_of'$1_fixed_point64_FixedPoint64'(): $1_fixed_point64_FixedPoint64;



function $Arbitrary_value_of'$1_fungible_asset_BurnRef'(): $1_fungible_asset_BurnRef;



function $Arbitrary_value_of'$1_guid_GUID'(): $1_guid_GUID;



function $Arbitrary_value_of'$1_guid_ID'(): $1_guid_ID;



function $Arbitrary_value_of'$1_jwks_AllProvidersJWKs'(): $1_jwks_AllProvidersJWKs;



function $Arbitrary_value_of'$1_jwks_FederatedJWKs'(): $1_jwks_FederatedJWKs;



function $Arbitrary_value_of'$1_jwks_JWK'(): $1_jwks_JWK;



function $Arbitrary_value_of'$1_jwks_OIDCProvider'(): $1_jwks_OIDCProvider;



function $Arbitrary_value_of'$1_jwks_ObservedJWKs'(): $1_jwks_ObservedJWKs;



function $Arbitrary_value_of'$1_jwks_ObservedJWKsUpdated'(): $1_jwks_ObservedJWKsUpdated;



function $Arbitrary_value_of'$1_jwks_Patch'(): $1_jwks_Patch;



function $Arbitrary_value_of'$1_jwks_PatchRemoveAll'(): $1_jwks_PatchRemoveAll;



function $Arbitrary_value_of'$1_jwks_PatchRemoveIssuer'(): $1_jwks_PatchRemoveIssuer;



function $Arbitrary_value_of'$1_jwks_PatchRemoveJWK'(): $1_jwks_PatchRemoveJWK;



function $Arbitrary_value_of'$1_jwks_PatchUpsertJWK'(): $1_jwks_PatchUpsertJWK;



function $Arbitrary_value_of'$1_jwks_PatchedJWKs'(): $1_jwks_PatchedJWKs;



function $Arbitrary_value_of'$1_jwks_Patches'(): $1_jwks_Patches;



function $Arbitrary_value_of'$1_jwks_ProviderJWKs'(): $1_jwks_ProviderJWKs;



function $Arbitrary_value_of'$1_jwks_RSA_JWK'(): $1_jwks_RSA_JWK;



function $Arbitrary_value_of'$1_jwks_SupportedOIDCProviders'(): $1_jwks_SupportedOIDCProviders;



function $Arbitrary_value_of'$1_jwks_UnsupportedJWK'(): $1_jwks_UnsupportedJWK;



function $Arbitrary_value_of'$1_object_Object'$1_fungible_asset_Metadata''(): $1_object_Object'$1_fungible_asset_Metadata';



function $Arbitrary_value_of'$1_option_Option'$1_any_Any''(): $1_option_Option'$1_any_Any';



function $Arbitrary_value_of'$1_option_Option'$1_dkg_DKGSessionState''(): $1_option_Option'$1_dkg_DKGSessionState';



function $Arbitrary_value_of'$1_option_Option'$1_jwks_JWK''(): $1_option_Option'$1_jwks_JWK';



function $Arbitrary_value_of'$1_option_Option'$1_jwks_ProviderJWKs''(): $1_option_Option'$1_jwks_ProviderJWKs';



function $Arbitrary_value_of'$1_option_Option'$1_string_String''(): $1_option_Option'$1_string_String';



function $Arbitrary_value_of'$1_option_Option'vec'u8'''(): $1_option_Option'vec'u8'';



function $Arbitrary_value_of'$1_permissioned_signer_GrantedPermissionHandles'(): $1_permissioned_signer_GrantedPermissionHandles;



function $Arbitrary_value_of'$1_randomness_PerBlockRandomness'(): $1_randomness_PerBlockRandomness;



function $Arbitrary_value_of'$1_randomness_config_RandomnessConfig'(): $1_randomness_config_RandomnessConfig;



function $Arbitrary_value_of'$1_reconfiguration_Configuration'(): $1_reconfiguration_Configuration;



function $Arbitrary_value_of'$1_reconfiguration_state_State'(): $1_reconfiguration_state_State;



function $Arbitrary_value_of'$1_reconfiguration_state_StateActive'(): $1_reconfiguration_state_StateActive;



function $Arbitrary_value_of'$1_reconfiguration_state_StateInactive'(): $1_reconfiguration_state_StateInactive;



function $Arbitrary_value_of'$1_stake_AptosCoinCapabilities'(): $1_stake_AptosCoinCapabilities;



function $Arbitrary_value_of'$1_stake_ValidatorConfig'(): $1_stake_ValidatorConfig;



function $Arbitrary_value_of'$1_stake_ValidatorPerformance'(): $1_stake_ValidatorPerformance;



function $Arbitrary_value_of'$1_stake_ValidatorSet'(): $1_stake_ValidatorSet;



function $Arbitrary_value_of'$1_staking_config_StakingConfig'(): $1_staking_config_StakingConfig;



function $Arbitrary_value_of'$1_staking_config_StakingRewardsConfig'(): $1_staking_config_StakingRewardsConfig;



function $Arbitrary_value_of'$1_state_storage_GasParameter'(): $1_state_storage_GasParameter;



function $Arbitrary_value_of'$1_state_storage_StateStorageUsage'(): $1_state_storage_StateStorageUsage;



function $Arbitrary_value_of'$1_state_storage_Usage'(): $1_state_storage_Usage;



function $Arbitrary_value_of'$1_storage_gas_GasCurve'(): $1_storage_gas_GasCurve;



function $Arbitrary_value_of'$1_storage_gas_Point'(): $1_storage_gas_Point;



function $Arbitrary_value_of'$1_storage_gas_StorageGas'(): $1_storage_gas_StorageGas;



function $Arbitrary_value_of'$1_storage_gas_StorageGasConfig'(): $1_storage_gas_StorageGasConfig;



function $Arbitrary_value_of'$1_storage_gas_UsageGasConfig'(): $1_storage_gas_UsageGasConfig;



function $Arbitrary_value_of'$1_string_String'(): $1_string_String;



function $Arbitrary_value_of'$1_timestamp_CurrentTimeMicroseconds'(): $1_timestamp_CurrentTimeMicroseconds;



function $Arbitrary_value_of'$1_transaction_fee_AptosCoinCapabilities'(): $1_transaction_fee_AptosCoinCapabilities;



function $Arbitrary_value_of'$1_transaction_fee_AptosFABurnCapabilities'(): $1_transaction_fee_AptosFABurnCapabilities;



function $Arbitrary_value_of'signer'(): $signer;



function $Arbitrary_value_of'$1_simple_map_SimpleMap'$1_string_String_$1_any_Any''(): Table int ($1_any_Any);



function $Arbitrary_value_of'$1_table_with_length_TableWithLength'u32_$1_block_NewBlockEvent''(): Table int ($1_block_NewBlockEvent);



function $Arbitrary_value_of'vec'#0''(): Vec (#0);



function $Arbitrary_value_of'vec'$1_any_Any''(): Vec ($1_any_Any);



function $Arbitrary_value_of'vec'$1_dkg_DKGSessionState''(): Vec ($1_dkg_DKGSessionState);



function $Arbitrary_value_of'vec'$1_jwks_JWK''(): Vec ($1_jwks_JWK);



function $Arbitrary_value_of'vec'$1_jwks_OIDCProvider''(): Vec ($1_jwks_OIDCProvider);



function $Arbitrary_value_of'vec'$1_jwks_Patch''(): Vec ($1_jwks_Patch);



function $Arbitrary_value_of'vec'$1_jwks_ProviderJWKs''(): Vec ($1_jwks_ProviderJWKs);



function $Arbitrary_value_of'vec'$1_jwks_SupportedOIDCProviders''(): Vec ($1_jwks_SupportedOIDCProviders);



function $Arbitrary_value_of'vec'$1_stake_IndividualValidatorPerformance''(): Vec ($1_stake_IndividualValidatorPerformance);



function $Arbitrary_value_of'vec'$1_stake_ValidatorInfo''(): Vec ($1_stake_ValidatorInfo);



function $Arbitrary_value_of'vec'$1_storage_gas_Point''(): Vec ($1_storage_gas_Point);



function $Arbitrary_value_of'vec'$1_string_String''(): Vec ($1_string_String);



function $Arbitrary_value_of'vec'$1_validator_consensus_info_ValidatorConsensusInfo''(): Vec ($1_validator_consensus_info_ValidatorConsensusInfo);



function $Arbitrary_value_of'vec'vec'u8'''(): Vec (Vec (int));



function $Arbitrary_value_of'vec'address''(): Vec (int);



function $Arbitrary_value_of'vec'u64''(): Vec (int);



function $Arbitrary_value_of'vec'u8''(): Vec (int);



function $Arbitrary_value_of'bool'(): bool;



function $Arbitrary_value_of'address'(): int;



function $Arbitrary_value_of'u128'(): int;



function $Arbitrary_value_of'u256'(): int;



function $Arbitrary_value_of'u32'(): int;



function $Arbitrary_value_of'u64'(): int;



function $Arbitrary_value_of'u8'(): int;



function $Arbitrary_value_of'vec'vec'bv8'''(): Vec (Vec (bv8));



function $Arbitrary_value_of'vec'bv64''(): Vec (bv64);



function $Arbitrary_value_of'vec'bv8''(): Vec (bv8);



function $Arbitrary_value_of'bv128'(): bv128;



function $Arbitrary_value_of'bv256'(): bv256;



function $Arbitrary_value_of'bv32'(): bv32;



function $Arbitrary_value_of'bv64'(): bv64;



function $Arbitrary_value_of'bv8'(): bv8;




// ============================================================================================
// Primitive Types

const $MAX_U8: int;
axiom $MAX_U8 == 255;
const $MAX_U16: int;
axiom $MAX_U16 == 65535;
const $MAX_U32: int;
axiom $MAX_U32 == 4294967295;
const $MAX_U64: int;
axiom $MAX_U64 == 18446744073709551615;
const $MAX_U128: int;
axiom $MAX_U128 == 340282366920938463463374607431768211455;
const $MAX_U256: int;
axiom $MAX_U256 == 115792089237316195423570985008687907853269984665640564039457584007913129639935;

// Templates for bitvector operations

function {:bvbuiltin "bvand"} $And'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvor"} $Or'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvxor"} $Xor'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvadd"} $Add'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvsub"} $Sub'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvmul"} $Mul'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvudiv"} $Div'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvurem"} $Mod'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvshl"} $Shl'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvlshr"} $Shr'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvult"} $Lt'Bv8'(bv8,bv8) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv8'(bv8,bv8) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv8'(bv8,bv8) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv8'(bv8,bv8) returns(bool);

procedure {:inline 1} $AddBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Lt'Bv8'($Add'Bv8'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv8'(src1, src2);
}

procedure {:inline 1} $AddBv8_unchecked(src1: bv8, src2: bv8) returns (dst: bv8)
{
    dst := $Add'Bv8'(src1, src2);
}

procedure {:inline 1} $SubBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Lt'Bv8'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv8'(src1, src2);
}

procedure {:inline 1} $MulBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Lt'Bv8'($Mul'Bv8'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv8'(src1, src2);
}

procedure {:inline 1} $DivBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if (src2 == 0bv8) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv8'(src1, src2);
}

procedure {:inline 1} $ModBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if (src2 == 0bv8) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv8'(src1, src2);
}

procedure {:inline 1} $AndBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    dst := $And'Bv8'(src1,src2);
}

procedure {:inline 1} $OrBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    dst := $Or'Bv8'(src1,src2);
}

procedure {:inline 1} $XorBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    dst := $Xor'Bv8'(src1,src2);
}

procedure {:inline 1} $LtBv8(src1: bv8, src2: bv8) returns (dst: bool)
{
    dst := $Lt'Bv8'(src1,src2);
}

procedure {:inline 1} $LeBv8(src1: bv8, src2: bv8) returns (dst: bool)
{
    dst := $Le'Bv8'(src1,src2);
}

procedure {:inline 1} $GtBv8(src1: bv8, src2: bv8) returns (dst: bool)
{
    dst := $Gt'Bv8'(src1,src2);
}

procedure {:inline 1} $GeBv8(src1: bv8, src2: bv8) returns (dst: bool)
{
    dst := $Ge'Bv8'(src1,src2);
}

function $IsValid'bv8'(v: bv8): bool {
  $Ge'Bv8'(v,0bv8) && $Le'Bv8'(v,255bv8)
}

function {:inline} $IsEqual'bv8'(x: bv8, y: bv8): bool {
    x == y
}

procedure {:inline 1} $int2bv8(src: int) returns (dst: bv8)
{
    if (src > 255) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.8(src);
}

procedure {:inline 1} $bv2int8(src: bv8) returns (dst: int)
{
    dst := $bv2int.8(src);
}

function {:builtin "(_ int2bv 8)"} $int2bv.8(i: int) returns (bv8);
function {:builtin "bv2nat"} $bv2int.8(i: bv8) returns (int);

function {:bvbuiltin "bvand"} $And'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvor"} $Or'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvxor"} $Xor'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvadd"} $Add'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvsub"} $Sub'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvmul"} $Mul'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvudiv"} $Div'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvurem"} $Mod'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvshl"} $Shl'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvlshr"} $Shr'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvult"} $Lt'Bv16'(bv16,bv16) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv16'(bv16,bv16) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv16'(bv16,bv16) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv16'(bv16,bv16) returns(bool);

procedure {:inline 1} $AddBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Lt'Bv16'($Add'Bv16'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv16'(src1, src2);
}

procedure {:inline 1} $AddBv16_unchecked(src1: bv16, src2: bv16) returns (dst: bv16)
{
    dst := $Add'Bv16'(src1, src2);
}

procedure {:inline 1} $SubBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Lt'Bv16'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv16'(src1, src2);
}

procedure {:inline 1} $MulBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Lt'Bv16'($Mul'Bv16'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv16'(src1, src2);
}

procedure {:inline 1} $DivBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if (src2 == 0bv16) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv16'(src1, src2);
}

procedure {:inline 1} $ModBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if (src2 == 0bv16) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv16'(src1, src2);
}

procedure {:inline 1} $AndBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    dst := $And'Bv16'(src1,src2);
}

procedure {:inline 1} $OrBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    dst := $Or'Bv16'(src1,src2);
}

procedure {:inline 1} $XorBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    dst := $Xor'Bv16'(src1,src2);
}

procedure {:inline 1} $LtBv16(src1: bv16, src2: bv16) returns (dst: bool)
{
    dst := $Lt'Bv16'(src1,src2);
}

procedure {:inline 1} $LeBv16(src1: bv16, src2: bv16) returns (dst: bool)
{
    dst := $Le'Bv16'(src1,src2);
}

procedure {:inline 1} $GtBv16(src1: bv16, src2: bv16) returns (dst: bool)
{
    dst := $Gt'Bv16'(src1,src2);
}

procedure {:inline 1} $GeBv16(src1: bv16, src2: bv16) returns (dst: bool)
{
    dst := $Ge'Bv16'(src1,src2);
}

function $IsValid'bv16'(v: bv16): bool {
  $Ge'Bv16'(v,0bv16) && $Le'Bv16'(v,65535bv16)
}

function {:inline} $IsEqual'bv16'(x: bv16, y: bv16): bool {
    x == y
}

procedure {:inline 1} $int2bv16(src: int) returns (dst: bv16)
{
    if (src > 65535) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.16(src);
}

procedure {:inline 1} $bv2int16(src: bv16) returns (dst: int)
{
    dst := $bv2int.16(src);
}

function {:builtin "(_ int2bv 16)"} $int2bv.16(i: int) returns (bv16);
function {:builtin "bv2nat"} $bv2int.16(i: bv16) returns (int);

function {:bvbuiltin "bvand"} $And'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvor"} $Or'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvxor"} $Xor'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvadd"} $Add'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvsub"} $Sub'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvmul"} $Mul'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvudiv"} $Div'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvurem"} $Mod'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvshl"} $Shl'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvlshr"} $Shr'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvult"} $Lt'Bv32'(bv32,bv32) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv32'(bv32,bv32) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv32'(bv32,bv32) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv32'(bv32,bv32) returns(bool);

procedure {:inline 1} $AddBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Lt'Bv32'($Add'Bv32'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv32'(src1, src2);
}

procedure {:inline 1} $AddBv32_unchecked(src1: bv32, src2: bv32) returns (dst: bv32)
{
    dst := $Add'Bv32'(src1, src2);
}

procedure {:inline 1} $SubBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Lt'Bv32'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv32'(src1, src2);
}

procedure {:inline 1} $MulBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Lt'Bv32'($Mul'Bv32'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv32'(src1, src2);
}

procedure {:inline 1} $DivBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if (src2 == 0bv32) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv32'(src1, src2);
}

procedure {:inline 1} $ModBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if (src2 == 0bv32) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv32'(src1, src2);
}

procedure {:inline 1} $AndBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    dst := $And'Bv32'(src1,src2);
}

procedure {:inline 1} $OrBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    dst := $Or'Bv32'(src1,src2);
}

procedure {:inline 1} $XorBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    dst := $Xor'Bv32'(src1,src2);
}

procedure {:inline 1} $LtBv32(src1: bv32, src2: bv32) returns (dst: bool)
{
    dst := $Lt'Bv32'(src1,src2);
}

procedure {:inline 1} $LeBv32(src1: bv32, src2: bv32) returns (dst: bool)
{
    dst := $Le'Bv32'(src1,src2);
}

procedure {:inline 1} $GtBv32(src1: bv32, src2: bv32) returns (dst: bool)
{
    dst := $Gt'Bv32'(src1,src2);
}

procedure {:inline 1} $GeBv32(src1: bv32, src2: bv32) returns (dst: bool)
{
    dst := $Ge'Bv32'(src1,src2);
}

function $IsValid'bv32'(v: bv32): bool {
  $Ge'Bv32'(v,0bv32) && $Le'Bv32'(v,2147483647bv32)
}

function {:inline} $IsEqual'bv32'(x: bv32, y: bv32): bool {
    x == y
}

procedure {:inline 1} $int2bv32(src: int) returns (dst: bv32)
{
    if (src > 2147483647) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.32(src);
}

procedure {:inline 1} $bv2int32(src: bv32) returns (dst: int)
{
    dst := $bv2int.32(src);
}

function {:builtin "(_ int2bv 32)"} $int2bv.32(i: int) returns (bv32);
function {:builtin "bv2nat"} $bv2int.32(i: bv32) returns (int);

function {:bvbuiltin "bvand"} $And'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvor"} $Or'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvxor"} $Xor'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvadd"} $Add'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvsub"} $Sub'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvmul"} $Mul'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvudiv"} $Div'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvurem"} $Mod'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvshl"} $Shl'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvlshr"} $Shr'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvult"} $Lt'Bv64'(bv64,bv64) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv64'(bv64,bv64) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv64'(bv64,bv64) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv64'(bv64,bv64) returns(bool);

procedure {:inline 1} $AddBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Lt'Bv64'($Add'Bv64'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv64'(src1, src2);
}

procedure {:inline 1} $AddBv64_unchecked(src1: bv64, src2: bv64) returns (dst: bv64)
{
    dst := $Add'Bv64'(src1, src2);
}

procedure {:inline 1} $SubBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Lt'Bv64'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv64'(src1, src2);
}

procedure {:inline 1} $MulBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Lt'Bv64'($Mul'Bv64'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv64'(src1, src2);
}

procedure {:inline 1} $DivBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if (src2 == 0bv64) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv64'(src1, src2);
}

procedure {:inline 1} $ModBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if (src2 == 0bv64) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv64'(src1, src2);
}

procedure {:inline 1} $AndBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    dst := $And'Bv64'(src1,src2);
}

procedure {:inline 1} $OrBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    dst := $Or'Bv64'(src1,src2);
}

procedure {:inline 1} $XorBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    dst := $Xor'Bv64'(src1,src2);
}

procedure {:inline 1} $LtBv64(src1: bv64, src2: bv64) returns (dst: bool)
{
    dst := $Lt'Bv64'(src1,src2);
}

procedure {:inline 1} $LeBv64(src1: bv64, src2: bv64) returns (dst: bool)
{
    dst := $Le'Bv64'(src1,src2);
}

procedure {:inline 1} $GtBv64(src1: bv64, src2: bv64) returns (dst: bool)
{
    dst := $Gt'Bv64'(src1,src2);
}

procedure {:inline 1} $GeBv64(src1: bv64, src2: bv64) returns (dst: bool)
{
    dst := $Ge'Bv64'(src1,src2);
}

function $IsValid'bv64'(v: bv64): bool {
  $Ge'Bv64'(v,0bv64) && $Le'Bv64'(v,18446744073709551615bv64)
}

function {:inline} $IsEqual'bv64'(x: bv64, y: bv64): bool {
    x == y
}

procedure {:inline 1} $int2bv64(src: int) returns (dst: bv64)
{
    if (src > 18446744073709551615) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.64(src);
}

procedure {:inline 1} $bv2int64(src: bv64) returns (dst: int)
{
    dst := $bv2int.64(src);
}

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: int) returns (bv64);
function {:builtin "bv2nat"} $bv2int.64(i: bv64) returns (int);

function {:bvbuiltin "bvand"} $And'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvor"} $Or'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvxor"} $Xor'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvadd"} $Add'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvsub"} $Sub'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvmul"} $Mul'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvudiv"} $Div'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvurem"} $Mod'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvshl"} $Shl'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvlshr"} $Shr'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvult"} $Lt'Bv128'(bv128,bv128) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv128'(bv128,bv128) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv128'(bv128,bv128) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv128'(bv128,bv128) returns(bool);

procedure {:inline 1} $AddBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Lt'Bv128'($Add'Bv128'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv128'(src1, src2);
}

procedure {:inline 1} $AddBv128_unchecked(src1: bv128, src2: bv128) returns (dst: bv128)
{
    dst := $Add'Bv128'(src1, src2);
}

procedure {:inline 1} $SubBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Lt'Bv128'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv128'(src1, src2);
}

procedure {:inline 1} $MulBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Lt'Bv128'($Mul'Bv128'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv128'(src1, src2);
}

procedure {:inline 1} $DivBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if (src2 == 0bv128) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv128'(src1, src2);
}

procedure {:inline 1} $ModBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if (src2 == 0bv128) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv128'(src1, src2);
}

procedure {:inline 1} $AndBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    dst := $And'Bv128'(src1,src2);
}

procedure {:inline 1} $OrBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    dst := $Or'Bv128'(src1,src2);
}

procedure {:inline 1} $XorBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    dst := $Xor'Bv128'(src1,src2);
}

procedure {:inline 1} $LtBv128(src1: bv128, src2: bv128) returns (dst: bool)
{
    dst := $Lt'Bv128'(src1,src2);
}

procedure {:inline 1} $LeBv128(src1: bv128, src2: bv128) returns (dst: bool)
{
    dst := $Le'Bv128'(src1,src2);
}

procedure {:inline 1} $GtBv128(src1: bv128, src2: bv128) returns (dst: bool)
{
    dst := $Gt'Bv128'(src1,src2);
}

procedure {:inline 1} $GeBv128(src1: bv128, src2: bv128) returns (dst: bool)
{
    dst := $Ge'Bv128'(src1,src2);
}

function $IsValid'bv128'(v: bv128): bool {
  $Ge'Bv128'(v,0bv128) && $Le'Bv128'(v,340282366920938463463374607431768211455bv128)
}

function {:inline} $IsEqual'bv128'(x: bv128, y: bv128): bool {
    x == y
}

procedure {:inline 1} $int2bv128(src: int) returns (dst: bv128)
{
    if (src > 340282366920938463463374607431768211455) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.128(src);
}

procedure {:inline 1} $bv2int128(src: bv128) returns (dst: int)
{
    dst := $bv2int.128(src);
}

function {:builtin "(_ int2bv 128)"} $int2bv.128(i: int) returns (bv128);
function {:builtin "bv2nat"} $bv2int.128(i: bv128) returns (int);

function {:bvbuiltin "bvand"} $And'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvor"} $Or'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvxor"} $Xor'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvadd"} $Add'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvsub"} $Sub'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvmul"} $Mul'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvudiv"} $Div'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvurem"} $Mod'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvshl"} $Shl'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvlshr"} $Shr'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvult"} $Lt'Bv256'(bv256,bv256) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv256'(bv256,bv256) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv256'(bv256,bv256) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv256'(bv256,bv256) returns(bool);

procedure {:inline 1} $AddBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Lt'Bv256'($Add'Bv256'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv256'(src1, src2);
}

procedure {:inline 1} $AddBv256_unchecked(src1: bv256, src2: bv256) returns (dst: bv256)
{
    dst := $Add'Bv256'(src1, src2);
}

procedure {:inline 1} $SubBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Lt'Bv256'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv256'(src1, src2);
}

procedure {:inline 1} $MulBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Lt'Bv256'($Mul'Bv256'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv256'(src1, src2);
}

procedure {:inline 1} $DivBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if (src2 == 0bv256) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv256'(src1, src2);
}

procedure {:inline 1} $ModBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if (src2 == 0bv256) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv256'(src1, src2);
}

procedure {:inline 1} $AndBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    dst := $And'Bv256'(src1,src2);
}

procedure {:inline 1} $OrBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    dst := $Or'Bv256'(src1,src2);
}

procedure {:inline 1} $XorBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    dst := $Xor'Bv256'(src1,src2);
}

procedure {:inline 1} $LtBv256(src1: bv256, src2: bv256) returns (dst: bool)
{
    dst := $Lt'Bv256'(src1,src2);
}

procedure {:inline 1} $LeBv256(src1: bv256, src2: bv256) returns (dst: bool)
{
    dst := $Le'Bv256'(src1,src2);
}

procedure {:inline 1} $GtBv256(src1: bv256, src2: bv256) returns (dst: bool)
{
    dst := $Gt'Bv256'(src1,src2);
}

procedure {:inline 1} $GeBv256(src1: bv256, src2: bv256) returns (dst: bool)
{
    dst := $Ge'Bv256'(src1,src2);
}

function $IsValid'bv256'(v: bv256): bool {
  $Ge'Bv256'(v,0bv256) && $Le'Bv256'(v,115792089237316195423570985008687907853269984665640564039457584007913129639935bv256)
}

function {:inline} $IsEqual'bv256'(x: bv256, y: bv256): bool {
    x == y
}

procedure {:inline 1} $int2bv256(src: int) returns (dst: bv256)
{
    if (src > 115792089237316195423570985008687907853269984665640564039457584007913129639935) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.256(src);
}

procedure {:inline 1} $bv2int256(src: bv256) returns (dst: int)
{
    dst := $bv2int.256(src);
}

function {:builtin "(_ int2bv 256)"} $int2bv.256(i: int) returns (bv256);
function {:builtin "bv2nat"} $bv2int.256(i: bv256) returns (int);

datatype $Range {
    $Range(lb: int, ub: int)
}

function {:inline} $IsValid'bool'(v: bool): bool {
  true
}

function $IsValid'u8'(v: int): bool {
  v >= 0 && v <= $MAX_U8
}

function $IsValid'u16'(v: int): bool {
  v >= 0 && v <= $MAX_U16
}

function $IsValid'u32'(v: int): bool {
  v >= 0 && v <= $MAX_U32
}

function $IsValid'u64'(v: int): bool {
  v >= 0 && v <= $MAX_U64
}

function $IsValid'u128'(v: int): bool {
  v >= 0 && v <= $MAX_U128
}

function $IsValid'u256'(v: int): bool {
  v >= 0 && v <= $MAX_U256
}

function $IsValid'num'(v: int): bool {
  true
}

function $IsValid'address'(v: int): bool {
  // TODO: restrict max to representable addresses?
  v >= 0
}

function {:inline} $IsValidRange(r: $Range): bool {
   $IsValid'u64'(r->lb) &&  $IsValid'u64'(r->ub)
}

// Intentionally not inlined so it serves as a trigger in quantifiers.
function $InRange(r: $Range, i: int): bool {
   r->lb <= i && i < r->ub
}


function {:inline} $IsEqual'u8'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u16'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u32'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u64'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u128'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u256'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'num'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'address'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'bool'(x: bool, y: bool): bool {
    x == y
}

// ============================================================================================
// Memory

datatype $Location {
    // A global resource location within the statically known resource type's memory,
    // where `a` is an address.
    $Global(a: int),
    // A local location. `i` is the unique index of the local.
    $Local(i: int),
    // The location of a reference outside of the verification scope, for example, a `&mut` parameter
    // of the function being verified. References with these locations don't need to be written back
    // when mutation ends.
    $Param(i: int),
    // The location of an uninitialized mutation. Using this to make sure that the location
    // will not be equal to any valid mutation locations, i.e., $Local, $Global, or $Param.
    $Uninitialized()
}

// A mutable reference which also carries its current value. Since mutable references
// are single threaded in Move, we can keep them together and treat them as a value
// during mutation until the point they are stored back to their original location.
datatype $Mutation<T> {
    $Mutation(l: $Location, p: Vec int, v: T)
}

// Representation of memory for a given type.
datatype $Memory<T> {
    $Memory(domain: [int]bool, contents: [int]T)
}

function {:builtin "MapConst"} $ConstMemoryDomain(v: bool): [int]bool;
function {:builtin "MapConst"} $ConstMemoryContent<T>(v: T): [int]T;
axiom $ConstMemoryDomain(false) == (lambda i: int :: false);
axiom $ConstMemoryDomain(true) == (lambda i: int :: true);


// Dereferences a mutation.
function {:inline} $Dereference<T>(ref: $Mutation T): T {
    ref->v
}

// Update the value of a mutation.
function {:inline} $UpdateMutation<T>(m: $Mutation T, v: T): $Mutation T {
    $Mutation(m->l, m->p, v)
}

function {:inline} $ChildMutation<T1, T2>(m: $Mutation T1, offset: int, v: T2): $Mutation T2 {
    $Mutation(m->l, ExtendVec(m->p, offset), v)
}

// Return true if two mutations share the location and path
function {:inline} $IsSameMutation<T1, T2>(parent: $Mutation T1, child: $Mutation T2 ): bool {
    parent->l == child->l && parent->p == child->p
}

// Return true if the mutation is a parent of a child which was derived with the given edge offset. This
// is used to implement write-back choices.
function {:inline} $IsParentMutation<T1, T2>(parent: $Mutation T1, edge: int, child: $Mutation T2 ): bool {
    parent->l == child->l &&
    (var pp := parent->p;
    (var cp := child->p;
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
     cl == pl + 1 &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) ==  ReadVec(cp, i)) &&
     $EdgeMatches(ReadVec(cp, pl), edge)
    ))))
}

// Return true if the mutation is a parent of a child, for hyper edge.
function {:inline} $IsParentMutationHyper<T1, T2>(parent: $Mutation T1, hyper_edge: Vec int, child: $Mutation T2 ): bool {
    parent->l == child->l &&
    (var pp := parent->p;
    (var cp := child->p;
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
    (var el := LenVec(hyper_edge);
     cl == pl + el &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) == ReadVec(cp, i)) &&
     (forall i: int:: i >= 0 && i < el ==> $EdgeMatches(ReadVec(cp, pl + i), ReadVec(hyper_edge, i)))
    )))))
}

function {:inline} $EdgeMatches(edge: int, edge_pattern: int): bool {
    edge_pattern == -1 // wildcard
    || edge_pattern == edge
}



function {:inline} $SameLocation<T1, T2>(m1: $Mutation T1, m2: $Mutation T2): bool {
    m1->l == m2->l
}

function {:inline} $HasGlobalLocation<T>(m: $Mutation T): bool {
    (m->l) is $Global
}

function {:inline} $HasLocalLocation<T>(m: $Mutation T, idx: int): bool {
    m->l == $Local(idx)
}

function {:inline} $GlobalLocationAddress<T>(m: $Mutation T): int {
    (m->l)->a
}



// Tests whether resource exists.
function {:inline} $ResourceExists<T>(m: $Memory T, addr: int): bool {
    m->domain[addr]
}

// Obtains Value of given resource.
function {:inline} $ResourceValue<T>(m: $Memory T, addr: int): T {
    m->contents[addr]
}

// Update resource.
function {:inline} $ResourceUpdate<T>(m: $Memory T, a: int, v: T): $Memory T {
    $Memory(m->domain[a := true], m->contents[a := v])
}

// Remove resource.
function {:inline} $ResourceRemove<T>(m: $Memory T, a: int): $Memory T {
    $Memory(m->domain[a := false], m->contents)
}

// Copies resource from memory s to m.
function {:inline} $ResourceCopy<T>(m: $Memory T, s: $Memory T, a: int): $Memory T {
    $Memory(m->domain[a := s->domain[a]],
            m->contents[a := s->contents[a]])
}



// ============================================================================================
// Abort Handling

var $abort_flag: bool;
var $abort_code: int;

function {:inline} $process_abort_code(code: int): int {
    code
}

const $EXEC_FAILURE_CODE: int;
axiom $EXEC_FAILURE_CODE == -1;

// TODO(wrwg): currently we map aborts of native functions like those for vectors also to
//   execution failure. This may need to be aligned with what the runtime actually does.

procedure {:inline 1} $ExecFailureAbort() {
    $abort_flag := true;
    $abort_code := $EXEC_FAILURE_CODE;
}

procedure {:inline 1} $Abort(code: int) {
    $abort_flag := true;
    $abort_code := code;
}

function {:inline} $StdError(cat: int, reason: int): int {
    reason * 256 + cat
}

procedure {:inline 1} $InitVerification() {
    // Set abort_flag to false, and havoc abort_code
    $abort_flag := false;
    havoc $abort_code;
    // Initialize event store
    call $InitEventStore();
}

// ============================================================================================
// Instructions


procedure {:inline 1} $CastU8(src: int) returns (dst: int)
{
    if (src > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU16(src: int) returns (dst: int)
{
    if (src > $MAX_U16) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU32(src: int) returns (dst: int)
{
    if (src > $MAX_U32) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU64(src: int) returns (dst: int)
{
    if (src > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU128(src: int) returns (dst: int)
{
    if (src > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU256(src: int) returns (dst: int)
{
    if (src > $MAX_U256) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $AddU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU16(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U16) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU16_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU32(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U32) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU32_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU256(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U256) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU256_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $Sub(src1: int, src2: int) returns (dst: int)
{
    if (src1 < src2) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 - src2;
}

// uninterpreted function to return an undefined value.
function $undefined_int(): int;

// Recursive exponentiation function
// Undefined unless e >=0.  $pow(0,0) is also undefined.
function $pow(n: int, e: int): int {
    if n != 0 && e == 0 then 1
    else if e > 0 then n * $pow(n, e - 1)
    else $undefined_int()
}

function $shl(src1: int, p: int): int {
    src1 * $pow(2, p)
}

function $shlU8(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 256
}

function $shlU16(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 65536
}

function $shlU32(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 4294967296
}

function $shlU64(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 18446744073709551616
}

function $shlU128(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 340282366920938463463374607431768211456
}

function $shlU256(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 115792089237316195423570985008687907853269984665640564039457584007913129639936
}

function $shr(src1: int, p: int): int {
    src1 div $pow(2, p)
}

// We need to know the size of the destination in order to drop bits
// that have been shifted left more than that, so we have $ShlU8/16/32/64/128/256
procedure {:inline 1} $ShlU8(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 8) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shlU8(src1, src2);
}

// Template for cast and shift operations of bitvector types

procedure {:inline 1} $CastBv8to8(src: bv8) returns (dst: bv8)
{
    dst := src;
}


function $castBv8to8(src: bv8) returns (bv8)
{
    src
}


function $shlBv8From8(src1: bv8, src2: bv8) returns (bv8)
{
    $Shl'Bv8'(src1, src2)
}

procedure {:inline 1} $ShlBv8From8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Ge'Bv8'(src2, 8bv8)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv8'(src1, src2);
}

function $shrBv8From8(src1: bv8, src2: bv8) returns (bv8)
{
    $Shr'Bv8'(src1, src2)
}

procedure {:inline 1} $ShrBv8From8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Ge'Bv8'(src2, 8bv8)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv8'(src1, src2);
}

procedure {:inline 1} $CastBv16to8(src: bv16) returns (dst: bv8)
{
    if ($Gt'Bv16'(src, 255bv16)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}



function $shlBv8From16(src1: bv8, src2: bv16) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From16(src1: bv8, src2: bv16) returns (dst: bv8)
{
    if ($Ge'Bv16'(src2, 8bv16)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From16(src1: bv8, src2: bv16) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From16(src1: bv8, src2: bv16) returns (dst: bv8)
{
    if ($Ge'Bv16'(src2, 8bv16)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv32to8(src: bv32) returns (dst: bv8)
{
    if ($Gt'Bv32'(src, 255bv32)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $castBv32to8(src: bv32) returns (bv8)
{
    if ($Gt'Bv32'(src, 255bv32)) then
        $Arbitrary_value_of'bv8'()
    else
    src[8:0]
}


function $shlBv8From32(src1: bv8, src2: bv32) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From32(src1: bv8, src2: bv32) returns (dst: bv8)
{
    if ($Ge'Bv32'(src2, 8bv32)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From32(src1: bv8, src2: bv32) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From32(src1: bv8, src2: bv32) returns (dst: bv8)
{
    if ($Ge'Bv32'(src2, 8bv32)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv64to8(src: bv64) returns (dst: bv8)
{
    if ($Gt'Bv64'(src, 255bv64)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $castBv64to8(src: bv64) returns (bv8)
{
    if ($Gt'Bv64'(src, 255bv64)) then
        $Arbitrary_value_of'bv8'()
    else
    src[8:0]
}


function $shlBv8From64(src1: bv8, src2: bv64) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From64(src1: bv8, src2: bv64) returns (dst: bv8)
{
    if ($Ge'Bv64'(src2, 8bv64)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From64(src1: bv8, src2: bv64) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From64(src1: bv8, src2: bv64) returns (dst: bv8)
{
    if ($Ge'Bv64'(src2, 8bv64)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv128to8(src: bv128) returns (dst: bv8)
{
    if ($Gt'Bv128'(src, 255bv128)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $castBv128to8(src: bv128) returns (bv8)
{
    if ($Gt'Bv128'(src, 255bv128)) then
        $Arbitrary_value_of'bv8'()
    else
    src[8:0]
}


function $shlBv8From128(src1: bv8, src2: bv128) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From128(src1: bv8, src2: bv128) returns (dst: bv8)
{
    if ($Ge'Bv128'(src2, 8bv128)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From128(src1: bv8, src2: bv128) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From128(src1: bv8, src2: bv128) returns (dst: bv8)
{
    if ($Ge'Bv128'(src2, 8bv128)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv256to8(src: bv256) returns (dst: bv8)
{
    if ($Gt'Bv256'(src, 255bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $castBv256to8(src: bv256) returns (bv8)
{
    if ($Gt'Bv256'(src, 255bv256)) then
        $Arbitrary_value_of'bv8'()
    else
    src[8:0]
}


function $shlBv8From256(src1: bv8, src2: bv256) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From256(src1: bv8, src2: bv256) returns (dst: bv8)
{
    if ($Ge'Bv256'(src2, 8bv256)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From256(src1: bv8, src2: bv256) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From256(src1: bv8, src2: bv256) returns (dst: bv8)
{
    if ($Ge'Bv256'(src2, 8bv256)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv8to16(src: bv8) returns (dst: bv16)
{
    dst := 0bv8 ++ src;
}



function $shlBv16From8(src1: bv16, src2: bv8) returns (bv16)
{
    $Shl'Bv16'(src1, 0bv8 ++ src2)
}

procedure {:inline 1} $ShlBv16From8(src1: bv16, src2: bv8) returns (dst: bv16)
{
    if ($Ge'Bv8'(src2, 16bv8)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv16'(src1, 0bv8 ++ src2);
}

function $shrBv16From8(src1: bv16, src2: bv8) returns (bv16)
{
    $Shr'Bv16'(src1, 0bv8 ++ src2)
}

procedure {:inline 1} $ShrBv16From8(src1: bv16, src2: bv8) returns (dst: bv16)
{
    if ($Ge'Bv8'(src2, 16bv8)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv16'(src1, 0bv8 ++ src2);
}

procedure {:inline 1} $CastBv16to16(src: bv16) returns (dst: bv16)
{
    dst := src;
}



function $shlBv16From16(src1: bv16, src2: bv16) returns (bv16)
{
    $Shl'Bv16'(src1, src2)
}

procedure {:inline 1} $ShlBv16From16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Ge'Bv16'(src2, 16bv16)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv16'(src1, src2);
}

function $shrBv16From16(src1: bv16, src2: bv16) returns (bv16)
{
    $Shr'Bv16'(src1, src2)
}

procedure {:inline 1} $ShrBv16From16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Ge'Bv16'(src2, 16bv16)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv16'(src1, src2);
}

procedure {:inline 1} $CastBv32to16(src: bv32) returns (dst: bv16)
{
    if ($Gt'Bv32'(src, 65535bv32)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[16:0];
}



function $shlBv16From32(src1: bv16, src2: bv32) returns (bv16)
{
    $Shl'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShlBv16From32(src1: bv16, src2: bv32) returns (dst: bv16)
{
    if ($Ge'Bv32'(src2, 16bv32)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv16'(src1, src2[16:0]);
}

function $shrBv16From32(src1: bv16, src2: bv32) returns (bv16)
{
    $Shr'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShrBv16From32(src1: bv16, src2: bv32) returns (dst: bv16)
{
    if ($Ge'Bv32'(src2, 16bv32)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv16'(src1, src2[16:0]);
}

procedure {:inline 1} $CastBv64to16(src: bv64) returns (dst: bv16)
{
    if ($Gt'Bv64'(src, 65535bv64)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[16:0];
}



function $shlBv16From64(src1: bv16, src2: bv64) returns (bv16)
{
    $Shl'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShlBv16From64(src1: bv16, src2: bv64) returns (dst: bv16)
{
    if ($Ge'Bv64'(src2, 16bv64)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv16'(src1, src2[16:0]);
}

function $shrBv16From64(src1: bv16, src2: bv64) returns (bv16)
{
    $Shr'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShrBv16From64(src1: bv16, src2: bv64) returns (dst: bv16)
{
    if ($Ge'Bv64'(src2, 16bv64)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv16'(src1, src2[16:0]);
}

procedure {:inline 1} $CastBv128to16(src: bv128) returns (dst: bv16)
{
    if ($Gt'Bv128'(src, 65535bv128)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[16:0];
}



function $shlBv16From128(src1: bv16, src2: bv128) returns (bv16)
{
    $Shl'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShlBv16From128(src1: bv16, src2: bv128) returns (dst: bv16)
{
    if ($Ge'Bv128'(src2, 16bv128)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv16'(src1, src2[16:0]);
}

function $shrBv16From128(src1: bv16, src2: bv128) returns (bv16)
{
    $Shr'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShrBv16From128(src1: bv16, src2: bv128) returns (dst: bv16)
{
    if ($Ge'Bv128'(src2, 16bv128)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv16'(src1, src2[16:0]);
}

procedure {:inline 1} $CastBv256to16(src: bv256) returns (dst: bv16)
{
    if ($Gt'Bv256'(src, 65535bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[16:0];
}



function $shlBv16From256(src1: bv16, src2: bv256) returns (bv16)
{
    $Shl'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShlBv16From256(src1: bv16, src2: bv256) returns (dst: bv16)
{
    if ($Ge'Bv256'(src2, 16bv256)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv16'(src1, src2[16:0]);
}

function $shrBv16From256(src1: bv16, src2: bv256) returns (bv16)
{
    $Shr'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShrBv16From256(src1: bv16, src2: bv256) returns (dst: bv16)
{
    if ($Ge'Bv256'(src2, 16bv256)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv16'(src1, src2[16:0]);
}

procedure {:inline 1} $CastBv8to32(src: bv8) returns (dst: bv32)
{
    dst := 0bv24 ++ src;
}


function $castBv8to32(src: bv8) returns (bv32)
{
    0bv24 ++ src
}


function $shlBv32From8(src1: bv32, src2: bv8) returns (bv32)
{
    $Shl'Bv32'(src1, 0bv24 ++ src2)
}

procedure {:inline 1} $ShlBv32From8(src1: bv32, src2: bv8) returns (dst: bv32)
{
    if ($Ge'Bv8'(src2, 32bv8)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv32'(src1, 0bv24 ++ src2);
}

function $shrBv32From8(src1: bv32, src2: bv8) returns (bv32)
{
    $Shr'Bv32'(src1, 0bv24 ++ src2)
}

procedure {:inline 1} $ShrBv32From8(src1: bv32, src2: bv8) returns (dst: bv32)
{
    if ($Ge'Bv8'(src2, 32bv8)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv32'(src1, 0bv24 ++ src2);
}

procedure {:inline 1} $CastBv16to32(src: bv16) returns (dst: bv32)
{
    dst := 0bv16 ++ src;
}



function $shlBv32From16(src1: bv32, src2: bv16) returns (bv32)
{
    $Shl'Bv32'(src1, 0bv16 ++ src2)
}

procedure {:inline 1} $ShlBv32From16(src1: bv32, src2: bv16) returns (dst: bv32)
{
    if ($Ge'Bv16'(src2, 32bv16)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv32'(src1, 0bv16 ++ src2);
}

function $shrBv32From16(src1: bv32, src2: bv16) returns (bv32)
{
    $Shr'Bv32'(src1, 0bv16 ++ src2)
}

procedure {:inline 1} $ShrBv32From16(src1: bv32, src2: bv16) returns (dst: bv32)
{
    if ($Ge'Bv16'(src2, 32bv16)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv32'(src1, 0bv16 ++ src2);
}

procedure {:inline 1} $CastBv32to32(src: bv32) returns (dst: bv32)
{
    dst := src;
}


function $castBv32to32(src: bv32) returns (bv32)
{
    src
}


function $shlBv32From32(src1: bv32, src2: bv32) returns (bv32)
{
    $Shl'Bv32'(src1, src2)
}

procedure {:inline 1} $ShlBv32From32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Ge'Bv32'(src2, 32bv32)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv32'(src1, src2);
}

function $shrBv32From32(src1: bv32, src2: bv32) returns (bv32)
{
    $Shr'Bv32'(src1, src2)
}

procedure {:inline 1} $ShrBv32From32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Ge'Bv32'(src2, 32bv32)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv32'(src1, src2);
}

procedure {:inline 1} $CastBv64to32(src: bv64) returns (dst: bv32)
{
    if ($Gt'Bv64'(src, 2147483647bv64)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[32:0];
}


function $castBv64to32(src: bv64) returns (bv32)
{
    if ($Gt'Bv64'(src, 2147483647bv64)) then
        $Arbitrary_value_of'bv32'()
    else
    src[32:0]
}


function $shlBv32From64(src1: bv32, src2: bv64) returns (bv32)
{
    $Shl'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShlBv32From64(src1: bv32, src2: bv64) returns (dst: bv32)
{
    if ($Ge'Bv64'(src2, 32bv64)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv32'(src1, src2[32:0]);
}

function $shrBv32From64(src1: bv32, src2: bv64) returns (bv32)
{
    $Shr'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShrBv32From64(src1: bv32, src2: bv64) returns (dst: bv32)
{
    if ($Ge'Bv64'(src2, 32bv64)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv32'(src1, src2[32:0]);
}

procedure {:inline 1} $CastBv128to32(src: bv128) returns (dst: bv32)
{
    if ($Gt'Bv128'(src, 2147483647bv128)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[32:0];
}


function $castBv128to32(src: bv128) returns (bv32)
{
    if ($Gt'Bv128'(src, 2147483647bv128)) then
        $Arbitrary_value_of'bv32'()
    else
    src[32:0]
}


function $shlBv32From128(src1: bv32, src2: bv128) returns (bv32)
{
    $Shl'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShlBv32From128(src1: bv32, src2: bv128) returns (dst: bv32)
{
    if ($Ge'Bv128'(src2, 32bv128)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv32'(src1, src2[32:0]);
}

function $shrBv32From128(src1: bv32, src2: bv128) returns (bv32)
{
    $Shr'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShrBv32From128(src1: bv32, src2: bv128) returns (dst: bv32)
{
    if ($Ge'Bv128'(src2, 32bv128)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv32'(src1, src2[32:0]);
}

procedure {:inline 1} $CastBv256to32(src: bv256) returns (dst: bv32)
{
    if ($Gt'Bv256'(src, 2147483647bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[32:0];
}


function $castBv256to32(src: bv256) returns (bv32)
{
    if ($Gt'Bv256'(src, 2147483647bv256)) then
        $Arbitrary_value_of'bv32'()
    else
    src[32:0]
}


function $shlBv32From256(src1: bv32, src2: bv256) returns (bv32)
{
    $Shl'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShlBv32From256(src1: bv32, src2: bv256) returns (dst: bv32)
{
    if ($Ge'Bv256'(src2, 32bv256)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv32'(src1, src2[32:0]);
}

function $shrBv32From256(src1: bv32, src2: bv256) returns (bv32)
{
    $Shr'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShrBv32From256(src1: bv32, src2: bv256) returns (dst: bv32)
{
    if ($Ge'Bv256'(src2, 32bv256)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv32'(src1, src2[32:0]);
}

procedure {:inline 1} $CastBv8to64(src: bv8) returns (dst: bv64)
{
    dst := 0bv56 ++ src;
}


function $castBv8to64(src: bv8) returns (bv64)
{
    0bv56 ++ src
}


function $shlBv64From8(src1: bv64, src2: bv8) returns (bv64)
{
    $Shl'Bv64'(src1, 0bv56 ++ src2)
}

procedure {:inline 1} $ShlBv64From8(src1: bv64, src2: bv8) returns (dst: bv64)
{
    if ($Ge'Bv8'(src2, 64bv8)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv64'(src1, 0bv56 ++ src2);
}

function $shrBv64From8(src1: bv64, src2: bv8) returns (bv64)
{
    $Shr'Bv64'(src1, 0bv56 ++ src2)
}

procedure {:inline 1} $ShrBv64From8(src1: bv64, src2: bv8) returns (dst: bv64)
{
    if ($Ge'Bv8'(src2, 64bv8)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv64'(src1, 0bv56 ++ src2);
}

procedure {:inline 1} $CastBv16to64(src: bv16) returns (dst: bv64)
{
    dst := 0bv48 ++ src;
}



function $shlBv64From16(src1: bv64, src2: bv16) returns (bv64)
{
    $Shl'Bv64'(src1, 0bv48 ++ src2)
}

procedure {:inline 1} $ShlBv64From16(src1: bv64, src2: bv16) returns (dst: bv64)
{
    if ($Ge'Bv16'(src2, 64bv16)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv64'(src1, 0bv48 ++ src2);
}

function $shrBv64From16(src1: bv64, src2: bv16) returns (bv64)
{
    $Shr'Bv64'(src1, 0bv48 ++ src2)
}

procedure {:inline 1} $ShrBv64From16(src1: bv64, src2: bv16) returns (dst: bv64)
{
    if ($Ge'Bv16'(src2, 64bv16)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv64'(src1, 0bv48 ++ src2);
}

procedure {:inline 1} $CastBv32to64(src: bv32) returns (dst: bv64)
{
    dst := 0bv32 ++ src;
}


function $castBv32to64(src: bv32) returns (bv64)
{
    0bv32 ++ src
}


function $shlBv64From32(src1: bv64, src2: bv32) returns (bv64)
{
    $Shl'Bv64'(src1, 0bv32 ++ src2)
}

procedure {:inline 1} $ShlBv64From32(src1: bv64, src2: bv32) returns (dst: bv64)
{
    if ($Ge'Bv32'(src2, 64bv32)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv64'(src1, 0bv32 ++ src2);
}

function $shrBv64From32(src1: bv64, src2: bv32) returns (bv64)
{
    $Shr'Bv64'(src1, 0bv32 ++ src2)
}

procedure {:inline 1} $ShrBv64From32(src1: bv64, src2: bv32) returns (dst: bv64)
{
    if ($Ge'Bv32'(src2, 64bv32)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv64'(src1, 0bv32 ++ src2);
}

procedure {:inline 1} $CastBv64to64(src: bv64) returns (dst: bv64)
{
    dst := src;
}


function $castBv64to64(src: bv64) returns (bv64)
{
    src
}


function $shlBv64From64(src1: bv64, src2: bv64) returns (bv64)
{
    $Shl'Bv64'(src1, src2)
}

procedure {:inline 1} $ShlBv64From64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Ge'Bv64'(src2, 64bv64)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv64'(src1, src2);
}

function $shrBv64From64(src1: bv64, src2: bv64) returns (bv64)
{
    $Shr'Bv64'(src1, src2)
}

procedure {:inline 1} $ShrBv64From64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Ge'Bv64'(src2, 64bv64)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv64'(src1, src2);
}

procedure {:inline 1} $CastBv128to64(src: bv128) returns (dst: bv64)
{
    if ($Gt'Bv128'(src, 18446744073709551615bv128)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[64:0];
}


function $castBv128to64(src: bv128) returns (bv64)
{
    if ($Gt'Bv128'(src, 18446744073709551615bv128)) then
        $Arbitrary_value_of'bv64'()
    else
    src[64:0]
}


function $shlBv64From128(src1: bv64, src2: bv128) returns (bv64)
{
    $Shl'Bv64'(src1, src2[64:0])
}

procedure {:inline 1} $ShlBv64From128(src1: bv64, src2: bv128) returns (dst: bv64)
{
    if ($Ge'Bv128'(src2, 64bv128)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv64'(src1, src2[64:0]);
}

function $shrBv64From128(src1: bv64, src2: bv128) returns (bv64)
{
    $Shr'Bv64'(src1, src2[64:0])
}

procedure {:inline 1} $ShrBv64From128(src1: bv64, src2: bv128) returns (dst: bv64)
{
    if ($Ge'Bv128'(src2, 64bv128)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv64'(src1, src2[64:0]);
}

procedure {:inline 1} $CastBv256to64(src: bv256) returns (dst: bv64)
{
    if ($Gt'Bv256'(src, 18446744073709551615bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[64:0];
}


function $castBv256to64(src: bv256) returns (bv64)
{
    if ($Gt'Bv256'(src, 18446744073709551615bv256)) then
        $Arbitrary_value_of'bv64'()
    else
    src[64:0]
}


function $shlBv64From256(src1: bv64, src2: bv256) returns (bv64)
{
    $Shl'Bv64'(src1, src2[64:0])
}

procedure {:inline 1} $ShlBv64From256(src1: bv64, src2: bv256) returns (dst: bv64)
{
    if ($Ge'Bv256'(src2, 64bv256)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv64'(src1, src2[64:0]);
}

function $shrBv64From256(src1: bv64, src2: bv256) returns (bv64)
{
    $Shr'Bv64'(src1, src2[64:0])
}

procedure {:inline 1} $ShrBv64From256(src1: bv64, src2: bv256) returns (dst: bv64)
{
    if ($Ge'Bv256'(src2, 64bv256)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv64'(src1, src2[64:0]);
}

procedure {:inline 1} $CastBv8to128(src: bv8) returns (dst: bv128)
{
    dst := 0bv120 ++ src;
}


function $castBv8to128(src: bv8) returns (bv128)
{
    0bv120 ++ src
}


function $shlBv128From8(src1: bv128, src2: bv8) returns (bv128)
{
    $Shl'Bv128'(src1, 0bv120 ++ src2)
}

procedure {:inline 1} $ShlBv128From8(src1: bv128, src2: bv8) returns (dst: bv128)
{
    if ($Ge'Bv8'(src2, 128bv8)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv128'(src1, 0bv120 ++ src2);
}

function $shrBv128From8(src1: bv128, src2: bv8) returns (bv128)
{
    $Shr'Bv128'(src1, 0bv120 ++ src2)
}

procedure {:inline 1} $ShrBv128From8(src1: bv128, src2: bv8) returns (dst: bv128)
{
    if ($Ge'Bv8'(src2, 128bv8)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv128'(src1, 0bv120 ++ src2);
}

procedure {:inline 1} $CastBv16to128(src: bv16) returns (dst: bv128)
{
    dst := 0bv112 ++ src;
}



function $shlBv128From16(src1: bv128, src2: bv16) returns (bv128)
{
    $Shl'Bv128'(src1, 0bv112 ++ src2)
}

procedure {:inline 1} $ShlBv128From16(src1: bv128, src2: bv16) returns (dst: bv128)
{
    if ($Ge'Bv16'(src2, 128bv16)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv128'(src1, 0bv112 ++ src2);
}

function $shrBv128From16(src1: bv128, src2: bv16) returns (bv128)
{
    $Shr'Bv128'(src1, 0bv112 ++ src2)
}

procedure {:inline 1} $ShrBv128From16(src1: bv128, src2: bv16) returns (dst: bv128)
{
    if ($Ge'Bv16'(src2, 128bv16)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv128'(src1, 0bv112 ++ src2);
}

procedure {:inline 1} $CastBv32to128(src: bv32) returns (dst: bv128)
{
    dst := 0bv96 ++ src;
}


function $castBv32to128(src: bv32) returns (bv128)
{
    0bv96 ++ src
}


function $shlBv128From32(src1: bv128, src2: bv32) returns (bv128)
{
    $Shl'Bv128'(src1, 0bv96 ++ src2)
}

procedure {:inline 1} $ShlBv128From32(src1: bv128, src2: bv32) returns (dst: bv128)
{
    if ($Ge'Bv32'(src2, 128bv32)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv128'(src1, 0bv96 ++ src2);
}

function $shrBv128From32(src1: bv128, src2: bv32) returns (bv128)
{
    $Shr'Bv128'(src1, 0bv96 ++ src2)
}

procedure {:inline 1} $ShrBv128From32(src1: bv128, src2: bv32) returns (dst: bv128)
{
    if ($Ge'Bv32'(src2, 128bv32)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv128'(src1, 0bv96 ++ src2);
}

procedure {:inline 1} $CastBv64to128(src: bv64) returns (dst: bv128)
{
    dst := 0bv64 ++ src;
}


function $castBv64to128(src: bv64) returns (bv128)
{
    0bv64 ++ src
}


function $shlBv128From64(src1: bv128, src2: bv64) returns (bv128)
{
    $Shl'Bv128'(src1, 0bv64 ++ src2)
}

procedure {:inline 1} $ShlBv128From64(src1: bv128, src2: bv64) returns (dst: bv128)
{
    if ($Ge'Bv64'(src2, 128bv64)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv128'(src1, 0bv64 ++ src2);
}

function $shrBv128From64(src1: bv128, src2: bv64) returns (bv128)
{
    $Shr'Bv128'(src1, 0bv64 ++ src2)
}

procedure {:inline 1} $ShrBv128From64(src1: bv128, src2: bv64) returns (dst: bv128)
{
    if ($Ge'Bv64'(src2, 128bv64)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv128'(src1, 0bv64 ++ src2);
}

procedure {:inline 1} $CastBv128to128(src: bv128) returns (dst: bv128)
{
    dst := src;
}


function $castBv128to128(src: bv128) returns (bv128)
{
    src
}


function $shlBv128From128(src1: bv128, src2: bv128) returns (bv128)
{
    $Shl'Bv128'(src1, src2)
}

procedure {:inline 1} $ShlBv128From128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Ge'Bv128'(src2, 128bv128)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv128'(src1, src2);
}

function $shrBv128From128(src1: bv128, src2: bv128) returns (bv128)
{
    $Shr'Bv128'(src1, src2)
}

procedure {:inline 1} $ShrBv128From128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Ge'Bv128'(src2, 128bv128)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv128'(src1, src2);
}

procedure {:inline 1} $CastBv256to128(src: bv256) returns (dst: bv128)
{
    if ($Gt'Bv256'(src, 340282366920938463463374607431768211455bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[128:0];
}


function $castBv256to128(src: bv256) returns (bv128)
{
    if ($Gt'Bv256'(src, 340282366920938463463374607431768211455bv256)) then
        $Arbitrary_value_of'bv128'()
    else
    src[128:0]
}


function $shlBv128From256(src1: bv128, src2: bv256) returns (bv128)
{
    $Shl'Bv128'(src1, src2[128:0])
}

procedure {:inline 1} $ShlBv128From256(src1: bv128, src2: bv256) returns (dst: bv128)
{
    if ($Ge'Bv256'(src2, 128bv256)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv128'(src1, src2[128:0]);
}

function $shrBv128From256(src1: bv128, src2: bv256) returns (bv128)
{
    $Shr'Bv128'(src1, src2[128:0])
}

procedure {:inline 1} $ShrBv128From256(src1: bv128, src2: bv256) returns (dst: bv128)
{
    if ($Ge'Bv256'(src2, 128bv256)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv128'(src1, src2[128:0]);
}

procedure {:inline 1} $CastBv8to256(src: bv8) returns (dst: bv256)
{
    dst := 0bv248 ++ src;
}


function $castBv8to256(src: bv8) returns (bv256)
{
    0bv248 ++ src
}


function $shlBv256From8(src1: bv256, src2: bv8) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv248 ++ src2)
}

procedure {:inline 1} $ShlBv256From8(src1: bv256, src2: bv8) returns (dst: bv256)
{
    assume $bv2int.8(src2) >= 0 && $bv2int.8(src2) < 256;
    dst := $Shl'Bv256'(src1, 0bv248 ++ src2);
}

function $shrBv256From8(src1: bv256, src2: bv8) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv248 ++ src2)
}

procedure {:inline 1} $ShrBv256From8(src1: bv256, src2: bv8) returns (dst: bv256)
{
    assume $bv2int.8(src2) >= 0 && $bv2int.8(src2) < 256;
    dst := $Shr'Bv256'(src1, 0bv248 ++ src2);
}

procedure {:inline 1} $CastBv16to256(src: bv16) returns (dst: bv256)
{
    dst := 0bv240 ++ src;
}



function $shlBv256From16(src1: bv256, src2: bv16) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv240 ++ src2)
}

procedure {:inline 1} $ShlBv256From16(src1: bv256, src2: bv16) returns (dst: bv256)
{
    if ($Ge'Bv16'(src2, 256bv16)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv256'(src1, 0bv240 ++ src2);
}

function $shrBv256From16(src1: bv256, src2: bv16) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv240 ++ src2)
}

procedure {:inline 1} $ShrBv256From16(src1: bv256, src2: bv16) returns (dst: bv256)
{
    if ($Ge'Bv16'(src2, 256bv16)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv256'(src1, 0bv240 ++ src2);
}

procedure {:inline 1} $CastBv32to256(src: bv32) returns (dst: bv256)
{
    dst := 0bv224 ++ src;
}


function $castBv32to256(src: bv32) returns (bv256)
{
    0bv224 ++ src
}


function $shlBv256From32(src1: bv256, src2: bv32) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv224 ++ src2)
}

procedure {:inline 1} $ShlBv256From32(src1: bv256, src2: bv32) returns (dst: bv256)
{
    if ($Ge'Bv32'(src2, 256bv32)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv256'(src1, 0bv224 ++ src2);
}

function $shrBv256From32(src1: bv256, src2: bv32) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv224 ++ src2)
}

procedure {:inline 1} $ShrBv256From32(src1: bv256, src2: bv32) returns (dst: bv256)
{
    if ($Ge'Bv32'(src2, 256bv32)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv256'(src1, 0bv224 ++ src2);
}

procedure {:inline 1} $CastBv64to256(src: bv64) returns (dst: bv256)
{
    dst := 0bv192 ++ src;
}


function $castBv64to256(src: bv64) returns (bv256)
{
    0bv192 ++ src
}


function $shlBv256From64(src1: bv256, src2: bv64) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv192 ++ src2)
}

procedure {:inline 1} $ShlBv256From64(src1: bv256, src2: bv64) returns (dst: bv256)
{
    if ($Ge'Bv64'(src2, 256bv64)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv256'(src1, 0bv192 ++ src2);
}

function $shrBv256From64(src1: bv256, src2: bv64) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv192 ++ src2)
}

procedure {:inline 1} $ShrBv256From64(src1: bv256, src2: bv64) returns (dst: bv256)
{
    if ($Ge'Bv64'(src2, 256bv64)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv256'(src1, 0bv192 ++ src2);
}

procedure {:inline 1} $CastBv128to256(src: bv128) returns (dst: bv256)
{
    dst := 0bv128 ++ src;
}


function $castBv128to256(src: bv128) returns (bv256)
{
    0bv128 ++ src
}


function $shlBv256From128(src1: bv256, src2: bv128) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv128 ++ src2)
}

procedure {:inline 1} $ShlBv256From128(src1: bv256, src2: bv128) returns (dst: bv256)
{
    if ($Ge'Bv128'(src2, 256bv128)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv256'(src1, 0bv128 ++ src2);
}

function $shrBv256From128(src1: bv256, src2: bv128) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv128 ++ src2)
}

procedure {:inline 1} $ShrBv256From128(src1: bv256, src2: bv128) returns (dst: bv256)
{
    if ($Ge'Bv128'(src2, 256bv128)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv256'(src1, 0bv128 ++ src2);
}

procedure {:inline 1} $CastBv256to256(src: bv256) returns (dst: bv256)
{
    dst := src;
}


function $castBv256to256(src: bv256) returns (bv256)
{
    src
}


function $shlBv256From256(src1: bv256, src2: bv256) returns (bv256)
{
    $Shl'Bv256'(src1, src2)
}

procedure {:inline 1} $ShlBv256From256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Ge'Bv256'(src2, 256bv256)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv256'(src1, src2);
}

function $shrBv256From256(src1: bv256, src2: bv256) returns (bv256)
{
    $Shr'Bv256'(src1, src2)
}

procedure {:inline 1} $ShrBv256From256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Ge'Bv256'(src2, 256bv256)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv256'(src1, src2);
}

procedure {:inline 1} $ShlU16(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 16) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shlU16(src1, src2);
}

procedure {:inline 1} $ShlU32(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 32) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shlU32(src1, src2);
}

procedure {:inline 1} $ShlU64(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 64) {
       call $ExecFailureAbort();
       return;
    }
    dst := $shlU64(src1, src2);
}

procedure {:inline 1} $ShlU128(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 128) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shlU128(src1, src2);
}

procedure {:inline 1} $ShlU256(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    dst := $shlU256(src1, src2);
}

procedure {:inline 1} $Shr(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU8(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 8) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU16(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 16) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU32(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 32) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU64(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 64) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU128(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 128) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU256(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    dst := $shr(src1, src2);
}

procedure {:inline 1} $MulU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU16(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U16) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU32(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U32) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU256(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U256) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $Div(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 div src2;
}

procedure {:inline 1} $Mod(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 mod src2;
}

procedure {:inline 1} $ArithBinaryUnimplemented(src1: int, src2: int) returns (dst: int);

procedure {:inline 1} $Lt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 < src2;
}

procedure {:inline 1} $Gt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 > src2;
}

procedure {:inline 1} $Le(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 <= src2;
}

procedure {:inline 1} $Ge(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 >= src2;
}

procedure {:inline 1} $And(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 && src2;
}

procedure {:inline 1} $Or(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 || src2;
}

procedure {:inline 1} $Not(src: bool) returns (dst: bool)
{
    dst := !src;
}

// Pack and Unpack are auto-generated for each type T


// ==================================================================================
// Native Vector

function {:inline} $SliceVecByRange<T>(v: Vec T, r: $Range): Vec T {
    SliceVec(v, r->lb, r->ub)
}

// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `#0`

// Not inlined. It appears faster this way.
function $IsEqual'vec'#0''(v1: Vec (#0), v2: Vec (#0)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'#0'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'#0''(v: Vec (#0), prefix: Vec (#0)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'#0'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'#0''(v: Vec (#0), suffix: Vec (#0)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'#0'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'#0''(v: Vec (#0)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'#0'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'#0'(v: Vec (#0), e: #0): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'#0'(ReadVec(v, i), e))
}

function $IndexOfVec'#0'(v: Vec (#0), e: #0): int;
axiom (forall v: Vec (#0), e: #0:: {$IndexOfVec'#0'(v, e)}
    (var i := $IndexOfVec'#0'(v, e);
     if (!$ContainsVec'#0'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'#0'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'#0'(ReadVec(v, j), e))));


function {:inline} $RangeVec'#0'(v: Vec (#0)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'#0'(): Vec (#0) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'#0'() returns (v: Vec (#0)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'#0'(): Vec (#0) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'#0'(v: Vec (#0)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'#0'(m: $Mutation (Vec (#0)), val: #0) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'#0'(v: Vec (#0), val: #0): Vec (#0) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'#0'(m: $Mutation (Vec (#0))) returns (e: #0, m': $Mutation (Vec (#0))) {
    var v: Vec (#0);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'#0'(m: $Mutation (Vec (#0)), other: Vec (#0)) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'#0'(m: $Mutation (Vec (#0))) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'#0'(m: $Mutation (Vec (#0)), other: Vec (#0)) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'#0'(m: $Mutation (Vec (#0)), new_len: int) returns (v: (Vec (#0)), m': $Mutation (Vec (#0))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'#0'(m: $Mutation (Vec (#0)), new_len: int) returns (v: (Vec (#0)), m': $Mutation (Vec (#0))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'#0'(m: $Mutation (Vec (#0)), left: int, right: int) returns (m': $Mutation (Vec (#0))) {
    var left_vec: Vec (#0);
    var mid_vec: Vec (#0);
    var right_vec: Vec (#0);
    var v: Vec (#0);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'#0'(m: $Mutation (Vec (#0)), rot: int) returns (n: int, m': $Mutation (Vec (#0))) {
    var v: Vec (#0);
    var len: int;
    var left_vec: Vec (#0);
    var right_vec: Vec (#0);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'#0'(m: $Mutation (Vec (#0)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (#0))) {
    var left_vec: Vec (#0);
    var mid_vec: Vec (#0);
    var right_vec: Vec (#0);
    var mid_left_vec: Vec (#0);
    var mid_right_vec: Vec (#0);
    var v: Vec (#0);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'#0'(m: $Mutation (Vec (#0)), i: int, e: #0) returns (m': $Mutation (Vec (#0))) {
    var left_vec: Vec (#0);
    var right_vec: Vec (#0);
    var v: Vec (#0);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'#0'(v: Vec (#0)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'#0'(v: Vec (#0)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'#0'(v: Vec (#0), i: int) returns (dst: #0) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'#0'(v: Vec (#0), i: int): #0 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'#0'(m: $Mutation (Vec (#0)), index: int)
returns (dst: $Mutation (#0), m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'#0'(v: Vec (#0), i: int): #0 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'#0'(v: Vec (#0)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'#0'(m: $Mutation (Vec (#0)), i: int, j: int) returns (m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'#0'(v: Vec (#0), i: int, j: int): Vec (#0) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'#0'(m: $Mutation (Vec (#0)), i: int) returns (e: #0, m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'#0'(m: $Mutation (Vec (#0)), i: int) returns (e: #0, m': $Mutation (Vec (#0)))
{
    var len: int;
    var v: Vec (#0);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'#0'(v: Vec (#0), e: #0) returns (res: bool)  {
    res := $ContainsVec'#0'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'#0'(v: Vec (#0), e: #0) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'#0'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_any_Any`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_any_Any''(v1: Vec ($1_any_Any), v2: Vec ($1_any_Any)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_any_Any'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_any_Any''(v: Vec ($1_any_Any), prefix: Vec ($1_any_Any)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_any_Any'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_any_Any''(v: Vec ($1_any_Any), suffix: Vec ($1_any_Any)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_any_Any'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_any_Any''(v: Vec ($1_any_Any)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_any_Any'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_any_Any'(v: Vec ($1_any_Any), e: $1_any_Any): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_any_Any'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_any_Any'(v: Vec ($1_any_Any), e: $1_any_Any): int;
axiom (forall v: Vec ($1_any_Any), e: $1_any_Any:: {$IndexOfVec'$1_any_Any'(v, e)}
    (var i := $IndexOfVec'$1_any_Any'(v, e);
     if (!$ContainsVec'$1_any_Any'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_any_Any'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_any_Any'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_any_Any'(v: Vec ($1_any_Any)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_any_Any'(): Vec ($1_any_Any) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_any_Any'() returns (v: Vec ($1_any_Any)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_any_Any'(): Vec ($1_any_Any) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_any_Any'(v: Vec ($1_any_Any)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_any_Any'(m: $Mutation (Vec ($1_any_Any)), val: $1_any_Any) returns (m': $Mutation (Vec ($1_any_Any))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_any_Any'(v: Vec ($1_any_Any), val: $1_any_Any): Vec ($1_any_Any) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_any_Any'(m: $Mutation (Vec ($1_any_Any))) returns (e: $1_any_Any, m': $Mutation (Vec ($1_any_Any))) {
    var v: Vec ($1_any_Any);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_any_Any'(m: $Mutation (Vec ($1_any_Any)), other: Vec ($1_any_Any)) returns (m': $Mutation (Vec ($1_any_Any))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_any_Any'(m: $Mutation (Vec ($1_any_Any))) returns (m': $Mutation (Vec ($1_any_Any))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_any_Any'(m: $Mutation (Vec ($1_any_Any)), other: Vec ($1_any_Any)) returns (m': $Mutation (Vec ($1_any_Any))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_any_Any'(m: $Mutation (Vec ($1_any_Any)), new_len: int) returns (v: (Vec ($1_any_Any)), m': $Mutation (Vec ($1_any_Any))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_any_Any'(m: $Mutation (Vec ($1_any_Any)), new_len: int) returns (v: (Vec ($1_any_Any)), m': $Mutation (Vec ($1_any_Any))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_any_Any'(m: $Mutation (Vec ($1_any_Any)), left: int, right: int) returns (m': $Mutation (Vec ($1_any_Any))) {
    var left_vec: Vec ($1_any_Any);
    var mid_vec: Vec ($1_any_Any);
    var right_vec: Vec ($1_any_Any);
    var v: Vec ($1_any_Any);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_any_Any'(m: $Mutation (Vec ($1_any_Any)), rot: int) returns (n: int, m': $Mutation (Vec ($1_any_Any))) {
    var v: Vec ($1_any_Any);
    var len: int;
    var left_vec: Vec ($1_any_Any);
    var right_vec: Vec ($1_any_Any);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_any_Any'(m: $Mutation (Vec ($1_any_Any)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_any_Any))) {
    var left_vec: Vec ($1_any_Any);
    var mid_vec: Vec ($1_any_Any);
    var right_vec: Vec ($1_any_Any);
    var mid_left_vec: Vec ($1_any_Any);
    var mid_right_vec: Vec ($1_any_Any);
    var v: Vec ($1_any_Any);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_any_Any'(m: $Mutation (Vec ($1_any_Any)), i: int, e: $1_any_Any) returns (m': $Mutation (Vec ($1_any_Any))) {
    var left_vec: Vec ($1_any_Any);
    var right_vec: Vec ($1_any_Any);
    var v: Vec ($1_any_Any);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_any_Any'(v: Vec ($1_any_Any)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_any_Any'(v: Vec ($1_any_Any)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_any_Any'(v: Vec ($1_any_Any), i: int) returns (dst: $1_any_Any) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_any_Any'(v: Vec ($1_any_Any), i: int): $1_any_Any {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_any_Any'(m: $Mutation (Vec ($1_any_Any)), index: int)
returns (dst: $Mutation ($1_any_Any), m': $Mutation (Vec ($1_any_Any)))
{
    var v: Vec ($1_any_Any);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_any_Any'(v: Vec ($1_any_Any), i: int): $1_any_Any {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_any_Any'(v: Vec ($1_any_Any)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_any_Any'(m: $Mutation (Vec ($1_any_Any)), i: int, j: int) returns (m': $Mutation (Vec ($1_any_Any)))
{
    var v: Vec ($1_any_Any);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_any_Any'(v: Vec ($1_any_Any), i: int, j: int): Vec ($1_any_Any) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_any_Any'(m: $Mutation (Vec ($1_any_Any)), i: int) returns (e: $1_any_Any, m': $Mutation (Vec ($1_any_Any)))
{
    var v: Vec ($1_any_Any);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_any_Any'(m: $Mutation (Vec ($1_any_Any)), i: int) returns (e: $1_any_Any, m': $Mutation (Vec ($1_any_Any)))
{
    var len: int;
    var v: Vec ($1_any_Any);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_any_Any'(v: Vec ($1_any_Any), e: $1_any_Any) returns (res: bool)  {
    res := $ContainsVec'$1_any_Any'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_any_Any'(v: Vec ($1_any_Any), e: $1_any_Any) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_any_Any'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_dkg_DKGSessionState`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_dkg_DKGSessionState''(v1: Vec ($1_dkg_DKGSessionState), v2: Vec ($1_dkg_DKGSessionState)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_dkg_DKGSessionState'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_dkg_DKGSessionState''(v: Vec ($1_dkg_DKGSessionState), prefix: Vec ($1_dkg_DKGSessionState)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_dkg_DKGSessionState'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_dkg_DKGSessionState''(v: Vec ($1_dkg_DKGSessionState), suffix: Vec ($1_dkg_DKGSessionState)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_dkg_DKGSessionState'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_dkg_DKGSessionState''(v: Vec ($1_dkg_DKGSessionState)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_dkg_DKGSessionState'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_dkg_DKGSessionState'(v: Vec ($1_dkg_DKGSessionState), e: $1_dkg_DKGSessionState): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_dkg_DKGSessionState'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_dkg_DKGSessionState'(v: Vec ($1_dkg_DKGSessionState), e: $1_dkg_DKGSessionState): int;
axiom (forall v: Vec ($1_dkg_DKGSessionState), e: $1_dkg_DKGSessionState:: {$IndexOfVec'$1_dkg_DKGSessionState'(v, e)}
    (var i := $IndexOfVec'$1_dkg_DKGSessionState'(v, e);
     if (!$ContainsVec'$1_dkg_DKGSessionState'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_dkg_DKGSessionState'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_dkg_DKGSessionState'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_dkg_DKGSessionState'(v: Vec ($1_dkg_DKGSessionState)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_dkg_DKGSessionState'(): Vec ($1_dkg_DKGSessionState) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_dkg_DKGSessionState'() returns (v: Vec ($1_dkg_DKGSessionState)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_dkg_DKGSessionState'(): Vec ($1_dkg_DKGSessionState) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_dkg_DKGSessionState'(v: Vec ($1_dkg_DKGSessionState)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_dkg_DKGSessionState'(m: $Mutation (Vec ($1_dkg_DKGSessionState)), val: $1_dkg_DKGSessionState) returns (m': $Mutation (Vec ($1_dkg_DKGSessionState))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_dkg_DKGSessionState'(v: Vec ($1_dkg_DKGSessionState), val: $1_dkg_DKGSessionState): Vec ($1_dkg_DKGSessionState) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_dkg_DKGSessionState'(m: $Mutation (Vec ($1_dkg_DKGSessionState))) returns (e: $1_dkg_DKGSessionState, m': $Mutation (Vec ($1_dkg_DKGSessionState))) {
    var v: Vec ($1_dkg_DKGSessionState);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_dkg_DKGSessionState'(m: $Mutation (Vec ($1_dkg_DKGSessionState)), other: Vec ($1_dkg_DKGSessionState)) returns (m': $Mutation (Vec ($1_dkg_DKGSessionState))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_dkg_DKGSessionState'(m: $Mutation (Vec ($1_dkg_DKGSessionState))) returns (m': $Mutation (Vec ($1_dkg_DKGSessionState))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_dkg_DKGSessionState'(m: $Mutation (Vec ($1_dkg_DKGSessionState)), other: Vec ($1_dkg_DKGSessionState)) returns (m': $Mutation (Vec ($1_dkg_DKGSessionState))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_dkg_DKGSessionState'(m: $Mutation (Vec ($1_dkg_DKGSessionState)), new_len: int) returns (v: (Vec ($1_dkg_DKGSessionState)), m': $Mutation (Vec ($1_dkg_DKGSessionState))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_dkg_DKGSessionState'(m: $Mutation (Vec ($1_dkg_DKGSessionState)), new_len: int) returns (v: (Vec ($1_dkg_DKGSessionState)), m': $Mutation (Vec ($1_dkg_DKGSessionState))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_dkg_DKGSessionState'(m: $Mutation (Vec ($1_dkg_DKGSessionState)), left: int, right: int) returns (m': $Mutation (Vec ($1_dkg_DKGSessionState))) {
    var left_vec: Vec ($1_dkg_DKGSessionState);
    var mid_vec: Vec ($1_dkg_DKGSessionState);
    var right_vec: Vec ($1_dkg_DKGSessionState);
    var v: Vec ($1_dkg_DKGSessionState);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_dkg_DKGSessionState'(m: $Mutation (Vec ($1_dkg_DKGSessionState)), rot: int) returns (n: int, m': $Mutation (Vec ($1_dkg_DKGSessionState))) {
    var v: Vec ($1_dkg_DKGSessionState);
    var len: int;
    var left_vec: Vec ($1_dkg_DKGSessionState);
    var right_vec: Vec ($1_dkg_DKGSessionState);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_dkg_DKGSessionState'(m: $Mutation (Vec ($1_dkg_DKGSessionState)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_dkg_DKGSessionState))) {
    var left_vec: Vec ($1_dkg_DKGSessionState);
    var mid_vec: Vec ($1_dkg_DKGSessionState);
    var right_vec: Vec ($1_dkg_DKGSessionState);
    var mid_left_vec: Vec ($1_dkg_DKGSessionState);
    var mid_right_vec: Vec ($1_dkg_DKGSessionState);
    var v: Vec ($1_dkg_DKGSessionState);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_dkg_DKGSessionState'(m: $Mutation (Vec ($1_dkg_DKGSessionState)), i: int, e: $1_dkg_DKGSessionState) returns (m': $Mutation (Vec ($1_dkg_DKGSessionState))) {
    var left_vec: Vec ($1_dkg_DKGSessionState);
    var right_vec: Vec ($1_dkg_DKGSessionState);
    var v: Vec ($1_dkg_DKGSessionState);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_dkg_DKGSessionState'(v: Vec ($1_dkg_DKGSessionState)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_dkg_DKGSessionState'(v: Vec ($1_dkg_DKGSessionState)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_dkg_DKGSessionState'(v: Vec ($1_dkg_DKGSessionState), i: int) returns (dst: $1_dkg_DKGSessionState) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_dkg_DKGSessionState'(v: Vec ($1_dkg_DKGSessionState), i: int): $1_dkg_DKGSessionState {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_dkg_DKGSessionState'(m: $Mutation (Vec ($1_dkg_DKGSessionState)), index: int)
returns (dst: $Mutation ($1_dkg_DKGSessionState), m': $Mutation (Vec ($1_dkg_DKGSessionState)))
{
    var v: Vec ($1_dkg_DKGSessionState);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_dkg_DKGSessionState'(v: Vec ($1_dkg_DKGSessionState), i: int): $1_dkg_DKGSessionState {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_dkg_DKGSessionState'(v: Vec ($1_dkg_DKGSessionState)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_dkg_DKGSessionState'(m: $Mutation (Vec ($1_dkg_DKGSessionState)), i: int, j: int) returns (m': $Mutation (Vec ($1_dkg_DKGSessionState)))
{
    var v: Vec ($1_dkg_DKGSessionState);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_dkg_DKGSessionState'(v: Vec ($1_dkg_DKGSessionState), i: int, j: int): Vec ($1_dkg_DKGSessionState) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_dkg_DKGSessionState'(m: $Mutation (Vec ($1_dkg_DKGSessionState)), i: int) returns (e: $1_dkg_DKGSessionState, m': $Mutation (Vec ($1_dkg_DKGSessionState)))
{
    var v: Vec ($1_dkg_DKGSessionState);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_dkg_DKGSessionState'(m: $Mutation (Vec ($1_dkg_DKGSessionState)), i: int) returns (e: $1_dkg_DKGSessionState, m': $Mutation (Vec ($1_dkg_DKGSessionState)))
{
    var len: int;
    var v: Vec ($1_dkg_DKGSessionState);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_dkg_DKGSessionState'(v: Vec ($1_dkg_DKGSessionState), e: $1_dkg_DKGSessionState) returns (res: bool)  {
    res := $ContainsVec'$1_dkg_DKGSessionState'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_dkg_DKGSessionState'(v: Vec ($1_dkg_DKGSessionState), e: $1_dkg_DKGSessionState) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_dkg_DKGSessionState'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_jwks_JWK`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_jwks_JWK''(v1: Vec ($1_jwks_JWK), v2: Vec ($1_jwks_JWK)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_jwks_JWK'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_jwks_JWK''(v: Vec ($1_jwks_JWK), prefix: Vec ($1_jwks_JWK)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_jwks_JWK'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_jwks_JWK''(v: Vec ($1_jwks_JWK), suffix: Vec ($1_jwks_JWK)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_jwks_JWK'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_jwks_JWK''(v: Vec ($1_jwks_JWK)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_jwks_JWK'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_jwks_JWK'(v: Vec ($1_jwks_JWK), e: $1_jwks_JWK): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_jwks_JWK'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_jwks_JWK'(v: Vec ($1_jwks_JWK), e: $1_jwks_JWK): int;
axiom (forall v: Vec ($1_jwks_JWK), e: $1_jwks_JWK:: {$IndexOfVec'$1_jwks_JWK'(v, e)}
    (var i := $IndexOfVec'$1_jwks_JWK'(v, e);
     if (!$ContainsVec'$1_jwks_JWK'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_jwks_JWK'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_jwks_JWK'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_jwks_JWK'(v: Vec ($1_jwks_JWK)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_jwks_JWK'(): Vec ($1_jwks_JWK) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_jwks_JWK'() returns (v: Vec ($1_jwks_JWK)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_jwks_JWK'(): Vec ($1_jwks_JWK) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_jwks_JWK'(v: Vec ($1_jwks_JWK)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_jwks_JWK'(m: $Mutation (Vec ($1_jwks_JWK)), val: $1_jwks_JWK) returns (m': $Mutation (Vec ($1_jwks_JWK))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_jwks_JWK'(v: Vec ($1_jwks_JWK), val: $1_jwks_JWK): Vec ($1_jwks_JWK) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_jwks_JWK'(m: $Mutation (Vec ($1_jwks_JWK))) returns (e: $1_jwks_JWK, m': $Mutation (Vec ($1_jwks_JWK))) {
    var v: Vec ($1_jwks_JWK);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_jwks_JWK'(m: $Mutation (Vec ($1_jwks_JWK)), other: Vec ($1_jwks_JWK)) returns (m': $Mutation (Vec ($1_jwks_JWK))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_jwks_JWK'(m: $Mutation (Vec ($1_jwks_JWK))) returns (m': $Mutation (Vec ($1_jwks_JWK))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_jwks_JWK'(m: $Mutation (Vec ($1_jwks_JWK)), other: Vec ($1_jwks_JWK)) returns (m': $Mutation (Vec ($1_jwks_JWK))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_jwks_JWK'(m: $Mutation (Vec ($1_jwks_JWK)), new_len: int) returns (v: (Vec ($1_jwks_JWK)), m': $Mutation (Vec ($1_jwks_JWK))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_jwks_JWK'(m: $Mutation (Vec ($1_jwks_JWK)), new_len: int) returns (v: (Vec ($1_jwks_JWK)), m': $Mutation (Vec ($1_jwks_JWK))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_jwks_JWK'(m: $Mutation (Vec ($1_jwks_JWK)), left: int, right: int) returns (m': $Mutation (Vec ($1_jwks_JWK))) {
    var left_vec: Vec ($1_jwks_JWK);
    var mid_vec: Vec ($1_jwks_JWK);
    var right_vec: Vec ($1_jwks_JWK);
    var v: Vec ($1_jwks_JWK);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_jwks_JWK'(m: $Mutation (Vec ($1_jwks_JWK)), rot: int) returns (n: int, m': $Mutation (Vec ($1_jwks_JWK))) {
    var v: Vec ($1_jwks_JWK);
    var len: int;
    var left_vec: Vec ($1_jwks_JWK);
    var right_vec: Vec ($1_jwks_JWK);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_jwks_JWK'(m: $Mutation (Vec ($1_jwks_JWK)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_jwks_JWK))) {
    var left_vec: Vec ($1_jwks_JWK);
    var mid_vec: Vec ($1_jwks_JWK);
    var right_vec: Vec ($1_jwks_JWK);
    var mid_left_vec: Vec ($1_jwks_JWK);
    var mid_right_vec: Vec ($1_jwks_JWK);
    var v: Vec ($1_jwks_JWK);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_jwks_JWK'(m: $Mutation (Vec ($1_jwks_JWK)), i: int, e: $1_jwks_JWK) returns (m': $Mutation (Vec ($1_jwks_JWK))) {
    var left_vec: Vec ($1_jwks_JWK);
    var right_vec: Vec ($1_jwks_JWK);
    var v: Vec ($1_jwks_JWK);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_jwks_JWK'(v: Vec ($1_jwks_JWK)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_jwks_JWK'(v: Vec ($1_jwks_JWK)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_jwks_JWK'(v: Vec ($1_jwks_JWK), i: int) returns (dst: $1_jwks_JWK) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_jwks_JWK'(v: Vec ($1_jwks_JWK), i: int): $1_jwks_JWK {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_jwks_JWK'(m: $Mutation (Vec ($1_jwks_JWK)), index: int)
returns (dst: $Mutation ($1_jwks_JWK), m': $Mutation (Vec ($1_jwks_JWK)))
{
    var v: Vec ($1_jwks_JWK);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_jwks_JWK'(v: Vec ($1_jwks_JWK), i: int): $1_jwks_JWK {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_jwks_JWK'(v: Vec ($1_jwks_JWK)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_jwks_JWK'(m: $Mutation (Vec ($1_jwks_JWK)), i: int, j: int) returns (m': $Mutation (Vec ($1_jwks_JWK)))
{
    var v: Vec ($1_jwks_JWK);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_jwks_JWK'(v: Vec ($1_jwks_JWK), i: int, j: int): Vec ($1_jwks_JWK) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_jwks_JWK'(m: $Mutation (Vec ($1_jwks_JWK)), i: int) returns (e: $1_jwks_JWK, m': $Mutation (Vec ($1_jwks_JWK)))
{
    var v: Vec ($1_jwks_JWK);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_jwks_JWK'(m: $Mutation (Vec ($1_jwks_JWK)), i: int) returns (e: $1_jwks_JWK, m': $Mutation (Vec ($1_jwks_JWK)))
{
    var len: int;
    var v: Vec ($1_jwks_JWK);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_jwks_JWK'(v: Vec ($1_jwks_JWK), e: $1_jwks_JWK) returns (res: bool)  {
    res := $ContainsVec'$1_jwks_JWK'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_jwks_JWK'(v: Vec ($1_jwks_JWK), e: $1_jwks_JWK) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_jwks_JWK'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_jwks_OIDCProvider`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_jwks_OIDCProvider''(v1: Vec ($1_jwks_OIDCProvider), v2: Vec ($1_jwks_OIDCProvider)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_jwks_OIDCProvider'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_jwks_OIDCProvider''(v: Vec ($1_jwks_OIDCProvider), prefix: Vec ($1_jwks_OIDCProvider)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_jwks_OIDCProvider'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_jwks_OIDCProvider''(v: Vec ($1_jwks_OIDCProvider), suffix: Vec ($1_jwks_OIDCProvider)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_jwks_OIDCProvider'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_jwks_OIDCProvider''(v: Vec ($1_jwks_OIDCProvider)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_jwks_OIDCProvider'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_jwks_OIDCProvider'(v: Vec ($1_jwks_OIDCProvider), e: $1_jwks_OIDCProvider): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_jwks_OIDCProvider'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_jwks_OIDCProvider'(v: Vec ($1_jwks_OIDCProvider), e: $1_jwks_OIDCProvider): int;
axiom (forall v: Vec ($1_jwks_OIDCProvider), e: $1_jwks_OIDCProvider:: {$IndexOfVec'$1_jwks_OIDCProvider'(v, e)}
    (var i := $IndexOfVec'$1_jwks_OIDCProvider'(v, e);
     if (!$ContainsVec'$1_jwks_OIDCProvider'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_jwks_OIDCProvider'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_jwks_OIDCProvider'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_jwks_OIDCProvider'(v: Vec ($1_jwks_OIDCProvider)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_jwks_OIDCProvider'(): Vec ($1_jwks_OIDCProvider) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_jwks_OIDCProvider'() returns (v: Vec ($1_jwks_OIDCProvider)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_jwks_OIDCProvider'(): Vec ($1_jwks_OIDCProvider) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_jwks_OIDCProvider'(v: Vec ($1_jwks_OIDCProvider)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_jwks_OIDCProvider'(m: $Mutation (Vec ($1_jwks_OIDCProvider)), val: $1_jwks_OIDCProvider) returns (m': $Mutation (Vec ($1_jwks_OIDCProvider))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_jwks_OIDCProvider'(v: Vec ($1_jwks_OIDCProvider), val: $1_jwks_OIDCProvider): Vec ($1_jwks_OIDCProvider) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_jwks_OIDCProvider'(m: $Mutation (Vec ($1_jwks_OIDCProvider))) returns (e: $1_jwks_OIDCProvider, m': $Mutation (Vec ($1_jwks_OIDCProvider))) {
    var v: Vec ($1_jwks_OIDCProvider);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_jwks_OIDCProvider'(m: $Mutation (Vec ($1_jwks_OIDCProvider)), other: Vec ($1_jwks_OIDCProvider)) returns (m': $Mutation (Vec ($1_jwks_OIDCProvider))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_jwks_OIDCProvider'(m: $Mutation (Vec ($1_jwks_OIDCProvider))) returns (m': $Mutation (Vec ($1_jwks_OIDCProvider))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_jwks_OIDCProvider'(m: $Mutation (Vec ($1_jwks_OIDCProvider)), other: Vec ($1_jwks_OIDCProvider)) returns (m': $Mutation (Vec ($1_jwks_OIDCProvider))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_jwks_OIDCProvider'(m: $Mutation (Vec ($1_jwks_OIDCProvider)), new_len: int) returns (v: (Vec ($1_jwks_OIDCProvider)), m': $Mutation (Vec ($1_jwks_OIDCProvider))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_jwks_OIDCProvider'(m: $Mutation (Vec ($1_jwks_OIDCProvider)), new_len: int) returns (v: (Vec ($1_jwks_OIDCProvider)), m': $Mutation (Vec ($1_jwks_OIDCProvider))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_jwks_OIDCProvider'(m: $Mutation (Vec ($1_jwks_OIDCProvider)), left: int, right: int) returns (m': $Mutation (Vec ($1_jwks_OIDCProvider))) {
    var left_vec: Vec ($1_jwks_OIDCProvider);
    var mid_vec: Vec ($1_jwks_OIDCProvider);
    var right_vec: Vec ($1_jwks_OIDCProvider);
    var v: Vec ($1_jwks_OIDCProvider);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_jwks_OIDCProvider'(m: $Mutation (Vec ($1_jwks_OIDCProvider)), rot: int) returns (n: int, m': $Mutation (Vec ($1_jwks_OIDCProvider))) {
    var v: Vec ($1_jwks_OIDCProvider);
    var len: int;
    var left_vec: Vec ($1_jwks_OIDCProvider);
    var right_vec: Vec ($1_jwks_OIDCProvider);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_jwks_OIDCProvider'(m: $Mutation (Vec ($1_jwks_OIDCProvider)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_jwks_OIDCProvider))) {
    var left_vec: Vec ($1_jwks_OIDCProvider);
    var mid_vec: Vec ($1_jwks_OIDCProvider);
    var right_vec: Vec ($1_jwks_OIDCProvider);
    var mid_left_vec: Vec ($1_jwks_OIDCProvider);
    var mid_right_vec: Vec ($1_jwks_OIDCProvider);
    var v: Vec ($1_jwks_OIDCProvider);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_jwks_OIDCProvider'(m: $Mutation (Vec ($1_jwks_OIDCProvider)), i: int, e: $1_jwks_OIDCProvider) returns (m': $Mutation (Vec ($1_jwks_OIDCProvider))) {
    var left_vec: Vec ($1_jwks_OIDCProvider);
    var right_vec: Vec ($1_jwks_OIDCProvider);
    var v: Vec ($1_jwks_OIDCProvider);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_jwks_OIDCProvider'(v: Vec ($1_jwks_OIDCProvider)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_jwks_OIDCProvider'(v: Vec ($1_jwks_OIDCProvider)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_jwks_OIDCProvider'(v: Vec ($1_jwks_OIDCProvider), i: int) returns (dst: $1_jwks_OIDCProvider) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_jwks_OIDCProvider'(v: Vec ($1_jwks_OIDCProvider), i: int): $1_jwks_OIDCProvider {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_jwks_OIDCProvider'(m: $Mutation (Vec ($1_jwks_OIDCProvider)), index: int)
returns (dst: $Mutation ($1_jwks_OIDCProvider), m': $Mutation (Vec ($1_jwks_OIDCProvider)))
{
    var v: Vec ($1_jwks_OIDCProvider);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_jwks_OIDCProvider'(v: Vec ($1_jwks_OIDCProvider), i: int): $1_jwks_OIDCProvider {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_jwks_OIDCProvider'(v: Vec ($1_jwks_OIDCProvider)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_jwks_OIDCProvider'(m: $Mutation (Vec ($1_jwks_OIDCProvider)), i: int, j: int) returns (m': $Mutation (Vec ($1_jwks_OIDCProvider)))
{
    var v: Vec ($1_jwks_OIDCProvider);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_jwks_OIDCProvider'(v: Vec ($1_jwks_OIDCProvider), i: int, j: int): Vec ($1_jwks_OIDCProvider) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_jwks_OIDCProvider'(m: $Mutation (Vec ($1_jwks_OIDCProvider)), i: int) returns (e: $1_jwks_OIDCProvider, m': $Mutation (Vec ($1_jwks_OIDCProvider)))
{
    var v: Vec ($1_jwks_OIDCProvider);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_jwks_OIDCProvider'(m: $Mutation (Vec ($1_jwks_OIDCProvider)), i: int) returns (e: $1_jwks_OIDCProvider, m': $Mutation (Vec ($1_jwks_OIDCProvider)))
{
    var len: int;
    var v: Vec ($1_jwks_OIDCProvider);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_jwks_OIDCProvider'(v: Vec ($1_jwks_OIDCProvider), e: $1_jwks_OIDCProvider) returns (res: bool)  {
    res := $ContainsVec'$1_jwks_OIDCProvider'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_jwks_OIDCProvider'(v: Vec ($1_jwks_OIDCProvider), e: $1_jwks_OIDCProvider) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_jwks_OIDCProvider'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_jwks_Patch`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_jwks_Patch''(v1: Vec ($1_jwks_Patch), v2: Vec ($1_jwks_Patch)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_jwks_Patch'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_jwks_Patch''(v: Vec ($1_jwks_Patch), prefix: Vec ($1_jwks_Patch)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_jwks_Patch'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_jwks_Patch''(v: Vec ($1_jwks_Patch), suffix: Vec ($1_jwks_Patch)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_jwks_Patch'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_jwks_Patch''(v: Vec ($1_jwks_Patch)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_jwks_Patch'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_jwks_Patch'(v: Vec ($1_jwks_Patch), e: $1_jwks_Patch): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_jwks_Patch'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_jwks_Patch'(v: Vec ($1_jwks_Patch), e: $1_jwks_Patch): int;
axiom (forall v: Vec ($1_jwks_Patch), e: $1_jwks_Patch:: {$IndexOfVec'$1_jwks_Patch'(v, e)}
    (var i := $IndexOfVec'$1_jwks_Patch'(v, e);
     if (!$ContainsVec'$1_jwks_Patch'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_jwks_Patch'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_jwks_Patch'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_jwks_Patch'(v: Vec ($1_jwks_Patch)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_jwks_Patch'(): Vec ($1_jwks_Patch) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_jwks_Patch'() returns (v: Vec ($1_jwks_Patch)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_jwks_Patch'(): Vec ($1_jwks_Patch) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_jwks_Patch'(v: Vec ($1_jwks_Patch)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_jwks_Patch'(m: $Mutation (Vec ($1_jwks_Patch)), val: $1_jwks_Patch) returns (m': $Mutation (Vec ($1_jwks_Patch))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_jwks_Patch'(v: Vec ($1_jwks_Patch), val: $1_jwks_Patch): Vec ($1_jwks_Patch) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_jwks_Patch'(m: $Mutation (Vec ($1_jwks_Patch))) returns (e: $1_jwks_Patch, m': $Mutation (Vec ($1_jwks_Patch))) {
    var v: Vec ($1_jwks_Patch);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_jwks_Patch'(m: $Mutation (Vec ($1_jwks_Patch)), other: Vec ($1_jwks_Patch)) returns (m': $Mutation (Vec ($1_jwks_Patch))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_jwks_Patch'(m: $Mutation (Vec ($1_jwks_Patch))) returns (m': $Mutation (Vec ($1_jwks_Patch))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_jwks_Patch'(m: $Mutation (Vec ($1_jwks_Patch)), other: Vec ($1_jwks_Patch)) returns (m': $Mutation (Vec ($1_jwks_Patch))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_jwks_Patch'(m: $Mutation (Vec ($1_jwks_Patch)), new_len: int) returns (v: (Vec ($1_jwks_Patch)), m': $Mutation (Vec ($1_jwks_Patch))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_jwks_Patch'(m: $Mutation (Vec ($1_jwks_Patch)), new_len: int) returns (v: (Vec ($1_jwks_Patch)), m': $Mutation (Vec ($1_jwks_Patch))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_jwks_Patch'(m: $Mutation (Vec ($1_jwks_Patch)), left: int, right: int) returns (m': $Mutation (Vec ($1_jwks_Patch))) {
    var left_vec: Vec ($1_jwks_Patch);
    var mid_vec: Vec ($1_jwks_Patch);
    var right_vec: Vec ($1_jwks_Patch);
    var v: Vec ($1_jwks_Patch);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_jwks_Patch'(m: $Mutation (Vec ($1_jwks_Patch)), rot: int) returns (n: int, m': $Mutation (Vec ($1_jwks_Patch))) {
    var v: Vec ($1_jwks_Patch);
    var len: int;
    var left_vec: Vec ($1_jwks_Patch);
    var right_vec: Vec ($1_jwks_Patch);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_jwks_Patch'(m: $Mutation (Vec ($1_jwks_Patch)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_jwks_Patch))) {
    var left_vec: Vec ($1_jwks_Patch);
    var mid_vec: Vec ($1_jwks_Patch);
    var right_vec: Vec ($1_jwks_Patch);
    var mid_left_vec: Vec ($1_jwks_Patch);
    var mid_right_vec: Vec ($1_jwks_Patch);
    var v: Vec ($1_jwks_Patch);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_jwks_Patch'(m: $Mutation (Vec ($1_jwks_Patch)), i: int, e: $1_jwks_Patch) returns (m': $Mutation (Vec ($1_jwks_Patch))) {
    var left_vec: Vec ($1_jwks_Patch);
    var right_vec: Vec ($1_jwks_Patch);
    var v: Vec ($1_jwks_Patch);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_jwks_Patch'(v: Vec ($1_jwks_Patch)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_jwks_Patch'(v: Vec ($1_jwks_Patch)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_jwks_Patch'(v: Vec ($1_jwks_Patch), i: int) returns (dst: $1_jwks_Patch) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_jwks_Patch'(v: Vec ($1_jwks_Patch), i: int): $1_jwks_Patch {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_jwks_Patch'(m: $Mutation (Vec ($1_jwks_Patch)), index: int)
returns (dst: $Mutation ($1_jwks_Patch), m': $Mutation (Vec ($1_jwks_Patch)))
{
    var v: Vec ($1_jwks_Patch);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_jwks_Patch'(v: Vec ($1_jwks_Patch), i: int): $1_jwks_Patch {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_jwks_Patch'(v: Vec ($1_jwks_Patch)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_jwks_Patch'(m: $Mutation (Vec ($1_jwks_Patch)), i: int, j: int) returns (m': $Mutation (Vec ($1_jwks_Patch)))
{
    var v: Vec ($1_jwks_Patch);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_jwks_Patch'(v: Vec ($1_jwks_Patch), i: int, j: int): Vec ($1_jwks_Patch) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_jwks_Patch'(m: $Mutation (Vec ($1_jwks_Patch)), i: int) returns (e: $1_jwks_Patch, m': $Mutation (Vec ($1_jwks_Patch)))
{
    var v: Vec ($1_jwks_Patch);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_jwks_Patch'(m: $Mutation (Vec ($1_jwks_Patch)), i: int) returns (e: $1_jwks_Patch, m': $Mutation (Vec ($1_jwks_Patch)))
{
    var len: int;
    var v: Vec ($1_jwks_Patch);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_jwks_Patch'(v: Vec ($1_jwks_Patch), e: $1_jwks_Patch) returns (res: bool)  {
    res := $ContainsVec'$1_jwks_Patch'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_jwks_Patch'(v: Vec ($1_jwks_Patch), e: $1_jwks_Patch) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_jwks_Patch'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_jwks_ProviderJWKs`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_jwks_ProviderJWKs''(v1: Vec ($1_jwks_ProviderJWKs), v2: Vec ($1_jwks_ProviderJWKs)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_jwks_ProviderJWKs'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_jwks_ProviderJWKs''(v: Vec ($1_jwks_ProviderJWKs), prefix: Vec ($1_jwks_ProviderJWKs)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_jwks_ProviderJWKs'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_jwks_ProviderJWKs''(v: Vec ($1_jwks_ProviderJWKs), suffix: Vec ($1_jwks_ProviderJWKs)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_jwks_ProviderJWKs'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_jwks_ProviderJWKs''(v: Vec ($1_jwks_ProviderJWKs)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_jwks_ProviderJWKs'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_jwks_ProviderJWKs'(v: Vec ($1_jwks_ProviderJWKs), e: $1_jwks_ProviderJWKs): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_jwks_ProviderJWKs'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_jwks_ProviderJWKs'(v: Vec ($1_jwks_ProviderJWKs), e: $1_jwks_ProviderJWKs): int;
axiom (forall v: Vec ($1_jwks_ProviderJWKs), e: $1_jwks_ProviderJWKs:: {$IndexOfVec'$1_jwks_ProviderJWKs'(v, e)}
    (var i := $IndexOfVec'$1_jwks_ProviderJWKs'(v, e);
     if (!$ContainsVec'$1_jwks_ProviderJWKs'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_jwks_ProviderJWKs'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_jwks_ProviderJWKs'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_jwks_ProviderJWKs'(v: Vec ($1_jwks_ProviderJWKs)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_jwks_ProviderJWKs'(): Vec ($1_jwks_ProviderJWKs) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_jwks_ProviderJWKs'() returns (v: Vec ($1_jwks_ProviderJWKs)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_jwks_ProviderJWKs'(): Vec ($1_jwks_ProviderJWKs) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_jwks_ProviderJWKs'(v: Vec ($1_jwks_ProviderJWKs)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_jwks_ProviderJWKs'(m: $Mutation (Vec ($1_jwks_ProviderJWKs)), val: $1_jwks_ProviderJWKs) returns (m': $Mutation (Vec ($1_jwks_ProviderJWKs))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_jwks_ProviderJWKs'(v: Vec ($1_jwks_ProviderJWKs), val: $1_jwks_ProviderJWKs): Vec ($1_jwks_ProviderJWKs) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_jwks_ProviderJWKs'(m: $Mutation (Vec ($1_jwks_ProviderJWKs))) returns (e: $1_jwks_ProviderJWKs, m': $Mutation (Vec ($1_jwks_ProviderJWKs))) {
    var v: Vec ($1_jwks_ProviderJWKs);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_jwks_ProviderJWKs'(m: $Mutation (Vec ($1_jwks_ProviderJWKs)), other: Vec ($1_jwks_ProviderJWKs)) returns (m': $Mutation (Vec ($1_jwks_ProviderJWKs))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_jwks_ProviderJWKs'(m: $Mutation (Vec ($1_jwks_ProviderJWKs))) returns (m': $Mutation (Vec ($1_jwks_ProviderJWKs))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_jwks_ProviderJWKs'(m: $Mutation (Vec ($1_jwks_ProviderJWKs)), other: Vec ($1_jwks_ProviderJWKs)) returns (m': $Mutation (Vec ($1_jwks_ProviderJWKs))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_jwks_ProviderJWKs'(m: $Mutation (Vec ($1_jwks_ProviderJWKs)), new_len: int) returns (v: (Vec ($1_jwks_ProviderJWKs)), m': $Mutation (Vec ($1_jwks_ProviderJWKs))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_jwks_ProviderJWKs'(m: $Mutation (Vec ($1_jwks_ProviderJWKs)), new_len: int) returns (v: (Vec ($1_jwks_ProviderJWKs)), m': $Mutation (Vec ($1_jwks_ProviderJWKs))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_jwks_ProviderJWKs'(m: $Mutation (Vec ($1_jwks_ProviderJWKs)), left: int, right: int) returns (m': $Mutation (Vec ($1_jwks_ProviderJWKs))) {
    var left_vec: Vec ($1_jwks_ProviderJWKs);
    var mid_vec: Vec ($1_jwks_ProviderJWKs);
    var right_vec: Vec ($1_jwks_ProviderJWKs);
    var v: Vec ($1_jwks_ProviderJWKs);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_jwks_ProviderJWKs'(m: $Mutation (Vec ($1_jwks_ProviderJWKs)), rot: int) returns (n: int, m': $Mutation (Vec ($1_jwks_ProviderJWKs))) {
    var v: Vec ($1_jwks_ProviderJWKs);
    var len: int;
    var left_vec: Vec ($1_jwks_ProviderJWKs);
    var right_vec: Vec ($1_jwks_ProviderJWKs);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_jwks_ProviderJWKs'(m: $Mutation (Vec ($1_jwks_ProviderJWKs)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_jwks_ProviderJWKs))) {
    var left_vec: Vec ($1_jwks_ProviderJWKs);
    var mid_vec: Vec ($1_jwks_ProviderJWKs);
    var right_vec: Vec ($1_jwks_ProviderJWKs);
    var mid_left_vec: Vec ($1_jwks_ProviderJWKs);
    var mid_right_vec: Vec ($1_jwks_ProviderJWKs);
    var v: Vec ($1_jwks_ProviderJWKs);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_jwks_ProviderJWKs'(m: $Mutation (Vec ($1_jwks_ProviderJWKs)), i: int, e: $1_jwks_ProviderJWKs) returns (m': $Mutation (Vec ($1_jwks_ProviderJWKs))) {
    var left_vec: Vec ($1_jwks_ProviderJWKs);
    var right_vec: Vec ($1_jwks_ProviderJWKs);
    var v: Vec ($1_jwks_ProviderJWKs);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_jwks_ProviderJWKs'(v: Vec ($1_jwks_ProviderJWKs)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_jwks_ProviderJWKs'(v: Vec ($1_jwks_ProviderJWKs)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_jwks_ProviderJWKs'(v: Vec ($1_jwks_ProviderJWKs), i: int) returns (dst: $1_jwks_ProviderJWKs) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_jwks_ProviderJWKs'(v: Vec ($1_jwks_ProviderJWKs), i: int): $1_jwks_ProviderJWKs {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_jwks_ProviderJWKs'(m: $Mutation (Vec ($1_jwks_ProviderJWKs)), index: int)
returns (dst: $Mutation ($1_jwks_ProviderJWKs), m': $Mutation (Vec ($1_jwks_ProviderJWKs)))
{
    var v: Vec ($1_jwks_ProviderJWKs);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_jwks_ProviderJWKs'(v: Vec ($1_jwks_ProviderJWKs), i: int): $1_jwks_ProviderJWKs {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_jwks_ProviderJWKs'(v: Vec ($1_jwks_ProviderJWKs)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_jwks_ProviderJWKs'(m: $Mutation (Vec ($1_jwks_ProviderJWKs)), i: int, j: int) returns (m': $Mutation (Vec ($1_jwks_ProviderJWKs)))
{
    var v: Vec ($1_jwks_ProviderJWKs);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_jwks_ProviderJWKs'(v: Vec ($1_jwks_ProviderJWKs), i: int, j: int): Vec ($1_jwks_ProviderJWKs) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_jwks_ProviderJWKs'(m: $Mutation (Vec ($1_jwks_ProviderJWKs)), i: int) returns (e: $1_jwks_ProviderJWKs, m': $Mutation (Vec ($1_jwks_ProviderJWKs)))
{
    var v: Vec ($1_jwks_ProviderJWKs);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_jwks_ProviderJWKs'(m: $Mutation (Vec ($1_jwks_ProviderJWKs)), i: int) returns (e: $1_jwks_ProviderJWKs, m': $Mutation (Vec ($1_jwks_ProviderJWKs)))
{
    var len: int;
    var v: Vec ($1_jwks_ProviderJWKs);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_jwks_ProviderJWKs'(v: Vec ($1_jwks_ProviderJWKs), e: $1_jwks_ProviderJWKs) returns (res: bool)  {
    res := $ContainsVec'$1_jwks_ProviderJWKs'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_jwks_ProviderJWKs'(v: Vec ($1_jwks_ProviderJWKs), e: $1_jwks_ProviderJWKs) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_jwks_ProviderJWKs'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_jwks_SupportedOIDCProviders`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_jwks_SupportedOIDCProviders''(v1: Vec ($1_jwks_SupportedOIDCProviders), v2: Vec ($1_jwks_SupportedOIDCProviders)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_jwks_SupportedOIDCProviders'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_jwks_SupportedOIDCProviders''(v: Vec ($1_jwks_SupportedOIDCProviders), prefix: Vec ($1_jwks_SupportedOIDCProviders)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_jwks_SupportedOIDCProviders'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_jwks_SupportedOIDCProviders''(v: Vec ($1_jwks_SupportedOIDCProviders), suffix: Vec ($1_jwks_SupportedOIDCProviders)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_jwks_SupportedOIDCProviders'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_jwks_SupportedOIDCProviders''(v: Vec ($1_jwks_SupportedOIDCProviders)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_jwks_SupportedOIDCProviders'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_jwks_SupportedOIDCProviders'(v: Vec ($1_jwks_SupportedOIDCProviders), e: $1_jwks_SupportedOIDCProviders): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_jwks_SupportedOIDCProviders'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_jwks_SupportedOIDCProviders'(v: Vec ($1_jwks_SupportedOIDCProviders), e: $1_jwks_SupportedOIDCProviders): int;
axiom (forall v: Vec ($1_jwks_SupportedOIDCProviders), e: $1_jwks_SupportedOIDCProviders:: {$IndexOfVec'$1_jwks_SupportedOIDCProviders'(v, e)}
    (var i := $IndexOfVec'$1_jwks_SupportedOIDCProviders'(v, e);
     if (!$ContainsVec'$1_jwks_SupportedOIDCProviders'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_jwks_SupportedOIDCProviders'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_jwks_SupportedOIDCProviders'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_jwks_SupportedOIDCProviders'(v: Vec ($1_jwks_SupportedOIDCProviders)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_jwks_SupportedOIDCProviders'(): Vec ($1_jwks_SupportedOIDCProviders) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_jwks_SupportedOIDCProviders'() returns (v: Vec ($1_jwks_SupportedOIDCProviders)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_jwks_SupportedOIDCProviders'(): Vec ($1_jwks_SupportedOIDCProviders) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_jwks_SupportedOIDCProviders'(v: Vec ($1_jwks_SupportedOIDCProviders)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_jwks_SupportedOIDCProviders'(m: $Mutation (Vec ($1_jwks_SupportedOIDCProviders)), val: $1_jwks_SupportedOIDCProviders) returns (m': $Mutation (Vec ($1_jwks_SupportedOIDCProviders))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_jwks_SupportedOIDCProviders'(v: Vec ($1_jwks_SupportedOIDCProviders), val: $1_jwks_SupportedOIDCProviders): Vec ($1_jwks_SupportedOIDCProviders) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_jwks_SupportedOIDCProviders'(m: $Mutation (Vec ($1_jwks_SupportedOIDCProviders))) returns (e: $1_jwks_SupportedOIDCProviders, m': $Mutation (Vec ($1_jwks_SupportedOIDCProviders))) {
    var v: Vec ($1_jwks_SupportedOIDCProviders);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_jwks_SupportedOIDCProviders'(m: $Mutation (Vec ($1_jwks_SupportedOIDCProviders)), other: Vec ($1_jwks_SupportedOIDCProviders)) returns (m': $Mutation (Vec ($1_jwks_SupportedOIDCProviders))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_jwks_SupportedOIDCProviders'(m: $Mutation (Vec ($1_jwks_SupportedOIDCProviders))) returns (m': $Mutation (Vec ($1_jwks_SupportedOIDCProviders))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_jwks_SupportedOIDCProviders'(m: $Mutation (Vec ($1_jwks_SupportedOIDCProviders)), other: Vec ($1_jwks_SupportedOIDCProviders)) returns (m': $Mutation (Vec ($1_jwks_SupportedOIDCProviders))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_jwks_SupportedOIDCProviders'(m: $Mutation (Vec ($1_jwks_SupportedOIDCProviders)), new_len: int) returns (v: (Vec ($1_jwks_SupportedOIDCProviders)), m': $Mutation (Vec ($1_jwks_SupportedOIDCProviders))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_jwks_SupportedOIDCProviders'(m: $Mutation (Vec ($1_jwks_SupportedOIDCProviders)), new_len: int) returns (v: (Vec ($1_jwks_SupportedOIDCProviders)), m': $Mutation (Vec ($1_jwks_SupportedOIDCProviders))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_jwks_SupportedOIDCProviders'(m: $Mutation (Vec ($1_jwks_SupportedOIDCProviders)), left: int, right: int) returns (m': $Mutation (Vec ($1_jwks_SupportedOIDCProviders))) {
    var left_vec: Vec ($1_jwks_SupportedOIDCProviders);
    var mid_vec: Vec ($1_jwks_SupportedOIDCProviders);
    var right_vec: Vec ($1_jwks_SupportedOIDCProviders);
    var v: Vec ($1_jwks_SupportedOIDCProviders);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_jwks_SupportedOIDCProviders'(m: $Mutation (Vec ($1_jwks_SupportedOIDCProviders)), rot: int) returns (n: int, m': $Mutation (Vec ($1_jwks_SupportedOIDCProviders))) {
    var v: Vec ($1_jwks_SupportedOIDCProviders);
    var len: int;
    var left_vec: Vec ($1_jwks_SupportedOIDCProviders);
    var right_vec: Vec ($1_jwks_SupportedOIDCProviders);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_jwks_SupportedOIDCProviders'(m: $Mutation (Vec ($1_jwks_SupportedOIDCProviders)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_jwks_SupportedOIDCProviders))) {
    var left_vec: Vec ($1_jwks_SupportedOIDCProviders);
    var mid_vec: Vec ($1_jwks_SupportedOIDCProviders);
    var right_vec: Vec ($1_jwks_SupportedOIDCProviders);
    var mid_left_vec: Vec ($1_jwks_SupportedOIDCProviders);
    var mid_right_vec: Vec ($1_jwks_SupportedOIDCProviders);
    var v: Vec ($1_jwks_SupportedOIDCProviders);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_jwks_SupportedOIDCProviders'(m: $Mutation (Vec ($1_jwks_SupportedOIDCProviders)), i: int, e: $1_jwks_SupportedOIDCProviders) returns (m': $Mutation (Vec ($1_jwks_SupportedOIDCProviders))) {
    var left_vec: Vec ($1_jwks_SupportedOIDCProviders);
    var right_vec: Vec ($1_jwks_SupportedOIDCProviders);
    var v: Vec ($1_jwks_SupportedOIDCProviders);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_jwks_SupportedOIDCProviders'(v: Vec ($1_jwks_SupportedOIDCProviders)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_jwks_SupportedOIDCProviders'(v: Vec ($1_jwks_SupportedOIDCProviders)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_jwks_SupportedOIDCProviders'(v: Vec ($1_jwks_SupportedOIDCProviders), i: int) returns (dst: $1_jwks_SupportedOIDCProviders) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_jwks_SupportedOIDCProviders'(v: Vec ($1_jwks_SupportedOIDCProviders), i: int): $1_jwks_SupportedOIDCProviders {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_jwks_SupportedOIDCProviders'(m: $Mutation (Vec ($1_jwks_SupportedOIDCProviders)), index: int)
returns (dst: $Mutation ($1_jwks_SupportedOIDCProviders), m': $Mutation (Vec ($1_jwks_SupportedOIDCProviders)))
{
    var v: Vec ($1_jwks_SupportedOIDCProviders);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_jwks_SupportedOIDCProviders'(v: Vec ($1_jwks_SupportedOIDCProviders), i: int): $1_jwks_SupportedOIDCProviders {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_jwks_SupportedOIDCProviders'(v: Vec ($1_jwks_SupportedOIDCProviders)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_jwks_SupportedOIDCProviders'(m: $Mutation (Vec ($1_jwks_SupportedOIDCProviders)), i: int, j: int) returns (m': $Mutation (Vec ($1_jwks_SupportedOIDCProviders)))
{
    var v: Vec ($1_jwks_SupportedOIDCProviders);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_jwks_SupportedOIDCProviders'(v: Vec ($1_jwks_SupportedOIDCProviders), i: int, j: int): Vec ($1_jwks_SupportedOIDCProviders) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_jwks_SupportedOIDCProviders'(m: $Mutation (Vec ($1_jwks_SupportedOIDCProviders)), i: int) returns (e: $1_jwks_SupportedOIDCProviders, m': $Mutation (Vec ($1_jwks_SupportedOIDCProviders)))
{
    var v: Vec ($1_jwks_SupportedOIDCProviders);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_jwks_SupportedOIDCProviders'(m: $Mutation (Vec ($1_jwks_SupportedOIDCProviders)), i: int) returns (e: $1_jwks_SupportedOIDCProviders, m': $Mutation (Vec ($1_jwks_SupportedOIDCProviders)))
{
    var len: int;
    var v: Vec ($1_jwks_SupportedOIDCProviders);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_jwks_SupportedOIDCProviders'(v: Vec ($1_jwks_SupportedOIDCProviders), e: $1_jwks_SupportedOIDCProviders) returns (res: bool)  {
    res := $ContainsVec'$1_jwks_SupportedOIDCProviders'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_jwks_SupportedOIDCProviders'(v: Vec ($1_jwks_SupportedOIDCProviders), e: $1_jwks_SupportedOIDCProviders) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_jwks_SupportedOIDCProviders'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_stake_IndividualValidatorPerformance`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_stake_IndividualValidatorPerformance''(v1: Vec ($1_stake_IndividualValidatorPerformance), v2: Vec ($1_stake_IndividualValidatorPerformance)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_stake_IndividualValidatorPerformance'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_stake_IndividualValidatorPerformance''(v: Vec ($1_stake_IndividualValidatorPerformance), prefix: Vec ($1_stake_IndividualValidatorPerformance)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_stake_IndividualValidatorPerformance'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_stake_IndividualValidatorPerformance''(v: Vec ($1_stake_IndividualValidatorPerformance), suffix: Vec ($1_stake_IndividualValidatorPerformance)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_stake_IndividualValidatorPerformance'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_stake_IndividualValidatorPerformance''(v: Vec ($1_stake_IndividualValidatorPerformance)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_stake_IndividualValidatorPerformance'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance), e: $1_stake_IndividualValidatorPerformance): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_stake_IndividualValidatorPerformance'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance), e: $1_stake_IndividualValidatorPerformance): int;
axiom (forall v: Vec ($1_stake_IndividualValidatorPerformance), e: $1_stake_IndividualValidatorPerformance:: {$IndexOfVec'$1_stake_IndividualValidatorPerformance'(v, e)}
    (var i := $IndexOfVec'$1_stake_IndividualValidatorPerformance'(v, e);
     if (!$ContainsVec'$1_stake_IndividualValidatorPerformance'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_stake_IndividualValidatorPerformance'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_stake_IndividualValidatorPerformance'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_stake_IndividualValidatorPerformance'(): Vec ($1_stake_IndividualValidatorPerformance) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_stake_IndividualValidatorPerformance'() returns (v: Vec ($1_stake_IndividualValidatorPerformance)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_stake_IndividualValidatorPerformance'(): Vec ($1_stake_IndividualValidatorPerformance) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), val: $1_stake_IndividualValidatorPerformance) returns (m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance), val: $1_stake_IndividualValidatorPerformance): Vec ($1_stake_IndividualValidatorPerformance) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) returns (e: $1_stake_IndividualValidatorPerformance, m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) {
    var v: Vec ($1_stake_IndividualValidatorPerformance);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), other: Vec ($1_stake_IndividualValidatorPerformance)) returns (m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) returns (m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), other: Vec ($1_stake_IndividualValidatorPerformance)) returns (m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), new_len: int) returns (v: (Vec ($1_stake_IndividualValidatorPerformance)), m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), new_len: int) returns (v: (Vec ($1_stake_IndividualValidatorPerformance)), m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), left: int, right: int) returns (m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) {
    var left_vec: Vec ($1_stake_IndividualValidatorPerformance);
    var mid_vec: Vec ($1_stake_IndividualValidatorPerformance);
    var right_vec: Vec ($1_stake_IndividualValidatorPerformance);
    var v: Vec ($1_stake_IndividualValidatorPerformance);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), rot: int) returns (n: int, m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) {
    var v: Vec ($1_stake_IndividualValidatorPerformance);
    var len: int;
    var left_vec: Vec ($1_stake_IndividualValidatorPerformance);
    var right_vec: Vec ($1_stake_IndividualValidatorPerformance);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) {
    var left_vec: Vec ($1_stake_IndividualValidatorPerformance);
    var mid_vec: Vec ($1_stake_IndividualValidatorPerformance);
    var right_vec: Vec ($1_stake_IndividualValidatorPerformance);
    var mid_left_vec: Vec ($1_stake_IndividualValidatorPerformance);
    var mid_right_vec: Vec ($1_stake_IndividualValidatorPerformance);
    var v: Vec ($1_stake_IndividualValidatorPerformance);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), i: int, e: $1_stake_IndividualValidatorPerformance) returns (m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) {
    var left_vec: Vec ($1_stake_IndividualValidatorPerformance);
    var right_vec: Vec ($1_stake_IndividualValidatorPerformance);
    var v: Vec ($1_stake_IndividualValidatorPerformance);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance), i: int) returns (dst: $1_stake_IndividualValidatorPerformance) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance), i: int): $1_stake_IndividualValidatorPerformance {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), index: int)
returns (dst: $Mutation ($1_stake_IndividualValidatorPerformance), m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance)))
{
    var v: Vec ($1_stake_IndividualValidatorPerformance);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance), i: int): $1_stake_IndividualValidatorPerformance {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), i: int, j: int) returns (m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance)))
{
    var v: Vec ($1_stake_IndividualValidatorPerformance);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance), i: int, j: int): Vec ($1_stake_IndividualValidatorPerformance) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), i: int) returns (e: $1_stake_IndividualValidatorPerformance, m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance)))
{
    var v: Vec ($1_stake_IndividualValidatorPerformance);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), i: int) returns (e: $1_stake_IndividualValidatorPerformance, m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance)))
{
    var len: int;
    var v: Vec ($1_stake_IndividualValidatorPerformance);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance), e: $1_stake_IndividualValidatorPerformance) returns (res: bool)  {
    res := $ContainsVec'$1_stake_IndividualValidatorPerformance'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance), e: $1_stake_IndividualValidatorPerformance) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_stake_IndividualValidatorPerformance'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_stake_ValidatorInfo`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_stake_ValidatorInfo''(v1: Vec ($1_stake_ValidatorInfo), v2: Vec ($1_stake_ValidatorInfo)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_stake_ValidatorInfo'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_stake_ValidatorInfo''(v: Vec ($1_stake_ValidatorInfo), prefix: Vec ($1_stake_ValidatorInfo)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_stake_ValidatorInfo'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_stake_ValidatorInfo''(v: Vec ($1_stake_ValidatorInfo), suffix: Vec ($1_stake_ValidatorInfo)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_stake_ValidatorInfo'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_stake_ValidatorInfo''(v: Vec ($1_stake_ValidatorInfo)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_stake_ValidatorInfo'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo), e: $1_stake_ValidatorInfo): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_stake_ValidatorInfo'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo), e: $1_stake_ValidatorInfo): int;
axiom (forall v: Vec ($1_stake_ValidatorInfo), e: $1_stake_ValidatorInfo:: {$IndexOfVec'$1_stake_ValidatorInfo'(v, e)}
    (var i := $IndexOfVec'$1_stake_ValidatorInfo'(v, e);
     if (!$ContainsVec'$1_stake_ValidatorInfo'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_stake_ValidatorInfo'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_stake_ValidatorInfo'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_stake_ValidatorInfo'(): Vec ($1_stake_ValidatorInfo) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_stake_ValidatorInfo'() returns (v: Vec ($1_stake_ValidatorInfo)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_stake_ValidatorInfo'(): Vec ($1_stake_ValidatorInfo) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), val: $1_stake_ValidatorInfo) returns (m': $Mutation (Vec ($1_stake_ValidatorInfo))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo), val: $1_stake_ValidatorInfo): Vec ($1_stake_ValidatorInfo) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo))) returns (e: $1_stake_ValidatorInfo, m': $Mutation (Vec ($1_stake_ValidatorInfo))) {
    var v: Vec ($1_stake_ValidatorInfo);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), other: Vec ($1_stake_ValidatorInfo)) returns (m': $Mutation (Vec ($1_stake_ValidatorInfo))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo))) returns (m': $Mutation (Vec ($1_stake_ValidatorInfo))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), other: Vec ($1_stake_ValidatorInfo)) returns (m': $Mutation (Vec ($1_stake_ValidatorInfo))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), new_len: int) returns (v: (Vec ($1_stake_ValidatorInfo)), m': $Mutation (Vec ($1_stake_ValidatorInfo))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), new_len: int) returns (v: (Vec ($1_stake_ValidatorInfo)), m': $Mutation (Vec ($1_stake_ValidatorInfo))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), left: int, right: int) returns (m': $Mutation (Vec ($1_stake_ValidatorInfo))) {
    var left_vec: Vec ($1_stake_ValidatorInfo);
    var mid_vec: Vec ($1_stake_ValidatorInfo);
    var right_vec: Vec ($1_stake_ValidatorInfo);
    var v: Vec ($1_stake_ValidatorInfo);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), rot: int) returns (n: int, m': $Mutation (Vec ($1_stake_ValidatorInfo))) {
    var v: Vec ($1_stake_ValidatorInfo);
    var len: int;
    var left_vec: Vec ($1_stake_ValidatorInfo);
    var right_vec: Vec ($1_stake_ValidatorInfo);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_stake_ValidatorInfo))) {
    var left_vec: Vec ($1_stake_ValidatorInfo);
    var mid_vec: Vec ($1_stake_ValidatorInfo);
    var right_vec: Vec ($1_stake_ValidatorInfo);
    var mid_left_vec: Vec ($1_stake_ValidatorInfo);
    var mid_right_vec: Vec ($1_stake_ValidatorInfo);
    var v: Vec ($1_stake_ValidatorInfo);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), i: int, e: $1_stake_ValidatorInfo) returns (m': $Mutation (Vec ($1_stake_ValidatorInfo))) {
    var left_vec: Vec ($1_stake_ValidatorInfo);
    var right_vec: Vec ($1_stake_ValidatorInfo);
    var v: Vec ($1_stake_ValidatorInfo);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo), i: int) returns (dst: $1_stake_ValidatorInfo) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo), i: int): $1_stake_ValidatorInfo {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), index: int)
returns (dst: $Mutation ($1_stake_ValidatorInfo), m': $Mutation (Vec ($1_stake_ValidatorInfo)))
{
    var v: Vec ($1_stake_ValidatorInfo);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo), i: int): $1_stake_ValidatorInfo {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), i: int, j: int) returns (m': $Mutation (Vec ($1_stake_ValidatorInfo)))
{
    var v: Vec ($1_stake_ValidatorInfo);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo), i: int, j: int): Vec ($1_stake_ValidatorInfo) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), i: int) returns (e: $1_stake_ValidatorInfo, m': $Mutation (Vec ($1_stake_ValidatorInfo)))
{
    var v: Vec ($1_stake_ValidatorInfo);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), i: int) returns (e: $1_stake_ValidatorInfo, m': $Mutation (Vec ($1_stake_ValidatorInfo)))
{
    var len: int;
    var v: Vec ($1_stake_ValidatorInfo);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo), e: $1_stake_ValidatorInfo) returns (res: bool)  {
    res := $ContainsVec'$1_stake_ValidatorInfo'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo), e: $1_stake_ValidatorInfo) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_stake_ValidatorInfo'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_storage_gas_Point`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_storage_gas_Point''(v1: Vec ($1_storage_gas_Point), v2: Vec ($1_storage_gas_Point)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_storage_gas_Point'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_storage_gas_Point''(v: Vec ($1_storage_gas_Point), prefix: Vec ($1_storage_gas_Point)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_storage_gas_Point'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_storage_gas_Point''(v: Vec ($1_storage_gas_Point), suffix: Vec ($1_storage_gas_Point)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_storage_gas_Point'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_storage_gas_Point''(v: Vec ($1_storage_gas_Point)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_storage_gas_Point'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_storage_gas_Point'(v: Vec ($1_storage_gas_Point), e: $1_storage_gas_Point): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_storage_gas_Point'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_storage_gas_Point'(v: Vec ($1_storage_gas_Point), e: $1_storage_gas_Point): int;
axiom (forall v: Vec ($1_storage_gas_Point), e: $1_storage_gas_Point:: {$IndexOfVec'$1_storage_gas_Point'(v, e)}
    (var i := $IndexOfVec'$1_storage_gas_Point'(v, e);
     if (!$ContainsVec'$1_storage_gas_Point'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_storage_gas_Point'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_storage_gas_Point'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_storage_gas_Point'(v: Vec ($1_storage_gas_Point)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_storage_gas_Point'(): Vec ($1_storage_gas_Point) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_storage_gas_Point'() returns (v: Vec ($1_storage_gas_Point)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_storage_gas_Point'(): Vec ($1_storage_gas_Point) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_storage_gas_Point'(v: Vec ($1_storage_gas_Point)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_storage_gas_Point'(m: $Mutation (Vec ($1_storage_gas_Point)), val: $1_storage_gas_Point) returns (m': $Mutation (Vec ($1_storage_gas_Point))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_storage_gas_Point'(v: Vec ($1_storage_gas_Point), val: $1_storage_gas_Point): Vec ($1_storage_gas_Point) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_storage_gas_Point'(m: $Mutation (Vec ($1_storage_gas_Point))) returns (e: $1_storage_gas_Point, m': $Mutation (Vec ($1_storage_gas_Point))) {
    var v: Vec ($1_storage_gas_Point);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_storage_gas_Point'(m: $Mutation (Vec ($1_storage_gas_Point)), other: Vec ($1_storage_gas_Point)) returns (m': $Mutation (Vec ($1_storage_gas_Point))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_storage_gas_Point'(m: $Mutation (Vec ($1_storage_gas_Point))) returns (m': $Mutation (Vec ($1_storage_gas_Point))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_storage_gas_Point'(m: $Mutation (Vec ($1_storage_gas_Point)), other: Vec ($1_storage_gas_Point)) returns (m': $Mutation (Vec ($1_storage_gas_Point))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_storage_gas_Point'(m: $Mutation (Vec ($1_storage_gas_Point)), new_len: int) returns (v: (Vec ($1_storage_gas_Point)), m': $Mutation (Vec ($1_storage_gas_Point))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_storage_gas_Point'(m: $Mutation (Vec ($1_storage_gas_Point)), new_len: int) returns (v: (Vec ($1_storage_gas_Point)), m': $Mutation (Vec ($1_storage_gas_Point))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_storage_gas_Point'(m: $Mutation (Vec ($1_storage_gas_Point)), left: int, right: int) returns (m': $Mutation (Vec ($1_storage_gas_Point))) {
    var left_vec: Vec ($1_storage_gas_Point);
    var mid_vec: Vec ($1_storage_gas_Point);
    var right_vec: Vec ($1_storage_gas_Point);
    var v: Vec ($1_storage_gas_Point);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_storage_gas_Point'(m: $Mutation (Vec ($1_storage_gas_Point)), rot: int) returns (n: int, m': $Mutation (Vec ($1_storage_gas_Point))) {
    var v: Vec ($1_storage_gas_Point);
    var len: int;
    var left_vec: Vec ($1_storage_gas_Point);
    var right_vec: Vec ($1_storage_gas_Point);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_storage_gas_Point'(m: $Mutation (Vec ($1_storage_gas_Point)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_storage_gas_Point))) {
    var left_vec: Vec ($1_storage_gas_Point);
    var mid_vec: Vec ($1_storage_gas_Point);
    var right_vec: Vec ($1_storage_gas_Point);
    var mid_left_vec: Vec ($1_storage_gas_Point);
    var mid_right_vec: Vec ($1_storage_gas_Point);
    var v: Vec ($1_storage_gas_Point);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_storage_gas_Point'(m: $Mutation (Vec ($1_storage_gas_Point)), i: int, e: $1_storage_gas_Point) returns (m': $Mutation (Vec ($1_storage_gas_Point))) {
    var left_vec: Vec ($1_storage_gas_Point);
    var right_vec: Vec ($1_storage_gas_Point);
    var v: Vec ($1_storage_gas_Point);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_storage_gas_Point'(v: Vec ($1_storage_gas_Point)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_storage_gas_Point'(v: Vec ($1_storage_gas_Point)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_storage_gas_Point'(v: Vec ($1_storage_gas_Point), i: int) returns (dst: $1_storage_gas_Point) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_storage_gas_Point'(v: Vec ($1_storage_gas_Point), i: int): $1_storage_gas_Point {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_storage_gas_Point'(m: $Mutation (Vec ($1_storage_gas_Point)), index: int)
returns (dst: $Mutation ($1_storage_gas_Point), m': $Mutation (Vec ($1_storage_gas_Point)))
{
    var v: Vec ($1_storage_gas_Point);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_storage_gas_Point'(v: Vec ($1_storage_gas_Point), i: int): $1_storage_gas_Point {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_storage_gas_Point'(v: Vec ($1_storage_gas_Point)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_storage_gas_Point'(m: $Mutation (Vec ($1_storage_gas_Point)), i: int, j: int) returns (m': $Mutation (Vec ($1_storage_gas_Point)))
{
    var v: Vec ($1_storage_gas_Point);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_storage_gas_Point'(v: Vec ($1_storage_gas_Point), i: int, j: int): Vec ($1_storage_gas_Point) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_storage_gas_Point'(m: $Mutation (Vec ($1_storage_gas_Point)), i: int) returns (e: $1_storage_gas_Point, m': $Mutation (Vec ($1_storage_gas_Point)))
{
    var v: Vec ($1_storage_gas_Point);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_storage_gas_Point'(m: $Mutation (Vec ($1_storage_gas_Point)), i: int) returns (e: $1_storage_gas_Point, m': $Mutation (Vec ($1_storage_gas_Point)))
{
    var len: int;
    var v: Vec ($1_storage_gas_Point);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_storage_gas_Point'(v: Vec ($1_storage_gas_Point), e: $1_storage_gas_Point) returns (res: bool)  {
    res := $ContainsVec'$1_storage_gas_Point'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_storage_gas_Point'(v: Vec ($1_storage_gas_Point), e: $1_storage_gas_Point) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_storage_gas_Point'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_string_String`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_string_String''(v1: Vec ($1_string_String), v2: Vec ($1_string_String)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_string_String'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_string_String''(v: Vec ($1_string_String), prefix: Vec ($1_string_String)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_string_String'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_string_String''(v: Vec ($1_string_String), suffix: Vec ($1_string_String)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_string_String'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_string_String''(v: Vec ($1_string_String)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_string_String'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_string_String'(v: Vec ($1_string_String), e: $1_string_String): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_string_String'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_string_String'(v: Vec ($1_string_String), e: $1_string_String): int;
axiom (forall v: Vec ($1_string_String), e: $1_string_String:: {$IndexOfVec'$1_string_String'(v, e)}
    (var i := $IndexOfVec'$1_string_String'(v, e);
     if (!$ContainsVec'$1_string_String'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_string_String'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_string_String'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_string_String'(v: Vec ($1_string_String)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_string_String'(): Vec ($1_string_String) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_string_String'() returns (v: Vec ($1_string_String)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_string_String'(): Vec ($1_string_String) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_string_String'(v: Vec ($1_string_String)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_string_String'(m: $Mutation (Vec ($1_string_String)), val: $1_string_String) returns (m': $Mutation (Vec ($1_string_String))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_string_String'(v: Vec ($1_string_String), val: $1_string_String): Vec ($1_string_String) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_string_String'(m: $Mutation (Vec ($1_string_String))) returns (e: $1_string_String, m': $Mutation (Vec ($1_string_String))) {
    var v: Vec ($1_string_String);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_string_String'(m: $Mutation (Vec ($1_string_String)), other: Vec ($1_string_String)) returns (m': $Mutation (Vec ($1_string_String))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_string_String'(m: $Mutation (Vec ($1_string_String))) returns (m': $Mutation (Vec ($1_string_String))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_string_String'(m: $Mutation (Vec ($1_string_String)), other: Vec ($1_string_String)) returns (m': $Mutation (Vec ($1_string_String))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_string_String'(m: $Mutation (Vec ($1_string_String)), new_len: int) returns (v: (Vec ($1_string_String)), m': $Mutation (Vec ($1_string_String))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_string_String'(m: $Mutation (Vec ($1_string_String)), new_len: int) returns (v: (Vec ($1_string_String)), m': $Mutation (Vec ($1_string_String))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_string_String'(m: $Mutation (Vec ($1_string_String)), left: int, right: int) returns (m': $Mutation (Vec ($1_string_String))) {
    var left_vec: Vec ($1_string_String);
    var mid_vec: Vec ($1_string_String);
    var right_vec: Vec ($1_string_String);
    var v: Vec ($1_string_String);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_string_String'(m: $Mutation (Vec ($1_string_String)), rot: int) returns (n: int, m': $Mutation (Vec ($1_string_String))) {
    var v: Vec ($1_string_String);
    var len: int;
    var left_vec: Vec ($1_string_String);
    var right_vec: Vec ($1_string_String);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_string_String'(m: $Mutation (Vec ($1_string_String)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_string_String))) {
    var left_vec: Vec ($1_string_String);
    var mid_vec: Vec ($1_string_String);
    var right_vec: Vec ($1_string_String);
    var mid_left_vec: Vec ($1_string_String);
    var mid_right_vec: Vec ($1_string_String);
    var v: Vec ($1_string_String);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_string_String'(m: $Mutation (Vec ($1_string_String)), i: int, e: $1_string_String) returns (m': $Mutation (Vec ($1_string_String))) {
    var left_vec: Vec ($1_string_String);
    var right_vec: Vec ($1_string_String);
    var v: Vec ($1_string_String);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_string_String'(v: Vec ($1_string_String)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_string_String'(v: Vec ($1_string_String)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_string_String'(v: Vec ($1_string_String), i: int) returns (dst: $1_string_String) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_string_String'(v: Vec ($1_string_String), i: int): $1_string_String {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_string_String'(m: $Mutation (Vec ($1_string_String)), index: int)
returns (dst: $Mutation ($1_string_String), m': $Mutation (Vec ($1_string_String)))
{
    var v: Vec ($1_string_String);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_string_String'(v: Vec ($1_string_String), i: int): $1_string_String {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_string_String'(v: Vec ($1_string_String)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_string_String'(m: $Mutation (Vec ($1_string_String)), i: int, j: int) returns (m': $Mutation (Vec ($1_string_String)))
{
    var v: Vec ($1_string_String);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_string_String'(v: Vec ($1_string_String), i: int, j: int): Vec ($1_string_String) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_string_String'(m: $Mutation (Vec ($1_string_String)), i: int) returns (e: $1_string_String, m': $Mutation (Vec ($1_string_String)))
{
    var v: Vec ($1_string_String);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_string_String'(m: $Mutation (Vec ($1_string_String)), i: int) returns (e: $1_string_String, m': $Mutation (Vec ($1_string_String)))
{
    var len: int;
    var v: Vec ($1_string_String);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_string_String'(v: Vec ($1_string_String), e: $1_string_String) returns (res: bool)  {
    res := $ContainsVec'$1_string_String'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_string_String'(v: Vec ($1_string_String), e: $1_string_String) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_string_String'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_validator_consensus_info_ValidatorConsensusInfo`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_validator_consensus_info_ValidatorConsensusInfo''(v1: Vec ($1_validator_consensus_info_ValidatorConsensusInfo), v2: Vec ($1_validator_consensus_info_ValidatorConsensusInfo)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_validator_consensus_info_ValidatorConsensusInfo'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_validator_consensus_info_ValidatorConsensusInfo''(v: Vec ($1_validator_consensus_info_ValidatorConsensusInfo), prefix: Vec ($1_validator_consensus_info_ValidatorConsensusInfo)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_validator_consensus_info_ValidatorConsensusInfo'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_validator_consensus_info_ValidatorConsensusInfo''(v: Vec ($1_validator_consensus_info_ValidatorConsensusInfo), suffix: Vec ($1_validator_consensus_info_ValidatorConsensusInfo)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_validator_consensus_info_ValidatorConsensusInfo'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_validator_consensus_info_ValidatorConsensusInfo''(v: Vec ($1_validator_consensus_info_ValidatorConsensusInfo)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_validator_consensus_info_ValidatorConsensusInfo'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_validator_consensus_info_ValidatorConsensusInfo'(v: Vec ($1_validator_consensus_info_ValidatorConsensusInfo), e: $1_validator_consensus_info_ValidatorConsensusInfo): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_validator_consensus_info_ValidatorConsensusInfo'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_validator_consensus_info_ValidatorConsensusInfo'(v: Vec ($1_validator_consensus_info_ValidatorConsensusInfo), e: $1_validator_consensus_info_ValidatorConsensusInfo): int;
axiom (forall v: Vec ($1_validator_consensus_info_ValidatorConsensusInfo), e: $1_validator_consensus_info_ValidatorConsensusInfo:: {$IndexOfVec'$1_validator_consensus_info_ValidatorConsensusInfo'(v, e)}
    (var i := $IndexOfVec'$1_validator_consensus_info_ValidatorConsensusInfo'(v, e);
     if (!$ContainsVec'$1_validator_consensus_info_ValidatorConsensusInfo'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_validator_consensus_info_ValidatorConsensusInfo'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_validator_consensus_info_ValidatorConsensusInfo'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_validator_consensus_info_ValidatorConsensusInfo'(v: Vec ($1_validator_consensus_info_ValidatorConsensusInfo)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_validator_consensus_info_ValidatorConsensusInfo'(): Vec ($1_validator_consensus_info_ValidatorConsensusInfo) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_validator_consensus_info_ValidatorConsensusInfo'() returns (v: Vec ($1_validator_consensus_info_ValidatorConsensusInfo)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_validator_consensus_info_ValidatorConsensusInfo'(): Vec ($1_validator_consensus_info_ValidatorConsensusInfo) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_validator_consensus_info_ValidatorConsensusInfo'(v: Vec ($1_validator_consensus_info_ValidatorConsensusInfo)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_validator_consensus_info_ValidatorConsensusInfo'(m: $Mutation (Vec ($1_validator_consensus_info_ValidatorConsensusInfo)), val: $1_validator_consensus_info_ValidatorConsensusInfo) returns (m': $Mutation (Vec ($1_validator_consensus_info_ValidatorConsensusInfo))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_validator_consensus_info_ValidatorConsensusInfo'(v: Vec ($1_validator_consensus_info_ValidatorConsensusInfo), val: $1_validator_consensus_info_ValidatorConsensusInfo): Vec ($1_validator_consensus_info_ValidatorConsensusInfo) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_validator_consensus_info_ValidatorConsensusInfo'(m: $Mutation (Vec ($1_validator_consensus_info_ValidatorConsensusInfo))) returns (e: $1_validator_consensus_info_ValidatorConsensusInfo, m': $Mutation (Vec ($1_validator_consensus_info_ValidatorConsensusInfo))) {
    var v: Vec ($1_validator_consensus_info_ValidatorConsensusInfo);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_validator_consensus_info_ValidatorConsensusInfo'(m: $Mutation (Vec ($1_validator_consensus_info_ValidatorConsensusInfo)), other: Vec ($1_validator_consensus_info_ValidatorConsensusInfo)) returns (m': $Mutation (Vec ($1_validator_consensus_info_ValidatorConsensusInfo))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_validator_consensus_info_ValidatorConsensusInfo'(m: $Mutation (Vec ($1_validator_consensus_info_ValidatorConsensusInfo))) returns (m': $Mutation (Vec ($1_validator_consensus_info_ValidatorConsensusInfo))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_validator_consensus_info_ValidatorConsensusInfo'(m: $Mutation (Vec ($1_validator_consensus_info_ValidatorConsensusInfo)), other: Vec ($1_validator_consensus_info_ValidatorConsensusInfo)) returns (m': $Mutation (Vec ($1_validator_consensus_info_ValidatorConsensusInfo))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_validator_consensus_info_ValidatorConsensusInfo'(m: $Mutation (Vec ($1_validator_consensus_info_ValidatorConsensusInfo)), new_len: int) returns (v: (Vec ($1_validator_consensus_info_ValidatorConsensusInfo)), m': $Mutation (Vec ($1_validator_consensus_info_ValidatorConsensusInfo))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_validator_consensus_info_ValidatorConsensusInfo'(m: $Mutation (Vec ($1_validator_consensus_info_ValidatorConsensusInfo)), new_len: int) returns (v: (Vec ($1_validator_consensus_info_ValidatorConsensusInfo)), m': $Mutation (Vec ($1_validator_consensus_info_ValidatorConsensusInfo))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_validator_consensus_info_ValidatorConsensusInfo'(m: $Mutation (Vec ($1_validator_consensus_info_ValidatorConsensusInfo)), left: int, right: int) returns (m': $Mutation (Vec ($1_validator_consensus_info_ValidatorConsensusInfo))) {
    var left_vec: Vec ($1_validator_consensus_info_ValidatorConsensusInfo);
    var mid_vec: Vec ($1_validator_consensus_info_ValidatorConsensusInfo);
    var right_vec: Vec ($1_validator_consensus_info_ValidatorConsensusInfo);
    var v: Vec ($1_validator_consensus_info_ValidatorConsensusInfo);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_validator_consensus_info_ValidatorConsensusInfo'(m: $Mutation (Vec ($1_validator_consensus_info_ValidatorConsensusInfo)), rot: int) returns (n: int, m': $Mutation (Vec ($1_validator_consensus_info_ValidatorConsensusInfo))) {
    var v: Vec ($1_validator_consensus_info_ValidatorConsensusInfo);
    var len: int;
    var left_vec: Vec ($1_validator_consensus_info_ValidatorConsensusInfo);
    var right_vec: Vec ($1_validator_consensus_info_ValidatorConsensusInfo);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_validator_consensus_info_ValidatorConsensusInfo'(m: $Mutation (Vec ($1_validator_consensus_info_ValidatorConsensusInfo)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_validator_consensus_info_ValidatorConsensusInfo))) {
    var left_vec: Vec ($1_validator_consensus_info_ValidatorConsensusInfo);
    var mid_vec: Vec ($1_validator_consensus_info_ValidatorConsensusInfo);
    var right_vec: Vec ($1_validator_consensus_info_ValidatorConsensusInfo);
    var mid_left_vec: Vec ($1_validator_consensus_info_ValidatorConsensusInfo);
    var mid_right_vec: Vec ($1_validator_consensus_info_ValidatorConsensusInfo);
    var v: Vec ($1_validator_consensus_info_ValidatorConsensusInfo);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_validator_consensus_info_ValidatorConsensusInfo'(m: $Mutation (Vec ($1_validator_consensus_info_ValidatorConsensusInfo)), i: int, e: $1_validator_consensus_info_ValidatorConsensusInfo) returns (m': $Mutation (Vec ($1_validator_consensus_info_ValidatorConsensusInfo))) {
    var left_vec: Vec ($1_validator_consensus_info_ValidatorConsensusInfo);
    var right_vec: Vec ($1_validator_consensus_info_ValidatorConsensusInfo);
    var v: Vec ($1_validator_consensus_info_ValidatorConsensusInfo);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_validator_consensus_info_ValidatorConsensusInfo'(v: Vec ($1_validator_consensus_info_ValidatorConsensusInfo)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_validator_consensus_info_ValidatorConsensusInfo'(v: Vec ($1_validator_consensus_info_ValidatorConsensusInfo)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_validator_consensus_info_ValidatorConsensusInfo'(v: Vec ($1_validator_consensus_info_ValidatorConsensusInfo), i: int) returns (dst: $1_validator_consensus_info_ValidatorConsensusInfo) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_validator_consensus_info_ValidatorConsensusInfo'(v: Vec ($1_validator_consensus_info_ValidatorConsensusInfo), i: int): $1_validator_consensus_info_ValidatorConsensusInfo {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_validator_consensus_info_ValidatorConsensusInfo'(m: $Mutation (Vec ($1_validator_consensus_info_ValidatorConsensusInfo)), index: int)
returns (dst: $Mutation ($1_validator_consensus_info_ValidatorConsensusInfo), m': $Mutation (Vec ($1_validator_consensus_info_ValidatorConsensusInfo)))
{
    var v: Vec ($1_validator_consensus_info_ValidatorConsensusInfo);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_validator_consensus_info_ValidatorConsensusInfo'(v: Vec ($1_validator_consensus_info_ValidatorConsensusInfo), i: int): $1_validator_consensus_info_ValidatorConsensusInfo {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_validator_consensus_info_ValidatorConsensusInfo'(v: Vec ($1_validator_consensus_info_ValidatorConsensusInfo)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_validator_consensus_info_ValidatorConsensusInfo'(m: $Mutation (Vec ($1_validator_consensus_info_ValidatorConsensusInfo)), i: int, j: int) returns (m': $Mutation (Vec ($1_validator_consensus_info_ValidatorConsensusInfo)))
{
    var v: Vec ($1_validator_consensus_info_ValidatorConsensusInfo);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_validator_consensus_info_ValidatorConsensusInfo'(v: Vec ($1_validator_consensus_info_ValidatorConsensusInfo), i: int, j: int): Vec ($1_validator_consensus_info_ValidatorConsensusInfo) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_validator_consensus_info_ValidatorConsensusInfo'(m: $Mutation (Vec ($1_validator_consensus_info_ValidatorConsensusInfo)), i: int) returns (e: $1_validator_consensus_info_ValidatorConsensusInfo, m': $Mutation (Vec ($1_validator_consensus_info_ValidatorConsensusInfo)))
{
    var v: Vec ($1_validator_consensus_info_ValidatorConsensusInfo);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_validator_consensus_info_ValidatorConsensusInfo'(m: $Mutation (Vec ($1_validator_consensus_info_ValidatorConsensusInfo)), i: int) returns (e: $1_validator_consensus_info_ValidatorConsensusInfo, m': $Mutation (Vec ($1_validator_consensus_info_ValidatorConsensusInfo)))
{
    var len: int;
    var v: Vec ($1_validator_consensus_info_ValidatorConsensusInfo);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_validator_consensus_info_ValidatorConsensusInfo'(v: Vec ($1_validator_consensus_info_ValidatorConsensusInfo), e: $1_validator_consensus_info_ValidatorConsensusInfo) returns (res: bool)  {
    res := $ContainsVec'$1_validator_consensus_info_ValidatorConsensusInfo'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_validator_consensus_info_ValidatorConsensusInfo'(v: Vec ($1_validator_consensus_info_ValidatorConsensusInfo), e: $1_validator_consensus_info_ValidatorConsensusInfo) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_validator_consensus_info_ValidatorConsensusInfo'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `vec'u8'`

// Not inlined. It appears faster this way.
function $IsEqual'vec'vec'u8'''(v1: Vec (Vec (int)), v2: Vec (Vec (int))): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'vec'u8''(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'vec'u8'''(v: Vec (Vec (int)), prefix: Vec (Vec (int))): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'vec'u8''(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'vec'u8'''(v: Vec (Vec (int)), suffix: Vec (Vec (int))): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'vec'u8''(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'vec'u8'''(v: Vec (Vec (int))): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'vec'u8''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'vec'u8''(v: Vec (Vec (int)), e: Vec (int)): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'vec'u8''(ReadVec(v, i), e))
}

function $IndexOfVec'vec'u8''(v: Vec (Vec (int)), e: Vec (int)): int;
axiom (forall v: Vec (Vec (int)), e: Vec (int):: {$IndexOfVec'vec'u8''(v, e)}
    (var i := $IndexOfVec'vec'u8''(v, e);
     if (!$ContainsVec'vec'u8''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'vec'u8''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'vec'u8''(ReadVec(v, j), e))));


function {:inline} $RangeVec'vec'u8''(v: Vec (Vec (int))): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'vec'u8''(): Vec (Vec (int)) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'vec'u8''() returns (v: Vec (Vec (int))) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'vec'u8''(): Vec (Vec (int)) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'vec'u8''(v: Vec (Vec (int))) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'vec'u8''(m: $Mutation (Vec (Vec (int))), val: Vec (int)) returns (m': $Mutation (Vec (Vec (int)))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'vec'u8''(v: Vec (Vec (int)), val: Vec (int)): Vec (Vec (int)) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'vec'u8''(m: $Mutation (Vec (Vec (int)))) returns (e: Vec (int), m': $Mutation (Vec (Vec (int)))) {
    var v: Vec (Vec (int));
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'vec'u8''(m: $Mutation (Vec (Vec (int))), other: Vec (Vec (int))) returns (m': $Mutation (Vec (Vec (int)))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'vec'u8''(m: $Mutation (Vec (Vec (int)))) returns (m': $Mutation (Vec (Vec (int)))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'vec'u8''(m: $Mutation (Vec (Vec (int))), other: Vec (Vec (int))) returns (m': $Mutation (Vec (Vec (int)))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'vec'u8''(m: $Mutation (Vec (Vec (int))), new_len: int) returns (v: (Vec (Vec (int))), m': $Mutation (Vec (Vec (int)))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'vec'u8''(m: $Mutation (Vec (Vec (int))), new_len: int) returns (v: (Vec (Vec (int))), m': $Mutation (Vec (Vec (int)))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'vec'u8''(m: $Mutation (Vec (Vec (int))), left: int, right: int) returns (m': $Mutation (Vec (Vec (int)))) {
    var left_vec: Vec (Vec (int));
    var mid_vec: Vec (Vec (int));
    var right_vec: Vec (Vec (int));
    var v: Vec (Vec (int));
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'vec'u8''(m: $Mutation (Vec (Vec (int))), rot: int) returns (n: int, m': $Mutation (Vec (Vec (int)))) {
    var v: Vec (Vec (int));
    var len: int;
    var left_vec: Vec (Vec (int));
    var right_vec: Vec (Vec (int));
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'vec'u8''(m: $Mutation (Vec (Vec (int))), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (Vec (int)))) {
    var left_vec: Vec (Vec (int));
    var mid_vec: Vec (Vec (int));
    var right_vec: Vec (Vec (int));
    var mid_left_vec: Vec (Vec (int));
    var mid_right_vec: Vec (Vec (int));
    var v: Vec (Vec (int));
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'vec'u8''(m: $Mutation (Vec (Vec (int))), i: int, e: Vec (int)) returns (m': $Mutation (Vec (Vec (int)))) {
    var left_vec: Vec (Vec (int));
    var right_vec: Vec (Vec (int));
    var v: Vec (Vec (int));
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'vec'u8''(v: Vec (Vec (int))) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'vec'u8''(v: Vec (Vec (int))): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'vec'u8''(v: Vec (Vec (int)), i: int) returns (dst: Vec (int)) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'vec'u8''(v: Vec (Vec (int)), i: int): Vec (int) {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'vec'u8''(m: $Mutation (Vec (Vec (int))), index: int)
returns (dst: $Mutation (Vec (int)), m': $Mutation (Vec (Vec (int))))
{
    var v: Vec (Vec (int));
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'vec'u8''(v: Vec (Vec (int)), i: int): Vec (int) {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'vec'u8''(v: Vec (Vec (int))) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'vec'u8''(m: $Mutation (Vec (Vec (int))), i: int, j: int) returns (m': $Mutation (Vec (Vec (int))))
{
    var v: Vec (Vec (int));
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'vec'u8''(v: Vec (Vec (int)), i: int, j: int): Vec (Vec (int)) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'vec'u8''(m: $Mutation (Vec (Vec (int))), i: int) returns (e: Vec (int), m': $Mutation (Vec (Vec (int))))
{
    var v: Vec (Vec (int));

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'vec'u8''(m: $Mutation (Vec (Vec (int))), i: int) returns (e: Vec (int), m': $Mutation (Vec (Vec (int))))
{
    var len: int;
    var v: Vec (Vec (int));

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'vec'u8''(v: Vec (Vec (int)), e: Vec (int)) returns (res: bool)  {
    res := $ContainsVec'vec'u8''(v, e);
}

procedure {:inline 1}
$1_vector_index_of'vec'u8''(v: Vec (Vec (int)), e: Vec (int)) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'vec'u8''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `address`

// Not inlined. It appears faster this way.
function $IsEqual'vec'address''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'address'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'address''(v: Vec (int), prefix: Vec (int)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'address'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'address''(v: Vec (int), suffix: Vec (int)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'address'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'address''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'address'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'address'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'address'(ReadVec(v, i), e))
}

function $IndexOfVec'address'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'address'(v, e)}
    (var i := $IndexOfVec'address'(v, e);
     if (!$ContainsVec'address'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'address'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'address'(ReadVec(v, j), e))));


function {:inline} $RangeVec'address'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'address'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'address'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'address'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'address'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'address'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'address'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'address'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'address'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'address'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'address'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'address'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'address'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'address'(m: $Mutation (Vec (int)), left: int, right: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'address'(m: $Mutation (Vec (int)), rot: int) returns (n: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'address'(m: $Mutation (Vec (int)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var mid_left_vec: Vec (int);
    var mid_right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'address'(m: $Mutation (Vec (int)), i: int, e: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'address'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'address'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'address'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'address'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'address'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'address'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'address'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'address'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'address'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'address'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'address'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'address'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'address'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'address'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'address'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `u64`

// Not inlined. It appears faster this way.
function $IsEqual'vec'u64''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'u64'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'u64''(v: Vec (int), prefix: Vec (int)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'u64'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'u64''(v: Vec (int), suffix: Vec (int)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'u64'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'u64''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'u64'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'u64'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u64'(ReadVec(v, i), e))
}

function $IndexOfVec'u64'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'u64'(v, e)}
    (var i := $IndexOfVec'u64'(v, e);
     if (!$ContainsVec'u64'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u64'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'u64'(ReadVec(v, j), e))));


function {:inline} $RangeVec'u64'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'u64'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'u64'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'u64'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'u64'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'u64'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'u64'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'u64'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'u64'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'u64'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'u64'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'u64'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'u64'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'u64'(m: $Mutation (Vec (int)), left: int, right: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'u64'(m: $Mutation (Vec (int)), rot: int) returns (n: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'u64'(m: $Mutation (Vec (int)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var mid_left_vec: Vec (int);
    var mid_right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'u64'(m: $Mutation (Vec (int)), i: int, e: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'u64'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'u64'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'u64'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'u64'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'u64'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'u64'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'u64'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'u64'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'u64'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'u64'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'u64'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'u64'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'u64'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'u64'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'u64'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `u8`

// Not inlined. It appears faster this way.
function $IsEqual'vec'u8''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'u8'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'u8''(v: Vec (int), prefix: Vec (int)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'u8'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'u8''(v: Vec (int), suffix: Vec (int)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'u8'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'u8''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'u8'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'u8'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e))
}

function $IndexOfVec'u8'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'u8'(v, e)}
    (var i := $IndexOfVec'u8'(v, e);
     if (!$ContainsVec'u8'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'u8'(ReadVec(v, j), e))));


function {:inline} $RangeVec'u8'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'u8'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'u8'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'u8'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'u8'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'u8'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'u8'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'u8'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'u8'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'u8'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'u8'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'u8'(m: $Mutation (Vec (int)), left: int, right: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'u8'(m: $Mutation (Vec (int)), rot: int) returns (n: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'u8'(m: $Mutation (Vec (int)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var mid_left_vec: Vec (int);
    var mid_right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'u8'(m: $Mutation (Vec (int)), i: int, e: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'u8'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'u8'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'u8'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'u8'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'u8'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'u8'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'u8'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'u8'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'u8'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'u8'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'u8'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `vec'bv8'`

// Not inlined. It appears faster this way.
function $IsEqual'vec'vec'bv8'''(v1: Vec (Vec (bv8)), v2: Vec (Vec (bv8))): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'vec'bv8''(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'vec'bv8'''(v: Vec (Vec (bv8)), prefix: Vec (Vec (bv8))): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'vec'bv8''(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'vec'bv8'''(v: Vec (Vec (bv8)), suffix: Vec (Vec (bv8))): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'vec'bv8''(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'vec'bv8'''(v: Vec (Vec (bv8))): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'vec'bv8''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'vec'bv8''(v: Vec (Vec (bv8)), e: Vec (bv8)): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'vec'bv8''(ReadVec(v, i), e))
}

function $IndexOfVec'vec'bv8''(v: Vec (Vec (bv8)), e: Vec (bv8)): int;
axiom (forall v: Vec (Vec (bv8)), e: Vec (bv8):: {$IndexOfVec'vec'bv8''(v, e)}
    (var i := $IndexOfVec'vec'bv8''(v, e);
     if (!$ContainsVec'vec'bv8''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'vec'bv8''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'vec'bv8''(ReadVec(v, j), e))));


function {:inline} $RangeVec'vec'bv8''(v: Vec (Vec (bv8))): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'vec'bv8''(): Vec (Vec (bv8)) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'vec'bv8''() returns (v: Vec (Vec (bv8))) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'vec'bv8''(): Vec (Vec (bv8)) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'vec'bv8''(v: Vec (Vec (bv8))) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'vec'bv8''(m: $Mutation (Vec (Vec (bv8))), val: Vec (bv8)) returns (m': $Mutation (Vec (Vec (bv8)))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'vec'bv8''(v: Vec (Vec (bv8)), val: Vec (bv8)): Vec (Vec (bv8)) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'vec'bv8''(m: $Mutation (Vec (Vec (bv8)))) returns (e: Vec (bv8), m': $Mutation (Vec (Vec (bv8)))) {
    var v: Vec (Vec (bv8));
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'vec'bv8''(m: $Mutation (Vec (Vec (bv8))), other: Vec (Vec (bv8))) returns (m': $Mutation (Vec (Vec (bv8)))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'vec'bv8''(m: $Mutation (Vec (Vec (bv8)))) returns (m': $Mutation (Vec (Vec (bv8)))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'vec'bv8''(m: $Mutation (Vec (Vec (bv8))), other: Vec (Vec (bv8))) returns (m': $Mutation (Vec (Vec (bv8)))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'vec'bv8''(m: $Mutation (Vec (Vec (bv8))), new_len: int) returns (v: (Vec (Vec (bv8))), m': $Mutation (Vec (Vec (bv8)))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'vec'bv8''(m: $Mutation (Vec (Vec (bv8))), new_len: int) returns (v: (Vec (Vec (bv8))), m': $Mutation (Vec (Vec (bv8)))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'vec'bv8''(m: $Mutation (Vec (Vec (bv8))), left: int, right: int) returns (m': $Mutation (Vec (Vec (bv8)))) {
    var left_vec: Vec (Vec (bv8));
    var mid_vec: Vec (Vec (bv8));
    var right_vec: Vec (Vec (bv8));
    var v: Vec (Vec (bv8));
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'vec'bv8''(m: $Mutation (Vec (Vec (bv8))), rot: int) returns (n: int, m': $Mutation (Vec (Vec (bv8)))) {
    var v: Vec (Vec (bv8));
    var len: int;
    var left_vec: Vec (Vec (bv8));
    var right_vec: Vec (Vec (bv8));
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'vec'bv8''(m: $Mutation (Vec (Vec (bv8))), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (Vec (bv8)))) {
    var left_vec: Vec (Vec (bv8));
    var mid_vec: Vec (Vec (bv8));
    var right_vec: Vec (Vec (bv8));
    var mid_left_vec: Vec (Vec (bv8));
    var mid_right_vec: Vec (Vec (bv8));
    var v: Vec (Vec (bv8));
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'vec'bv8''(m: $Mutation (Vec (Vec (bv8))), i: int, e: Vec (bv8)) returns (m': $Mutation (Vec (Vec (bv8)))) {
    var left_vec: Vec (Vec (bv8));
    var right_vec: Vec (Vec (bv8));
    var v: Vec (Vec (bv8));
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'vec'bv8''(v: Vec (Vec (bv8))) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'vec'bv8''(v: Vec (Vec (bv8))): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'vec'bv8''(v: Vec (Vec (bv8)), i: int) returns (dst: Vec (bv8)) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'vec'bv8''(v: Vec (Vec (bv8)), i: int): Vec (bv8) {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'vec'bv8''(m: $Mutation (Vec (Vec (bv8))), index: int)
returns (dst: $Mutation (Vec (bv8)), m': $Mutation (Vec (Vec (bv8))))
{
    var v: Vec (Vec (bv8));
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'vec'bv8''(v: Vec (Vec (bv8)), i: int): Vec (bv8) {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'vec'bv8''(v: Vec (Vec (bv8))) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'vec'bv8''(m: $Mutation (Vec (Vec (bv8))), i: int, j: int) returns (m': $Mutation (Vec (Vec (bv8))))
{
    var v: Vec (Vec (bv8));
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'vec'bv8''(v: Vec (Vec (bv8)), i: int, j: int): Vec (Vec (bv8)) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'vec'bv8''(m: $Mutation (Vec (Vec (bv8))), i: int) returns (e: Vec (bv8), m': $Mutation (Vec (Vec (bv8))))
{
    var v: Vec (Vec (bv8));

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'vec'bv8''(m: $Mutation (Vec (Vec (bv8))), i: int) returns (e: Vec (bv8), m': $Mutation (Vec (Vec (bv8))))
{
    var len: int;
    var v: Vec (Vec (bv8));

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'vec'bv8''(v: Vec (Vec (bv8)), e: Vec (bv8)) returns (res: bool)  {
    res := $ContainsVec'vec'bv8''(v, e);
}

procedure {:inline 1}
$1_vector_index_of'vec'bv8''(v: Vec (Vec (bv8)), e: Vec (bv8)) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'vec'bv8''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `bv64`

// Not inlined. It appears faster this way.
function $IsEqual'vec'bv64''(v1: Vec (bv64), v2: Vec (bv64)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'bv64'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'bv64''(v: Vec (bv64), prefix: Vec (bv64)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'bv64'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'bv64''(v: Vec (bv64), suffix: Vec (bv64)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'bv64'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'bv64''(v: Vec (bv64)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'bv64'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'bv64'(v: Vec (bv64), e: bv64): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv64'(ReadVec(v, i), e))
}

function $IndexOfVec'bv64'(v: Vec (bv64), e: bv64): int;
axiom (forall v: Vec (bv64), e: bv64:: {$IndexOfVec'bv64'(v, e)}
    (var i := $IndexOfVec'bv64'(v, e);
     if (!$ContainsVec'bv64'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv64'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'bv64'(ReadVec(v, j), e))));


function {:inline} $RangeVec'bv64'(v: Vec (bv64)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'bv64'(): Vec (bv64) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'bv64'() returns (v: Vec (bv64)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'bv64'(): Vec (bv64) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'bv64'(v: Vec (bv64)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'bv64'(m: $Mutation (Vec (bv64)), val: bv64) returns (m': $Mutation (Vec (bv64))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'bv64'(v: Vec (bv64), val: bv64): Vec (bv64) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'bv64'(m: $Mutation (Vec (bv64))) returns (e: bv64, m': $Mutation (Vec (bv64))) {
    var v: Vec (bv64);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'bv64'(m: $Mutation (Vec (bv64)), other: Vec (bv64)) returns (m': $Mutation (Vec (bv64))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'bv64'(m: $Mutation (Vec (bv64))) returns (m': $Mutation (Vec (bv64))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'bv64'(m: $Mutation (Vec (bv64)), other: Vec (bv64)) returns (m': $Mutation (Vec (bv64))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'bv64'(m: $Mutation (Vec (bv64)), new_len: int) returns (v: (Vec (bv64)), m': $Mutation (Vec (bv64))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'bv64'(m: $Mutation (Vec (bv64)), new_len: int) returns (v: (Vec (bv64)), m': $Mutation (Vec (bv64))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'bv64'(m: $Mutation (Vec (bv64)), left: int, right: int) returns (m': $Mutation (Vec (bv64))) {
    var left_vec: Vec (bv64);
    var mid_vec: Vec (bv64);
    var right_vec: Vec (bv64);
    var v: Vec (bv64);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'bv64'(m: $Mutation (Vec (bv64)), rot: int) returns (n: int, m': $Mutation (Vec (bv64))) {
    var v: Vec (bv64);
    var len: int;
    var left_vec: Vec (bv64);
    var right_vec: Vec (bv64);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'bv64'(m: $Mutation (Vec (bv64)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (bv64))) {
    var left_vec: Vec (bv64);
    var mid_vec: Vec (bv64);
    var right_vec: Vec (bv64);
    var mid_left_vec: Vec (bv64);
    var mid_right_vec: Vec (bv64);
    var v: Vec (bv64);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'bv64'(m: $Mutation (Vec (bv64)), i: int, e: bv64) returns (m': $Mutation (Vec (bv64))) {
    var left_vec: Vec (bv64);
    var right_vec: Vec (bv64);
    var v: Vec (bv64);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'bv64'(v: Vec (bv64)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'bv64'(v: Vec (bv64)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'bv64'(v: Vec (bv64), i: int) returns (dst: bv64) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'bv64'(v: Vec (bv64), i: int): bv64 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'bv64'(m: $Mutation (Vec (bv64)), index: int)
returns (dst: $Mutation (bv64), m': $Mutation (Vec (bv64)))
{
    var v: Vec (bv64);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'bv64'(v: Vec (bv64), i: int): bv64 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'bv64'(v: Vec (bv64)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'bv64'(m: $Mutation (Vec (bv64)), i: int, j: int) returns (m': $Mutation (Vec (bv64)))
{
    var v: Vec (bv64);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'bv64'(v: Vec (bv64), i: int, j: int): Vec (bv64) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'bv64'(m: $Mutation (Vec (bv64)), i: int) returns (e: bv64, m': $Mutation (Vec (bv64)))
{
    var v: Vec (bv64);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'bv64'(m: $Mutation (Vec (bv64)), i: int) returns (e: bv64, m': $Mutation (Vec (bv64)))
{
    var len: int;
    var v: Vec (bv64);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'bv64'(v: Vec (bv64), e: bv64) returns (res: bool)  {
    res := $ContainsVec'bv64'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'bv64'(v: Vec (bv64), e: bv64) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'bv64'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `bv8`

// Not inlined. It appears faster this way.
function $IsEqual'vec'bv8''(v1: Vec (bv8), v2: Vec (bv8)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'bv8'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'bv8''(v: Vec (bv8), prefix: Vec (bv8)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'bv8'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'bv8''(v: Vec (bv8), suffix: Vec (bv8)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'bv8'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'bv8''(v: Vec (bv8)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'bv8'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'bv8'(v: Vec (bv8), e: bv8): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv8'(ReadVec(v, i), e))
}

function $IndexOfVec'bv8'(v: Vec (bv8), e: bv8): int;
axiom (forall v: Vec (bv8), e: bv8:: {$IndexOfVec'bv8'(v, e)}
    (var i := $IndexOfVec'bv8'(v, e);
     if (!$ContainsVec'bv8'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv8'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'bv8'(ReadVec(v, j), e))));


function {:inline} $RangeVec'bv8'(v: Vec (bv8)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'bv8'(): Vec (bv8) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'bv8'() returns (v: Vec (bv8)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'bv8'(): Vec (bv8) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'bv8'(v: Vec (bv8)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'bv8'(m: $Mutation (Vec (bv8)), val: bv8) returns (m': $Mutation (Vec (bv8))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'bv8'(v: Vec (bv8), val: bv8): Vec (bv8) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'bv8'(m: $Mutation (Vec (bv8))) returns (e: bv8, m': $Mutation (Vec (bv8))) {
    var v: Vec (bv8);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'bv8'(m: $Mutation (Vec (bv8)), other: Vec (bv8)) returns (m': $Mutation (Vec (bv8))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'bv8'(m: $Mutation (Vec (bv8))) returns (m': $Mutation (Vec (bv8))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'bv8'(m: $Mutation (Vec (bv8)), other: Vec (bv8)) returns (m': $Mutation (Vec (bv8))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'bv8'(m: $Mutation (Vec (bv8)), new_len: int) returns (v: (Vec (bv8)), m': $Mutation (Vec (bv8))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'bv8'(m: $Mutation (Vec (bv8)), new_len: int) returns (v: (Vec (bv8)), m': $Mutation (Vec (bv8))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'bv8'(m: $Mutation (Vec (bv8)), left: int, right: int) returns (m': $Mutation (Vec (bv8))) {
    var left_vec: Vec (bv8);
    var mid_vec: Vec (bv8);
    var right_vec: Vec (bv8);
    var v: Vec (bv8);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'bv8'(m: $Mutation (Vec (bv8)), rot: int) returns (n: int, m': $Mutation (Vec (bv8))) {
    var v: Vec (bv8);
    var len: int;
    var left_vec: Vec (bv8);
    var right_vec: Vec (bv8);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'bv8'(m: $Mutation (Vec (bv8)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (bv8))) {
    var left_vec: Vec (bv8);
    var mid_vec: Vec (bv8);
    var right_vec: Vec (bv8);
    var mid_left_vec: Vec (bv8);
    var mid_right_vec: Vec (bv8);
    var v: Vec (bv8);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'bv8'(m: $Mutation (Vec (bv8)), i: int, e: bv8) returns (m': $Mutation (Vec (bv8))) {
    var left_vec: Vec (bv8);
    var right_vec: Vec (bv8);
    var v: Vec (bv8);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'bv8'(v: Vec (bv8)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'bv8'(v: Vec (bv8)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'bv8'(v: Vec (bv8), i: int) returns (dst: bv8) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'bv8'(v: Vec (bv8), i: int): bv8 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'bv8'(m: $Mutation (Vec (bv8)), index: int)
returns (dst: $Mutation (bv8), m': $Mutation (Vec (bv8)))
{
    var v: Vec (bv8);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'bv8'(v: Vec (bv8), i: int): bv8 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'bv8'(v: Vec (bv8)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'bv8'(m: $Mutation (Vec (bv8)), i: int, j: int) returns (m': $Mutation (Vec (bv8)))
{
    var v: Vec (bv8);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'bv8'(v: Vec (bv8), i: int, j: int): Vec (bv8) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'bv8'(m: $Mutation (Vec (bv8)), i: int) returns (e: bv8, m': $Mutation (Vec (bv8)))
{
    var v: Vec (bv8);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'bv8'(m: $Mutation (Vec (bv8)), i: int) returns (e: bv8, m': $Mutation (Vec (bv8)))
{
    var len: int;
    var v: Vec (bv8);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'bv8'(v: Vec (bv8), e: bv8) returns (res: bool)  {
    res := $ContainsVec'bv8'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'bv8'(v: Vec (bv8), e: bv8) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'bv8'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ==================================================================================
// Native Table

// ----------------------------------------------------------------------------------
// Native Table key encoding for type `u32`

function $EncodeKey'u32'(k: int): int;
axiom (
  forall k1, k2: int :: {$EncodeKey'u32'(k1), $EncodeKey'u32'(k2)}
    $IsEqual'u32'(k1, k2) <==> $EncodeKey'u32'(k1) == $EncodeKey'u32'(k2)
);


// ----------------------------------------------------------------------------------
// Native Table key encoding for type `$1_string_String`

function $EncodeKey'$1_string_String'(k: $1_string_String): int;
axiom (
  forall k1, k2: $1_string_String :: {$EncodeKey'$1_string_String'(k1), $EncodeKey'$1_string_String'(k2)}
    $IsEqual'$1_string_String'(k1, k2) <==> $EncodeKey'$1_string_String'(k1) == $EncodeKey'$1_string_String'(k2)
);


// ----------------------------------------------------------------------------------
// Native Table implementation for type `(u32,$1_block_NewBlockEvent)`

function $IsEqual'$1_table_with_length_TableWithLength'u32_$1_block_NewBlockEvent''(t1: Table int ($1_block_NewBlockEvent), t2: Table int ($1_block_NewBlockEvent)): bool {
    LenTable(t1) == LenTable(t2) &&
    (forall k: int :: ContainsTable(t1, k) <==> ContainsTable(t2, k)) &&
    (forall k: int :: ContainsTable(t1, k) ==> GetTable(t1, k) == GetTable(t2, k)) &&
    (forall k: int :: ContainsTable(t2, k) ==> GetTable(t1, k) == GetTable(t2, k))
}

// Not inlined.
function $IsValid'$1_table_with_length_TableWithLength'u32_$1_block_NewBlockEvent''(t: Table int ($1_block_NewBlockEvent)): bool {
    $IsValid'u64'(LenTable(t)) &&
    (forall i: int:: ContainsTable(t, i) ==> $IsValid'$1_block_NewBlockEvent'(GetTable(t, i)))
}
procedure {:inline 2} $1_table_with_length_new'u32_$1_block_NewBlockEvent'() returns (v: Table int ($1_block_NewBlockEvent)) {
    v := EmptyTable();
}
procedure {:inline 2} $1_table_with_length_destroy_empty'u32_$1_block_NewBlockEvent'(t: Table int ($1_block_NewBlockEvent)) {
    if (LenTable(t) != 0) {
        call $Abort($StdError(1/*INVALID_STATE*/, 102/*ENOT_EMPTY*/));
    }
}
procedure {:inline 2} $1_table_with_length_length'u32_$1_block_NewBlockEvent'(t: (Table int ($1_block_NewBlockEvent))) returns (l: int) {
    l := LenTable(t);
}
procedure {:inline 2} $1_table_with_length_empty'u32_$1_block_NewBlockEvent'(t: (Table int ($1_block_NewBlockEvent))) returns (r: bool) {
    r := LenTable(t) == 0;
}
procedure {:inline 2} $1_table_with_length_contains'u32_$1_block_NewBlockEvent'(t: (Table int ($1_block_NewBlockEvent)), k: int) returns (r: bool) {
    r := ContainsTable(t, $EncodeKey'u32'(k));
}
procedure {:inline 2} $1_table_with_length_add'u32_$1_block_NewBlockEvent'(m: $Mutation (Table int ($1_block_NewBlockEvent)), k: int, v: $1_block_NewBlockEvent) returns (m': $Mutation(Table int ($1_block_NewBlockEvent))) {
    var enc_k: int;
    var t: Table int ($1_block_NewBlockEvent);
    enc_k := $EncodeKey'u32'(k);
    t := $Dereference(m);
    if (ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 100/*EALREADY_EXISTS*/));
    } else {
        m' := $UpdateMutation(m, AddTable(t, enc_k, v));
    }
}
procedure {:inline 2} $1_table_with_length_upsert'u32_$1_block_NewBlockEvent'(m: $Mutation (Table int ($1_block_NewBlockEvent)), k: int, v: $1_block_NewBlockEvent) returns (m': $Mutation(Table int ($1_block_NewBlockEvent))) {
    var enc_k: int;
    var t: Table int ($1_block_NewBlockEvent);
    enc_k := $EncodeKey'u32'(k);
    t := $Dereference(m);
    if (ContainsTable(t, enc_k)) {
        m' := $UpdateMutation(m, UpdateTable(t, enc_k, v));
    } else {
        m' := $UpdateMutation(m, AddTable(t, enc_k, v));
    }
}
procedure {:inline 2} $1_table_with_length_remove'u32_$1_block_NewBlockEvent'(m: $Mutation (Table int ($1_block_NewBlockEvent)), k: int)
returns (v: $1_block_NewBlockEvent, m': $Mutation(Table int ($1_block_NewBlockEvent))) {
    var enc_k: int;
    var t: Table int ($1_block_NewBlockEvent);
    enc_k := $EncodeKey'u32'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        v := GetTable(t, enc_k);
        m' := $UpdateMutation(m, RemoveTable(t, enc_k));
    }
}
procedure {:inline 2} $1_table_with_length_borrow'u32_$1_block_NewBlockEvent'(t: Table int ($1_block_NewBlockEvent), k: int) returns (v: $1_block_NewBlockEvent) {
    var enc_k: int;
    enc_k := $EncodeKey'u32'(k);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        v := GetTable(t, $EncodeKey'u32'(k));
    }
}
procedure {:inline 2} $1_table_with_length_borrow_mut'u32_$1_block_NewBlockEvent'(m: $Mutation (Table int ($1_block_NewBlockEvent)), k: int)
returns (dst: $Mutation ($1_block_NewBlockEvent), m': $Mutation (Table int ($1_block_NewBlockEvent))) {
    var enc_k: int;
    var t: Table int ($1_block_NewBlockEvent);
    enc_k := $EncodeKey'u32'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        dst := $Mutation(m->l, ExtendVec(m->p, enc_k), GetTable(t, enc_k));
        m' := m;
    }
}
procedure {:inline 2} $1_table_with_length_borrow_mut_with_default'u32_$1_block_NewBlockEvent'(m: $Mutation (Table int ($1_block_NewBlockEvent)), k: int, default: $1_block_NewBlockEvent)
returns (dst: $Mutation ($1_block_NewBlockEvent), m': $Mutation (Table int ($1_block_NewBlockEvent))) {
    var enc_k: int;
    var t: Table int ($1_block_NewBlockEvent);
    var t': Table int ($1_block_NewBlockEvent);
    enc_k := $EncodeKey'u32'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        m' := $UpdateMutation(m, AddTable(t, enc_k, default));
        t' := $Dereference(m');
        dst := $Mutation(m'->l, ExtendVec(m'->p, enc_k), GetTable(t', enc_k));
    } else {
        dst := $Mutation(m->l, ExtendVec(m->p, enc_k), GetTable(t, enc_k));
        m' := m;
    }
}
function {:inline} $1_table_with_length_spec_len'u32_$1_block_NewBlockEvent'(t: (Table int ($1_block_NewBlockEvent))): int {
    LenTable(t)
}
function {:inline} $1_table_with_length_spec_contains'u32_$1_block_NewBlockEvent'(t: (Table int ($1_block_NewBlockEvent)), k: int): bool {
    ContainsTable(t, $EncodeKey'u32'(k))
}
function {:inline} $1_table_with_length_spec_set'u32_$1_block_NewBlockEvent'(t: Table int ($1_block_NewBlockEvent), k: int, v: $1_block_NewBlockEvent): Table int ($1_block_NewBlockEvent) {
    (var enc_k := $EncodeKey'u32'(k);
    if (ContainsTable(t, enc_k)) then
        UpdateTable(t, enc_k, v)
    else
        AddTable(t, enc_k, v))
}
function {:inline} $1_table_with_length_spec_remove'u32_$1_block_NewBlockEvent'(t: Table int ($1_block_NewBlockEvent), k: int): Table int ($1_block_NewBlockEvent) {
    RemoveTable(t, $EncodeKey'u32'(k))
}
function {:inline} $1_table_with_length_spec_get'u32_$1_block_NewBlockEvent'(t: Table int ($1_block_NewBlockEvent), k: int): $1_block_NewBlockEvent {
    GetTable(t, $EncodeKey'u32'(k))
}



// ----------------------------------------------------------------------------------
// Native Table implementation for type `($1_string_String,$1_any_Any)`

function $IsEqual'$1_simple_map_SimpleMap'$1_string_String_$1_any_Any''(t1: Table int ($1_any_Any), t2: Table int ($1_any_Any)): bool {
    LenTable(t1) == LenTable(t2) &&
    (forall k: int :: ContainsTable(t1, k) <==> ContainsTable(t2, k)) &&
    (forall k: int :: ContainsTable(t1, k) ==> GetTable(t1, k) == GetTable(t2, k)) &&
    (forall k: int :: ContainsTable(t2, k) ==> GetTable(t1, k) == GetTable(t2, k))
}

// Not inlined.
function $IsValid'$1_simple_map_SimpleMap'$1_string_String_$1_any_Any''(t: Table int ($1_any_Any)): bool {
    $IsValid'u64'(LenTable(t)) &&
    (forall i: int:: ContainsTable(t, i) ==> $IsValid'$1_any_Any'(GetTable(t, i)))
}
procedure {:inline 2} $1_simple_map_create'$1_string_String_$1_any_Any'() returns (v: Table int ($1_any_Any)) {
    v := EmptyTable();
}
procedure {:inline 2} $1_simple_map_destroy_empty'$1_string_String_$1_any_Any'(t: Table int ($1_any_Any)) {
    if (LenTable(t) != 0) {
        call $Abort($StdError(1/*INVALID_STATE*/, 102/*ENOT_EMPTY*/));
    }
}
procedure {:inline 2} $1_simple_map_length'$1_string_String_$1_any_Any'(t: (Table int ($1_any_Any))) returns (l: int) {
    l := LenTable(t);
}
procedure {:inline 2} $1_simple_map_contains_key'$1_string_String_$1_any_Any'(t: (Table int ($1_any_Any)), k: $1_string_String) returns (r: bool) {
    r := ContainsTable(t, $EncodeKey'$1_string_String'(k));
}
procedure {:inline 2} $1_simple_map_add'$1_string_String_$1_any_Any'(m: $Mutation (Table int ($1_any_Any)), k: $1_string_String, v: $1_any_Any) returns (m': $Mutation(Table int ($1_any_Any))) {
    var enc_k: int;
    var t: Table int ($1_any_Any);
    enc_k := $EncodeKey'$1_string_String'(k);
    t := $Dereference(m);
    if (ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 100/*EALREADY_EXISTS*/));
    } else {
        m' := $UpdateMutation(m, AddTable(t, enc_k, v));
    }
}
procedure {:inline 2} $1_simple_map_remove'$1_string_String_$1_any_Any'(m: $Mutation (Table int ($1_any_Any)), k: $1_string_String)
returns (k': $1_string_String, v: $1_any_Any, m': $Mutation(Table int ($1_any_Any))) {
    var enc_k: int;
    var t: Table int ($1_any_Any);
    enc_k := $EncodeKey'$1_string_String'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        k' := k;
        v := GetTable(t, enc_k);
        m' := $UpdateMutation(m, RemoveTable(t, enc_k));
    }
}
procedure {:inline 2} $1_simple_map_borrow'$1_string_String_$1_any_Any'(t: Table int ($1_any_Any), k: $1_string_String) returns (v: $1_any_Any) {
    var enc_k: int;
    enc_k := $EncodeKey'$1_string_String'(k);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        v := GetTable(t, $EncodeKey'$1_string_String'(k));
    }
}
procedure {:inline 2} $1_simple_map_borrow_mut'$1_string_String_$1_any_Any'(m: $Mutation (Table int ($1_any_Any)), k: $1_string_String)
returns (dst: $Mutation ($1_any_Any), m': $Mutation (Table int ($1_any_Any))) {
    var enc_k: int;
    var t: Table int ($1_any_Any);
    enc_k := $EncodeKey'$1_string_String'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        dst := $Mutation(m->l, ExtendVec(m->p, enc_k), GetTable(t, enc_k));
        m' := m;
    }
}
function {:inline} $1_simple_map_spec_len'$1_string_String_$1_any_Any'(t: (Table int ($1_any_Any))): int {
    LenTable(t)
}
function {:inline} $1_simple_map_spec_contains_key'$1_string_String_$1_any_Any'(t: (Table int ($1_any_Any)), k: $1_string_String): bool {
    ContainsTable(t, $EncodeKey'$1_string_String'(k))
}
function {:inline} $1_simple_map_spec_set'$1_string_String_$1_any_Any'(t: Table int ($1_any_Any), k: $1_string_String, v: $1_any_Any): Table int ($1_any_Any) {
    (var enc_k := $EncodeKey'$1_string_String'(k);
    if (ContainsTable(t, enc_k)) then
        UpdateTable(t, enc_k, v)
    else
        AddTable(t, enc_k, v))
}
function {:inline} $1_simple_map_spec_remove'$1_string_String_$1_any_Any'(t: Table int ($1_any_Any), k: $1_string_String): Table int ($1_any_Any) {
    RemoveTable(t, $EncodeKey'$1_string_String'(k))
}
function {:inline} $1_simple_map_spec_get'$1_string_String_$1_any_Any'(t: Table int ($1_any_Any), k: $1_string_String): $1_any_Any {
    GetTable(t, $EncodeKey'$1_string_String'(k))
}



// ==================================================================================
// Native Hash

// Hash is modeled as an otherwise uninterpreted injection.
// In truth, it is not an injection since the domain has greater cardinality
// (arbitrary length vectors) than the co-domain (vectors of length 32).  But it is
// common to assume in code there are no hash collisions in practice.  Fortunately,
// Boogie is not smart enough to recognized that there is an inconsistency.
// FIXME: If we were using a reliable extensional theory of arrays, and if we could use ==
// instead of $IsEqual, we might be able to avoid so many quantified formulas by
// using a sha2_inverse function in the ensures conditions of Hash_sha2_256 to
// assert that sha2/3 are injections without using global quantified axioms.


function $1_hash_sha2(val: Vec int): Vec int;

// This says that Hash_sha2 is bijective.
axiom (forall v1,v2: Vec int :: {$1_hash_sha2(v1), $1_hash_sha2(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_hash_sha2(v1), $1_hash_sha2(v2)));

procedure $1_hash_sha2_256(val: Vec int) returns (res: Vec int);
ensures res == $1_hash_sha2(val);     // returns Hash_sha2 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_hash_$sha2_256(val: Vec int): Vec int {
    $1_hash_sha2(val)
}

// similarly for Hash_sha3
function $1_hash_sha3(val: Vec int): Vec int;

axiom (forall v1,v2: Vec int :: {$1_hash_sha3(v1), $1_hash_sha3(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_hash_sha3(v1), $1_hash_sha3(v2)));

procedure $1_hash_sha3_256(val: Vec int) returns (res: Vec int);
ensures res == $1_hash_sha3(val);     // returns Hash_sha3 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_hash_$sha3_256(val: Vec int): Vec int {
    $1_hash_sha3(val)
}

// ==================================================================================
// Native string

// TODO: correct implementation of strings

procedure {:inline 1} $1_string_internal_check_utf8(x: Vec int) returns (r: bool) {
}

procedure {:inline 1} $1_string_internal_sub_string(x: Vec int, i: int, j: int) returns (r: Vec int) {
}

procedure {:inline 1} $1_string_internal_index_of(x: Vec int, y: Vec int) returns (r: int) {
}

procedure {:inline 1} $1_string_internal_is_char_boundary(x: Vec int, i: int) returns (r: bool) {
}




// ==================================================================================
// Native diem_account

procedure {:inline 1} $1_DiemAccount_create_signer(
  addr: int
) returns (signer: $signer) {
    // A signer is currently identical to an address.
    signer := $signer(addr);
}

procedure {:inline 1} $1_DiemAccount_destroy_signer(
  signer: $signer
) {
  return;
}

// ==================================================================================
// Native account

procedure {:inline 1} $1_Account_create_signer(
  addr: int
) returns (signer: $signer) {
    // A signer is currently identical to an address.
    signer := $signer(addr);
}

// ==================================================================================
// Native Signer

datatype $signer {
    $signer($addr: int),
    $permissioned_signer($addr: int, $permission_addr: int)
}

function {:inline} $IsValid'signer'(s: $signer): bool {
    if s is $signer then
        $IsValid'address'(s->$addr)
    else
        $IsValid'address'(s->$addr) &&
        $IsValid'address'(s->$permission_addr)
}

function {:inline} $IsEqual'signer'(s1: $signer, s2: $signer): bool {
    if s1 is $signer && s2 is $signer then
        s1 == s2
    else if s1 is $permissioned_signer && s2 is $permissioned_signer then
        s1 == s2
    else
        false
}

procedure {:inline 1} $1_signer_borrow_address(signer: $signer) returns (res: int) {
    res := signer->$addr;
}

function {:inline} $1_signer_$borrow_address(signer: $signer): int
{
    signer->$addr
}

function $1_signer_is_txn_signer(s: $signer): bool;

function $1_signer_is_txn_signer_addr(a: int): bool;


// ==================================================================================
// Native signature

// Signature related functionality is handled via uninterpreted functions. This is sound
// currently because we verify every code path based on signature verification with
// an arbitrary interpretation.

function $1_Signature_$ed25519_validate_pubkey(public_key: Vec int): bool;
function $1_Signature_$ed25519_verify(signature: Vec int, public_key: Vec int, message: Vec int): bool;

// Needed because we do not have extensional equality:
axiom (forall k1, k2: Vec int ::
    {$1_Signature_$ed25519_validate_pubkey(k1), $1_Signature_$ed25519_validate_pubkey(k2)}
    $IsEqual'vec'u8''(k1, k2) ==> $1_Signature_$ed25519_validate_pubkey(k1) == $1_Signature_$ed25519_validate_pubkey(k2));
axiom (forall s1, s2, k1, k2, m1, m2: Vec int ::
    {$1_Signature_$ed25519_verify(s1, k1, m1), $1_Signature_$ed25519_verify(s2, k2, m2)}
    $IsEqual'vec'u8''(s1, s2) && $IsEqual'vec'u8''(k1, k2) && $IsEqual'vec'u8''(m1, m2)
    ==> $1_Signature_$ed25519_verify(s1, k1, m1) == $1_Signature_$ed25519_verify(s2, k2, m2));


procedure {:inline 1} $1_Signature_ed25519_validate_pubkey(public_key: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_validate_pubkey(public_key);
}

procedure {:inline 1} $1_Signature_ed25519_verify(
        signature: Vec int, public_key: Vec int, message: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_verify(signature, public_key, message);
}


// ==================================================================================
// Native bcs::serialize

// ----------------------------------------------------------------------------------
// Native BCS implementation for element type `$1_jwks_FederatedJWKs`

// Serialize is modeled as an uninterpreted function, with an additional
// axiom to say it's an injection.

function $1_bcs_serialize'$1_jwks_FederatedJWKs'(v: $1_jwks_FederatedJWKs): Vec int;

axiom (forall v1, v2: $1_jwks_FederatedJWKs :: {$1_bcs_serialize'$1_jwks_FederatedJWKs'(v1), $1_bcs_serialize'$1_jwks_FederatedJWKs'(v2)}
   $IsEqual'$1_jwks_FederatedJWKs'(v1, v2) <==> $IsEqual'vec'u8''($1_bcs_serialize'$1_jwks_FederatedJWKs'(v1), $1_bcs_serialize'$1_jwks_FederatedJWKs'(v2)));

// This says that serialize returns a non-empty vec<u8>

axiom (forall v: $1_jwks_FederatedJWKs :: {$1_bcs_serialize'$1_jwks_FederatedJWKs'(v)}
     ( var r := $1_bcs_serialize'$1_jwks_FederatedJWKs'(v); $IsValid'vec'u8''(r) && LenVec(r) > 0 ));


procedure $1_bcs_to_bytes'$1_jwks_FederatedJWKs'(v: $1_jwks_FederatedJWKs) returns (res: Vec int);
ensures res == $1_bcs_serialize'$1_jwks_FederatedJWKs'(v);

function {:inline} $1_bcs_$to_bytes'$1_jwks_FederatedJWKs'(v: $1_jwks_FederatedJWKs): Vec int {
    $1_bcs_serialize'$1_jwks_FederatedJWKs'(v)
}




// ----------------------------------------------------------------------------------
// Native BCS implementation for element type `$1_jwks_PatchRemoveAll`

// Serialize is modeled as an uninterpreted function, with an additional
// axiom to say it's an injection.

function $1_bcs_serialize'$1_jwks_PatchRemoveAll'(v: $1_jwks_PatchRemoveAll): Vec int;

axiom (forall v1, v2: $1_jwks_PatchRemoveAll :: {$1_bcs_serialize'$1_jwks_PatchRemoveAll'(v1), $1_bcs_serialize'$1_jwks_PatchRemoveAll'(v2)}
   $IsEqual'$1_jwks_PatchRemoveAll'(v1, v2) <==> $IsEqual'vec'u8''($1_bcs_serialize'$1_jwks_PatchRemoveAll'(v1), $1_bcs_serialize'$1_jwks_PatchRemoveAll'(v2)));

// This says that serialize returns a non-empty vec<u8>

axiom (forall v: $1_jwks_PatchRemoveAll :: {$1_bcs_serialize'$1_jwks_PatchRemoveAll'(v)}
     ( var r := $1_bcs_serialize'$1_jwks_PatchRemoveAll'(v); $IsValid'vec'u8''(r) && LenVec(r) > 0 ));


procedure $1_bcs_to_bytes'$1_jwks_PatchRemoveAll'(v: $1_jwks_PatchRemoveAll) returns (res: Vec int);
ensures res == $1_bcs_serialize'$1_jwks_PatchRemoveAll'(v);

function {:inline} $1_bcs_$to_bytes'$1_jwks_PatchRemoveAll'(v: $1_jwks_PatchRemoveAll): Vec int {
    $1_bcs_serialize'$1_jwks_PatchRemoveAll'(v)
}




// ----------------------------------------------------------------------------------
// Native BCS implementation for element type `$1_jwks_PatchRemoveIssuer`

// Serialize is modeled as an uninterpreted function, with an additional
// axiom to say it's an injection.

function $1_bcs_serialize'$1_jwks_PatchRemoveIssuer'(v: $1_jwks_PatchRemoveIssuer): Vec int;

axiom (forall v1, v2: $1_jwks_PatchRemoveIssuer :: {$1_bcs_serialize'$1_jwks_PatchRemoveIssuer'(v1), $1_bcs_serialize'$1_jwks_PatchRemoveIssuer'(v2)}
   $IsEqual'$1_jwks_PatchRemoveIssuer'(v1, v2) <==> $IsEqual'vec'u8''($1_bcs_serialize'$1_jwks_PatchRemoveIssuer'(v1), $1_bcs_serialize'$1_jwks_PatchRemoveIssuer'(v2)));

// This says that serialize returns a non-empty vec<u8>

axiom (forall v: $1_jwks_PatchRemoveIssuer :: {$1_bcs_serialize'$1_jwks_PatchRemoveIssuer'(v)}
     ( var r := $1_bcs_serialize'$1_jwks_PatchRemoveIssuer'(v); $IsValid'vec'u8''(r) && LenVec(r) > 0 ));


procedure $1_bcs_to_bytes'$1_jwks_PatchRemoveIssuer'(v: $1_jwks_PatchRemoveIssuer) returns (res: Vec int);
ensures res == $1_bcs_serialize'$1_jwks_PatchRemoveIssuer'(v);

function {:inline} $1_bcs_$to_bytes'$1_jwks_PatchRemoveIssuer'(v: $1_jwks_PatchRemoveIssuer): Vec int {
    $1_bcs_serialize'$1_jwks_PatchRemoveIssuer'(v)
}




// ----------------------------------------------------------------------------------
// Native BCS implementation for element type `$1_jwks_PatchRemoveJWK`

// Serialize is modeled as an uninterpreted function, with an additional
// axiom to say it's an injection.

function $1_bcs_serialize'$1_jwks_PatchRemoveJWK'(v: $1_jwks_PatchRemoveJWK): Vec int;

axiom (forall v1, v2: $1_jwks_PatchRemoveJWK :: {$1_bcs_serialize'$1_jwks_PatchRemoveJWK'(v1), $1_bcs_serialize'$1_jwks_PatchRemoveJWK'(v2)}
   $IsEqual'$1_jwks_PatchRemoveJWK'(v1, v2) <==> $IsEqual'vec'u8''($1_bcs_serialize'$1_jwks_PatchRemoveJWK'(v1), $1_bcs_serialize'$1_jwks_PatchRemoveJWK'(v2)));

// This says that serialize returns a non-empty vec<u8>

axiom (forall v: $1_jwks_PatchRemoveJWK :: {$1_bcs_serialize'$1_jwks_PatchRemoveJWK'(v)}
     ( var r := $1_bcs_serialize'$1_jwks_PatchRemoveJWK'(v); $IsValid'vec'u8''(r) && LenVec(r) > 0 ));


procedure $1_bcs_to_bytes'$1_jwks_PatchRemoveJWK'(v: $1_jwks_PatchRemoveJWK) returns (res: Vec int);
ensures res == $1_bcs_serialize'$1_jwks_PatchRemoveJWK'(v);

function {:inline} $1_bcs_$to_bytes'$1_jwks_PatchRemoveJWK'(v: $1_jwks_PatchRemoveJWK): Vec int {
    $1_bcs_serialize'$1_jwks_PatchRemoveJWK'(v)
}




// ----------------------------------------------------------------------------------
// Native BCS implementation for element type `$1_jwks_PatchUpsertJWK`

// Serialize is modeled as an uninterpreted function, with an additional
// axiom to say it's an injection.

function $1_bcs_serialize'$1_jwks_PatchUpsertJWK'(v: $1_jwks_PatchUpsertJWK): Vec int;

axiom (forall v1, v2: $1_jwks_PatchUpsertJWK :: {$1_bcs_serialize'$1_jwks_PatchUpsertJWK'(v1), $1_bcs_serialize'$1_jwks_PatchUpsertJWK'(v2)}
   $IsEqual'$1_jwks_PatchUpsertJWK'(v1, v2) <==> $IsEqual'vec'u8''($1_bcs_serialize'$1_jwks_PatchUpsertJWK'(v1), $1_bcs_serialize'$1_jwks_PatchUpsertJWK'(v2)));

// This says that serialize returns a non-empty vec<u8>

axiom (forall v: $1_jwks_PatchUpsertJWK :: {$1_bcs_serialize'$1_jwks_PatchUpsertJWK'(v)}
     ( var r := $1_bcs_serialize'$1_jwks_PatchUpsertJWK'(v); $IsValid'vec'u8''(r) && LenVec(r) > 0 ));


procedure $1_bcs_to_bytes'$1_jwks_PatchUpsertJWK'(v: $1_jwks_PatchUpsertJWK) returns (res: Vec int);
ensures res == $1_bcs_serialize'$1_jwks_PatchUpsertJWK'(v);

function {:inline} $1_bcs_$to_bytes'$1_jwks_PatchUpsertJWK'(v: $1_jwks_PatchUpsertJWK): Vec int {
    $1_bcs_serialize'$1_jwks_PatchUpsertJWK'(v)
}




// ----------------------------------------------------------------------------------
// Native BCS implementation for element type `$1_jwks_RSA_JWK`

// Serialize is modeled as an uninterpreted function, with an additional
// axiom to say it's an injection.

function $1_bcs_serialize'$1_jwks_RSA_JWK'(v: $1_jwks_RSA_JWK): Vec int;

axiom (forall v1, v2: $1_jwks_RSA_JWK :: {$1_bcs_serialize'$1_jwks_RSA_JWK'(v1), $1_bcs_serialize'$1_jwks_RSA_JWK'(v2)}
   $IsEqual'$1_jwks_RSA_JWK'(v1, v2) <==> $IsEqual'vec'u8''($1_bcs_serialize'$1_jwks_RSA_JWK'(v1), $1_bcs_serialize'$1_jwks_RSA_JWK'(v2)));

// This says that serialize returns a non-empty vec<u8>

axiom (forall v: $1_jwks_RSA_JWK :: {$1_bcs_serialize'$1_jwks_RSA_JWK'(v)}
     ( var r := $1_bcs_serialize'$1_jwks_RSA_JWK'(v); $IsValid'vec'u8''(r) && LenVec(r) > 0 ));


procedure $1_bcs_to_bytes'$1_jwks_RSA_JWK'(v: $1_jwks_RSA_JWK) returns (res: Vec int);
ensures res == $1_bcs_serialize'$1_jwks_RSA_JWK'(v);

function {:inline} $1_bcs_$to_bytes'$1_jwks_RSA_JWK'(v: $1_jwks_RSA_JWK): Vec int {
    $1_bcs_serialize'$1_jwks_RSA_JWK'(v)
}




// ----------------------------------------------------------------------------------
// Native BCS implementation for element type `$1_jwks_SupportedOIDCProviders`

// Serialize is modeled as an uninterpreted function, with an additional
// axiom to say it's an injection.

function $1_bcs_serialize'$1_jwks_SupportedOIDCProviders'(v: $1_jwks_SupportedOIDCProviders): Vec int;

axiom (forall v1, v2: $1_jwks_SupportedOIDCProviders :: {$1_bcs_serialize'$1_jwks_SupportedOIDCProviders'(v1), $1_bcs_serialize'$1_jwks_SupportedOIDCProviders'(v2)}
   $IsEqual'$1_jwks_SupportedOIDCProviders'(v1, v2) <==> $IsEqual'vec'u8''($1_bcs_serialize'$1_jwks_SupportedOIDCProviders'(v1), $1_bcs_serialize'$1_jwks_SupportedOIDCProviders'(v2)));

// This says that serialize returns a non-empty vec<u8>

axiom (forall v: $1_jwks_SupportedOIDCProviders :: {$1_bcs_serialize'$1_jwks_SupportedOIDCProviders'(v)}
     ( var r := $1_bcs_serialize'$1_jwks_SupportedOIDCProviders'(v); $IsValid'vec'u8''(r) && LenVec(r) > 0 ));


procedure $1_bcs_to_bytes'$1_jwks_SupportedOIDCProviders'(v: $1_jwks_SupportedOIDCProviders) returns (res: Vec int);
ensures res == $1_bcs_serialize'$1_jwks_SupportedOIDCProviders'(v);

function {:inline} $1_bcs_$to_bytes'$1_jwks_SupportedOIDCProviders'(v: $1_jwks_SupportedOIDCProviders): Vec int {
    $1_bcs_serialize'$1_jwks_SupportedOIDCProviders'(v)
}




// ----------------------------------------------------------------------------------
// Native BCS implementation for element type `$1_jwks_UnsupportedJWK`

// Serialize is modeled as an uninterpreted function, with an additional
// axiom to say it's an injection.

function $1_bcs_serialize'$1_jwks_UnsupportedJWK'(v: $1_jwks_UnsupportedJWK): Vec int;

axiom (forall v1, v2: $1_jwks_UnsupportedJWK :: {$1_bcs_serialize'$1_jwks_UnsupportedJWK'(v1), $1_bcs_serialize'$1_jwks_UnsupportedJWK'(v2)}
   $IsEqual'$1_jwks_UnsupportedJWK'(v1, v2) <==> $IsEqual'vec'u8''($1_bcs_serialize'$1_jwks_UnsupportedJWK'(v1), $1_bcs_serialize'$1_jwks_UnsupportedJWK'(v2)));

// This says that serialize returns a non-empty vec<u8>

axiom (forall v: $1_jwks_UnsupportedJWK :: {$1_bcs_serialize'$1_jwks_UnsupportedJWK'(v)}
     ( var r := $1_bcs_serialize'$1_jwks_UnsupportedJWK'(v); $IsValid'vec'u8''(r) && LenVec(r) > 0 ));


procedure $1_bcs_to_bytes'$1_jwks_UnsupportedJWK'(v: $1_jwks_UnsupportedJWK) returns (res: Vec int);
ensures res == $1_bcs_serialize'$1_jwks_UnsupportedJWK'(v);

function {:inline} $1_bcs_$to_bytes'$1_jwks_UnsupportedJWK'(v: $1_jwks_UnsupportedJWK): Vec int {
    $1_bcs_serialize'$1_jwks_UnsupportedJWK'(v)
}





// ==================================================================================
// Native from_bcs::from_bytes

// ----------------------------------------------------------------------------------
// Native FROM_BCS implementation for element type `$1_jwks_RSA_JWK`

procedure $1_from_bcs_from_bytes'$1_jwks_RSA_JWK'(v: Vec int) returns (res: $1_jwks_RSA_JWK);

function $1_from_bcs_$from_bytes'$1_jwks_RSA_JWK'(v: Vec int): $1_jwks_RSA_JWK;
axiom (forall v: Vec int :: {$1_from_bcs_deserialize'$1_jwks_RSA_JWK'(v)}
     ( var r := $1_from_bcs_$from_bytes'$1_jwks_RSA_JWK'(v); r == $1_from_bcs_deserialize'$1_jwks_RSA_JWK'(v) ));



// ----------------------------------------------------------------------------------
// Native FROM_BCS implementation for element type `$1_jwks_UnsupportedJWK`

procedure $1_from_bcs_from_bytes'$1_jwks_UnsupportedJWK'(v: Vec int) returns (res: $1_jwks_UnsupportedJWK);

function $1_from_bcs_$from_bytes'$1_jwks_UnsupportedJWK'(v: Vec int): $1_jwks_UnsupportedJWK;
axiom (forall v: Vec int :: {$1_from_bcs_deserialize'$1_jwks_UnsupportedJWK'(v)}
     ( var r := $1_from_bcs_$from_bytes'$1_jwks_UnsupportedJWK'(v); r == $1_from_bcs_deserialize'$1_jwks_UnsupportedJWK'(v) ));




// ==================================================================================
// Native Event module



procedure {:inline 1} $InitEventStore() {
}

// ============================================================================================
// Type Reflection on Type Parameters

datatype $TypeParamInfo {
    $TypeParamBool(),
    $TypeParamU8(),
    $TypeParamU16(),
    $TypeParamU32(),
    $TypeParamU64(),
    $TypeParamU128(),
    $TypeParamU256(),
    $TypeParamAddress(),
    $TypeParamSigner(),
    $TypeParamVector(e: $TypeParamInfo),
    $TypeParamStruct(a: int, m: Vec int, s: Vec int)
}



//==================================
// Begin Translation

function $TypeName(t: $TypeParamInfo): Vec int;
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamBool ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 98][1 := 111][2 := 111][3 := 108], 4)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 98][1 := 111][2 := 111][3 := 108], 4)) ==> t is $TypeParamBool);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU8 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 56], 2)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 56], 2)) ==> t is $TypeParamU8);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU16 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 49][2 := 54], 3)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 49][2 := 54], 3)) ==> t is $TypeParamU16);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU32 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 51][2 := 50], 3)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 51][2 := 50], 3)) ==> t is $TypeParamU32);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU64 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 54][2 := 52], 3)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 54][2 := 52], 3)) ==> t is $TypeParamU64);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU128 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 49][2 := 50][3 := 56], 4)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 49][2 := 50][3 := 56], 4)) ==> t is $TypeParamU128);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU256 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 50][2 := 53][3 := 54], 4)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 50][2 := 53][3 := 54], 4)) ==> t is $TypeParamU256);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamAddress ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 97][1 := 100][2 := 100][3 := 114][4 := 101][5 := 115][6 := 115], 7)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 97][1 := 100][2 := 100][3 := 114][4 := 101][5 := 115][6 := 115], 7)) ==> t is $TypeParamAddress);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamSigner ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 115][1 := 105][2 := 103][3 := 110][4 := 101][5 := 114], 6)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 115][1 := 105][2 := 103][3 := 110][4 := 101][5 := 114], 6)) ==> t is $TypeParamSigner);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamVector ==> $IsEqual'vec'u8''($TypeName(t), ConcatVec(ConcatVec(Vec(DefaultVecMap()[0 := 118][1 := 101][2 := 99][3 := 116][4 := 111][5 := 114][6 := 60], 7), $TypeName(t->e)), Vec(DefaultVecMap()[0 := 62], 1))));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} ($IsPrefix'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 118][1 := 101][2 := 99][3 := 116][4 := 111][5 := 114][6 := 60], 7)) && $IsSuffix'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 62], 1))) ==> t is $TypeParamVector);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamStruct ==> $IsEqual'vec'u8''($TypeName(t), ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(Vec(DefaultVecMap()[0 := 48][1 := 120], 2), MakeVec1(t->a)), Vec(DefaultVecMap()[0 := 58][1 := 58], 2)), t->m), Vec(DefaultVecMap()[0 := 58][1 := 58], 2)), t->s)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsPrefix'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 48][1 := 120], 2)) ==> t is $TypeParamVector);


// Given Types for Type Parameters

type #0;
function {:inline} $IsEqual'#0'(x1: #0, x2: #0): bool { x1 == x2 }
function {:inline} $IsValid'#0'(x: #0): bool { true }
var #0_info: $TypeParamInfo;
var #0_$memory: $Memory #0;
function {:inline} $1_cmp_$compare'#0'(v1: #0, v2: #0): $1_cmp_Ordering {
    if $IsEqual'#0'(v1, v2) then $1_cmp_Ordering_Equal()
    else $Arbitrary_value_of'$1_cmp_Ordering'()
}
procedure {:inline 1} $1_cmp_compare'#0'(v1: #0, v2: #0) returns ($ret0: $1_cmp_Ordering) {
    $ret0 := $1_cmp_$compare'#0'(v1, v2);
}

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <bool>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'bool'(b1), $1_from_bcs_deserializable'bool'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <u8>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'u8'(b1), $1_from_bcs_deserializable'u8'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <u32>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'u32'(b1), $1_from_bcs_deserializable'u32'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <u64>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'u64'(b1), $1_from_bcs_deserializable'u64'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <u128>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'u128'(b1), $1_from_bcs_deserializable'u128'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <u256>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'u256'(b1), $1_from_bcs_deserializable'u256'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <address>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'address'(b1), $1_from_bcs_deserializable'address'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <signer>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'signer'(b1), $1_from_bcs_deserializable'signer'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<u8>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'u8''(b1), $1_from_bcs_deserializable'vec'u8''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<u64>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'u64''(b1), $1_from_bcs_deserializable'vec'u64''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<address>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'address''(b1), $1_from_bcs_deserializable'vec'address''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<vector<u8>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'vec'u8'''(b1), $1_from_bcs_deserializable'vec'vec'u8'''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<0x1::string::String>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_string_String''(b1), $1_from_bcs_deserializable'vec'$1_string_String''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<0x1::any::Any>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_any_Any''(b1), $1_from_bcs_deserializable'vec'$1_any_Any''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<0x1::validator_consensus_info::ValidatorConsensusInfo>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_validator_consensus_info_ValidatorConsensusInfo''(b1), $1_from_bcs_deserializable'vec'$1_validator_consensus_info_ValidatorConsensusInfo''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<0x1::stake::IndividualValidatorPerformance>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_stake_IndividualValidatorPerformance''(b1), $1_from_bcs_deserializable'vec'$1_stake_IndividualValidatorPerformance''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<0x1::stake::ValidatorInfo>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_stake_ValidatorInfo''(b1), $1_from_bcs_deserializable'vec'$1_stake_ValidatorInfo''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<0x1::storage_gas::Point>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_storage_gas_Point''(b1), $1_from_bcs_deserializable'vec'$1_storage_gas_Point''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<0x1::jwks::JWK>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_jwks_JWK''(b1), $1_from_bcs_deserializable'vec'$1_jwks_JWK''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<0x1::jwks::OIDCProvider>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_jwks_OIDCProvider''(b1), $1_from_bcs_deserializable'vec'$1_jwks_OIDCProvider''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<0x1::jwks::Patch>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_jwks_Patch''(b1), $1_from_bcs_deserializable'vec'$1_jwks_Patch''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<0x1::jwks::ProviderJWKs>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_jwks_ProviderJWKs''(b1), $1_from_bcs_deserializable'vec'$1_jwks_ProviderJWKs''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<0x1::jwks::SupportedOIDCProviders>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_jwks_SupportedOIDCProviders''(b1), $1_from_bcs_deserializable'vec'$1_jwks_SupportedOIDCProviders''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<0x1::dkg::DKGSessionState>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_dkg_DKGSessionState''(b1), $1_from_bcs_deserializable'vec'$1_dkg_DKGSessionState''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<#0>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'#0''(b1), $1_from_bcs_deserializable'vec'#0''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::option::Option<vector<u8>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_option_Option'vec'u8'''(b1), $1_from_bcs_deserializable'$1_option_Option'vec'u8'''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::option::Option<0x1::string::String>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_option_Option'$1_string_String''(b1), $1_from_bcs_deserializable'$1_option_Option'$1_string_String''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::option::Option<0x1::any::Any>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_option_Option'$1_any_Any''(b1), $1_from_bcs_deserializable'$1_option_Option'$1_any_Any''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::option::Option<0x1::jwks::JWK>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_option_Option'$1_jwks_JWK''(b1), $1_from_bcs_deserializable'$1_option_Option'$1_jwks_JWK''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::option::Option<0x1::jwks::ProviderJWKs>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_option_Option'$1_jwks_ProviderJWKs''(b1), $1_from_bcs_deserializable'$1_option_Option'$1_jwks_ProviderJWKs''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::option::Option<0x1::dkg::DKGSessionState>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_option_Option'$1_dkg_DKGSessionState''(b1), $1_from_bcs_deserializable'$1_option_Option'$1_dkg_DKGSessionState''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::string::String>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_string_String'(b1), $1_from_bcs_deserializable'$1_string_String'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::chain_status::GenesisEndMarker>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_chain_status_GenesisEndMarker'(b1), $1_from_bcs_deserializable'$1_chain_status_GenesisEndMarker'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::timestamp::CurrentTimeMicroseconds>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_timestamp_CurrentTimeMicroseconds'(b1), $1_from_bcs_deserializable'$1_timestamp_CurrentTimeMicroseconds'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::any::Any>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_any_Any'(b1), $1_from_bcs_deserializable'$1_any_Any'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::copyable_any::Any>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_copyable_any_Any'(b1), $1_from_bcs_deserializable'$1_copyable_any_Any'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::table_with_length::TableWithLength<u32, 0x1::block::NewBlockEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_table_with_length_TableWithLength'u32_$1_block_NewBlockEvent''(b1), $1_from_bcs_deserializable'$1_table_with_length_TableWithLength'u32_$1_block_NewBlockEvent''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::permissioned_signer::GrantedPermissionHandles>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_permissioned_signer_GrantedPermissionHandles'(b1), $1_from_bcs_deserializable'$1_permissioned_signer_GrantedPermissionHandles'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::guid::GUID>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_guid_GUID'(b1), $1_from_bcs_deserializable'$1_guid_GUID'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::guid::ID>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_guid_ID'(b1), $1_from_bcs_deserializable'$1_guid_ID'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::event::EventHandle<0x1::reconfiguration::NewEpochEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::event::EventHandle<0x1::block::NewBlockEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_block_NewBlockEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_block_NewBlockEvent''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::event::EventHandle<0x1::block::UpdateEpochIntervalEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_block_UpdateEpochIntervalEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_block_UpdateEpochIntervalEvent''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::object::Object<0x1::fungible_asset::Metadata>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_object_Object'$1_fungible_asset_Metadata''(b1), $1_from_bcs_deserializable'$1_object_Object'$1_fungible_asset_Metadata''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::fungible_asset::BurnRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_BurnRef'(b1), $1_from_bcs_deserializable'$1_fungible_asset_BurnRef'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::coin::BurnCapability<0x1::aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserializable'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::coin::MintCapability<0x1::aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_coin_MintCapability'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserializable'$1_coin_MintCapability'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::simple_map::SimpleMap<0x1::string::String, 0x1::any::Any>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_simple_map_SimpleMap'$1_string_String_$1_any_Any''(b1), $1_from_bcs_deserializable'$1_simple_map_SimpleMap'$1_string_String_$1_any_Any''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::fixed_point64::FixedPoint64>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fixed_point64_FixedPoint64'(b1), $1_from_bcs_deserializable'$1_fixed_point64_FixedPoint64'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::staking_config::StakingConfig>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_staking_config_StakingConfig'(b1), $1_from_bcs_deserializable'$1_staking_config_StakingConfig'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::staking_config::StakingRewardsConfig>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_staking_config_StakingRewardsConfig'(b1), $1_from_bcs_deserializable'$1_staking_config_StakingRewardsConfig'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::reconfiguration_state::State>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_reconfiguration_state_State'(b1), $1_from_bcs_deserializable'$1_reconfiguration_state_State'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::reconfiguration_state::StateActive>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_reconfiguration_state_StateActive'(b1), $1_from_bcs_deserializable'$1_reconfiguration_state_StateActive'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::reconfiguration_state::StateInactive>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_reconfiguration_state_StateInactive'(b1), $1_from_bcs_deserializable'$1_reconfiguration_state_StateInactive'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::stake::AptosCoinCapabilities>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_stake_AptosCoinCapabilities'(b1), $1_from_bcs_deserializable'$1_stake_AptosCoinCapabilities'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::stake::ValidatorConfig>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_stake_ValidatorConfig'(b1), $1_from_bcs_deserializable'$1_stake_ValidatorConfig'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::stake::ValidatorPerformance>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_stake_ValidatorPerformance'(b1), $1_from_bcs_deserializable'$1_stake_ValidatorPerformance'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::stake::ValidatorSet>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_stake_ValidatorSet'(b1), $1_from_bcs_deserializable'$1_stake_ValidatorSet'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::transaction_fee::AptosCoinCapabilities>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_transaction_fee_AptosCoinCapabilities'(b1), $1_from_bcs_deserializable'$1_transaction_fee_AptosCoinCapabilities'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::transaction_fee::AptosFABurnCapabilities>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_transaction_fee_AptosFABurnCapabilities'(b1), $1_from_bcs_deserializable'$1_transaction_fee_AptosFABurnCapabilities'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::state_storage::GasParameter>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_state_storage_GasParameter'(b1), $1_from_bcs_deserializable'$1_state_storage_GasParameter'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::state_storage::StateStorageUsage>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_state_storage_StateStorageUsage'(b1), $1_from_bcs_deserializable'$1_state_storage_StateStorageUsage'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::state_storage::Usage>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_state_storage_Usage'(b1), $1_from_bcs_deserializable'$1_state_storage_Usage'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::storage_gas::GasCurve>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_storage_gas_GasCurve'(b1), $1_from_bcs_deserializable'$1_storage_gas_GasCurve'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::storage_gas::Point>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_storage_gas_Point'(b1), $1_from_bcs_deserializable'$1_storage_gas_Point'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::storage_gas::StorageGas>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_storage_gas_StorageGas'(b1), $1_from_bcs_deserializable'$1_storage_gas_StorageGas'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::storage_gas::StorageGasConfig>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_storage_gas_StorageGasConfig'(b1), $1_from_bcs_deserializable'$1_storage_gas_StorageGasConfig'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::storage_gas::UsageGasConfig>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_storage_gas_UsageGasConfig'(b1), $1_from_bcs_deserializable'$1_storage_gas_UsageGasConfig'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::reconfiguration::Configuration>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_reconfiguration_Configuration'(b1), $1_from_bcs_deserializable'$1_reconfiguration_Configuration'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::config_buffer::PendingConfigs>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_config_buffer_PendingConfigs'(b1), $1_from_bcs_deserializable'$1_config_buffer_PendingConfigs'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::randomness_config::RandomnessConfig>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_randomness_config_RandomnessConfig'(b1), $1_from_bcs_deserializable'$1_randomness_config_RandomnessConfig'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::comparator::Result>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_comparator_Result'(b1), $1_from_bcs_deserializable'$1_comparator_Result'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::jwks::AllProvidersJWKs>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_jwks_AllProvidersJWKs'(b1), $1_from_bcs_deserializable'$1_jwks_AllProvidersJWKs'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::jwks::FederatedJWKs>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_jwks_FederatedJWKs'(b1), $1_from_bcs_deserializable'$1_jwks_FederatedJWKs'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::jwks::JWK>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_jwks_JWK'(b1), $1_from_bcs_deserializable'$1_jwks_JWK'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::jwks::OIDCProvider>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_jwks_OIDCProvider'(b1), $1_from_bcs_deserializable'$1_jwks_OIDCProvider'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::jwks::ObservedJWKs>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_jwks_ObservedJWKs'(b1), $1_from_bcs_deserializable'$1_jwks_ObservedJWKs'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::jwks::ObservedJWKsUpdated>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_jwks_ObservedJWKsUpdated'(b1), $1_from_bcs_deserializable'$1_jwks_ObservedJWKsUpdated'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::jwks::Patch>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_jwks_Patch'(b1), $1_from_bcs_deserializable'$1_jwks_Patch'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::jwks::PatchRemoveAll>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_jwks_PatchRemoveAll'(b1), $1_from_bcs_deserializable'$1_jwks_PatchRemoveAll'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::jwks::PatchRemoveIssuer>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_jwks_PatchRemoveIssuer'(b1), $1_from_bcs_deserializable'$1_jwks_PatchRemoveIssuer'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::jwks::PatchRemoveJWK>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_jwks_PatchRemoveJWK'(b1), $1_from_bcs_deserializable'$1_jwks_PatchRemoveJWK'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::jwks::PatchUpsertJWK>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_jwks_PatchUpsertJWK'(b1), $1_from_bcs_deserializable'$1_jwks_PatchUpsertJWK'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::jwks::PatchedJWKs>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_jwks_PatchedJWKs'(b1), $1_from_bcs_deserializable'$1_jwks_PatchedJWKs'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::jwks::Patches>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_jwks_Patches'(b1), $1_from_bcs_deserializable'$1_jwks_Patches'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::jwks::ProviderJWKs>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_jwks_ProviderJWKs'(b1), $1_from_bcs_deserializable'$1_jwks_ProviderJWKs'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::jwks::RSA_JWK>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_jwks_RSA_JWK'(b1), $1_from_bcs_deserializable'$1_jwks_RSA_JWK'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::jwks::SupportedOIDCProviders>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_jwks_SupportedOIDCProviders'(b1), $1_from_bcs_deserializable'$1_jwks_SupportedOIDCProviders'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::jwks::UnsupportedJWK>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_jwks_UnsupportedJWK'(b1), $1_from_bcs_deserializable'$1_jwks_UnsupportedJWK'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::dkg::DKGSessionMetadata>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_dkg_DKGSessionMetadata'(b1), $1_from_bcs_deserializable'$1_dkg_DKGSessionMetadata'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::dkg::DKGSessionState>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_dkg_DKGSessionState'(b1), $1_from_bcs_deserializable'$1_dkg_DKGSessionState'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::dkg::DKGState>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_dkg_DKGState'(b1), $1_from_bcs_deserializable'$1_dkg_DKGState'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::consensus_config::ConsensusConfig>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_consensus_config_ConsensusConfig'(b1), $1_from_bcs_deserializable'$1_consensus_config_ConsensusConfig'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::randomness::PerBlockRandomness>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_randomness_PerBlockRandomness'(b1), $1_from_bcs_deserializable'$1_randomness_PerBlockRandomness'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::block::BlockResource>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_block_BlockResource'(b1), $1_from_bcs_deserializable'$1_block_BlockResource'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::block::CommitHistory>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_block_CommitHistory'(b1), $1_from_bcs_deserializable'$1_block_CommitHistory'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <#0>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'#0'(b1), $1_from_bcs_deserializable'#0'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <bool>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserialize'bool'(b1), $1_from_bcs_deserialize'bool'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <u8>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'u8'($1_from_bcs_deserialize'u8'(b1), $1_from_bcs_deserialize'u8'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <u32>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'u32'($1_from_bcs_deserialize'u32'(b1), $1_from_bcs_deserialize'u32'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <u64>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'u64'($1_from_bcs_deserialize'u64'(b1), $1_from_bcs_deserialize'u64'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <u128>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'u128'($1_from_bcs_deserialize'u128'(b1), $1_from_bcs_deserialize'u128'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <u256>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'u256'($1_from_bcs_deserialize'u256'(b1), $1_from_bcs_deserialize'u256'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <address>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'address'($1_from_bcs_deserialize'address'(b1), $1_from_bcs_deserialize'address'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <signer>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'signer'($1_from_bcs_deserialize'signer'(b1), $1_from_bcs_deserialize'signer'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<u8>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'u8''($1_from_bcs_deserialize'vec'u8''(b1), $1_from_bcs_deserialize'vec'u8''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<u64>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'u64''($1_from_bcs_deserialize'vec'u64''(b1), $1_from_bcs_deserialize'vec'u64''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<address>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'address''($1_from_bcs_deserialize'vec'address''(b1), $1_from_bcs_deserialize'vec'address''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<vector<u8>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'vec'u8'''($1_from_bcs_deserialize'vec'vec'u8'''(b1), $1_from_bcs_deserialize'vec'vec'u8'''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<0x1::string::String>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_string_String''($1_from_bcs_deserialize'vec'$1_string_String''(b1), $1_from_bcs_deserialize'vec'$1_string_String''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<0x1::any::Any>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_any_Any''($1_from_bcs_deserialize'vec'$1_any_Any''(b1), $1_from_bcs_deserialize'vec'$1_any_Any''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<0x1::validator_consensus_info::ValidatorConsensusInfo>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_validator_consensus_info_ValidatorConsensusInfo''($1_from_bcs_deserialize'vec'$1_validator_consensus_info_ValidatorConsensusInfo''(b1), $1_from_bcs_deserialize'vec'$1_validator_consensus_info_ValidatorConsensusInfo''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<0x1::stake::IndividualValidatorPerformance>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_stake_IndividualValidatorPerformance''($1_from_bcs_deserialize'vec'$1_stake_IndividualValidatorPerformance''(b1), $1_from_bcs_deserialize'vec'$1_stake_IndividualValidatorPerformance''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<0x1::stake::ValidatorInfo>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_stake_ValidatorInfo''($1_from_bcs_deserialize'vec'$1_stake_ValidatorInfo''(b1), $1_from_bcs_deserialize'vec'$1_stake_ValidatorInfo''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<0x1::storage_gas::Point>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_storage_gas_Point''($1_from_bcs_deserialize'vec'$1_storage_gas_Point''(b1), $1_from_bcs_deserialize'vec'$1_storage_gas_Point''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<0x1::jwks::JWK>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_jwks_JWK''($1_from_bcs_deserialize'vec'$1_jwks_JWK''(b1), $1_from_bcs_deserialize'vec'$1_jwks_JWK''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<0x1::jwks::OIDCProvider>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_jwks_OIDCProvider''($1_from_bcs_deserialize'vec'$1_jwks_OIDCProvider''(b1), $1_from_bcs_deserialize'vec'$1_jwks_OIDCProvider''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<0x1::jwks::Patch>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_jwks_Patch''($1_from_bcs_deserialize'vec'$1_jwks_Patch''(b1), $1_from_bcs_deserialize'vec'$1_jwks_Patch''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<0x1::jwks::ProviderJWKs>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_jwks_ProviderJWKs''($1_from_bcs_deserialize'vec'$1_jwks_ProviderJWKs''(b1), $1_from_bcs_deserialize'vec'$1_jwks_ProviderJWKs''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<0x1::jwks::SupportedOIDCProviders>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_jwks_SupportedOIDCProviders''($1_from_bcs_deserialize'vec'$1_jwks_SupportedOIDCProviders''(b1), $1_from_bcs_deserialize'vec'$1_jwks_SupportedOIDCProviders''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<0x1::dkg::DKGSessionState>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_dkg_DKGSessionState''($1_from_bcs_deserialize'vec'$1_dkg_DKGSessionState''(b1), $1_from_bcs_deserialize'vec'$1_dkg_DKGSessionState''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<#0>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'#0''($1_from_bcs_deserialize'vec'#0''(b1), $1_from_bcs_deserialize'vec'#0''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::option::Option<vector<u8>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_option_Option'vec'u8'''($1_from_bcs_deserialize'$1_option_Option'vec'u8'''(b1), $1_from_bcs_deserialize'$1_option_Option'vec'u8'''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::option::Option<0x1::string::String>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_option_Option'$1_string_String''($1_from_bcs_deserialize'$1_option_Option'$1_string_String''(b1), $1_from_bcs_deserialize'$1_option_Option'$1_string_String''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::option::Option<0x1::any::Any>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_option_Option'$1_any_Any''($1_from_bcs_deserialize'$1_option_Option'$1_any_Any''(b1), $1_from_bcs_deserialize'$1_option_Option'$1_any_Any''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::option::Option<0x1::jwks::JWK>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_option_Option'$1_jwks_JWK''($1_from_bcs_deserialize'$1_option_Option'$1_jwks_JWK''(b1), $1_from_bcs_deserialize'$1_option_Option'$1_jwks_JWK''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::option::Option<0x1::jwks::ProviderJWKs>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_option_Option'$1_jwks_ProviderJWKs''($1_from_bcs_deserialize'$1_option_Option'$1_jwks_ProviderJWKs''(b1), $1_from_bcs_deserialize'$1_option_Option'$1_jwks_ProviderJWKs''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::option::Option<0x1::dkg::DKGSessionState>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_option_Option'$1_dkg_DKGSessionState''($1_from_bcs_deserialize'$1_option_Option'$1_dkg_DKGSessionState''(b1), $1_from_bcs_deserialize'$1_option_Option'$1_dkg_DKGSessionState''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::string::String>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_string_String'($1_from_bcs_deserialize'$1_string_String'(b1), $1_from_bcs_deserialize'$1_string_String'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::chain_status::GenesisEndMarker>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_chain_status_GenesisEndMarker'($1_from_bcs_deserialize'$1_chain_status_GenesisEndMarker'(b1), $1_from_bcs_deserialize'$1_chain_status_GenesisEndMarker'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::timestamp::CurrentTimeMicroseconds>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_timestamp_CurrentTimeMicroseconds'($1_from_bcs_deserialize'$1_timestamp_CurrentTimeMicroseconds'(b1), $1_from_bcs_deserialize'$1_timestamp_CurrentTimeMicroseconds'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::any::Any>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_any_Any'($1_from_bcs_deserialize'$1_any_Any'(b1), $1_from_bcs_deserialize'$1_any_Any'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::copyable_any::Any>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_copyable_any_Any'($1_from_bcs_deserialize'$1_copyable_any_Any'(b1), $1_from_bcs_deserialize'$1_copyable_any_Any'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::table_with_length::TableWithLength<u32, 0x1::block::NewBlockEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_table_with_length_TableWithLength'u32_$1_block_NewBlockEvent''($1_from_bcs_deserialize'$1_table_with_length_TableWithLength'u32_$1_block_NewBlockEvent''(b1), $1_from_bcs_deserialize'$1_table_with_length_TableWithLength'u32_$1_block_NewBlockEvent''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::permissioned_signer::GrantedPermissionHandles>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_permissioned_signer_GrantedPermissionHandles'($1_from_bcs_deserialize'$1_permissioned_signer_GrantedPermissionHandles'(b1), $1_from_bcs_deserialize'$1_permissioned_signer_GrantedPermissionHandles'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::guid::GUID>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_guid_GUID'($1_from_bcs_deserialize'$1_guid_GUID'(b1), $1_from_bcs_deserialize'$1_guid_GUID'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::guid::ID>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_guid_ID'($1_from_bcs_deserialize'$1_guid_ID'(b1), $1_from_bcs_deserialize'$1_guid_ID'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::event::EventHandle<0x1::reconfiguration::NewEpochEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::event::EventHandle<0x1::block::NewBlockEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_block_NewBlockEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_block_NewBlockEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_block_NewBlockEvent''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::event::EventHandle<0x1::block::UpdateEpochIntervalEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_block_UpdateEpochIntervalEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_block_UpdateEpochIntervalEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_block_UpdateEpochIntervalEvent''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::object::Object<0x1::fungible_asset::Metadata>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_object_Object'$1_fungible_asset_Metadata''($1_from_bcs_deserialize'$1_object_Object'$1_fungible_asset_Metadata''(b1), $1_from_bcs_deserialize'$1_object_Object'$1_fungible_asset_Metadata''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::fungible_asset::BurnRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_BurnRef'($1_from_bcs_deserialize'$1_fungible_asset_BurnRef'(b1), $1_from_bcs_deserialize'$1_fungible_asset_BurnRef'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::coin::BurnCapability<0x1::aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin''($1_from_bcs_deserialize'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserialize'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::coin::MintCapability<0x1::aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_coin_MintCapability'$1_aptos_coin_AptosCoin''($1_from_bcs_deserialize'$1_coin_MintCapability'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserialize'$1_coin_MintCapability'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::simple_map::SimpleMap<0x1::string::String, 0x1::any::Any>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_simple_map_SimpleMap'$1_string_String_$1_any_Any''($1_from_bcs_deserialize'$1_simple_map_SimpleMap'$1_string_String_$1_any_Any''(b1), $1_from_bcs_deserialize'$1_simple_map_SimpleMap'$1_string_String_$1_any_Any''(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::fixed_point64::FixedPoint64>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fixed_point64_FixedPoint64'($1_from_bcs_deserialize'$1_fixed_point64_FixedPoint64'(b1), $1_from_bcs_deserialize'$1_fixed_point64_FixedPoint64'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::staking_config::StakingConfig>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_staking_config_StakingConfig'($1_from_bcs_deserialize'$1_staking_config_StakingConfig'(b1), $1_from_bcs_deserialize'$1_staking_config_StakingConfig'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::staking_config::StakingRewardsConfig>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_staking_config_StakingRewardsConfig'($1_from_bcs_deserialize'$1_staking_config_StakingRewardsConfig'(b1), $1_from_bcs_deserialize'$1_staking_config_StakingRewardsConfig'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::reconfiguration_state::State>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_reconfiguration_state_State'($1_from_bcs_deserialize'$1_reconfiguration_state_State'(b1), $1_from_bcs_deserialize'$1_reconfiguration_state_State'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::reconfiguration_state::StateActive>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_reconfiguration_state_StateActive'($1_from_bcs_deserialize'$1_reconfiguration_state_StateActive'(b1), $1_from_bcs_deserialize'$1_reconfiguration_state_StateActive'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::reconfiguration_state::StateInactive>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_reconfiguration_state_StateInactive'($1_from_bcs_deserialize'$1_reconfiguration_state_StateInactive'(b1), $1_from_bcs_deserialize'$1_reconfiguration_state_StateInactive'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::stake::AptosCoinCapabilities>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_stake_AptosCoinCapabilities'($1_from_bcs_deserialize'$1_stake_AptosCoinCapabilities'(b1), $1_from_bcs_deserialize'$1_stake_AptosCoinCapabilities'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::stake::ValidatorConfig>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_stake_ValidatorConfig'($1_from_bcs_deserialize'$1_stake_ValidatorConfig'(b1), $1_from_bcs_deserialize'$1_stake_ValidatorConfig'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::stake::ValidatorPerformance>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_stake_ValidatorPerformance'($1_from_bcs_deserialize'$1_stake_ValidatorPerformance'(b1), $1_from_bcs_deserialize'$1_stake_ValidatorPerformance'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::stake::ValidatorSet>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_stake_ValidatorSet'($1_from_bcs_deserialize'$1_stake_ValidatorSet'(b1), $1_from_bcs_deserialize'$1_stake_ValidatorSet'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::transaction_fee::AptosCoinCapabilities>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_transaction_fee_AptosCoinCapabilities'($1_from_bcs_deserialize'$1_transaction_fee_AptosCoinCapabilities'(b1), $1_from_bcs_deserialize'$1_transaction_fee_AptosCoinCapabilities'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::transaction_fee::AptosFABurnCapabilities>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_transaction_fee_AptosFABurnCapabilities'($1_from_bcs_deserialize'$1_transaction_fee_AptosFABurnCapabilities'(b1), $1_from_bcs_deserialize'$1_transaction_fee_AptosFABurnCapabilities'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::state_storage::GasParameter>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_state_storage_GasParameter'($1_from_bcs_deserialize'$1_state_storage_GasParameter'(b1), $1_from_bcs_deserialize'$1_state_storage_GasParameter'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::state_storage::StateStorageUsage>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_state_storage_StateStorageUsage'($1_from_bcs_deserialize'$1_state_storage_StateStorageUsage'(b1), $1_from_bcs_deserialize'$1_state_storage_StateStorageUsage'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::state_storage::Usage>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_state_storage_Usage'($1_from_bcs_deserialize'$1_state_storage_Usage'(b1), $1_from_bcs_deserialize'$1_state_storage_Usage'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::storage_gas::GasCurve>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_storage_gas_GasCurve'($1_from_bcs_deserialize'$1_storage_gas_GasCurve'(b1), $1_from_bcs_deserialize'$1_storage_gas_GasCurve'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::storage_gas::Point>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_storage_gas_Point'($1_from_bcs_deserialize'$1_storage_gas_Point'(b1), $1_from_bcs_deserialize'$1_storage_gas_Point'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::storage_gas::StorageGas>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_storage_gas_StorageGas'($1_from_bcs_deserialize'$1_storage_gas_StorageGas'(b1), $1_from_bcs_deserialize'$1_storage_gas_StorageGas'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::storage_gas::StorageGasConfig>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_storage_gas_StorageGasConfig'($1_from_bcs_deserialize'$1_storage_gas_StorageGasConfig'(b1), $1_from_bcs_deserialize'$1_storage_gas_StorageGasConfig'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::storage_gas::UsageGasConfig>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_storage_gas_UsageGasConfig'($1_from_bcs_deserialize'$1_storage_gas_UsageGasConfig'(b1), $1_from_bcs_deserialize'$1_storage_gas_UsageGasConfig'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::reconfiguration::Configuration>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_reconfiguration_Configuration'($1_from_bcs_deserialize'$1_reconfiguration_Configuration'(b1), $1_from_bcs_deserialize'$1_reconfiguration_Configuration'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::config_buffer::PendingConfigs>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_config_buffer_PendingConfigs'($1_from_bcs_deserialize'$1_config_buffer_PendingConfigs'(b1), $1_from_bcs_deserialize'$1_config_buffer_PendingConfigs'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::randomness_config::RandomnessConfig>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_randomness_config_RandomnessConfig'($1_from_bcs_deserialize'$1_randomness_config_RandomnessConfig'(b1), $1_from_bcs_deserialize'$1_randomness_config_RandomnessConfig'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::comparator::Result>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_comparator_Result'($1_from_bcs_deserialize'$1_comparator_Result'(b1), $1_from_bcs_deserialize'$1_comparator_Result'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::jwks::AllProvidersJWKs>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_jwks_AllProvidersJWKs'($1_from_bcs_deserialize'$1_jwks_AllProvidersJWKs'(b1), $1_from_bcs_deserialize'$1_jwks_AllProvidersJWKs'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::jwks::FederatedJWKs>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_jwks_FederatedJWKs'($1_from_bcs_deserialize'$1_jwks_FederatedJWKs'(b1), $1_from_bcs_deserialize'$1_jwks_FederatedJWKs'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::jwks::JWK>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_jwks_JWK'($1_from_bcs_deserialize'$1_jwks_JWK'(b1), $1_from_bcs_deserialize'$1_jwks_JWK'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::jwks::OIDCProvider>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_jwks_OIDCProvider'($1_from_bcs_deserialize'$1_jwks_OIDCProvider'(b1), $1_from_bcs_deserialize'$1_jwks_OIDCProvider'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::jwks::ObservedJWKs>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_jwks_ObservedJWKs'($1_from_bcs_deserialize'$1_jwks_ObservedJWKs'(b1), $1_from_bcs_deserialize'$1_jwks_ObservedJWKs'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::jwks::ObservedJWKsUpdated>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_jwks_ObservedJWKsUpdated'($1_from_bcs_deserialize'$1_jwks_ObservedJWKsUpdated'(b1), $1_from_bcs_deserialize'$1_jwks_ObservedJWKsUpdated'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::jwks::Patch>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_jwks_Patch'($1_from_bcs_deserialize'$1_jwks_Patch'(b1), $1_from_bcs_deserialize'$1_jwks_Patch'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::jwks::PatchRemoveAll>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_jwks_PatchRemoveAll'($1_from_bcs_deserialize'$1_jwks_PatchRemoveAll'(b1), $1_from_bcs_deserialize'$1_jwks_PatchRemoveAll'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::jwks::PatchRemoveIssuer>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_jwks_PatchRemoveIssuer'($1_from_bcs_deserialize'$1_jwks_PatchRemoveIssuer'(b1), $1_from_bcs_deserialize'$1_jwks_PatchRemoveIssuer'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::jwks::PatchRemoveJWK>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_jwks_PatchRemoveJWK'($1_from_bcs_deserialize'$1_jwks_PatchRemoveJWK'(b1), $1_from_bcs_deserialize'$1_jwks_PatchRemoveJWK'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::jwks::PatchUpsertJWK>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_jwks_PatchUpsertJWK'($1_from_bcs_deserialize'$1_jwks_PatchUpsertJWK'(b1), $1_from_bcs_deserialize'$1_jwks_PatchUpsertJWK'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::jwks::PatchedJWKs>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_jwks_PatchedJWKs'($1_from_bcs_deserialize'$1_jwks_PatchedJWKs'(b1), $1_from_bcs_deserialize'$1_jwks_PatchedJWKs'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::jwks::Patches>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_jwks_Patches'($1_from_bcs_deserialize'$1_jwks_Patches'(b1), $1_from_bcs_deserialize'$1_jwks_Patches'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::jwks::ProviderJWKs>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_jwks_ProviderJWKs'($1_from_bcs_deserialize'$1_jwks_ProviderJWKs'(b1), $1_from_bcs_deserialize'$1_jwks_ProviderJWKs'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::jwks::RSA_JWK>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_jwks_RSA_JWK'($1_from_bcs_deserialize'$1_jwks_RSA_JWK'(b1), $1_from_bcs_deserialize'$1_jwks_RSA_JWK'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::jwks::SupportedOIDCProviders>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_jwks_SupportedOIDCProviders'($1_from_bcs_deserialize'$1_jwks_SupportedOIDCProviders'(b1), $1_from_bcs_deserialize'$1_jwks_SupportedOIDCProviders'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::jwks::UnsupportedJWK>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_jwks_UnsupportedJWK'($1_from_bcs_deserialize'$1_jwks_UnsupportedJWK'(b1), $1_from_bcs_deserialize'$1_jwks_UnsupportedJWK'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::dkg::DKGSessionMetadata>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_dkg_DKGSessionMetadata'($1_from_bcs_deserialize'$1_dkg_DKGSessionMetadata'(b1), $1_from_bcs_deserialize'$1_dkg_DKGSessionMetadata'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::dkg::DKGSessionState>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_dkg_DKGSessionState'($1_from_bcs_deserialize'$1_dkg_DKGSessionState'(b1), $1_from_bcs_deserialize'$1_dkg_DKGSessionState'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::dkg::DKGState>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_dkg_DKGState'($1_from_bcs_deserialize'$1_dkg_DKGState'(b1), $1_from_bcs_deserialize'$1_dkg_DKGState'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::consensus_config::ConsensusConfig>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_consensus_config_ConsensusConfig'($1_from_bcs_deserialize'$1_consensus_config_ConsensusConfig'(b1), $1_from_bcs_deserialize'$1_consensus_config_ConsensusConfig'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::randomness::PerBlockRandomness>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_randomness_PerBlockRandomness'($1_from_bcs_deserialize'$1_randomness_PerBlockRandomness'(b1), $1_from_bcs_deserialize'$1_randomness_PerBlockRandomness'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::block::BlockResource>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_block_BlockResource'($1_from_bcs_deserialize'$1_block_BlockResource'(b1), $1_from_bcs_deserialize'$1_block_BlockResource'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::block::CommitHistory>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_block_CommitHistory'($1_from_bcs_deserialize'$1_block_CommitHistory'(b1), $1_from_bcs_deserialize'$1_block_CommitHistory'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <#0>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'#0'($1_from_bcs_deserialize'#0'(b1), $1_from_bcs_deserialize'#0'(b2)))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/permissioned_signer.spec.move:5:9+288
axiom (forall a: $1_permissioned_signer_GrantedPermissionHandles :: $IsValid'$1_permissioned_signer_GrantedPermissionHandles'(a) ==> ((var $range_0 := $Range(0, LenVec(a->$active_handles)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
((var $range_2 := $Range(0, LenVec(a->$active_handles)); (forall $i_3: int :: $InRange($range_2, $i_3) ==> (var j := $i_3;
((!$IsEqual'num'(i, j) ==> !$IsEqual'address'(ReadVec(a->$active_handles, i), ReadVec(a->$active_handles, j)))))))))))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:8:9+113
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''($1_aptos_hash_spec_keccak256(b1), $1_aptos_hash_spec_keccak256(b2)) ==> $IsEqual'vec'u8''(b1, b2))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:13:9+129
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''($1_aptos_hash_spec_sha2_512_internal(b1), $1_aptos_hash_spec_sha2_512_internal(b2)) ==> $IsEqual'vec'u8''(b1, b2))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:18:9+129
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''($1_aptos_hash_spec_sha3_512_internal(b1), $1_aptos_hash_spec_sha3_512_internal(b2)) ==> $IsEqual'vec'u8''(b1, b2))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:23:9+131
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''($1_aptos_hash_spec_ripemd160_internal(b1), $1_aptos_hash_spec_ripemd160_internal(b2)) ==> $IsEqual'vec'u8''(b1, b2))));

// axiom at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:28:9+135
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''($1_aptos_hash_spec_blake2b_256_internal(b1), $1_aptos_hash_spec_blake2b_256_internal(b2)) ==> $IsEqual'vec'u8''(b1, b2))));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:203:5+93
function {:inline} $1_vector_$is_empty'$1_string_String'(self: Vec ($1_string_String)): bool {
    $IsEqual'u64'($1_vector_$length'$1_string_String'(self), 0)
}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:203:5+93
function {:inline} $1_vector_$is_empty'$1_any_Any'(self: Vec ($1_any_Any)): bool {
    $IsEqual'u64'($1_vector_$length'$1_any_Any'(self), 0)
}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:203:5+93
function {:inline} $1_vector_$is_empty'$1_jwks_JWK'(self: Vec ($1_jwks_JWK)): bool {
    $IsEqual'u64'($1_vector_$length'$1_jwks_JWK'(self), 0)
}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:203:5+93
function {:inline} $1_vector_$is_empty'$1_jwks_ProviderJWKs'(self: Vec ($1_jwks_ProviderJWKs)): bool {
    $IsEqual'u64'($1_vector_$length'$1_jwks_ProviderJWKs'(self), 0)
}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:34:10+81
function {:inline} $1_option_spec_none'vec'u8''(): $1_option_Option'vec'u8'' {
    $1_option_Option'vec'u8''($EmptyVec'vec'u8''())
}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:34:10+81
function {:inline} $1_option_spec_none'$1_jwks_JWK'(): $1_option_Option'$1_jwks_JWK' {
    $1_option_Option'$1_jwks_JWK'($EmptyVec'$1_jwks_JWK'())
}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:34:10+81
function {:inline} $1_option_spec_none'$1_jwks_ProviderJWKs'(): $1_option_Option'$1_jwks_ProviderJWKs' {
    $1_option_Option'$1_jwks_ProviderJWKs'($EmptyVec'$1_jwks_ProviderJWKs'())
}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:47:10+89
function {:inline} $1_option_spec_some'vec'u8''(e: Vec (int)): $1_option_Option'vec'u8'' {
    $1_option_Option'vec'u8''(MakeVec1(e))
}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:47:10+89
function {:inline} $1_option_spec_some'$1_jwks_JWK'(e: $1_jwks_JWK): $1_option_Option'$1_jwks_JWK' {
    $1_option_Option'$1_jwks_JWK'(MakeVec1(e))
}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:47:10+89
function {:inline} $1_option_spec_some'$1_jwks_ProviderJWKs'(e: $1_jwks_ProviderJWKs): $1_option_Option'$1_jwks_ProviderJWKs' {
    $1_option_Option'$1_jwks_ProviderJWKs'(MakeVec1(e))
}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:69:10+90
function {:inline} $1_option_spec_is_none'$1_jwks_JWK'(self: $1_option_Option'$1_jwks_JWK'): bool {
    $1_vector_$is_empty'$1_jwks_JWK'(self->$vec)
}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:69:10+90
function {:inline} $1_option_spec_is_none'$1_jwks_ProviderJWKs'(self: $1_option_Option'$1_jwks_ProviderJWKs'): bool {
    $1_vector_$is_empty'$1_jwks_ProviderJWKs'(self->$vec)
}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:82:10+91
function {:inline} $1_option_spec_is_some'$1_jwks_ProviderJWKs'(self: $1_option_Option'$1_jwks_ProviderJWKs'): bool {
    !$1_vector_$is_empty'$1_jwks_ProviderJWKs'(self->$vec)
}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:111:10+84
function {:inline} $1_option_spec_borrow'$1_string_String'(self: $1_option_Option'$1_string_String'): $1_string_String {
    ReadVec(self->$vec, 0)
}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:111:10+84
function {:inline} $1_option_spec_borrow'$1_any_Any'(self: $1_option_Option'$1_any_Any'): $1_any_Any {
    ReadVec(self->$vec, 0)
}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:111:10+84
function {:inline} $1_option_spec_borrow'$1_jwks_JWK'(self: $1_option_Option'$1_jwks_JWK'): $1_jwks_JWK {
    ReadVec(self->$vec, 0)
}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:111:10+84
function {:inline} $1_option_spec_borrow'$1_jwks_ProviderJWKs'(self: $1_option_Option'$1_jwks_ProviderJWKs'): $1_jwks_ProviderJWKs {
    ReadVec(self->$vec, 0)
}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:102:5+139
function {:inline} $1_option_$borrow'$1_jwks_JWK'(self: $1_option_Option'$1_jwks_JWK'): $1_jwks_JWK {
    $1_vector_$borrow'$1_jwks_JWK'(self->$vec, 0)
}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:61:5+93
function {:inline} $1_option_$is_none'$1_string_String'(self: $1_option_Option'$1_string_String'): bool {
    $1_vector_$is_empty'$1_string_String'(self->$vec)
}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:61:5+93
function {:inline} $1_option_$is_none'$1_any_Any'(self: $1_option_Option'$1_any_Any'): bool {
    $1_vector_$is_empty'$1_any_Any'(self->$vec)
}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:61:5+93
function {:inline} $1_option_$is_none'$1_jwks_JWK'(self: $1_option_Option'$1_jwks_JWK'): bool {
    $1_vector_$is_empty'$1_jwks_JWK'(self->$vec)
}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:61:5+93
function {:inline} $1_option_$is_none'$1_jwks_ProviderJWKs'(self: $1_option_Option'$1_jwks_ProviderJWKs'): bool {
    $1_vector_$is_empty'$1_jwks_ProviderJWKs'(self->$vec)
}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:74:5+94
function {:inline} $1_option_$is_some'$1_string_String'(self: $1_option_Option'$1_string_String'): bool {
    !$1_vector_$is_empty'$1_string_String'(self->$vec)
}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:74:5+94
function {:inline} $1_option_$is_some'$1_any_Any'(self: $1_option_Option'$1_any_Any'): bool {
    !$1_vector_$is_empty'$1_any_Any'(self->$vec)
}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:74:5+94
function {:inline} $1_option_$is_some'$1_jwks_JWK'(self: $1_option_Option'$1_jwks_JWK'): bool {
    !$1_vector_$is_empty'$1_jwks_JWK'(self->$vec)
}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:74:5+94
function {:inline} $1_option_$is_some'$1_jwks_ProviderJWKs'(self: $1_option_Option'$1_jwks_ProviderJWKs'): bool {
    !$1_vector_$is_empty'$1_jwks_ProviderJWKs'(self->$vec)
}

// struct option::Option<vector<u8>> at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:7:5+81
datatype $1_option_Option'vec'u8'' {
    $1_option_Option'vec'u8''($vec: Vec (Vec (int)))
}
function {:inline} $Update'$1_option_Option'vec'u8'''_vec(s: $1_option_Option'vec'u8'', x: Vec (Vec (int))): $1_option_Option'vec'u8'' {
    $1_option_Option'vec'u8''(x)
}
function $IsValid'$1_option_Option'vec'u8'''(s: $1_option_Option'vec'u8''): bool {
    $IsValid'vec'vec'u8'''(s->$vec)
}
function {:inline} $IsEqual'$1_option_Option'vec'u8'''(s1: $1_option_Option'vec'u8'', s2: $1_option_Option'vec'u8''): bool {
    $IsEqual'vec'vec'u8'''(s1->$vec, s2->$vec)}

// struct option::Option<0x1::string::String> at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:7:5+81
datatype $1_option_Option'$1_string_String' {
    $1_option_Option'$1_string_String'($vec: Vec ($1_string_String))
}
function {:inline} $Update'$1_option_Option'$1_string_String''_vec(s: $1_option_Option'$1_string_String', x: Vec ($1_string_String)): $1_option_Option'$1_string_String' {
    $1_option_Option'$1_string_String'(x)
}
function $IsValid'$1_option_Option'$1_string_String''(s: $1_option_Option'$1_string_String'): bool {
    $IsValid'vec'$1_string_String''(s->$vec)
}
function {:inline} $IsEqual'$1_option_Option'$1_string_String''(s1: $1_option_Option'$1_string_String', s2: $1_option_Option'$1_string_String'): bool {
    $IsEqual'vec'$1_string_String''(s1->$vec, s2->$vec)}

// struct option::Option<0x1::any::Any> at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:7:5+81
datatype $1_option_Option'$1_any_Any' {
    $1_option_Option'$1_any_Any'($vec: Vec ($1_any_Any))
}
function {:inline} $Update'$1_option_Option'$1_any_Any''_vec(s: $1_option_Option'$1_any_Any', x: Vec ($1_any_Any)): $1_option_Option'$1_any_Any' {
    $1_option_Option'$1_any_Any'(x)
}
function $IsValid'$1_option_Option'$1_any_Any''(s: $1_option_Option'$1_any_Any'): bool {
    $IsValid'vec'$1_any_Any''(s->$vec)
}
function {:inline} $IsEqual'$1_option_Option'$1_any_Any''(s1: $1_option_Option'$1_any_Any', s2: $1_option_Option'$1_any_Any'): bool {
    $IsEqual'vec'$1_any_Any''(s1->$vec, s2->$vec)}

// struct option::Option<0x1::jwks::JWK> at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:7:5+81
datatype $1_option_Option'$1_jwks_JWK' {
    $1_option_Option'$1_jwks_JWK'($vec: Vec ($1_jwks_JWK))
}
function {:inline} $Update'$1_option_Option'$1_jwks_JWK''_vec(s: $1_option_Option'$1_jwks_JWK', x: Vec ($1_jwks_JWK)): $1_option_Option'$1_jwks_JWK' {
    $1_option_Option'$1_jwks_JWK'(x)
}
function $IsValid'$1_option_Option'$1_jwks_JWK''(s: $1_option_Option'$1_jwks_JWK'): bool {
    $IsValid'vec'$1_jwks_JWK''(s->$vec)
}
function {:inline} $IsEqual'$1_option_Option'$1_jwks_JWK''(s1: $1_option_Option'$1_jwks_JWK', s2: $1_option_Option'$1_jwks_JWK'): bool {
    $IsEqual'vec'$1_jwks_JWK''(s1->$vec, s2->$vec)}

// struct option::Option<0x1::jwks::ProviderJWKs> at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:7:5+81
datatype $1_option_Option'$1_jwks_ProviderJWKs' {
    $1_option_Option'$1_jwks_ProviderJWKs'($vec: Vec ($1_jwks_ProviderJWKs))
}
function {:inline} $Update'$1_option_Option'$1_jwks_ProviderJWKs''_vec(s: $1_option_Option'$1_jwks_ProviderJWKs', x: Vec ($1_jwks_ProviderJWKs)): $1_option_Option'$1_jwks_ProviderJWKs' {
    $1_option_Option'$1_jwks_ProviderJWKs'(x)
}
function $IsValid'$1_option_Option'$1_jwks_ProviderJWKs''(s: $1_option_Option'$1_jwks_ProviderJWKs'): bool {
    $IsValid'vec'$1_jwks_ProviderJWKs''(s->$vec)
}
function {:inline} $IsEqual'$1_option_Option'$1_jwks_ProviderJWKs''(s1: $1_option_Option'$1_jwks_ProviderJWKs', s2: $1_option_Option'$1_jwks_ProviderJWKs'): bool {
    $IsEqual'vec'$1_jwks_ProviderJWKs''(s1->$vec, s2->$vec)}

// struct option::Option<0x1::dkg::DKGSessionState> at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:7:5+81
datatype $1_option_Option'$1_dkg_DKGSessionState' {
    $1_option_Option'$1_dkg_DKGSessionState'($vec: Vec ($1_dkg_DKGSessionState))
}
function {:inline} $Update'$1_option_Option'$1_dkg_DKGSessionState''_vec(s: $1_option_Option'$1_dkg_DKGSessionState', x: Vec ($1_dkg_DKGSessionState)): $1_option_Option'$1_dkg_DKGSessionState' {
    $1_option_Option'$1_dkg_DKGSessionState'(x)
}
function $IsValid'$1_option_Option'$1_dkg_DKGSessionState''(s: $1_option_Option'$1_dkg_DKGSessionState'): bool {
    $IsValid'vec'$1_dkg_DKGSessionState''(s->$vec)
}
function {:inline} $IsEqual'$1_option_Option'$1_dkg_DKGSessionState''(s1: $1_option_Option'$1_dkg_DKGSessionState', s2: $1_option_Option'$1_dkg_DKGSessionState'): bool {
    $IsEqual'vec'$1_dkg_DKGSessionState''(s1->$vec, s2->$vec)}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.spec.move:28:9+50
function  $1_string_spec_internal_check_utf8(v: Vec (int)): bool;
axiom (forall v: Vec (int) ::
(var $$res := $1_string_spec_internal_check_utf8(v);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:32:5+72
function {:inline} $1_string_$bytes(self: $1_string_String): Vec (int) {
    self->$bytes
}

// struct string::String at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:12:5+70
datatype $1_string_String {
    $1_string_String($bytes: Vec (int))
}
function {:inline} $Update'$1_string_String'_bytes(s: $1_string_String, x: Vec (int)): $1_string_String {
    $1_string_String(x)
}
function $IsValid'$1_string_String'(s: $1_string_String): bool {
    $IsValid'vec'u8''(s->$bytes)
}
function {:inline} $IsEqual'$1_string_String'(s1: $1_string_String, s2: $1_string_String): bool {
    $IsEqual'vec'u8''(s1->$bytes, s2->$bytes)}

// fun string::bytes [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:32:5+72
procedure {:inline 1} $1_string_bytes(_$t0: $1_string_String) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t1: Vec (int);
    var $t0: $1_string_String;
    var $temp_0'$1_string_String': $1_string_String;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:32:5+1
    assume {:print "$at(17,1018,1019)"} true;
    assume {:print "$track_local(4,6,0):", $t0} $t0 == $t0;

    // $t1 := get_field<0x1::string::String>.bytes($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:33:9+11
    assume {:print "$at(17,1073,1084)"} true;
    $t1 := $t0->$bytes;

    // trace_return[0]($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:33:9+11
    assume {:print "$track_return(4,6,0):", $t1} $t1 == $t1;

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:34:5+1
    assume {:print "$at(17,1089,1090)"} true;
L1:

    // return $t1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:34:5+1
    assume {:print "$at(17,1089,1090)"} true;
    $ret0 := $t1;
    return;

}

// fun string::utf8 [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:17:5+133
procedure {:inline 1} $1_string_utf8(_$t0: Vec (int)) returns ($ret0: $1_string_String)
{
    // declare local variables
    var $t1: bool;
    var $t2: $1_string_String;
    var $t3: int;
    var $t0: Vec (int);
    var $temp_0'$1_string_String': $1_string_String;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[bytes]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:17:5+1
    assume {:print "$at(17,552,553)"} true;
    assume {:print "$track_local(4,13,0):", $t0} $t0 == $t0;

    // $t1 := opaque begin: string::internal_check_utf8($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:18:17+27
    assume {:print "$at(17,613,640)"} true;

    // assume WellFormed($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:18:17+27
    assume $IsValid'bool'($t1);

    // assume Eq<bool>($t1, string::spec_internal_check_utf8($t0)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:18:17+27
    assume $IsEqual'bool'($t1, $1_string_spec_internal_check_utf8($t0));

    // $t1 := opaque end: string::internal_check_utf8($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:18:17+27

    // if ($t1) goto L1 else goto L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:18:9+6
    if ($t1) { goto L1; } else { goto L0; }

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:19:9+13
    assume {:print "$at(17,666,679)"} true;
L1:

    // $t2 := pack 0x1::string::String($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:19:9+13
    assume {:print "$at(17,666,679)"} true;
    $t2 := $1_string_String($t0);

    // trace_return[0]($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:17:48+90
    assume {:print "$at(17,595,685)"} true;
    assume {:print "$track_return(4,13,0):", $t2} $t2 == $t2;

    // goto L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:17:48+90
    goto L2;

    // label L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:18:46+13
    assume {:print "$at(17,642,655)"} true;
L0:

    // $t3 := 1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:18:46+13
    assume {:print "$at(17,642,655)"} true;
    $t3 := 1;
    assume $IsValid'u64'($t3);

    // trace_abort($t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:18:9+6
    assume {:print "$at(17,605,611)"} true;
    assume {:print "$track_abort(4,13):", $t3} $t3 == $t3;

    // goto L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:18:9+6
    goto L3;

    // label L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:20:5+1
    assume {:print "$at(17,684,685)"} true;
L2:

    // return $t2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:20:5+1
    assume {:print "$at(17,684,685)"} true;
    $ret0 := $t2;
    return;

    // label L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:20:5+1
L3:

    // abort($t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:20:5+1
    assume {:print "$at(17,684,685)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:26:5+77
function {:inline} $1_signer_$address_of(s: $signer): int {
    $1_signer_$borrow_address(s)
}

// fun signer::address_of [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:26:5+77
procedure {:inline 1} $1_signer_address_of(_$t0: $signer) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t0: $signer;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[s]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:26:5+1
    assume {:print "$at(16,794,795)"} true;
    assume {:print "$track_local(5,0,0):", $t0} $t0 == $t0;

    // $t1 := signer::borrow_address($t0) on_abort goto L2 with $t2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:27:10+17
    assume {:print "$at(16,848,865)"} true;
    call $t1 := $1_signer_borrow_address($t0);
    if ($abort_flag) {
        assume {:print "$at(16,848,865)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(5,0):", $t2} $t2 == $t2;
        goto L2;
    }

    // trace_return[0]($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:27:9+18
    assume {:print "$track_return(5,0,0):", $t1} $t1 == $t1;

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:28:5+1
    assume {:print "$at(16,870,871)"} true;
L1:

    // return $t1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:28:5+1
    assume {:print "$at(16,870,871)"} true;
    $ret0 := $t1;
    return;

    // label L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:28:5+1
L2:

    // abort($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:28:5+1
    assume {:print "$at(16,870,871)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:64:3+89
function {:inline} $1_error_$canonical(category: int, reason: int): int {
    ($shlU64(category, 16) + reason)
}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:3+76
function {:inline} $1_error_$invalid_argument(r: int): int {
    $1_error_$canonical(1, r)
}

// fun error::invalid_argument [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:3+76
procedure {:inline 1} $1_error_invalid_argument(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:3+1
    assume {:print "$at(11,3082,3083)"} true;
    assume {:print "$track_local(6,4,0):", $t0} $t0 == $t0;

    // $t1 := 1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:57+16
    $t1 := 1;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:69:5+29
    assume {:print "$at(11,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:47+30
    assume {:print "$at(11,3126,3156)"} true;

    // assume WellFormed($t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:47+30
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:47+30
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:47+30

    // trace_return[0]($t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:47+30
    assume {:print "$track_return(6,4,0):", $t3} $t3 == $t3;

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:78+1
L1:

    // return $t3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:78+1
    assume {:print "$at(11,3157,3158)"} true;
    $ret0 := $t3;
    return;

}

// fun error::invalid_state [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:3+70
procedure {:inline 1} $1_error_invalid_state(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:3+1
    assume {:print "$at(11,3232,3233)"} true;
    assume {:print "$track_local(6,5,0):", $t0} $t0 == $t0;

    // $t1 := 3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:54+13
    $t1 := 3;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:69:5+29
    assume {:print "$at(11,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:44+27
    assume {:print "$at(11,3273,3300)"} true;

    // assume WellFormed($t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:44+27
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:44+27
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:44+27

    // trace_return[0]($t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:44+27
    assume {:print "$track_return(6,5,0):", $t3} $t3 == $t3;

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:72+1
L1:

    // return $t3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:72+1
    assume {:print "$at(11,3301,3302)"} true;
    $ret0 := $t3;
    return;

}

// fun system_addresses::is_aptos_framework_address [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/system_addresses.move:59:5+99
procedure {:inline 1} $1_system_addresses_is_aptos_framework_address(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[addr]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/system_addresses.move:59:5+1
    assume {:print "$at(211,1992,1993)"} true;
    assume {:print "$track_local(11,6,0):", $t0} $t0 == $t0;

    // $t1 := 0x1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/system_addresses.move:60:17+16
    assume {:print "$at(211,2069,2085)"} true;
    $t1 := 1;
    assume $IsValid'address'($t1);

    // $t2 := ==($t0, $t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/system_addresses.move:60:9+24
    $t2 := $IsEqual'address'($t0, $t1);

    // trace_return[0]($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/system_addresses.move:60:9+24
    assume {:print "$track_return(11,6,0):", $t2} $t2 == $t2;

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/system_addresses.move:61:5+1
    assume {:print "$at(211,2090,2091)"} true;
L1:

    // return $t2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/system_addresses.move:61:5+1
    assume {:print "$at(211,2090,2091)"} true;
    $ret0 := $t2;
    return;

}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'bool'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'bool'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'u8'(bytes: Vec (int)): int;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'u8'(bytes);
$IsValid'u8'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'u32'(bytes: Vec (int)): int;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'u32'(bytes);
$IsValid'u32'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'u64'(bytes: Vec (int)): int;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'u64'(bytes);
$IsValid'u64'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'u128'(bytes: Vec (int)): int;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'u128'(bytes);
$IsValid'u128'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'u256'(bytes: Vec (int)): int;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'u256'(bytes);
$IsValid'u256'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'address'(bytes: Vec (int)): int;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'address'(bytes);
$IsValid'address'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'signer'(bytes: Vec (int)): $signer;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'signer'(bytes);
$IsValid'signer'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'u8''(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'u8''(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'u64''(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'u64''(bytes);
$IsValid'vec'u64''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'address''(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'address''(bytes);
$IsValid'vec'address''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'vec'u8'''(bytes: Vec (int)): Vec (Vec (int));
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'vec'u8'''(bytes);
$IsValid'vec'vec'u8'''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_string_String''(bytes: Vec (int)): Vec ($1_string_String);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_string_String''(bytes);
$IsValid'vec'$1_string_String''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_any_Any''(bytes: Vec (int)): Vec ($1_any_Any);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_any_Any''(bytes);
$IsValid'vec'$1_any_Any''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_validator_consensus_info_ValidatorConsensusInfo''(bytes: Vec (int)): Vec ($1_validator_consensus_info_ValidatorConsensusInfo);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_validator_consensus_info_ValidatorConsensusInfo''(bytes);
$IsValid'vec'$1_validator_consensus_info_ValidatorConsensusInfo''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_stake_IndividualValidatorPerformance''(bytes: Vec (int)): Vec ($1_stake_IndividualValidatorPerformance);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_stake_IndividualValidatorPerformance''(bytes);
$IsValid'vec'$1_stake_IndividualValidatorPerformance''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_stake_ValidatorInfo''(bytes: Vec (int)): Vec ($1_stake_ValidatorInfo);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_stake_ValidatorInfo''(bytes);
$IsValid'vec'$1_stake_ValidatorInfo''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_storage_gas_Point''(bytes: Vec (int)): Vec ($1_storage_gas_Point);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_storage_gas_Point''(bytes);
$IsValid'vec'$1_storage_gas_Point''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_jwks_JWK''(bytes: Vec (int)): Vec ($1_jwks_JWK);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_jwks_JWK''(bytes);
$IsValid'vec'$1_jwks_JWK''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_jwks_OIDCProvider''(bytes: Vec (int)): Vec ($1_jwks_OIDCProvider);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_jwks_OIDCProvider''(bytes);
$IsValid'vec'$1_jwks_OIDCProvider''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_jwks_Patch''(bytes: Vec (int)): Vec ($1_jwks_Patch);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_jwks_Patch''(bytes);
$IsValid'vec'$1_jwks_Patch''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_jwks_ProviderJWKs''(bytes: Vec (int)): Vec ($1_jwks_ProviderJWKs);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_jwks_ProviderJWKs''(bytes);
$IsValid'vec'$1_jwks_ProviderJWKs''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_jwks_SupportedOIDCProviders''(bytes: Vec (int)): Vec ($1_jwks_SupportedOIDCProviders);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_jwks_SupportedOIDCProviders''(bytes);
$IsValid'vec'$1_jwks_SupportedOIDCProviders''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_dkg_DKGSessionState''(bytes: Vec (int)): Vec ($1_dkg_DKGSessionState);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_dkg_DKGSessionState''(bytes);
$IsValid'vec'$1_dkg_DKGSessionState''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'#0''(bytes: Vec (int)): Vec (#0);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'#0''(bytes);
$IsValid'vec'#0''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_option_Option'vec'u8'''(bytes: Vec (int)): $1_option_Option'vec'u8'';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_option_Option'vec'u8'''(bytes);
$IsValid'$1_option_Option'vec'u8'''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_option_Option'$1_string_String''(bytes: Vec (int)): $1_option_Option'$1_string_String';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_option_Option'$1_string_String''(bytes);
$IsValid'$1_option_Option'$1_string_String''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_option_Option'$1_any_Any''(bytes: Vec (int)): $1_option_Option'$1_any_Any';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_option_Option'$1_any_Any''(bytes);
$IsValid'$1_option_Option'$1_any_Any''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_option_Option'$1_jwks_JWK''(bytes: Vec (int)): $1_option_Option'$1_jwks_JWK';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_option_Option'$1_jwks_JWK''(bytes);
$IsValid'$1_option_Option'$1_jwks_JWK''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_option_Option'$1_jwks_ProviderJWKs''(bytes: Vec (int)): $1_option_Option'$1_jwks_ProviderJWKs';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_option_Option'$1_jwks_ProviderJWKs''(bytes);
$IsValid'$1_option_Option'$1_jwks_ProviderJWKs''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_option_Option'$1_dkg_DKGSessionState''(bytes: Vec (int)): $1_option_Option'$1_dkg_DKGSessionState';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_option_Option'$1_dkg_DKGSessionState''(bytes);
$IsValid'$1_option_Option'$1_dkg_DKGSessionState''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_string_String'(bytes: Vec (int)): $1_string_String;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_string_String'(bytes);
$IsValid'$1_string_String'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_chain_status_GenesisEndMarker'(bytes: Vec (int)): $1_chain_status_GenesisEndMarker;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_chain_status_GenesisEndMarker'(bytes);
$IsValid'$1_chain_status_GenesisEndMarker'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_timestamp_CurrentTimeMicroseconds'(bytes: Vec (int)): $1_timestamp_CurrentTimeMicroseconds;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_timestamp_CurrentTimeMicroseconds'(bytes);
$IsValid'$1_timestamp_CurrentTimeMicroseconds'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_any_Any'(bytes: Vec (int)): $1_any_Any;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_any_Any'(bytes);
$IsValid'$1_any_Any'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_copyable_any_Any'(bytes: Vec (int)): $1_copyable_any_Any;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_copyable_any_Any'(bytes);
$IsValid'$1_copyable_any_Any'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_table_with_length_TableWithLength'u32_$1_block_NewBlockEvent''(bytes: Vec (int)): Table int ($1_block_NewBlockEvent);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_table_with_length_TableWithLength'u32_$1_block_NewBlockEvent''(bytes);
$IsValid'$1_table_with_length_TableWithLength'u32_$1_block_NewBlockEvent''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_permissioned_signer_GrantedPermissionHandles'(bytes: Vec (int)): $1_permissioned_signer_GrantedPermissionHandles;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_permissioned_signer_GrantedPermissionHandles'(bytes);
$IsValid'$1_permissioned_signer_GrantedPermissionHandles'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_guid_GUID'(bytes: Vec (int)): $1_guid_GUID;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_guid_GUID'(bytes);
$IsValid'$1_guid_GUID'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_guid_ID'(bytes: Vec (int)): $1_guid_ID;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_guid_ID'(bytes);
$IsValid'$1_guid_ID'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_reconfiguration_NewEpochEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_block_NewBlockEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_block_NewBlockEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_block_NewBlockEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_block_NewBlockEvent''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_block_UpdateEpochIntervalEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_block_UpdateEpochIntervalEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_block_UpdateEpochIntervalEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_block_UpdateEpochIntervalEvent''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_object_Object'$1_fungible_asset_Metadata''(bytes: Vec (int)): $1_object_Object'$1_fungible_asset_Metadata';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_object_Object'$1_fungible_asset_Metadata''(bytes);
$IsValid'$1_object_Object'$1_fungible_asset_Metadata''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_BurnRef'(bytes: Vec (int)): $1_fungible_asset_BurnRef;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_BurnRef'(bytes);
$IsValid'$1_fungible_asset_BurnRef'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): $1_coin_BurnCapability'$1_aptos_coin_AptosCoin';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_coin_MintCapability'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): $1_coin_MintCapability'$1_aptos_coin_AptosCoin';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_coin_MintCapability'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'$1_coin_MintCapability'$1_aptos_coin_AptosCoin''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_simple_map_SimpleMap'$1_string_String_$1_any_Any''(bytes: Vec (int)): Table int ($1_any_Any);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_simple_map_SimpleMap'$1_string_String_$1_any_Any''(bytes);
$IsValid'$1_simple_map_SimpleMap'$1_string_String_$1_any_Any''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fixed_point64_FixedPoint64'(bytes: Vec (int)): $1_fixed_point64_FixedPoint64;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fixed_point64_FixedPoint64'(bytes);
$IsValid'$1_fixed_point64_FixedPoint64'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_staking_config_StakingConfig'(bytes: Vec (int)): $1_staking_config_StakingConfig;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_staking_config_StakingConfig'(bytes);
$IsValid'$1_staking_config_StakingConfig'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_staking_config_StakingRewardsConfig'(bytes: Vec (int)): $1_staking_config_StakingRewardsConfig;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_staking_config_StakingRewardsConfig'(bytes);
$IsValid'$1_staking_config_StakingRewardsConfig'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_reconfiguration_state_State'(bytes: Vec (int)): $1_reconfiguration_state_State;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_reconfiguration_state_State'(bytes);
$IsValid'$1_reconfiguration_state_State'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_reconfiguration_state_StateActive'(bytes: Vec (int)): $1_reconfiguration_state_StateActive;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_reconfiguration_state_StateActive'(bytes);
$IsValid'$1_reconfiguration_state_StateActive'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_reconfiguration_state_StateInactive'(bytes: Vec (int)): $1_reconfiguration_state_StateInactive;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_reconfiguration_state_StateInactive'(bytes);
$IsValid'$1_reconfiguration_state_StateInactive'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_stake_AptosCoinCapabilities'(bytes: Vec (int)): $1_stake_AptosCoinCapabilities;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_stake_AptosCoinCapabilities'(bytes);
$IsValid'$1_stake_AptosCoinCapabilities'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_stake_ValidatorConfig'(bytes: Vec (int)): $1_stake_ValidatorConfig;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_stake_ValidatorConfig'(bytes);
$IsValid'$1_stake_ValidatorConfig'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_stake_ValidatorPerformance'(bytes: Vec (int)): $1_stake_ValidatorPerformance;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_stake_ValidatorPerformance'(bytes);
$IsValid'$1_stake_ValidatorPerformance'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_stake_ValidatorSet'(bytes: Vec (int)): $1_stake_ValidatorSet;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_stake_ValidatorSet'(bytes);
$IsValid'$1_stake_ValidatorSet'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_transaction_fee_AptosCoinCapabilities'(bytes: Vec (int)): $1_transaction_fee_AptosCoinCapabilities;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_transaction_fee_AptosCoinCapabilities'(bytes);
$IsValid'$1_transaction_fee_AptosCoinCapabilities'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_transaction_fee_AptosFABurnCapabilities'(bytes: Vec (int)): $1_transaction_fee_AptosFABurnCapabilities;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_transaction_fee_AptosFABurnCapabilities'(bytes);
$IsValid'$1_transaction_fee_AptosFABurnCapabilities'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_state_storage_GasParameter'(bytes: Vec (int)): $1_state_storage_GasParameter;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_state_storage_GasParameter'(bytes);
$IsValid'$1_state_storage_GasParameter'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_state_storage_StateStorageUsage'(bytes: Vec (int)): $1_state_storage_StateStorageUsage;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_state_storage_StateStorageUsage'(bytes);
$IsValid'$1_state_storage_StateStorageUsage'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_state_storage_Usage'(bytes: Vec (int)): $1_state_storage_Usage;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_state_storage_Usage'(bytes);
$IsValid'$1_state_storage_Usage'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_storage_gas_GasCurve'(bytes: Vec (int)): $1_storage_gas_GasCurve;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_storage_gas_GasCurve'(bytes);
$IsValid'$1_storage_gas_GasCurve'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_storage_gas_Point'(bytes: Vec (int)): $1_storage_gas_Point;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_storage_gas_Point'(bytes);
$IsValid'$1_storage_gas_Point'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_storage_gas_StorageGas'(bytes: Vec (int)): $1_storage_gas_StorageGas;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_storage_gas_StorageGas'(bytes);
$IsValid'$1_storage_gas_StorageGas'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_storage_gas_StorageGasConfig'(bytes: Vec (int)): $1_storage_gas_StorageGasConfig;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_storage_gas_StorageGasConfig'(bytes);
$IsValid'$1_storage_gas_StorageGasConfig'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_storage_gas_UsageGasConfig'(bytes: Vec (int)): $1_storage_gas_UsageGasConfig;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_storage_gas_UsageGasConfig'(bytes);
$IsValid'$1_storage_gas_UsageGasConfig'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_reconfiguration_Configuration'(bytes: Vec (int)): $1_reconfiguration_Configuration;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_reconfiguration_Configuration'(bytes);
$IsValid'$1_reconfiguration_Configuration'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_config_buffer_PendingConfigs'(bytes: Vec (int)): $1_config_buffer_PendingConfigs;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_config_buffer_PendingConfigs'(bytes);
$IsValid'$1_config_buffer_PendingConfigs'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_randomness_config_RandomnessConfig'(bytes: Vec (int)): $1_randomness_config_RandomnessConfig;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_randomness_config_RandomnessConfig'(bytes);
$IsValid'$1_randomness_config_RandomnessConfig'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_comparator_Result'(bytes: Vec (int)): $1_comparator_Result;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_comparator_Result'(bytes);
$IsValid'$1_comparator_Result'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_jwks_AllProvidersJWKs'(bytes: Vec (int)): $1_jwks_AllProvidersJWKs;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_jwks_AllProvidersJWKs'(bytes);
$IsValid'$1_jwks_AllProvidersJWKs'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_jwks_FederatedJWKs'(bytes: Vec (int)): $1_jwks_FederatedJWKs;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_jwks_FederatedJWKs'(bytes);
$IsValid'$1_jwks_FederatedJWKs'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_jwks_JWK'(bytes: Vec (int)): $1_jwks_JWK;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_jwks_JWK'(bytes);
$IsValid'$1_jwks_JWK'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_jwks_OIDCProvider'(bytes: Vec (int)): $1_jwks_OIDCProvider;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_jwks_OIDCProvider'(bytes);
$IsValid'$1_jwks_OIDCProvider'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_jwks_ObservedJWKs'(bytes: Vec (int)): $1_jwks_ObservedJWKs;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_jwks_ObservedJWKs'(bytes);
$IsValid'$1_jwks_ObservedJWKs'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_jwks_ObservedJWKsUpdated'(bytes: Vec (int)): $1_jwks_ObservedJWKsUpdated;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_jwks_ObservedJWKsUpdated'(bytes);
$IsValid'$1_jwks_ObservedJWKsUpdated'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_jwks_Patch'(bytes: Vec (int)): $1_jwks_Patch;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_jwks_Patch'(bytes);
$IsValid'$1_jwks_Patch'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_jwks_PatchRemoveAll'(bytes: Vec (int)): $1_jwks_PatchRemoveAll;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_jwks_PatchRemoveAll'(bytes);
$IsValid'$1_jwks_PatchRemoveAll'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_jwks_PatchRemoveIssuer'(bytes: Vec (int)): $1_jwks_PatchRemoveIssuer;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_jwks_PatchRemoveIssuer'(bytes);
$IsValid'$1_jwks_PatchRemoveIssuer'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_jwks_PatchRemoveJWK'(bytes: Vec (int)): $1_jwks_PatchRemoveJWK;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_jwks_PatchRemoveJWK'(bytes);
$IsValid'$1_jwks_PatchRemoveJWK'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_jwks_PatchUpsertJWK'(bytes: Vec (int)): $1_jwks_PatchUpsertJWK;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_jwks_PatchUpsertJWK'(bytes);
$IsValid'$1_jwks_PatchUpsertJWK'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_jwks_PatchedJWKs'(bytes: Vec (int)): $1_jwks_PatchedJWKs;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_jwks_PatchedJWKs'(bytes);
$IsValid'$1_jwks_PatchedJWKs'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_jwks_Patches'(bytes: Vec (int)): $1_jwks_Patches;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_jwks_Patches'(bytes);
$IsValid'$1_jwks_Patches'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_jwks_ProviderJWKs'(bytes: Vec (int)): $1_jwks_ProviderJWKs;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_jwks_ProviderJWKs'(bytes);
$IsValid'$1_jwks_ProviderJWKs'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_jwks_RSA_JWK'(bytes: Vec (int)): $1_jwks_RSA_JWK;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_jwks_RSA_JWK'(bytes);
$IsValid'$1_jwks_RSA_JWK'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_jwks_SupportedOIDCProviders'(bytes: Vec (int)): $1_jwks_SupportedOIDCProviders;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_jwks_SupportedOIDCProviders'(bytes);
$IsValid'$1_jwks_SupportedOIDCProviders'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_jwks_UnsupportedJWK'(bytes: Vec (int)): $1_jwks_UnsupportedJWK;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_jwks_UnsupportedJWK'(bytes);
$IsValid'$1_jwks_UnsupportedJWK'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_dkg_DKGSessionMetadata'(bytes: Vec (int)): $1_dkg_DKGSessionMetadata;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_dkg_DKGSessionMetadata'(bytes);
$IsValid'$1_dkg_DKGSessionMetadata'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_dkg_DKGSessionState'(bytes: Vec (int)): $1_dkg_DKGSessionState;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_dkg_DKGSessionState'(bytes);
$IsValid'$1_dkg_DKGSessionState'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_dkg_DKGState'(bytes: Vec (int)): $1_dkg_DKGState;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_dkg_DKGState'(bytes);
$IsValid'$1_dkg_DKGState'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_consensus_config_ConsensusConfig'(bytes: Vec (int)): $1_consensus_config_ConsensusConfig;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_consensus_config_ConsensusConfig'(bytes);
$IsValid'$1_consensus_config_ConsensusConfig'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_randomness_PerBlockRandomness'(bytes: Vec (int)): $1_randomness_PerBlockRandomness;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_randomness_PerBlockRandomness'(bytes);
$IsValid'$1_randomness_PerBlockRandomness'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_block_BlockResource'(bytes: Vec (int)): $1_block_BlockResource;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_block_BlockResource'(bytes);
$IsValid'$1_block_BlockResource'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_block_CommitHistory'(bytes: Vec (int)): $1_block_CommitHistory;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_block_CommitHistory'(bytes);
$IsValid'$1_block_CommitHistory'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'#0'(bytes: Vec (int)): #0;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'#0'(bytes);
$IsValid'#0'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'bool'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'bool'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'u8'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'u8'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'u32'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'u32'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'u64'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'u64'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'u128'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'u128'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'u256'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'u256'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'address'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'address'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'signer'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'signer'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'u8''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'u8''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'u64''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'u64''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'address''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'address''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'vec'u8'''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'vec'u8'''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_string_String''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_string_String''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_any_Any''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_any_Any''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_validator_consensus_info_ValidatorConsensusInfo''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_validator_consensus_info_ValidatorConsensusInfo''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_stake_IndividualValidatorPerformance''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_stake_IndividualValidatorPerformance''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_stake_ValidatorInfo''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_stake_ValidatorInfo''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_storage_gas_Point''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_storage_gas_Point''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_jwks_JWK''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_jwks_JWK''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_jwks_OIDCProvider''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_jwks_OIDCProvider''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_jwks_Patch''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_jwks_Patch''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_jwks_ProviderJWKs''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_jwks_ProviderJWKs''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_jwks_SupportedOIDCProviders''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_jwks_SupportedOIDCProviders''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_dkg_DKGSessionState''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_dkg_DKGSessionState''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'#0''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'#0''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_option_Option'vec'u8'''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_option_Option'vec'u8'''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_option_Option'$1_string_String''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_option_Option'$1_string_String''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_option_Option'$1_any_Any''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_option_Option'$1_any_Any''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_option_Option'$1_jwks_JWK''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_option_Option'$1_jwks_JWK''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_option_Option'$1_jwks_ProviderJWKs''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_option_Option'$1_jwks_ProviderJWKs''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_option_Option'$1_dkg_DKGSessionState''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_option_Option'$1_dkg_DKGSessionState''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_string_String'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_string_String'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_chain_status_GenesisEndMarker'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_chain_status_GenesisEndMarker'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_timestamp_CurrentTimeMicroseconds'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_timestamp_CurrentTimeMicroseconds'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_any_Any'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_any_Any'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_copyable_any_Any'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_copyable_any_Any'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_table_with_length_TableWithLength'u32_$1_block_NewBlockEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_table_with_length_TableWithLength'u32_$1_block_NewBlockEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_permissioned_signer_GrantedPermissionHandles'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_permissioned_signer_GrantedPermissionHandles'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_guid_GUID'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_guid_GUID'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_guid_ID'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_guid_ID'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_block_NewBlockEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_block_NewBlockEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_block_UpdateEpochIntervalEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_block_UpdateEpochIntervalEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_object_Object'$1_fungible_asset_Metadata''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_object_Object'$1_fungible_asset_Metadata''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_BurnRef'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_BurnRef'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_coin_MintCapability'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_coin_MintCapability'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_simple_map_SimpleMap'$1_string_String_$1_any_Any''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_simple_map_SimpleMap'$1_string_String_$1_any_Any''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fixed_point64_FixedPoint64'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fixed_point64_FixedPoint64'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_staking_config_StakingConfig'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_staking_config_StakingConfig'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_staking_config_StakingRewardsConfig'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_staking_config_StakingRewardsConfig'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_reconfiguration_state_State'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_reconfiguration_state_State'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_reconfiguration_state_StateActive'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_reconfiguration_state_StateActive'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_reconfiguration_state_StateInactive'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_reconfiguration_state_StateInactive'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_stake_AptosCoinCapabilities'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_stake_AptosCoinCapabilities'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_stake_ValidatorConfig'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_stake_ValidatorConfig'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_stake_ValidatorPerformance'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_stake_ValidatorPerformance'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_stake_ValidatorSet'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_stake_ValidatorSet'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_transaction_fee_AptosCoinCapabilities'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_transaction_fee_AptosCoinCapabilities'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_transaction_fee_AptosFABurnCapabilities'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_transaction_fee_AptosFABurnCapabilities'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_state_storage_GasParameter'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_state_storage_GasParameter'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_state_storage_StateStorageUsage'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_state_storage_StateStorageUsage'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_state_storage_Usage'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_state_storage_Usage'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_storage_gas_GasCurve'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_storage_gas_GasCurve'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_storage_gas_Point'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_storage_gas_Point'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_storage_gas_StorageGas'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_storage_gas_StorageGas'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_storage_gas_StorageGasConfig'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_storage_gas_StorageGasConfig'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_storage_gas_UsageGasConfig'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_storage_gas_UsageGasConfig'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_reconfiguration_Configuration'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_reconfiguration_Configuration'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_config_buffer_PendingConfigs'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_config_buffer_PendingConfigs'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_randomness_config_RandomnessConfig'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_randomness_config_RandomnessConfig'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_comparator_Result'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_comparator_Result'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_jwks_AllProvidersJWKs'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_jwks_AllProvidersJWKs'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_jwks_FederatedJWKs'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_jwks_FederatedJWKs'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_jwks_JWK'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_jwks_JWK'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_jwks_OIDCProvider'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_jwks_OIDCProvider'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_jwks_ObservedJWKs'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_jwks_ObservedJWKs'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_jwks_ObservedJWKsUpdated'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_jwks_ObservedJWKsUpdated'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_jwks_Patch'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_jwks_Patch'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_jwks_PatchRemoveAll'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_jwks_PatchRemoveAll'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_jwks_PatchRemoveIssuer'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_jwks_PatchRemoveIssuer'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_jwks_PatchRemoveJWK'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_jwks_PatchRemoveJWK'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_jwks_PatchUpsertJWK'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_jwks_PatchUpsertJWK'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_jwks_PatchedJWKs'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_jwks_PatchedJWKs'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_jwks_Patches'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_jwks_Patches'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_jwks_ProviderJWKs'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_jwks_ProviderJWKs'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_jwks_RSA_JWK'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_jwks_RSA_JWK'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_jwks_SupportedOIDCProviders'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_jwks_SupportedOIDCProviders'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_jwks_UnsupportedJWK'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_jwks_UnsupportedJWK'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_dkg_DKGSessionMetadata'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_dkg_DKGSessionMetadata'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_dkg_DKGSessionState'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_dkg_DKGSessionState'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_dkg_DKGState'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_dkg_DKGState'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_consensus_config_ConsensusConfig'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_consensus_config_ConsensusConfig'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_randomness_PerBlockRandomness'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_randomness_PerBlockRandomness'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_block_BlockResource'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_block_BlockResource'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_block_CommitHistory'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_block_CommitHistory'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'#0'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'#0'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/chain_status.move:27:5+89
function {:inline} $1_chain_status_$is_genesis($1_chain_status_GenesisEndMarker_$memory: $Memory $1_chain_status_GenesisEndMarker): bool {
    !$ResourceExists($1_chain_status_GenesisEndMarker_$memory, 1)
}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/chain_status.move:35:5+90
function {:inline} $1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory: $Memory $1_chain_status_GenesisEndMarker): bool {
    $ResourceExists($1_chain_status_GenesisEndMarker_$memory, 1)
}

// struct chain_status::GenesisEndMarker at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/chain_status.move:12:5+34
datatype $1_chain_status_GenesisEndMarker {
    $1_chain_status_GenesisEndMarker($dummy_field: bool)
}
function {:inline} $Update'$1_chain_status_GenesisEndMarker'_dummy_field(s: $1_chain_status_GenesisEndMarker, x: bool): $1_chain_status_GenesisEndMarker {
    $1_chain_status_GenesisEndMarker(x)
}
function $IsValid'$1_chain_status_GenesisEndMarker'(s: $1_chain_status_GenesisEndMarker): bool {
    $IsValid'bool'(s->$dummy_field)
}
function {:inline} $IsEqual'$1_chain_status_GenesisEndMarker'(s1: $1_chain_status_GenesisEndMarker, s2: $1_chain_status_GenesisEndMarker): bool {
    s1 == s2
}
var $1_chain_status_GenesisEndMarker_$memory: $Memory $1_chain_status_GenesisEndMarker;

// fun chain_status::assert_genesis [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/chain_status.move:45:5+104
procedure {:inline 1} $1_chain_status_assert_genesis() returns ()
{
    // declare local variables
    var $t0: bool;
    var $t1: int;
    var $t2: int;
    var $t3: int;

    // bytecode translation starts here
    // $t0 := chain_status::is_genesis() on_abort goto L3 with $t1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/chain_status.move:46:17+12
    assume {:print "$at(127,1788,1800)"} true;
    call $t0 := $1_chain_status_is_genesis();
    if ($abort_flag) {
        assume {:print "$at(127,1788,1800)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(22,0):", $t1} $t1 == $t1;
        goto L3;
    }

    // if ($t0) goto L1 else goto L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/chain_status.move:46:9+6
    if ($t0) { goto L1; } else { goto L0; }

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/chain_status.move:45:33+76
    assume {:print "$at(127,1770,1846)"} true;
L1:

    // goto L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/chain_status.move:45:33+76
    assume {:print "$at(127,1770,1846)"} true;
    goto L2;

    // label L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/chain_status.move:46:52+14
    assume {:print "$at(127,1823,1837)"} true;
L0:

    // $t2 := 1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/chain_status.move:46:52+14
    assume {:print "$at(127,1823,1837)"} true;
    $t2 := 1;
    assume $IsValid'u64'($t2);

    // $t3 := error::invalid_state($t2) on_abort goto L3 with $t1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/chain_status.move:46:31+36
    call $t3 := $1_error_invalid_state($t2);
    if ($abort_flag) {
        assume {:print "$at(127,1802,1838)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(22,0):", $t1} $t1 == $t1;
        goto L3;
    }

    // trace_abort($t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/chain_status.move:46:9+6
    assume {:print "$at(127,1780,1786)"} true;
    assume {:print "$track_abort(22,0):", $t3} $t3 == $t3;

    // $t1 := move($t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/chain_status.move:46:9+6
    $t1 := $t3;

    // goto L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/chain_status.move:46:9+6
    goto L3;

    // label L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/chain_status.move:47:5+1
    assume {:print "$at(127,1845,1846)"} true;
L2:

    // return () at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/chain_status.move:47:5+1
    assume {:print "$at(127,1845,1846)"} true;
    return;

    // label L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/chain_status.move:47:5+1
L3:

    // abort($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/chain_status.move:47:5+1
    assume {:print "$at(127,1845,1846)"} true;
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun chain_status::is_genesis [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/chain_status.move:27:5+89
procedure {:inline 1} $1_chain_status_is_genesis() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: bool;
    var $t2: bool;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // $t0 := 0x1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/chain_status.move:28:35+16
    assume {:print "$at(127,1169,1185)"} true;
    $t0 := 1;
    assume $IsValid'address'($t0);

    // $t1 := exists<0x1::chain_status::GenesisEndMarker>($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/chain_status.move:28:10+42
    $t1 := $ResourceExists($1_chain_status_GenesisEndMarker_$memory, $t0);

    // $t2 := !($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/chain_status.move:28:9+43
    call $t2 := $Not($t1);

    // trace_return[0]($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/chain_status.move:28:9+43
    assume {:print "$track_return(22,2,0):", $t2} $t2 == $t2;

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/chain_status.move:29:5+1
    assume {:print "$at(127,1191,1192)"} true;
L1:

    // return $t2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/chain_status.move:29:5+1
    assume {:print "$at(127,1191,1192)"} true;
    $ret0 := $t2;
    return;

}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.spec.move:57:10+111
function {:inline} $1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory: $Memory $1_timestamp_CurrentTimeMicroseconds): int {
    $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, 1)->$microseconds
}

// struct timestamp::CurrentTimeMicroseconds at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:12:5+73
datatype $1_timestamp_CurrentTimeMicroseconds {
    $1_timestamp_CurrentTimeMicroseconds($microseconds: int)
}
function {:inline} $Update'$1_timestamp_CurrentTimeMicroseconds'_microseconds(s: $1_timestamp_CurrentTimeMicroseconds, x: int): $1_timestamp_CurrentTimeMicroseconds {
    $1_timestamp_CurrentTimeMicroseconds(x)
}
function $IsValid'$1_timestamp_CurrentTimeMicroseconds'(s: $1_timestamp_CurrentTimeMicroseconds): bool {
    $IsValid'u64'(s->$microseconds)
}
function {:inline} $IsEqual'$1_timestamp_CurrentTimeMicroseconds'(s1: $1_timestamp_CurrentTimeMicroseconds, s2: $1_timestamp_CurrentTimeMicroseconds): bool {
    s1 == s2
}
var $1_timestamp_CurrentTimeMicroseconds_$memory: $Memory $1_timestamp_CurrentTimeMicroseconds;

// struct any::Any at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:24:5+86
datatype $1_any_Any {
    $1_any_Any($type_name: $1_string_String, $data: Vec (int))
}
function {:inline} $Update'$1_any_Any'_type_name(s: $1_any_Any, x: $1_string_String): $1_any_Any {
    $1_any_Any(x, s->$data)
}
function {:inline} $Update'$1_any_Any'_data(s: $1_any_Any, x: Vec (int)): $1_any_Any {
    $1_any_Any(s->$type_name, x)
}
function $IsValid'$1_any_Any'(s: $1_any_Any): bool {
    $IsValid'$1_string_String'(s->$type_name)
      && $IsValid'vec'u8''(s->$data)
}
function {:inline} $IsEqual'$1_any_Any'(s1: $1_any_Any, s2: $1_any_Any): bool {
    $IsEqual'$1_string_String'(s1->$type_name, s2->$type_name)
    && $IsEqual'vec'u8''(s1->$data, s2->$data)}

// fun any::pack<0x1::jwks::SupportedOIDCProviders> [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:31:5+156
procedure {:inline 1} $1_any_pack'$1_jwks_SupportedOIDCProviders'(_$t0: $1_jwks_SupportedOIDCProviders) returns ($ret0: $1_any_Any)
{
    // declare local variables
    var $t1: $1_string_String;
    var $t2: int;
    var $t3: Vec (int);
    var $t4: $1_any_Any;
    var $t0: $1_jwks_SupportedOIDCProviders;
    var $temp_0'$1_any_Any': $1_any_Any;
    var $temp_0'$1_jwks_SupportedOIDCProviders': $1_jwks_SupportedOIDCProviders;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[x]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:31:5+1
    assume {:print "$at(21,947,948)"} true;
    assume {:print "$track_local(25,1,0):", $t0} $t0 == $t0;

    // $t1 := type_info::type_name<#0>() on_abort goto L2 with $t2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:33:24+25
    assume {:print "$at(21,1030,1055)"} true;
    $t1 := $1_string_String(Vec(DefaultVecMap()[0 := 48][1 := 120][2 := 49][3 := 58][4 := 58][5 := 106][6 := 119][7 := 107][8 := 115][9 := 58][10 := 58][11 := 83][12 := 117][13 := 112][14 := 112][15 := 111][16 := 114][17 := 116][18 := 101][19 := 100][20 := 79][21 := 73][22 := 68][23 := 67][24 := 80][25 := 114][26 := 111][27 := 118][28 := 105][29 := 100][30 := 101][31 := 114][32 := 115], 33));
    if ($abort_flag) {
        assume {:print "$at(21,1030,1055)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(25,1):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := bcs::to_bytes<#0>($t0) on_abort goto L2 with $t2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:34:19+12
    assume {:print "$at(21,1075,1087)"} true;
    call $t3 := $1_bcs_to_bytes'$1_jwks_SupportedOIDCProviders'($t0);
    if ($abort_flag) {
        assume {:print "$at(21,1075,1087)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(25,1):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t4 := pack 0x1::any::Any($t1, $t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:32:9+96
    assume {:print "$at(21,1001,1097)"} true;
    $t4 := $1_any_Any($t1, $t3);

    // trace_return[0]($t4) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:32:9+96
    assume {:print "$track_return(25,1,0):", $t4} $t4 == $t4;

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:36:5+1
    assume {:print "$at(21,1102,1103)"} true;
L1:

    // return $t4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:36:5+1
    assume {:print "$at(21,1102,1103)"} true;
    $ret0 := $t4;
    return;

    // label L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:36:5+1
L2:

    // abort($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:36:5+1
    assume {:print "$at(21,1102,1103)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun any::unpack<0x1::jwks::SupportedOIDCProviders> [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:39:5+178
procedure {:inline 1} $1_any_unpack'$1_jwks_SupportedOIDCProviders'(_$t0: $1_any_Any) returns ($ret0: $1_jwks_SupportedOIDCProviders)
{
    // declare local variables
    var $t1: $1_string_String;
    var $t2: int;
    var $t3: $1_string_String;
    var $t4: bool;
    var $t5: Vec (int);
    var $t6: $1_jwks_SupportedOIDCProviders;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t0: $1_any_Any;
    var $temp_0'$1_any_Any': $1_any_Any;
    var $temp_0'$1_jwks_SupportedOIDCProviders': $1_jwks_SupportedOIDCProviders;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:39:5+1
    assume {:print "$at(21,1219,1220)"} true;
    assume {:print "$track_local(25,2,0):", $t0} $t0 == $t0;

    // $t1 := type_info::type_name<#0>() on_abort goto L3 with $t2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:40:17+25
    assume {:print "$at(21,1272,1297)"} true;
    $t1 := $1_string_String(Vec(DefaultVecMap()[0 := 48][1 := 120][2 := 49][3 := 58][4 := 58][5 := 106][6 := 119][7 := 107][8 := 115][9 := 58][10 := 58][11 := 83][12 := 117][13 := 112][14 := 112][15 := 111][16 := 114][17 := 116][18 := 101][19 := 100][20 := 79][21 := 73][22 := 68][23 := 67][24 := 80][25 := 114][26 := 111][27 := 118][28 := 105][29 := 100][30 := 101][31 := 114][32 := 115], 33));
    if ($abort_flag) {
        assume {:print "$at(21,1272,1297)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(25,2):", $t2} $t2 == $t2;
        goto L3;
    }

    // $t3 := get_field<0x1::any::Any>.type_name($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:40:46+14
    $t3 := $t0->$type_name;

    // $t4 := ==($t1, $t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:40:17+43
    $t4 := $IsEqual'$1_string_String'($t1, $t3);

    // if ($t4) goto L1 else goto L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:40:9+6
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:41:23+4
    assume {:print "$at(21,1381,1385)"} true;
L1:

    // $t5 := get_field<0x1::any::Any>.data($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:41:23+9
    assume {:print "$at(21,1381,1390)"} true;
    $t5 := $t0->$data;

    // $t6 := opaque begin: from_bcs::from_bytes<#0>($t5) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:41:9+24

    // assume Identical($t7, Not(from_bcs::deserializable<#0>($t5))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:41:9+24
    assume ($t7 == !$1_from_bcs_deserializable'$1_jwks_SupportedOIDCProviders'($t5));

    // if ($t7) goto L5 else goto L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:41:9+24
    if ($t7) { goto L5; } else { goto L4; }

    // label L5 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:41:9+24
L5:

    // trace_abort($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:41:9+24
    assume {:print "$at(21,1367,1391)"} true;
    assume {:print "$track_abort(25,2):", $t2} $t2 == $t2;

    // goto L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:41:9+24
    goto L3;

    // label L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:41:9+24
L4:

    // assume WellFormed($t6) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:41:9+24
    assume {:print "$at(21,1367,1391)"} true;
    assume $IsValid'$1_jwks_SupportedOIDCProviders'($t6);

    // assume Eq<#0>($t6, from_bcs::deserialize<#0>($t5)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:41:9+24
    assume $IsEqual'$1_jwks_SupportedOIDCProviders'($t6, $1_from_bcs_deserialize'$1_jwks_SupportedOIDCProviders'($t5));

    // $t6 := opaque end: from_bcs::from_bytes<#0>($t5) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:41:9+24

    // trace_return[0]($t6) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:39:40+143
    assume {:print "$at(21,1254,1397)"} true;
    assume {:print "$track_return(25,2,0):", $t6} $t6 == $t6;

    // goto L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:39:40+143
    goto L2;

    // label L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:40:86+14
    assume {:print "$at(21,1341,1355)"} true;
L0:

    // $t8 := 1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:40:86+14
    assume {:print "$at(21,1341,1355)"} true;
    $t8 := 1;
    assume $IsValid'u64'($t8);

    // $t9 := error::invalid_argument($t8) on_abort goto L3 with $t2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:40:62+39
    call $t9 := $1_error_invalid_argument($t8);
    if ($abort_flag) {
        assume {:print "$at(21,1317,1356)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(25,2):", $t2} $t2 == $t2;
        goto L3;
    }

    // trace_abort($t9) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:40:9+6
    assume {:print "$at(21,1264,1270)"} true;
    assume {:print "$track_abort(25,2):", $t9} $t9 == $t9;

    // $t2 := move($t9) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:40:9+6
    $t2 := $t9;

    // goto L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:40:9+6
    goto L3;

    // label L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:42:5+1
    assume {:print "$at(21,1396,1397)"} true;
L2:

    // return $t6 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:42:5+1
    assume {:print "$at(21,1396,1397)"} true;
    $ret0 := $t6;
    return;

    // label L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:42:5+1
L3:

    // abort($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/any.move:42:5+1
    assume {:print "$at(21,1396,1397)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:33:5+73
function {:inline} $1_copyable_any_$type_name(self: $1_copyable_any_Any): $1_string_String {
    self->$type_name
}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:27:5+178
function {:inline} $1_copyable_any_$unpack'$1_jwks_RSA_JWK'(self: $1_copyable_any_Any): $1_jwks_RSA_JWK {
    $1_from_bcs_$from_bytes'$1_jwks_RSA_JWK'(self->$data)
}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:27:5+178
function {:inline} $1_copyable_any_$unpack'$1_jwks_UnsupportedJWK'(self: $1_copyable_any_Any): $1_jwks_UnsupportedJWK {
    $1_from_bcs_$from_bytes'$1_jwks_UnsupportedJWK'(self->$data)
}

// struct copyable_any::Any at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:12:5+92
datatype $1_copyable_any_Any {
    $1_copyable_any_Any($type_name: $1_string_String, $data: Vec (int))
}
function {:inline} $Update'$1_copyable_any_Any'_type_name(s: $1_copyable_any_Any, x: $1_string_String): $1_copyable_any_Any {
    $1_copyable_any_Any(x, s->$data)
}
function {:inline} $Update'$1_copyable_any_Any'_data(s: $1_copyable_any_Any, x: Vec (int)): $1_copyable_any_Any {
    $1_copyable_any_Any(s->$type_name, x)
}
function $IsValid'$1_copyable_any_Any'(s: $1_copyable_any_Any): bool {
    $IsValid'$1_string_String'(s->$type_name)
      && $IsValid'vec'u8''(s->$data)
}
function {:inline} $IsEqual'$1_copyable_any_Any'(s1: $1_copyable_any_Any, s2: $1_copyable_any_Any): bool {
    $IsEqual'$1_string_String'(s1->$type_name, s2->$type_name)
    && $IsEqual'vec'u8''(s1->$data, s2->$data)}

// fun copyable_any::type_name [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:33:5+73
procedure {:inline 1} $1_copyable_any_type_name(_$t0: $1_copyable_any_Any) returns ($ret0: $1_string_String)
{
    // declare local variables
    var $t1: $1_string_String;
    var $t0: $1_copyable_any_Any;
    var $temp_0'$1_copyable_any_Any': $1_copyable_any_Any;
    var $temp_0'$1_string_String': $1_string_String;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:33:5+1
    assume {:print "$at(29,1097,1098)"} true;
    assume {:print "$track_local(26,0,0):", $t0} $t0 == $t0;

    // $t1 := get_field<0x1::copyable_any::Any>.type_name($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:34:9+15
    assume {:print "$at(29,1149,1164)"} true;
    $t1 := $t0->$type_name;

    // trace_return[0]($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:34:9+15
    assume {:print "$track_return(26,0,0):", $t1} $t1 == $t1;

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:35:5+1
    assume {:print "$at(29,1169,1170)"} true;
L1:

    // return $t1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:35:5+1
    assume {:print "$at(29,1169,1170)"} true;
    $ret0 := $t1;
    return;

}

// fun copyable_any::unpack<0x1::jwks::PatchRemoveIssuer> [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:27:5+178
procedure {:inline 1} $1_copyable_any_unpack'$1_jwks_PatchRemoveIssuer'(_$t0: $1_copyable_any_Any) returns ($ret0: $1_jwks_PatchRemoveIssuer)
{
    // declare local variables
    var $t1: $1_string_String;
    var $t2: int;
    var $t3: $1_string_String;
    var $t4: bool;
    var $t5: Vec (int);
    var $t6: $1_jwks_PatchRemoveIssuer;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t0: $1_copyable_any_Any;
    var $temp_0'$1_copyable_any_Any': $1_copyable_any_Any;
    var $temp_0'$1_jwks_PatchRemoveIssuer': $1_jwks_PatchRemoveIssuer;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:27:5+1
    assume {:print "$at(29,871,872)"} true;
    assume {:print "$track_local(26,2,0):", $t0} $t0 == $t0;

    // $t1 := type_info::type_name<#0>() on_abort goto L3 with $t2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:17+25
    assume {:print "$at(29,924,949)"} true;
    $t1 := $1_string_String(Vec(DefaultVecMap()[0 := 48][1 := 120][2 := 49][3 := 58][4 := 58][5 := 106][6 := 119][7 := 107][8 := 115][9 := 58][10 := 58][11 := 80][12 := 97][13 := 116][14 := 99][15 := 104][16 := 82][17 := 101][18 := 109][19 := 111][20 := 118][21 := 101][22 := 73][23 := 115][24 := 115][25 := 117][26 := 101][27 := 114], 28));
    if ($abort_flag) {
        assume {:print "$at(29,924,949)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(26,2):", $t2} $t2 == $t2;
        goto L3;
    }

    // $t3 := get_field<0x1::copyable_any::Any>.type_name($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:46+14
    $t3 := $t0->$type_name;

    // $t4 := ==($t1, $t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:17+43
    $t4 := $IsEqual'$1_string_String'($t1, $t3);

    // if ($t4) goto L1 else goto L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:9+6
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:23+4
    assume {:print "$at(29,1033,1037)"} true;
L1:

    // $t5 := get_field<0x1::copyable_any::Any>.data($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:23+9
    assume {:print "$at(29,1033,1042)"} true;
    $t5 := $t0->$data;

    // $t6 := opaque begin: from_bcs::from_bytes<#0>($t5) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24

    // assume Identical($t7, Not(from_bcs::deserializable<#0>($t5))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
    assume ($t7 == !$1_from_bcs_deserializable'$1_jwks_PatchRemoveIssuer'($t5));

    // if ($t7) goto L5 else goto L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
    if ($t7) { goto L5; } else { goto L4; }

    // label L5 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
L5:

    // trace_abort($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
    assume {:print "$at(29,1019,1043)"} true;
    assume {:print "$track_abort(26,2):", $t2} $t2 == $t2;

    // goto L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
    goto L3;

    // label L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
L4:

    // assume WellFormed($t6) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
    assume {:print "$at(29,1019,1043)"} true;
    assume $IsValid'$1_jwks_PatchRemoveIssuer'($t6);

    // assume Eq<#0>($t6, from_bcs::deserialize<#0>($t5)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
    assume $IsEqual'$1_jwks_PatchRemoveIssuer'($t6, $1_from_bcs_deserialize'$1_jwks_PatchRemoveIssuer'($t5));

    // $t6 := opaque end: from_bcs::from_bytes<#0>($t5) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24

    // trace_return[0]($t6) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:27:40+143
    assume {:print "$at(29,906,1049)"} true;
    assume {:print "$track_return(26,2,0):", $t6} $t6 == $t6;

    // goto L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:27:40+143
    goto L2;

    // label L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:86+14
    assume {:print "$at(29,993,1007)"} true;
L0:

    // $t8 := 0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:86+14
    assume {:print "$at(29,993,1007)"} true;
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // $t9 := error::invalid_argument($t8) on_abort goto L3 with $t2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:62+39
    call $t9 := $1_error_invalid_argument($t8);
    if ($abort_flag) {
        assume {:print "$at(29,969,1008)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(26,2):", $t2} $t2 == $t2;
        goto L3;
    }

    // trace_abort($t9) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:9+6
    assume {:print "$at(29,916,922)"} true;
    assume {:print "$track_abort(26,2):", $t9} $t9 == $t9;

    // $t2 := move($t9) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:9+6
    $t2 := $t9;

    // goto L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:9+6
    goto L3;

    // label L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:30:5+1
    assume {:print "$at(29,1048,1049)"} true;
L2:

    // return $t6 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:30:5+1
    assume {:print "$at(29,1048,1049)"} true;
    $ret0 := $t6;
    return;

    // label L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:30:5+1
L3:

    // abort($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:30:5+1
    assume {:print "$at(29,1048,1049)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun copyable_any::unpack<0x1::jwks::PatchRemoveJWK> [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:27:5+178
procedure {:inline 1} $1_copyable_any_unpack'$1_jwks_PatchRemoveJWK'(_$t0: $1_copyable_any_Any) returns ($ret0: $1_jwks_PatchRemoveJWK)
{
    // declare local variables
    var $t1: $1_string_String;
    var $t2: int;
    var $t3: $1_string_String;
    var $t4: bool;
    var $t5: Vec (int);
    var $t6: $1_jwks_PatchRemoveJWK;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t0: $1_copyable_any_Any;
    var $temp_0'$1_copyable_any_Any': $1_copyable_any_Any;
    var $temp_0'$1_jwks_PatchRemoveJWK': $1_jwks_PatchRemoveJWK;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:27:5+1
    assume {:print "$at(29,871,872)"} true;
    assume {:print "$track_local(26,2,0):", $t0} $t0 == $t0;

    // $t1 := type_info::type_name<#0>() on_abort goto L3 with $t2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:17+25
    assume {:print "$at(29,924,949)"} true;
    $t1 := $1_string_String(Vec(DefaultVecMap()[0 := 48][1 := 120][2 := 49][3 := 58][4 := 58][5 := 106][6 := 119][7 := 107][8 := 115][9 := 58][10 := 58][11 := 80][12 := 97][13 := 116][14 := 99][15 := 104][16 := 82][17 := 101][18 := 109][19 := 111][20 := 118][21 := 101][22 := 74][23 := 87][24 := 75], 25));
    if ($abort_flag) {
        assume {:print "$at(29,924,949)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(26,2):", $t2} $t2 == $t2;
        goto L3;
    }

    // $t3 := get_field<0x1::copyable_any::Any>.type_name($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:46+14
    $t3 := $t0->$type_name;

    // $t4 := ==($t1, $t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:17+43
    $t4 := $IsEqual'$1_string_String'($t1, $t3);

    // if ($t4) goto L1 else goto L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:9+6
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:23+4
    assume {:print "$at(29,1033,1037)"} true;
L1:

    // $t5 := get_field<0x1::copyable_any::Any>.data($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:23+9
    assume {:print "$at(29,1033,1042)"} true;
    $t5 := $t0->$data;

    // $t6 := opaque begin: from_bcs::from_bytes<#0>($t5) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24

    // assume Identical($t7, Not(from_bcs::deserializable<#0>($t5))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
    assume ($t7 == !$1_from_bcs_deserializable'$1_jwks_PatchRemoveJWK'($t5));

    // if ($t7) goto L5 else goto L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
    if ($t7) { goto L5; } else { goto L4; }

    // label L5 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
L5:

    // trace_abort($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
    assume {:print "$at(29,1019,1043)"} true;
    assume {:print "$track_abort(26,2):", $t2} $t2 == $t2;

    // goto L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
    goto L3;

    // label L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
L4:

    // assume WellFormed($t6) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
    assume {:print "$at(29,1019,1043)"} true;
    assume $IsValid'$1_jwks_PatchRemoveJWK'($t6);

    // assume Eq<#0>($t6, from_bcs::deserialize<#0>($t5)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
    assume $IsEqual'$1_jwks_PatchRemoveJWK'($t6, $1_from_bcs_deserialize'$1_jwks_PatchRemoveJWK'($t5));

    // $t6 := opaque end: from_bcs::from_bytes<#0>($t5) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24

    // trace_return[0]($t6) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:27:40+143
    assume {:print "$at(29,906,1049)"} true;
    assume {:print "$track_return(26,2,0):", $t6} $t6 == $t6;

    // goto L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:27:40+143
    goto L2;

    // label L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:86+14
    assume {:print "$at(29,993,1007)"} true;
L0:

    // $t8 := 0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:86+14
    assume {:print "$at(29,993,1007)"} true;
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // $t9 := error::invalid_argument($t8) on_abort goto L3 with $t2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:62+39
    call $t9 := $1_error_invalid_argument($t8);
    if ($abort_flag) {
        assume {:print "$at(29,969,1008)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(26,2):", $t2} $t2 == $t2;
        goto L3;
    }

    // trace_abort($t9) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:9+6
    assume {:print "$at(29,916,922)"} true;
    assume {:print "$track_abort(26,2):", $t9} $t9 == $t9;

    // $t2 := move($t9) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:9+6
    $t2 := $t9;

    // goto L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:9+6
    goto L3;

    // label L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:30:5+1
    assume {:print "$at(29,1048,1049)"} true;
L2:

    // return $t6 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:30:5+1
    assume {:print "$at(29,1048,1049)"} true;
    $ret0 := $t6;
    return;

    // label L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:30:5+1
L3:

    // abort($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:30:5+1
    assume {:print "$at(29,1048,1049)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun copyable_any::unpack<0x1::jwks::PatchUpsertJWK> [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:27:5+178
procedure {:inline 1} $1_copyable_any_unpack'$1_jwks_PatchUpsertJWK'(_$t0: $1_copyable_any_Any) returns ($ret0: $1_jwks_PatchUpsertJWK)
{
    // declare local variables
    var $t1: $1_string_String;
    var $t2: int;
    var $t3: $1_string_String;
    var $t4: bool;
    var $t5: Vec (int);
    var $t6: $1_jwks_PatchUpsertJWK;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t0: $1_copyable_any_Any;
    var $temp_0'$1_copyable_any_Any': $1_copyable_any_Any;
    var $temp_0'$1_jwks_PatchUpsertJWK': $1_jwks_PatchUpsertJWK;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:27:5+1
    assume {:print "$at(29,871,872)"} true;
    assume {:print "$track_local(26,2,0):", $t0} $t0 == $t0;

    // $t1 := type_info::type_name<#0>() on_abort goto L3 with $t2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:17+25
    assume {:print "$at(29,924,949)"} true;
    $t1 := $1_string_String(Vec(DefaultVecMap()[0 := 48][1 := 120][2 := 49][3 := 58][4 := 58][5 := 106][6 := 119][7 := 107][8 := 115][9 := 58][10 := 58][11 := 80][12 := 97][13 := 116][14 := 99][15 := 104][16 := 85][17 := 112][18 := 115][19 := 101][20 := 114][21 := 116][22 := 74][23 := 87][24 := 75], 25));
    if ($abort_flag) {
        assume {:print "$at(29,924,949)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(26,2):", $t2} $t2 == $t2;
        goto L3;
    }

    // $t3 := get_field<0x1::copyable_any::Any>.type_name($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:46+14
    $t3 := $t0->$type_name;

    // $t4 := ==($t1, $t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:17+43
    $t4 := $IsEqual'$1_string_String'($t1, $t3);

    // if ($t4) goto L1 else goto L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:9+6
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:23+4
    assume {:print "$at(29,1033,1037)"} true;
L1:

    // $t5 := get_field<0x1::copyable_any::Any>.data($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:23+9
    assume {:print "$at(29,1033,1042)"} true;
    $t5 := $t0->$data;

    // $t6 := opaque begin: from_bcs::from_bytes<#0>($t5) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24

    // assume Identical($t7, Not(from_bcs::deserializable<#0>($t5))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
    assume ($t7 == !$1_from_bcs_deserializable'$1_jwks_PatchUpsertJWK'($t5));

    // if ($t7) goto L5 else goto L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
    if ($t7) { goto L5; } else { goto L4; }

    // label L5 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
L5:

    // trace_abort($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
    assume {:print "$at(29,1019,1043)"} true;
    assume {:print "$track_abort(26,2):", $t2} $t2 == $t2;

    // goto L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
    goto L3;

    // label L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
L4:

    // assume WellFormed($t6) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
    assume {:print "$at(29,1019,1043)"} true;
    assume $IsValid'$1_jwks_PatchUpsertJWK'($t6);

    // assume Eq<#0>($t6, from_bcs::deserialize<#0>($t5)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
    assume $IsEqual'$1_jwks_PatchUpsertJWK'($t6, $1_from_bcs_deserialize'$1_jwks_PatchUpsertJWK'($t5));

    // $t6 := opaque end: from_bcs::from_bytes<#0>($t5) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24

    // trace_return[0]($t6) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:27:40+143
    assume {:print "$at(29,906,1049)"} true;
    assume {:print "$track_return(26,2,0):", $t6} $t6 == $t6;

    // goto L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:27:40+143
    goto L2;

    // label L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:86+14
    assume {:print "$at(29,993,1007)"} true;
L0:

    // $t8 := 0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:86+14
    assume {:print "$at(29,993,1007)"} true;
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // $t9 := error::invalid_argument($t8) on_abort goto L3 with $t2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:62+39
    call $t9 := $1_error_invalid_argument($t8);
    if ($abort_flag) {
        assume {:print "$at(29,969,1008)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(26,2):", $t2} $t2 == $t2;
        goto L3;
    }

    // trace_abort($t9) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:9+6
    assume {:print "$at(29,916,922)"} true;
    assume {:print "$track_abort(26,2):", $t9} $t9 == $t9;

    // $t2 := move($t9) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:9+6
    $t2 := $t9;

    // goto L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:9+6
    goto L3;

    // label L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:30:5+1
    assume {:print "$at(29,1048,1049)"} true;
L2:

    // return $t6 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:30:5+1
    assume {:print "$at(29,1048,1049)"} true;
    $ret0 := $t6;
    return;

    // label L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:30:5+1
L3:

    // abort($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:30:5+1
    assume {:print "$at(29,1048,1049)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun copyable_any::unpack<0x1::jwks::RSA_JWK> [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:27:5+178
procedure {:inline 1} $1_copyable_any_unpack'$1_jwks_RSA_JWK'(_$t0: $1_copyable_any_Any) returns ($ret0: $1_jwks_RSA_JWK)
{
    // declare local variables
    var $t1: $1_string_String;
    var $t2: int;
    var $t3: $1_string_String;
    var $t4: bool;
    var $t5: Vec (int);
    var $t6: $1_jwks_RSA_JWK;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t0: $1_copyable_any_Any;
    var $temp_0'$1_copyable_any_Any': $1_copyable_any_Any;
    var $temp_0'$1_jwks_RSA_JWK': $1_jwks_RSA_JWK;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:27:5+1
    assume {:print "$at(29,871,872)"} true;
    assume {:print "$track_local(26,2,0):", $t0} $t0 == $t0;

    // $t1 := type_info::type_name<#0>() on_abort goto L3 with $t2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:17+25
    assume {:print "$at(29,924,949)"} true;
    $t1 := $1_string_String(Vec(DefaultVecMap()[0 := 48][1 := 120][2 := 49][3 := 58][4 := 58][5 := 106][6 := 119][7 := 107][8 := 115][9 := 58][10 := 58][11 := 82][12 := 83][13 := 65][14 := 95][15 := 74][16 := 87][17 := 75], 18));
    if ($abort_flag) {
        assume {:print "$at(29,924,949)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(26,2):", $t2} $t2 == $t2;
        goto L3;
    }

    // $t3 := get_field<0x1::copyable_any::Any>.type_name($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:46+14
    $t3 := $t0->$type_name;

    // $t4 := ==($t1, $t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:17+43
    $t4 := $IsEqual'$1_string_String'($t1, $t3);

    // if ($t4) goto L1 else goto L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:9+6
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:23+4
    assume {:print "$at(29,1033,1037)"} true;
L1:

    // $t5 := get_field<0x1::copyable_any::Any>.data($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:23+9
    assume {:print "$at(29,1033,1042)"} true;
    $t5 := $t0->$data;

    // $t6 := opaque begin: from_bcs::from_bytes<#0>($t5) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24

    // assume Identical($t7, Not(from_bcs::deserializable<#0>($t5))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
    assume ($t7 == !$1_from_bcs_deserializable'$1_jwks_RSA_JWK'($t5));

    // if ($t7) goto L5 else goto L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
    if ($t7) { goto L5; } else { goto L4; }

    // label L5 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
L5:

    // trace_abort($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
    assume {:print "$at(29,1019,1043)"} true;
    assume {:print "$track_abort(26,2):", $t2} $t2 == $t2;

    // goto L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
    goto L3;

    // label L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
L4:

    // assume WellFormed($t6) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
    assume {:print "$at(29,1019,1043)"} true;
    assume $IsValid'$1_jwks_RSA_JWK'($t6);

    // assume Eq<#0>($t6, from_bcs::deserialize<#0>($t5)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
    assume $IsEqual'$1_jwks_RSA_JWK'($t6, $1_from_bcs_deserialize'$1_jwks_RSA_JWK'($t5));

    // $t6 := opaque end: from_bcs::from_bytes<#0>($t5) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24

    // trace_return[0]($t6) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:27:40+143
    assume {:print "$at(29,906,1049)"} true;
    assume {:print "$track_return(26,2,0):", $t6} $t6 == $t6;

    // goto L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:27:40+143
    goto L2;

    // label L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:86+14
    assume {:print "$at(29,993,1007)"} true;
L0:

    // $t8 := 0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:86+14
    assume {:print "$at(29,993,1007)"} true;
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // $t9 := error::invalid_argument($t8) on_abort goto L3 with $t2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:62+39
    call $t9 := $1_error_invalid_argument($t8);
    if ($abort_flag) {
        assume {:print "$at(29,969,1008)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(26,2):", $t2} $t2 == $t2;
        goto L3;
    }

    // trace_abort($t9) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:9+6
    assume {:print "$at(29,916,922)"} true;
    assume {:print "$track_abort(26,2):", $t9} $t9 == $t9;

    // $t2 := move($t9) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:9+6
    $t2 := $t9;

    // goto L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:9+6
    goto L3;

    // label L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:30:5+1
    assume {:print "$at(29,1048,1049)"} true;
L2:

    // return $t6 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:30:5+1
    assume {:print "$at(29,1048,1049)"} true;
    $ret0 := $t6;
    return;

    // label L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:30:5+1
L3:

    // abort($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:30:5+1
    assume {:print "$at(29,1048,1049)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun copyable_any::unpack<0x1::jwks::UnsupportedJWK> [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:27:5+178
procedure {:inline 1} $1_copyable_any_unpack'$1_jwks_UnsupportedJWK'(_$t0: $1_copyable_any_Any) returns ($ret0: $1_jwks_UnsupportedJWK)
{
    // declare local variables
    var $t1: $1_string_String;
    var $t2: int;
    var $t3: $1_string_String;
    var $t4: bool;
    var $t5: Vec (int);
    var $t6: $1_jwks_UnsupportedJWK;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t0: $1_copyable_any_Any;
    var $temp_0'$1_copyable_any_Any': $1_copyable_any_Any;
    var $temp_0'$1_jwks_UnsupportedJWK': $1_jwks_UnsupportedJWK;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:27:5+1
    assume {:print "$at(29,871,872)"} true;
    assume {:print "$track_local(26,2,0):", $t0} $t0 == $t0;

    // $t1 := type_info::type_name<#0>() on_abort goto L3 with $t2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:17+25
    assume {:print "$at(29,924,949)"} true;
    $t1 := $1_string_String(Vec(DefaultVecMap()[0 := 48][1 := 120][2 := 49][3 := 58][4 := 58][5 := 106][6 := 119][7 := 107][8 := 115][9 := 58][10 := 58][11 := 85][12 := 110][13 := 115][14 := 117][15 := 112][16 := 112][17 := 111][18 := 114][19 := 116][20 := 101][21 := 100][22 := 74][23 := 87][24 := 75], 25));
    if ($abort_flag) {
        assume {:print "$at(29,924,949)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(26,2):", $t2} $t2 == $t2;
        goto L3;
    }

    // $t3 := get_field<0x1::copyable_any::Any>.type_name($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:46+14
    $t3 := $t0->$type_name;

    // $t4 := ==($t1, $t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:17+43
    $t4 := $IsEqual'$1_string_String'($t1, $t3);

    // if ($t4) goto L1 else goto L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:9+6
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:23+4
    assume {:print "$at(29,1033,1037)"} true;
L1:

    // $t5 := get_field<0x1::copyable_any::Any>.data($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:23+9
    assume {:print "$at(29,1033,1042)"} true;
    $t5 := $t0->$data;

    // $t6 := opaque begin: from_bcs::from_bytes<#0>($t5) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24

    // assume Identical($t7, Not(from_bcs::deserializable<#0>($t5))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
    assume ($t7 == !$1_from_bcs_deserializable'$1_jwks_UnsupportedJWK'($t5));

    // if ($t7) goto L5 else goto L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
    if ($t7) { goto L5; } else { goto L4; }

    // label L5 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
L5:

    // trace_abort($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
    assume {:print "$at(29,1019,1043)"} true;
    assume {:print "$track_abort(26,2):", $t2} $t2 == $t2;

    // goto L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
    goto L3;

    // label L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
L4:

    // assume WellFormed($t6) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
    assume {:print "$at(29,1019,1043)"} true;
    assume $IsValid'$1_jwks_UnsupportedJWK'($t6);

    // assume Eq<#0>($t6, from_bcs::deserialize<#0>($t5)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24
    assume $IsEqual'$1_jwks_UnsupportedJWK'($t6, $1_from_bcs_deserialize'$1_jwks_UnsupportedJWK'($t5));

    // $t6 := opaque end: from_bcs::from_bytes<#0>($t5) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:29:9+24

    // trace_return[0]($t6) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:27:40+143
    assume {:print "$at(29,906,1049)"} true;
    assume {:print "$track_return(26,2,0):", $t6} $t6 == $t6;

    // goto L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:27:40+143
    goto L2;

    // label L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:86+14
    assume {:print "$at(29,993,1007)"} true;
L0:

    // $t8 := 0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:86+14
    assume {:print "$at(29,993,1007)"} true;
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // $t9 := error::invalid_argument($t8) on_abort goto L3 with $t2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:62+39
    call $t9 := $1_error_invalid_argument($t8);
    if ($abort_flag) {
        assume {:print "$at(29,969,1008)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(26,2):", $t2} $t2 == $t2;
        goto L3;
    }

    // trace_abort($t9) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:9+6
    assume {:print "$at(29,916,922)"} true;
    assume {:print "$track_abort(26,2):", $t9} $t9 == $t9;

    // $t2 := move($t9) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:9+6
    $t2 := $t9;

    // goto L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:28:9+6
    goto L3;

    // label L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:30:5+1
    assume {:print "$at(29,1048,1049)"} true;
L2:

    // return $t6 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:30:5+1
    assume {:print "$at(29,1048,1049)"} true;
    $ret0 := $t6;
    return;

    // label L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:30:5+1
L3:

    // abort($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/copyable_any.move:30:5+1
    assume {:print "$at(29,1048,1049)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// struct permissioned_signer::GrantedPermissionHandles at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/permissioned_signer.move:64:5+188
datatype $1_permissioned_signer_GrantedPermissionHandles {
    $1_permissioned_signer_GrantedPermissionHandles($active_handles: Vec (int))
}
function {:inline} $Update'$1_permissioned_signer_GrantedPermissionHandles'_active_handles(s: $1_permissioned_signer_GrantedPermissionHandles, x: Vec (int)): $1_permissioned_signer_GrantedPermissionHandles {
    $1_permissioned_signer_GrantedPermissionHandles(x)
}
function $IsValid'$1_permissioned_signer_GrantedPermissionHandles'(s: $1_permissioned_signer_GrantedPermissionHandles): bool {
    $IsValid'vec'address''(s->$active_handles)
}
function {:inline} $IsEqual'$1_permissioned_signer_GrantedPermissionHandles'(s1: $1_permissioned_signer_GrantedPermissionHandles, s2: $1_permissioned_signer_GrantedPermissionHandles): bool {
    $IsEqual'vec'address''(s1->$active_handles, s2->$active_handles)}
var $1_permissioned_signer_GrantedPermissionHandles_$memory: $Memory $1_permissioned_signer_GrantedPermissionHandles;

// struct guid::GUID at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:7:5+50
datatype $1_guid_GUID {
    $1_guid_GUID($id: $1_guid_ID)
}
function {:inline} $Update'$1_guid_GUID'_id(s: $1_guid_GUID, x: $1_guid_ID): $1_guid_GUID {
    $1_guid_GUID(x)
}
function $IsValid'$1_guid_GUID'(s: $1_guid_GUID): bool {
    $IsValid'$1_guid_ID'(s->$id)
}
function {:inline} $IsEqual'$1_guid_GUID'(s1: $1_guid_GUID, s2: $1_guid_GUID): bool {
    s1 == s2
}

// struct guid::ID at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:12:5+209
datatype $1_guid_ID {
    $1_guid_ID($creation_num: int, $addr: int)
}
function {:inline} $Update'$1_guid_ID'_creation_num(s: $1_guid_ID, x: int): $1_guid_ID {
    $1_guid_ID(x, s->$addr)
}
function {:inline} $Update'$1_guid_ID'_addr(s: $1_guid_ID, x: int): $1_guid_ID {
    $1_guid_ID(s->$creation_num, x)
}
function $IsValid'$1_guid_ID'(s: $1_guid_ID): bool {
    $IsValid'u64'(s->$creation_num)
      && $IsValid'address'(s->$addr)
}
function {:inline} $IsEqual'$1_guid_ID'(s1: $1_guid_ID, s2: $1_guid_ID): bool {
    s1 == s2
}

// struct event::EventHandle<0x1::reconfiguration::NewEpochEvent> at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:37:5+224
datatype $1_event_EventHandle'$1_reconfiguration_NewEpochEvent' {
    $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''_counter(s: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent', x: int): $1_event_EventHandle'$1_reconfiguration_NewEpochEvent' {
    $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''_guid(s: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_reconfiguration_NewEpochEvent' {
    $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(s: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(s1: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent', s2: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<0x1::block::NewBlockEvent> at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:37:5+224
datatype $1_event_EventHandle'$1_block_NewBlockEvent' {
    $1_event_EventHandle'$1_block_NewBlockEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_block_NewBlockEvent''_counter(s: $1_event_EventHandle'$1_block_NewBlockEvent', x: int): $1_event_EventHandle'$1_block_NewBlockEvent' {
    $1_event_EventHandle'$1_block_NewBlockEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_block_NewBlockEvent''_guid(s: $1_event_EventHandle'$1_block_NewBlockEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_block_NewBlockEvent' {
    $1_event_EventHandle'$1_block_NewBlockEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_block_NewBlockEvent''(s: $1_event_EventHandle'$1_block_NewBlockEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_block_NewBlockEvent''(s1: $1_event_EventHandle'$1_block_NewBlockEvent', s2: $1_event_EventHandle'$1_block_NewBlockEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<0x1::block::UpdateEpochIntervalEvent> at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:37:5+224
datatype $1_event_EventHandle'$1_block_UpdateEpochIntervalEvent' {
    $1_event_EventHandle'$1_block_UpdateEpochIntervalEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_block_UpdateEpochIntervalEvent''_counter(s: $1_event_EventHandle'$1_block_UpdateEpochIntervalEvent', x: int): $1_event_EventHandle'$1_block_UpdateEpochIntervalEvent' {
    $1_event_EventHandle'$1_block_UpdateEpochIntervalEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_block_UpdateEpochIntervalEvent''_guid(s: $1_event_EventHandle'$1_block_UpdateEpochIntervalEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_block_UpdateEpochIntervalEvent' {
    $1_event_EventHandle'$1_block_UpdateEpochIntervalEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_block_UpdateEpochIntervalEvent''(s: $1_event_EventHandle'$1_block_UpdateEpochIntervalEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_block_UpdateEpochIntervalEvent''(s1: $1_event_EventHandle'$1_block_UpdateEpochIntervalEvent', s2: $1_event_EventHandle'$1_block_UpdateEpochIntervalEvent'): bool {
    s1 == s2
}

// struct object::Object<0x1::fungible_asset::Metadata> at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:131:5+78
datatype $1_object_Object'$1_fungible_asset_Metadata' {
    $1_object_Object'$1_fungible_asset_Metadata'($inner: int)
}
function {:inline} $Update'$1_object_Object'$1_fungible_asset_Metadata''_inner(s: $1_object_Object'$1_fungible_asset_Metadata', x: int): $1_object_Object'$1_fungible_asset_Metadata' {
    $1_object_Object'$1_fungible_asset_Metadata'(x)
}
function $IsValid'$1_object_Object'$1_fungible_asset_Metadata''(s: $1_object_Object'$1_fungible_asset_Metadata'): bool {
    $IsValid'address'(s->$inner)
}
function {:inline} $IsEqual'$1_object_Object'$1_fungible_asset_Metadata''(s1: $1_object_Object'$1_fungible_asset_Metadata', s2: $1_object_Object'$1_fungible_asset_Metadata'): bool {
    s1 == s2
}

// struct fungible_asset::BurnRef at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:205:5+73
datatype $1_fungible_asset_BurnRef {
    $1_fungible_asset_BurnRef($metadata: $1_object_Object'$1_fungible_asset_Metadata')
}
function {:inline} $Update'$1_fungible_asset_BurnRef'_metadata(s: $1_fungible_asset_BurnRef, x: $1_object_Object'$1_fungible_asset_Metadata'): $1_fungible_asset_BurnRef {
    $1_fungible_asset_BurnRef(x)
}
function $IsValid'$1_fungible_asset_BurnRef'(s: $1_fungible_asset_BurnRef): bool {
    $IsValid'$1_object_Object'$1_fungible_asset_Metadata''(s->$metadata)
}
function {:inline} $IsEqual'$1_fungible_asset_BurnRef'(s1: $1_fungible_asset_BurnRef, s2: $1_fungible_asset_BurnRef): bool {
    s1 == s2
}

// struct fungible_asset::Metadata at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:124:5+797
datatype $1_fungible_asset_Metadata {
    $1_fungible_asset_Metadata($name: $1_string_String, $symbol: $1_string_String, $decimals: int, $icon_uri: $1_string_String, $project_uri: $1_string_String)
}
function {:inline} $Update'$1_fungible_asset_Metadata'_name(s: $1_fungible_asset_Metadata, x: $1_string_String): $1_fungible_asset_Metadata {
    $1_fungible_asset_Metadata(x, s->$symbol, s->$decimals, s->$icon_uri, s->$project_uri)
}
function {:inline} $Update'$1_fungible_asset_Metadata'_symbol(s: $1_fungible_asset_Metadata, x: $1_string_String): $1_fungible_asset_Metadata {
    $1_fungible_asset_Metadata(s->$name, x, s->$decimals, s->$icon_uri, s->$project_uri)
}
function {:inline} $Update'$1_fungible_asset_Metadata'_decimals(s: $1_fungible_asset_Metadata, x: int): $1_fungible_asset_Metadata {
    $1_fungible_asset_Metadata(s->$name, s->$symbol, x, s->$icon_uri, s->$project_uri)
}
function {:inline} $Update'$1_fungible_asset_Metadata'_icon_uri(s: $1_fungible_asset_Metadata, x: $1_string_String): $1_fungible_asset_Metadata {
    $1_fungible_asset_Metadata(s->$name, s->$symbol, s->$decimals, x, s->$project_uri)
}
function {:inline} $Update'$1_fungible_asset_Metadata'_project_uri(s: $1_fungible_asset_Metadata, x: $1_string_String): $1_fungible_asset_Metadata {
    $1_fungible_asset_Metadata(s->$name, s->$symbol, s->$decimals, s->$icon_uri, x)
}
function $IsValid'$1_fungible_asset_Metadata'(s: $1_fungible_asset_Metadata): bool {
    $IsValid'$1_string_String'(s->$name)
      && $IsValid'$1_string_String'(s->$symbol)
      && $IsValid'u8'(s->$decimals)
      && $IsValid'$1_string_String'(s->$icon_uri)
      && $IsValid'$1_string_String'(s->$project_uri)
}
function {:inline} $IsEqual'$1_fungible_asset_Metadata'(s1: $1_fungible_asset_Metadata, s2: $1_fungible_asset_Metadata): bool {
    $IsEqual'$1_string_String'(s1->$name, s2->$name)
    && $IsEqual'$1_string_String'(s1->$symbol, s2->$symbol)
    && $IsEqual'u8'(s1->$decimals, s2->$decimals)
    && $IsEqual'$1_string_String'(s1->$icon_uri, s2->$icon_uri)
    && $IsEqual'$1_string_String'(s1->$project_uri, s2->$project_uri)}
var $1_fungible_asset_Metadata_$memory: $Memory $1_fungible_asset_Metadata;

// struct coin::BurnCapability<0x1::aptos_coin::AptosCoin> at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:248:5+58
datatype $1_coin_BurnCapability'$1_aptos_coin_AptosCoin' {
    $1_coin_BurnCapability'$1_aptos_coin_AptosCoin'($dummy_field: bool)
}
function {:inline} $Update'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin''_dummy_field(s: $1_coin_BurnCapability'$1_aptos_coin_AptosCoin', x: bool): $1_coin_BurnCapability'$1_aptos_coin_AptosCoin' {
    $1_coin_BurnCapability'$1_aptos_coin_AptosCoin'(x)
}
function $IsValid'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin''(s: $1_coin_BurnCapability'$1_aptos_coin_AptosCoin'): bool {
    $IsValid'bool'(s->$dummy_field)
}
function {:inline} $IsEqual'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin''(s1: $1_coin_BurnCapability'$1_aptos_coin_AptosCoin', s2: $1_coin_BurnCapability'$1_aptos_coin_AptosCoin'): bool {
    s1 == s2
}

// struct coin::MintCapability<0x1::aptos_coin::AptosCoin> at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:242:5+58
datatype $1_coin_MintCapability'$1_aptos_coin_AptosCoin' {
    $1_coin_MintCapability'$1_aptos_coin_AptosCoin'($dummy_field: bool)
}
function {:inline} $Update'$1_coin_MintCapability'$1_aptos_coin_AptosCoin''_dummy_field(s: $1_coin_MintCapability'$1_aptos_coin_AptosCoin', x: bool): $1_coin_MintCapability'$1_aptos_coin_AptosCoin' {
    $1_coin_MintCapability'$1_aptos_coin_AptosCoin'(x)
}
function $IsValid'$1_coin_MintCapability'$1_aptos_coin_AptosCoin''(s: $1_coin_MintCapability'$1_aptos_coin_AptosCoin'): bool {
    $IsValid'bool'(s->$dummy_field)
}
function {:inline} $IsEqual'$1_coin_MintCapability'$1_aptos_coin_AptosCoin''(s1: $1_coin_MintCapability'$1_aptos_coin_AptosCoin', s2: $1_coin_MintCapability'$1_aptos_coin_AptosCoin'): bool {
    s1 == s2
}

// struct aptos_coin::AptosCoin at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_coin.move:22:5+27
datatype $1_aptos_coin_AptosCoin {
    $1_aptos_coin_AptosCoin($dummy_field: bool)
}
function {:inline} $Update'$1_aptos_coin_AptosCoin'_dummy_field(s: $1_aptos_coin_AptosCoin, x: bool): $1_aptos_coin_AptosCoin {
    $1_aptos_coin_AptosCoin(x)
}
function $IsValid'$1_aptos_coin_AptosCoin'(s: $1_aptos_coin_AptosCoin): bool {
    $IsValid'bool'(s->$dummy_field)
}
function {:inline} $IsEqual'$1_aptos_coin_AptosCoin'(s1: $1_aptos_coin_AptosCoin, s2: $1_aptos_coin_AptosCoin): bool {
    s1 == s2
}
var $1_aptos_coin_AptosCoin_$memory: $Memory $1_aptos_coin_AptosCoin;

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/fixed_point64.move:235:10+109
function {:inline} $1_fixed_point64_spec_less_or_equal(self: $1_fixed_point64_FixedPoint64, num2: $1_fixed_point64_FixedPoint64): bool {
    (self->$value <= num2->$value)
}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/fixed_point64.move:327:10+97
function {:inline} $1_fixed_point64_spec_create_from_u128(val: int): $1_fixed_point64_FixedPoint64 {
    $1_fixed_point64_FixedPoint64($shl(val, 64))
}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/fixed_point64.move:365:10+260
function {:inline} $1_fixed_point64_spec_ceil(self: $1_fixed_point64_FixedPoint64): int {
    (var fractional := (self->$value mod $shlU256(1, 64)); (var one := $shlU256(1, 64); (if ($IsEqual'num'(fractional, 0)) then ($shr(self->$value, 64)) else ($shr(((self->$value - fractional) + one), 64)))))
}

// struct fixed_point64::FixedPoint64 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/fixed_point64.move:15:5+57
datatype $1_fixed_point64_FixedPoint64 {
    $1_fixed_point64_FixedPoint64($value: int)
}
function {:inline} $Update'$1_fixed_point64_FixedPoint64'_value(s: $1_fixed_point64_FixedPoint64, x: int): $1_fixed_point64_FixedPoint64 {
    $1_fixed_point64_FixedPoint64(x)
}
function $IsValid'$1_fixed_point64_FixedPoint64'(s: $1_fixed_point64_FixedPoint64): bool {
    $IsValid'u128'(s->$value)
}
function {:inline} $IsEqual'$1_fixed_point64_FixedPoint64'(s1: $1_fixed_point64_FixedPoint64, s2: $1_fixed_point64_FixedPoint64): bool {
    s1 == s2
}

// struct staking_config::StakingConfig at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/staking_config.move:49:5+1753
datatype $1_staking_config_StakingConfig {
    $1_staking_config_StakingConfig($minimum_stake: int, $maximum_stake: int, $recurring_lockup_duration_secs: int, $allow_validator_set_change: bool, $rewards_rate: int, $rewards_rate_denominator: int, $voting_power_increase_limit: int)
}
function {:inline} $Update'$1_staking_config_StakingConfig'_minimum_stake(s: $1_staking_config_StakingConfig, x: int): $1_staking_config_StakingConfig {
    $1_staking_config_StakingConfig(x, s->$maximum_stake, s->$recurring_lockup_duration_secs, s->$allow_validator_set_change, s->$rewards_rate, s->$rewards_rate_denominator, s->$voting_power_increase_limit)
}
function {:inline} $Update'$1_staking_config_StakingConfig'_maximum_stake(s: $1_staking_config_StakingConfig, x: int): $1_staking_config_StakingConfig {
    $1_staking_config_StakingConfig(s->$minimum_stake, x, s->$recurring_lockup_duration_secs, s->$allow_validator_set_change, s->$rewards_rate, s->$rewards_rate_denominator, s->$voting_power_increase_limit)
}
function {:inline} $Update'$1_staking_config_StakingConfig'_recurring_lockup_duration_secs(s: $1_staking_config_StakingConfig, x: int): $1_staking_config_StakingConfig {
    $1_staking_config_StakingConfig(s->$minimum_stake, s->$maximum_stake, x, s->$allow_validator_set_change, s->$rewards_rate, s->$rewards_rate_denominator, s->$voting_power_increase_limit)
}
function {:inline} $Update'$1_staking_config_StakingConfig'_allow_validator_set_change(s: $1_staking_config_StakingConfig, x: bool): $1_staking_config_StakingConfig {
    $1_staking_config_StakingConfig(s->$minimum_stake, s->$maximum_stake, s->$recurring_lockup_duration_secs, x, s->$rewards_rate, s->$rewards_rate_denominator, s->$voting_power_increase_limit)
}
function {:inline} $Update'$1_staking_config_StakingConfig'_rewards_rate(s: $1_staking_config_StakingConfig, x: int): $1_staking_config_StakingConfig {
    $1_staking_config_StakingConfig(s->$minimum_stake, s->$maximum_stake, s->$recurring_lockup_duration_secs, s->$allow_validator_set_change, x, s->$rewards_rate_denominator, s->$voting_power_increase_limit)
}
function {:inline} $Update'$1_staking_config_StakingConfig'_rewards_rate_denominator(s: $1_staking_config_StakingConfig, x: int): $1_staking_config_StakingConfig {
    $1_staking_config_StakingConfig(s->$minimum_stake, s->$maximum_stake, s->$recurring_lockup_duration_secs, s->$allow_validator_set_change, s->$rewards_rate, x, s->$voting_power_increase_limit)
}
function {:inline} $Update'$1_staking_config_StakingConfig'_voting_power_increase_limit(s: $1_staking_config_StakingConfig, x: int): $1_staking_config_StakingConfig {
    $1_staking_config_StakingConfig(s->$minimum_stake, s->$maximum_stake, s->$recurring_lockup_duration_secs, s->$allow_validator_set_change, s->$rewards_rate, s->$rewards_rate_denominator, x)
}
function $IsValid'$1_staking_config_StakingConfig'(s: $1_staking_config_StakingConfig): bool {
    $IsValid'u64'(s->$minimum_stake)
      && $IsValid'u64'(s->$maximum_stake)
      && $IsValid'u64'(s->$recurring_lockup_duration_secs)
      && $IsValid'bool'(s->$allow_validator_set_change)
      && $IsValid'u64'(s->$rewards_rate)
      && $IsValid'u64'(s->$rewards_rate_denominator)
      && $IsValid'u64'(s->$voting_power_increase_limit)
}
function {:inline} $IsEqual'$1_staking_config_StakingConfig'(s1: $1_staking_config_StakingConfig, s2: $1_staking_config_StakingConfig): bool {
    s1 == s2
}
var $1_staking_config_StakingConfig_$memory: $Memory $1_staking_config_StakingConfig;

// struct staking_config::StakingRewardsConfig at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/staking_config.move:75:5+982
datatype $1_staking_config_StakingRewardsConfig {
    $1_staking_config_StakingRewardsConfig($rewards_rate: $1_fixed_point64_FixedPoint64, $min_rewards_rate: $1_fixed_point64_FixedPoint64, $rewards_rate_period_in_secs: int, $last_rewards_rate_period_start_in_secs: int, $rewards_rate_decrease_rate: $1_fixed_point64_FixedPoint64)
}
function {:inline} $Update'$1_staking_config_StakingRewardsConfig'_rewards_rate(s: $1_staking_config_StakingRewardsConfig, x: $1_fixed_point64_FixedPoint64): $1_staking_config_StakingRewardsConfig {
    $1_staking_config_StakingRewardsConfig(x, s->$min_rewards_rate, s->$rewards_rate_period_in_secs, s->$last_rewards_rate_period_start_in_secs, s->$rewards_rate_decrease_rate)
}
function {:inline} $Update'$1_staking_config_StakingRewardsConfig'_min_rewards_rate(s: $1_staking_config_StakingRewardsConfig, x: $1_fixed_point64_FixedPoint64): $1_staking_config_StakingRewardsConfig {
    $1_staking_config_StakingRewardsConfig(s->$rewards_rate, x, s->$rewards_rate_period_in_secs, s->$last_rewards_rate_period_start_in_secs, s->$rewards_rate_decrease_rate)
}
function {:inline} $Update'$1_staking_config_StakingRewardsConfig'_rewards_rate_period_in_secs(s: $1_staking_config_StakingRewardsConfig, x: int): $1_staking_config_StakingRewardsConfig {
    $1_staking_config_StakingRewardsConfig(s->$rewards_rate, s->$min_rewards_rate, x, s->$last_rewards_rate_period_start_in_secs, s->$rewards_rate_decrease_rate)
}
function {:inline} $Update'$1_staking_config_StakingRewardsConfig'_last_rewards_rate_period_start_in_secs(s: $1_staking_config_StakingRewardsConfig, x: int): $1_staking_config_StakingRewardsConfig {
    $1_staking_config_StakingRewardsConfig(s->$rewards_rate, s->$min_rewards_rate, s->$rewards_rate_period_in_secs, x, s->$rewards_rate_decrease_rate)
}
function {:inline} $Update'$1_staking_config_StakingRewardsConfig'_rewards_rate_decrease_rate(s: $1_staking_config_StakingRewardsConfig, x: $1_fixed_point64_FixedPoint64): $1_staking_config_StakingRewardsConfig {
    $1_staking_config_StakingRewardsConfig(s->$rewards_rate, s->$min_rewards_rate, s->$rewards_rate_period_in_secs, s->$last_rewards_rate_period_start_in_secs, x)
}
function $IsValid'$1_staking_config_StakingRewardsConfig'(s: $1_staking_config_StakingRewardsConfig): bool {
    $IsValid'$1_fixed_point64_FixedPoint64'(s->$rewards_rate)
      && $IsValid'$1_fixed_point64_FixedPoint64'(s->$min_rewards_rate)
      && $IsValid'u64'(s->$rewards_rate_period_in_secs)
      && $IsValid'u64'(s->$last_rewards_rate_period_start_in_secs)
      && $IsValid'$1_fixed_point64_FixedPoint64'(s->$rewards_rate_decrease_rate)
}
function {:inline} $IsEqual'$1_staking_config_StakingRewardsConfig'(s1: $1_staking_config_StakingRewardsConfig, s2: $1_staking_config_StakingRewardsConfig): bool {
    s1 == s2
}
var $1_staking_config_StakingRewardsConfig_$memory: $Memory $1_staking_config_StakingRewardsConfig;

// struct validator_consensus_info::ValidatorConsensusInfo at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/validator_consensus_info.move:4:5+139
datatype $1_validator_consensus_info_ValidatorConsensusInfo {
    $1_validator_consensus_info_ValidatorConsensusInfo($addr: int, $pk_bytes: Vec (int), $voting_power: int)
}
function {:inline} $Update'$1_validator_consensus_info_ValidatorConsensusInfo'_addr(s: $1_validator_consensus_info_ValidatorConsensusInfo, x: int): $1_validator_consensus_info_ValidatorConsensusInfo {
    $1_validator_consensus_info_ValidatorConsensusInfo(x, s->$pk_bytes, s->$voting_power)
}
function {:inline} $Update'$1_validator_consensus_info_ValidatorConsensusInfo'_pk_bytes(s: $1_validator_consensus_info_ValidatorConsensusInfo, x: Vec (int)): $1_validator_consensus_info_ValidatorConsensusInfo {
    $1_validator_consensus_info_ValidatorConsensusInfo(s->$addr, x, s->$voting_power)
}
function {:inline} $Update'$1_validator_consensus_info_ValidatorConsensusInfo'_voting_power(s: $1_validator_consensus_info_ValidatorConsensusInfo, x: int): $1_validator_consensus_info_ValidatorConsensusInfo {
    $1_validator_consensus_info_ValidatorConsensusInfo(s->$addr, s->$pk_bytes, x)
}
function $IsValid'$1_validator_consensus_info_ValidatorConsensusInfo'(s: $1_validator_consensus_info_ValidatorConsensusInfo): bool {
    $IsValid'address'(s->$addr)
      && $IsValid'vec'u8''(s->$pk_bytes)
      && $IsValid'u64'(s->$voting_power)
}
function {:inline} $IsEqual'$1_validator_consensus_info_ValidatorConsensusInfo'(s1: $1_validator_consensus_info_ValidatorConsensusInfo, s2: $1_validator_consensus_info_ValidatorConsensusInfo): bool {
    $IsEqual'address'(s1->$addr, s2->$addr)
    && $IsEqual'vec'u8''(s1->$pk_bytes, s2->$pk_bytes)
    && $IsEqual'u64'(s1->$voting_power, s2->$voting_power)}

// struct reconfiguration_state::State at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration_state.move:19:5+238
datatype $1_reconfiguration_state_State {
    $1_reconfiguration_state_State($variant: $1_copyable_any_Any)
}
function {:inline} $Update'$1_reconfiguration_state_State'_variant(s: $1_reconfiguration_state_State, x: $1_copyable_any_Any): $1_reconfiguration_state_State {
    $1_reconfiguration_state_State(x)
}
function $IsValid'$1_reconfiguration_state_State'(s: $1_reconfiguration_state_State): bool {
    $IsValid'$1_copyable_any_Any'(s->$variant)
}
function {:inline} $IsEqual'$1_reconfiguration_state_State'(s1: $1_reconfiguration_state_State, s2: $1_reconfiguration_state_State): bool {
    $IsEqual'$1_copyable_any_Any'(s1->$variant, s2->$variant)}
var $1_reconfiguration_state_State_$memory: $Memory $1_reconfiguration_state_State;

// struct reconfiguration_state::StateActive at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration_state.move:31:5+78
datatype $1_reconfiguration_state_StateActive {
    $1_reconfiguration_state_StateActive($start_time_secs: int)
}
function {:inline} $Update'$1_reconfiguration_state_StateActive'_start_time_secs(s: $1_reconfiguration_state_StateActive, x: int): $1_reconfiguration_state_StateActive {
    $1_reconfiguration_state_StateActive(x)
}
function $IsValid'$1_reconfiguration_state_StateActive'(s: $1_reconfiguration_state_StateActive): bool {
    $IsValid'u64'(s->$start_time_secs)
}
function {:inline} $IsEqual'$1_reconfiguration_state_StateActive'(s1: $1_reconfiguration_state_StateActive, s2: $1_reconfiguration_state_StateActive): bool {
    s1 == s2
}

// struct reconfiguration_state::StateInactive at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration_state.move:28:5+45
datatype $1_reconfiguration_state_StateInactive {
    $1_reconfiguration_state_StateInactive($dummy_field: bool)
}
function {:inline} $Update'$1_reconfiguration_state_StateInactive'_dummy_field(s: $1_reconfiguration_state_StateInactive, x: bool): $1_reconfiguration_state_StateInactive {
    $1_reconfiguration_state_StateInactive(x)
}
function $IsValid'$1_reconfiguration_state_StateInactive'(s: $1_reconfiguration_state_StateInactive): bool {
    $IsValid'bool'(s->$dummy_field)
}
function {:inline} $IsEqual'$1_reconfiguration_state_StateInactive'(s1: $1_reconfiguration_state_StateInactive, s2: $1_reconfiguration_state_StateInactive): bool {
    s1 == s2
}

// struct stake::AptosCoinCapabilities at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:208:5+89
datatype $1_stake_AptosCoinCapabilities {
    $1_stake_AptosCoinCapabilities($mint_cap: $1_coin_MintCapability'$1_aptos_coin_AptosCoin')
}
function {:inline} $Update'$1_stake_AptosCoinCapabilities'_mint_cap(s: $1_stake_AptosCoinCapabilities, x: $1_coin_MintCapability'$1_aptos_coin_AptosCoin'): $1_stake_AptosCoinCapabilities {
    $1_stake_AptosCoinCapabilities(x)
}
function $IsValid'$1_stake_AptosCoinCapabilities'(s: $1_stake_AptosCoinCapabilities): bool {
    $IsValid'$1_coin_MintCapability'$1_aptos_coin_AptosCoin''(s->$mint_cap)
}
function {:inline} $IsEqual'$1_stake_AptosCoinCapabilities'(s1: $1_stake_AptosCoinCapabilities, s2: $1_stake_AptosCoinCapabilities): bool {
    s1 == s2
}
var $1_stake_AptosCoinCapabilities_$memory: $Memory $1_stake_AptosCoinCapabilities;

// struct stake::IndividualValidatorPerformance at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:212:5+127
datatype $1_stake_IndividualValidatorPerformance {
    $1_stake_IndividualValidatorPerformance($successful_proposals: int, $failed_proposals: int)
}
function {:inline} $Update'$1_stake_IndividualValidatorPerformance'_successful_proposals(s: $1_stake_IndividualValidatorPerformance, x: int): $1_stake_IndividualValidatorPerformance {
    $1_stake_IndividualValidatorPerformance(x, s->$failed_proposals)
}
function {:inline} $Update'$1_stake_IndividualValidatorPerformance'_failed_proposals(s: $1_stake_IndividualValidatorPerformance, x: int): $1_stake_IndividualValidatorPerformance {
    $1_stake_IndividualValidatorPerformance(s->$successful_proposals, x)
}
function $IsValid'$1_stake_IndividualValidatorPerformance'(s: $1_stake_IndividualValidatorPerformance): bool {
    $IsValid'u64'(s->$successful_proposals)
      && $IsValid'u64'(s->$failed_proposals)
}
function {:inline} $IsEqual'$1_stake_IndividualValidatorPerformance'(s1: $1_stake_IndividualValidatorPerformance, s2: $1_stake_IndividualValidatorPerformance): bool {
    s1 == s2
}

// struct stake::ValidatorConfig at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:161:5+372
datatype $1_stake_ValidatorConfig {
    $1_stake_ValidatorConfig($consensus_pubkey: Vec (int), $network_addresses: Vec (int), $fullnode_addresses: Vec (int), $validator_index: int)
}
function {:inline} $Update'$1_stake_ValidatorConfig'_consensus_pubkey(s: $1_stake_ValidatorConfig, x: Vec (int)): $1_stake_ValidatorConfig {
    $1_stake_ValidatorConfig(x, s->$network_addresses, s->$fullnode_addresses, s->$validator_index)
}
function {:inline} $Update'$1_stake_ValidatorConfig'_network_addresses(s: $1_stake_ValidatorConfig, x: Vec (int)): $1_stake_ValidatorConfig {
    $1_stake_ValidatorConfig(s->$consensus_pubkey, x, s->$fullnode_addresses, s->$validator_index)
}
function {:inline} $Update'$1_stake_ValidatorConfig'_fullnode_addresses(s: $1_stake_ValidatorConfig, x: Vec (int)): $1_stake_ValidatorConfig {
    $1_stake_ValidatorConfig(s->$consensus_pubkey, s->$network_addresses, x, s->$validator_index)
}
function {:inline} $Update'$1_stake_ValidatorConfig'_validator_index(s: $1_stake_ValidatorConfig, x: int): $1_stake_ValidatorConfig {
    $1_stake_ValidatorConfig(s->$consensus_pubkey, s->$network_addresses, s->$fullnode_addresses, x)
}
function $IsValid'$1_stake_ValidatorConfig'(s: $1_stake_ValidatorConfig): bool {
    $IsValid'vec'u8''(s->$consensus_pubkey)
      && $IsValid'vec'u8''(s->$network_addresses)
      && $IsValid'vec'u8''(s->$fullnode_addresses)
      && $IsValid'u64'(s->$validator_index)
}
function {:inline} $IsEqual'$1_stake_ValidatorConfig'(s1: $1_stake_ValidatorConfig, s2: $1_stake_ValidatorConfig): bool {
    $IsEqual'vec'u8''(s1->$consensus_pubkey, s2->$consensus_pubkey)
    && $IsEqual'vec'u8''(s1->$network_addresses, s2->$network_addresses)
    && $IsEqual'vec'u8''(s1->$fullnode_addresses, s2->$fullnode_addresses)
    && $IsEqual'u64'(s1->$validator_index, s2->$validator_index)}
var $1_stake_ValidatorConfig_$memory: $Memory $1_stake_ValidatorConfig;

// struct stake::ValidatorInfo at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:171:5+133
datatype $1_stake_ValidatorInfo {
    $1_stake_ValidatorInfo($addr: int, $voting_power: int, $config: $1_stake_ValidatorConfig)
}
function {:inline} $Update'$1_stake_ValidatorInfo'_addr(s: $1_stake_ValidatorInfo, x: int): $1_stake_ValidatorInfo {
    $1_stake_ValidatorInfo(x, s->$voting_power, s->$config)
}
function {:inline} $Update'$1_stake_ValidatorInfo'_voting_power(s: $1_stake_ValidatorInfo, x: int): $1_stake_ValidatorInfo {
    $1_stake_ValidatorInfo(s->$addr, x, s->$config)
}
function {:inline} $Update'$1_stake_ValidatorInfo'_config(s: $1_stake_ValidatorInfo, x: $1_stake_ValidatorConfig): $1_stake_ValidatorInfo {
    $1_stake_ValidatorInfo(s->$addr, s->$voting_power, x)
}
function $IsValid'$1_stake_ValidatorInfo'(s: $1_stake_ValidatorInfo): bool {
    $IsValid'address'(s->$addr)
      && $IsValid'u64'(s->$voting_power)
      && $IsValid'$1_stake_ValidatorConfig'(s->$config)
}
function {:inline} $IsEqual'$1_stake_ValidatorInfo'(s1: $1_stake_ValidatorInfo, s2: $1_stake_ValidatorInfo): bool {
    $IsEqual'address'(s1->$addr, s2->$addr)
    && $IsEqual'u64'(s1->$voting_power, s2->$voting_power)
    && $IsEqual'$1_stake_ValidatorConfig'(s1->$config, s2->$config)}

// struct stake::ValidatorPerformance at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:217:5+103
datatype $1_stake_ValidatorPerformance {
    $1_stake_ValidatorPerformance($validators: Vec ($1_stake_IndividualValidatorPerformance))
}
function {:inline} $Update'$1_stake_ValidatorPerformance'_validators(s: $1_stake_ValidatorPerformance, x: Vec ($1_stake_IndividualValidatorPerformance)): $1_stake_ValidatorPerformance {
    $1_stake_ValidatorPerformance(x)
}
function $IsValid'$1_stake_ValidatorPerformance'(s: $1_stake_ValidatorPerformance): bool {
    $IsValid'vec'$1_stake_IndividualValidatorPerformance''(s->$validators)
}
function {:inline} $IsEqual'$1_stake_ValidatorPerformance'(s1: $1_stake_ValidatorPerformance, s2: $1_stake_ValidatorPerformance): bool {
    $IsEqual'vec'$1_stake_IndividualValidatorPerformance''(s1->$validators, s2->$validators)}
var $1_stake_ValidatorPerformance_$memory: $Memory $1_stake_ValidatorPerformance;

// struct stake::ValidatorSet at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:181:5+577
datatype $1_stake_ValidatorSet {
    $1_stake_ValidatorSet($consensus_scheme: int, $active_validators: Vec ($1_stake_ValidatorInfo), $pending_inactive: Vec ($1_stake_ValidatorInfo), $pending_active: Vec ($1_stake_ValidatorInfo), $total_voting_power: int, $total_joining_power: int)
}
function {:inline} $Update'$1_stake_ValidatorSet'_consensus_scheme(s: $1_stake_ValidatorSet, x: int): $1_stake_ValidatorSet {
    $1_stake_ValidatorSet(x, s->$active_validators, s->$pending_inactive, s->$pending_active, s->$total_voting_power, s->$total_joining_power)
}
function {:inline} $Update'$1_stake_ValidatorSet'_active_validators(s: $1_stake_ValidatorSet, x: Vec ($1_stake_ValidatorInfo)): $1_stake_ValidatorSet {
    $1_stake_ValidatorSet(s->$consensus_scheme, x, s->$pending_inactive, s->$pending_active, s->$total_voting_power, s->$total_joining_power)
}
function {:inline} $Update'$1_stake_ValidatorSet'_pending_inactive(s: $1_stake_ValidatorSet, x: Vec ($1_stake_ValidatorInfo)): $1_stake_ValidatorSet {
    $1_stake_ValidatorSet(s->$consensus_scheme, s->$active_validators, x, s->$pending_active, s->$total_voting_power, s->$total_joining_power)
}
function {:inline} $Update'$1_stake_ValidatorSet'_pending_active(s: $1_stake_ValidatorSet, x: Vec ($1_stake_ValidatorInfo)): $1_stake_ValidatorSet {
    $1_stake_ValidatorSet(s->$consensus_scheme, s->$active_validators, s->$pending_inactive, x, s->$total_voting_power, s->$total_joining_power)
}
function {:inline} $Update'$1_stake_ValidatorSet'_total_voting_power(s: $1_stake_ValidatorSet, x: int): $1_stake_ValidatorSet {
    $1_stake_ValidatorSet(s->$consensus_scheme, s->$active_validators, s->$pending_inactive, s->$pending_active, x, s->$total_joining_power)
}
function {:inline} $Update'$1_stake_ValidatorSet'_total_joining_power(s: $1_stake_ValidatorSet, x: int): $1_stake_ValidatorSet {
    $1_stake_ValidatorSet(s->$consensus_scheme, s->$active_validators, s->$pending_inactive, s->$pending_active, s->$total_voting_power, x)
}
function $IsValid'$1_stake_ValidatorSet'(s: $1_stake_ValidatorSet): bool {
    $IsValid'u8'(s->$consensus_scheme)
      && $IsValid'vec'$1_stake_ValidatorInfo''(s->$active_validators)
      && $IsValid'vec'$1_stake_ValidatorInfo''(s->$pending_inactive)
      && $IsValid'vec'$1_stake_ValidatorInfo''(s->$pending_active)
      && $IsValid'u128'(s->$total_voting_power)
      && $IsValid'u128'(s->$total_joining_power)
}
function {:inline} $IsEqual'$1_stake_ValidatorSet'(s1: $1_stake_ValidatorSet, s2: $1_stake_ValidatorSet): bool {
    $IsEqual'u8'(s1->$consensus_scheme, s2->$consensus_scheme)
    && $IsEqual'vec'$1_stake_ValidatorInfo''(s1->$active_validators, s2->$active_validators)
    && $IsEqual'vec'$1_stake_ValidatorInfo''(s1->$pending_inactive, s2->$pending_inactive)
    && $IsEqual'vec'$1_stake_ValidatorInfo''(s1->$pending_active, s2->$pending_active)
    && $IsEqual'u128'(s1->$total_voting_power, s2->$total_voting_power)
    && $IsEqual'u128'(s1->$total_joining_power, s2->$total_joining_power)}
var $1_stake_ValidatorSet_$memory: $Memory $1_stake_ValidatorSet;

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:7:9+50
function  $1_aptos_hash_spec_keccak256(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_aptos_hash_spec_keccak256(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:12:9+58
function  $1_aptos_hash_spec_sha2_512_internal(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_aptos_hash_spec_sha2_512_internal(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:17:9+58
function  $1_aptos_hash_spec_sha3_512_internal(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_aptos_hash_spec_sha3_512_internal(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:22:9+59
function  $1_aptos_hash_spec_ripemd160_internal(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_aptos_hash_spec_ripemd160_internal(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:27:9+61
function  $1_aptos_hash_spec_blake2b_256_internal(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_aptos_hash_spec_blake2b_256_internal(bytes);
$IsValid'vec'u8''($$res)));

// struct transaction_fee::AptosCoinCapabilities at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/transaction_fee.move:32:5+89
datatype $1_transaction_fee_AptosCoinCapabilities {
    $1_transaction_fee_AptosCoinCapabilities($burn_cap: $1_coin_BurnCapability'$1_aptos_coin_AptosCoin')
}
function {:inline} $Update'$1_transaction_fee_AptosCoinCapabilities'_burn_cap(s: $1_transaction_fee_AptosCoinCapabilities, x: $1_coin_BurnCapability'$1_aptos_coin_AptosCoin'): $1_transaction_fee_AptosCoinCapabilities {
    $1_transaction_fee_AptosCoinCapabilities(x)
}
function $IsValid'$1_transaction_fee_AptosCoinCapabilities'(s: $1_transaction_fee_AptosCoinCapabilities): bool {
    $IsValid'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin''(s->$burn_cap)
}
function {:inline} $IsEqual'$1_transaction_fee_AptosCoinCapabilities'(s1: $1_transaction_fee_AptosCoinCapabilities, s2: $1_transaction_fee_AptosCoinCapabilities): bool {
    s1 == s2
}
var $1_transaction_fee_AptosCoinCapabilities_$memory: $Memory $1_transaction_fee_AptosCoinCapabilities;

// struct transaction_fee::AptosFABurnCapabilities at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/transaction_fee.move:37:5+73
datatype $1_transaction_fee_AptosFABurnCapabilities {
    $1_transaction_fee_AptosFABurnCapabilities($burn_ref: $1_fungible_asset_BurnRef)
}
function {:inline} $Update'$1_transaction_fee_AptosFABurnCapabilities'_burn_ref(s: $1_transaction_fee_AptosFABurnCapabilities, x: $1_fungible_asset_BurnRef): $1_transaction_fee_AptosFABurnCapabilities {
    $1_transaction_fee_AptosFABurnCapabilities(x)
}
function $IsValid'$1_transaction_fee_AptosFABurnCapabilities'(s: $1_transaction_fee_AptosFABurnCapabilities): bool {
    $IsValid'$1_fungible_asset_BurnRef'(s->$burn_ref)
}
function {:inline} $IsEqual'$1_transaction_fee_AptosFABurnCapabilities'(s1: $1_transaction_fee_AptosFABurnCapabilities, s2: $1_transaction_fee_AptosFABurnCapabilities): bool {
    s1 == s2
}
var $1_transaction_fee_AptosFABurnCapabilities_$memory: $Memory $1_transaction_fee_AptosFABurnCapabilities;

// struct state_storage::GasParameter at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/state_storage.move:83:5+64
datatype $1_state_storage_GasParameter {
    $1_state_storage_GasParameter($usage: $1_state_storage_Usage)
}
function {:inline} $Update'$1_state_storage_GasParameter'_usage(s: $1_state_storage_GasParameter, x: $1_state_storage_Usage): $1_state_storage_GasParameter {
    $1_state_storage_GasParameter(x)
}
function $IsValid'$1_state_storage_GasParameter'(s: $1_state_storage_GasParameter): bool {
    $IsValid'$1_state_storage_Usage'(s->$usage)
}
function {:inline} $IsEqual'$1_state_storage_GasParameter'(s1: $1_state_storage_GasParameter, s2: $1_state_storage_GasParameter): bool {
    s1 == s2
}
var $1_state_storage_GasParameter_$memory: $Memory $1_state_storage_GasParameter;

// struct state_storage::StateStorageUsage at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/state_storage.move:19:5+89
datatype $1_state_storage_StateStorageUsage {
    $1_state_storage_StateStorageUsage($epoch: int, $usage: $1_state_storage_Usage)
}
function {:inline} $Update'$1_state_storage_StateStorageUsage'_epoch(s: $1_state_storage_StateStorageUsage, x: int): $1_state_storage_StateStorageUsage {
    $1_state_storage_StateStorageUsage(x, s->$usage)
}
function {:inline} $Update'$1_state_storage_StateStorageUsage'_usage(s: $1_state_storage_StateStorageUsage, x: $1_state_storage_Usage): $1_state_storage_StateStorageUsage {
    $1_state_storage_StateStorageUsage(s->$epoch, x)
}
function $IsValid'$1_state_storage_StateStorageUsage'(s: $1_state_storage_StateStorageUsage): bool {
    $IsValid'u64'(s->$epoch)
      && $IsValid'$1_state_storage_Usage'(s->$usage)
}
function {:inline} $IsEqual'$1_state_storage_StateStorageUsage'(s1: $1_state_storage_StateStorageUsage, s2: $1_state_storage_StateStorageUsage): bool {
    s1 == s2
}
var $1_state_storage_StateStorageUsage_$memory: $Memory $1_state_storage_StateStorageUsage;

// struct state_storage::Usage at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/state_storage.move:12:5+82
datatype $1_state_storage_Usage {
    $1_state_storage_Usage($items: int, $bytes: int)
}
function {:inline} $Update'$1_state_storage_Usage'_items(s: $1_state_storage_Usage, x: int): $1_state_storage_Usage {
    $1_state_storage_Usage(x, s->$bytes)
}
function {:inline} $Update'$1_state_storage_Usage'_bytes(s: $1_state_storage_Usage, x: int): $1_state_storage_Usage {
    $1_state_storage_Usage(s->$items, x)
}
function $IsValid'$1_state_storage_Usage'(s: $1_state_storage_Usage): bool {
    $IsValid'u64'(s->$items)
      && $IsValid'u64'(s->$bytes)
}
function {:inline} $IsEqual'$1_state_storage_Usage'(s1: $1_state_storage_Usage, s2: $1_state_storage_Usage): bool {
    s1 == s2
}

// struct storage_gas::GasCurve at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/storage_gas.move:247:5+120
datatype $1_storage_gas_GasCurve {
    $1_storage_gas_GasCurve($min_gas: int, $max_gas: int, $points: Vec ($1_storage_gas_Point))
}
function {:inline} $Update'$1_storage_gas_GasCurve'_min_gas(s: $1_storage_gas_GasCurve, x: int): $1_storage_gas_GasCurve {
    $1_storage_gas_GasCurve(x, s->$max_gas, s->$points)
}
function {:inline} $Update'$1_storage_gas_GasCurve'_max_gas(s: $1_storage_gas_GasCurve, x: int): $1_storage_gas_GasCurve {
    $1_storage_gas_GasCurve(s->$min_gas, x, s->$points)
}
function {:inline} $Update'$1_storage_gas_GasCurve'_points(s: $1_storage_gas_GasCurve, x: Vec ($1_storage_gas_Point)): $1_storage_gas_GasCurve {
    $1_storage_gas_GasCurve(s->$min_gas, s->$max_gas, x)
}
function $IsValid'$1_storage_gas_GasCurve'(s: $1_storage_gas_GasCurve): bool {
    $IsValid'u64'(s->$min_gas)
      && $IsValid'u64'(s->$max_gas)
      && $IsValid'vec'$1_storage_gas_Point''(s->$points)
}
function {:inline} $IsEqual'$1_storage_gas_GasCurve'(s1: $1_storage_gas_GasCurve, s2: $1_storage_gas_GasCurve): bool {
    $IsEqual'u64'(s1->$min_gas, s2->$min_gas)
    && $IsEqual'u64'(s1->$max_gas, s2->$max_gas)
    && $IsEqual'vec'$1_storage_gas_Point''(s1->$points, s2->$points)}

// struct storage_gas::Point at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/storage_gas.move:207:5+322
datatype $1_storage_gas_Point {
    $1_storage_gas_Point($x: int, $y: int)
}
function {:inline} $Update'$1_storage_gas_Point'_x(s: $1_storage_gas_Point, x: int): $1_storage_gas_Point {
    $1_storage_gas_Point(x, s->$y)
}
function {:inline} $Update'$1_storage_gas_Point'_y(s: $1_storage_gas_Point, x: int): $1_storage_gas_Point {
    $1_storage_gas_Point(s->$x, x)
}
function $IsValid'$1_storage_gas_Point'(s: $1_storage_gas_Point): bool {
    $IsValid'u64'(s->$x)
      && $IsValid'u64'(s->$y)
}
function {:inline} $IsEqual'$1_storage_gas_Point'(s1: $1_storage_gas_Point, s2: $1_storage_gas_Point): bool {
    s1 == s2
}

// struct storage_gas::StorageGas at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/storage_gas.move:183:5+534
datatype $1_storage_gas_StorageGas {
    $1_storage_gas_StorageGas($per_item_read: int, $per_item_create: int, $per_item_write: int, $per_byte_read: int, $per_byte_create: int, $per_byte_write: int)
}
function {:inline} $Update'$1_storage_gas_StorageGas'_per_item_read(s: $1_storage_gas_StorageGas, x: int): $1_storage_gas_StorageGas {
    $1_storage_gas_StorageGas(x, s->$per_item_create, s->$per_item_write, s->$per_byte_read, s->$per_byte_create, s->$per_byte_write)
}
function {:inline} $Update'$1_storage_gas_StorageGas'_per_item_create(s: $1_storage_gas_StorageGas, x: int): $1_storage_gas_StorageGas {
    $1_storage_gas_StorageGas(s->$per_item_read, x, s->$per_item_write, s->$per_byte_read, s->$per_byte_create, s->$per_byte_write)
}
function {:inline} $Update'$1_storage_gas_StorageGas'_per_item_write(s: $1_storage_gas_StorageGas, x: int): $1_storage_gas_StorageGas {
    $1_storage_gas_StorageGas(s->$per_item_read, s->$per_item_create, x, s->$per_byte_read, s->$per_byte_create, s->$per_byte_write)
}
function {:inline} $Update'$1_storage_gas_StorageGas'_per_byte_read(s: $1_storage_gas_StorageGas, x: int): $1_storage_gas_StorageGas {
    $1_storage_gas_StorageGas(s->$per_item_read, s->$per_item_create, s->$per_item_write, x, s->$per_byte_create, s->$per_byte_write)
}
function {:inline} $Update'$1_storage_gas_StorageGas'_per_byte_create(s: $1_storage_gas_StorageGas, x: int): $1_storage_gas_StorageGas {
    $1_storage_gas_StorageGas(s->$per_item_read, s->$per_item_create, s->$per_item_write, s->$per_byte_read, x, s->$per_byte_write)
}
function {:inline} $Update'$1_storage_gas_StorageGas'_per_byte_write(s: $1_storage_gas_StorageGas, x: int): $1_storage_gas_StorageGas {
    $1_storage_gas_StorageGas(s->$per_item_read, s->$per_item_create, s->$per_item_write, s->$per_byte_read, s->$per_byte_create, x)
}
function $IsValid'$1_storage_gas_StorageGas'(s: $1_storage_gas_StorageGas): bool {
    $IsValid'u64'(s->$per_item_read)
      && $IsValid'u64'(s->$per_item_create)
      && $IsValid'u64'(s->$per_item_write)
      && $IsValid'u64'(s->$per_byte_read)
      && $IsValid'u64'(s->$per_byte_create)
      && $IsValid'u64'(s->$per_byte_write)
}
function {:inline} $IsEqual'$1_storage_gas_StorageGas'(s1: $1_storage_gas_StorageGas, s2: $1_storage_gas_StorageGas): bool {
    s1 == s2
}
var $1_storage_gas_StorageGas_$memory: $Memory $1_storage_gas_StorageGas;

// struct storage_gas::StorageGasConfig at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/storage_gas.move:319:5+205
datatype $1_storage_gas_StorageGasConfig {
    $1_storage_gas_StorageGasConfig($item_config: $1_storage_gas_UsageGasConfig, $byte_config: $1_storage_gas_UsageGasConfig)
}
function {:inline} $Update'$1_storage_gas_StorageGasConfig'_item_config(s: $1_storage_gas_StorageGasConfig, x: $1_storage_gas_UsageGasConfig): $1_storage_gas_StorageGasConfig {
    $1_storage_gas_StorageGasConfig(x, s->$byte_config)
}
function {:inline} $Update'$1_storage_gas_StorageGasConfig'_byte_config(s: $1_storage_gas_StorageGasConfig, x: $1_storage_gas_UsageGasConfig): $1_storage_gas_StorageGasConfig {
    $1_storage_gas_StorageGasConfig(s->$item_config, x)
}
function $IsValid'$1_storage_gas_StorageGasConfig'(s: $1_storage_gas_StorageGasConfig): bool {
    $IsValid'$1_storage_gas_UsageGasConfig'(s->$item_config)
      && $IsValid'$1_storage_gas_UsageGasConfig'(s->$byte_config)
}
function {:inline} $IsEqual'$1_storage_gas_StorageGasConfig'(s1: $1_storage_gas_StorageGasConfig, s2: $1_storage_gas_StorageGasConfig): bool {
    $IsEqual'$1_storage_gas_UsageGasConfig'(s1->$item_config, s2->$item_config)
    && $IsEqual'$1_storage_gas_UsageGasConfig'(s1->$byte_config, s2->$byte_config)}
var $1_storage_gas_StorageGasConfig_$memory: $Memory $1_storage_gas_StorageGasConfig;

// struct storage_gas::UsageGasConfig at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/storage_gas.move:221:5+171
datatype $1_storage_gas_UsageGasConfig {
    $1_storage_gas_UsageGasConfig($target_usage: int, $read_curve: $1_storage_gas_GasCurve, $create_curve: $1_storage_gas_GasCurve, $write_curve: $1_storage_gas_GasCurve)
}
function {:inline} $Update'$1_storage_gas_UsageGasConfig'_target_usage(s: $1_storage_gas_UsageGasConfig, x: int): $1_storage_gas_UsageGasConfig {
    $1_storage_gas_UsageGasConfig(x, s->$read_curve, s->$create_curve, s->$write_curve)
}
function {:inline} $Update'$1_storage_gas_UsageGasConfig'_read_curve(s: $1_storage_gas_UsageGasConfig, x: $1_storage_gas_GasCurve): $1_storage_gas_UsageGasConfig {
    $1_storage_gas_UsageGasConfig(s->$target_usage, x, s->$create_curve, s->$write_curve)
}
function {:inline} $Update'$1_storage_gas_UsageGasConfig'_create_curve(s: $1_storage_gas_UsageGasConfig, x: $1_storage_gas_GasCurve): $1_storage_gas_UsageGasConfig {
    $1_storage_gas_UsageGasConfig(s->$target_usage, s->$read_curve, x, s->$write_curve)
}
function {:inline} $Update'$1_storage_gas_UsageGasConfig'_write_curve(s: $1_storage_gas_UsageGasConfig, x: $1_storage_gas_GasCurve): $1_storage_gas_UsageGasConfig {
    $1_storage_gas_UsageGasConfig(s->$target_usage, s->$read_curve, s->$create_curve, x)
}
function $IsValid'$1_storage_gas_UsageGasConfig'(s: $1_storage_gas_UsageGasConfig): bool {
    $IsValid'u64'(s->$target_usage)
      && $IsValid'$1_storage_gas_GasCurve'(s->$read_curve)
      && $IsValid'$1_storage_gas_GasCurve'(s->$create_curve)
      && $IsValid'$1_storage_gas_GasCurve'(s->$write_curve)
}
function {:inline} $IsEqual'$1_storage_gas_UsageGasConfig'(s1: $1_storage_gas_UsageGasConfig, s2: $1_storage_gas_UsageGasConfig): bool {
    $IsEqual'u64'(s1->$target_usage, s2->$target_usage)
    && $IsEqual'$1_storage_gas_GasCurve'(s1->$read_curve, s2->$read_curve)
    && $IsEqual'$1_storage_gas_GasCurve'(s1->$create_curve, s2->$create_curve)
    && $IsEqual'$1_storage_gas_GasCurve'(s1->$write_curve, s2->$write_curve)}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.move:161:5+155
function {:inline} $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory: $Memory $1_reconfiguration_Configuration): int {
    $ResourceValue($1_reconfiguration_Configuration_$memory, 1)->$last_reconfiguration_time
}

// struct reconfiguration::Configuration at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.move:43:5+306
datatype $1_reconfiguration_Configuration {
    $1_reconfiguration_Configuration($epoch: int, $last_reconfiguration_time: int, $events: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent')
}
function {:inline} $Update'$1_reconfiguration_Configuration'_epoch(s: $1_reconfiguration_Configuration, x: int): $1_reconfiguration_Configuration {
    $1_reconfiguration_Configuration(x, s->$last_reconfiguration_time, s->$events)
}
function {:inline} $Update'$1_reconfiguration_Configuration'_last_reconfiguration_time(s: $1_reconfiguration_Configuration, x: int): $1_reconfiguration_Configuration {
    $1_reconfiguration_Configuration(s->$epoch, x, s->$events)
}
function {:inline} $Update'$1_reconfiguration_Configuration'_events(s: $1_reconfiguration_Configuration, x: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'): $1_reconfiguration_Configuration {
    $1_reconfiguration_Configuration(s->$epoch, s->$last_reconfiguration_time, x)
}
function $IsValid'$1_reconfiguration_Configuration'(s: $1_reconfiguration_Configuration): bool {
    $IsValid'u64'(s->$epoch)
      && $IsValid'u64'(s->$last_reconfiguration_time)
      && $IsValid'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(s->$events)
}
function {:inline} $IsEqual'$1_reconfiguration_Configuration'(s1: $1_reconfiguration_Configuration, s2: $1_reconfiguration_Configuration): bool {
    s1 == s2
}
var $1_reconfiguration_Configuration_$memory: $Memory $1_reconfiguration_Configuration;

// struct reconfiguration::NewEpochEvent at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.move:30:5+64
datatype $1_reconfiguration_NewEpochEvent {
    $1_reconfiguration_NewEpochEvent($epoch: int)
}
function {:inline} $Update'$1_reconfiguration_NewEpochEvent'_epoch(s: $1_reconfiguration_NewEpochEvent, x: int): $1_reconfiguration_NewEpochEvent {
    $1_reconfiguration_NewEpochEvent(x)
}
function $IsValid'$1_reconfiguration_NewEpochEvent'(s: $1_reconfiguration_NewEpochEvent): bool {
    $IsValid'u64'(s->$epoch)
}
function {:inline} $IsEqual'$1_reconfiguration_NewEpochEvent'(s1: $1_reconfiguration_NewEpochEvent, s2: $1_reconfiguration_NewEpochEvent): bool {
    s1 == s2
}

// fun reconfiguration::current_epoch [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.move:165:5+123
procedure {:inline 1} $1_reconfiguration_current_epoch() returns ($ret0: int)
{
    // declare local variables
    var $t0: int;
    var $t1: $1_reconfiguration_Configuration;
    var $t2: int;
    var $t3: int;
    var $temp_0'u64': int;

    // bytecode translation starts here
    // $t0 := 0x1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.move:166:38+16
    assume {:print "$at(193,6819,6835)"} true;
    $t0 := 1;
    assume $IsValid'address'($t0);

    // $t1 := get_global<0x1::reconfiguration::Configuration>($t0) on_abort goto L2 with $t2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.move:166:9+46
    if (!$ResourceExists($1_reconfiguration_Configuration_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t1 := $ResourceValue($1_reconfiguration_Configuration_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(193,6790,6836)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(69,1):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_field<0x1::reconfiguration::Configuration>.epoch($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.move:166:9+52
    $t3 := $t1->$epoch;

    // trace_return[0]($t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.move:166:9+52
    assume {:print "$track_return(69,1,0):", $t3} $t3 == $t3;

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.move:167:5+1
    assume {:print "$at(193,6847,6848)"} true;
L1:

    // return $t3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.move:167:5+1
    assume {:print "$at(193,6847,6848)"} true;
    $ret0 := $t3;
    return;

    // label L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.move:167:5+1
L2:

    // abort($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.move:167:5+1
    assume {:print "$at(193,6847,6848)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.spec.move:12:10+303
function {:inline} $1_config_buffer_spec_fun_does_exist'$1_jwks_SupportedOIDCProviders'($1_config_buffer_PendingConfigs_$memory: $Memory $1_config_buffer_PendingConfigs, type_name: $1_string_String): bool {
    (if ($ResourceExists($1_config_buffer_PendingConfigs_$memory, 1)) then ((var config := $ResourceValue($1_config_buffer_PendingConfigs_$memory, 1); $1_simple_map_spec_contains_key'$1_string_String_$1_any_Any'(config->$configs, type_name))) else (false))
}

// struct config_buffer::PendingConfigs at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:39:5+78
datatype $1_config_buffer_PendingConfigs {
    $1_config_buffer_PendingConfigs($configs: Table int ($1_any_Any))
}
function {:inline} $Update'$1_config_buffer_PendingConfigs'_configs(s: $1_config_buffer_PendingConfigs, x: Table int ($1_any_Any)): $1_config_buffer_PendingConfigs {
    $1_config_buffer_PendingConfigs(x)
}
function $IsValid'$1_config_buffer_PendingConfigs'(s: $1_config_buffer_PendingConfigs): bool {
    $IsValid'$1_simple_map_SimpleMap'$1_string_String_$1_any_Any''(s->$configs)
}
function {:inline} $IsEqual'$1_config_buffer_PendingConfigs'(s1: $1_config_buffer_PendingConfigs, s2: $1_config_buffer_PendingConfigs): bool {
    $IsEqual'$1_simple_map_SimpleMap'$1_string_String_$1_any_Any''(s1->$configs, s2->$configs)}
var $1_config_buffer_PendingConfigs_$memory: $Memory $1_config_buffer_PendingConfigs;

// fun config_buffer::upsert<0x1::jwks::SupportedOIDCProviders> [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:65:5+306
procedure {:inline 1} $1_config_buffer_upsert'$1_jwks_SupportedOIDCProviders'(_$t0: $1_jwks_SupportedOIDCProviders) returns ()
{
    // declare local variables
    var $t1: $1_string_String;
    var $t2: $1_any_Any;
    var $t3: int;
    var $t4: $Mutation ($1_config_buffer_PendingConfigs);
    var $t5: int;
    var $t6: $1_string_String;
    var $t7: $1_any_Any;
    var $t8: $Mutation (Table int ($1_any_Any));
    var $t9: $1_option_Option'$1_string_String';
    var $t10: $1_option_Option'$1_any_Any';
    var $t11: Table int ($1_any_Any);
    var $t0: $1_jwks_SupportedOIDCProviders;
    var $temp_0'$1_any_Any': $1_any_Any;
    var $temp_0'$1_jwks_SupportedOIDCProviders': $1_jwks_SupportedOIDCProviders;
    var $temp_0'$1_simple_map_SimpleMap'$1_string_String_$1_any_Any'': Table int ($1_any_Any);
    var $temp_0'$1_string_String': $1_string_String;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[config]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:65:5+1
    assume {:print "$at(133,2613,2614)"} true;
    assume {:print "$track_local(70,1,0):", $t0} $t0 == $t0;

    // $t3 := 0x1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:66:57+16
    assume {:print "$at(133,2749,2765)"} true;
    $t3 := 1;
    assume $IsValid'address'($t3);

    // $t4 := borrow_global<0x1::config_buffer::PendingConfigs>($t3) on_abort goto L2 with $t5 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:66:23+51
    if (!$ResourceExists($1_config_buffer_PendingConfigs_$memory, $t3)) {
        call $ExecFailureAbort();
    } else {
        $t4 := $Mutation($Global($t3), EmptyVec(), $ResourceValue($1_config_buffer_PendingConfigs_$memory, $t3));
    }
    if ($abort_flag) {
        assume {:print "$at(133,2715,2766)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(70,1):", $t5} $t5 == $t5;
        goto L2;
    }

    // $t6 := type_info::type_name<#0>() on_abort goto L2 with $t5 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:67:19+25
    assume {:print "$at(133,2786,2811)"} true;
    $t6 := $1_string_String(Vec(DefaultVecMap()[0 := 48][1 := 120][2 := 49][3 := 58][4 := 58][5 := 106][6 := 119][7 := 107][8 := 115][9 := 58][10 := 58][11 := 83][12 := 117][13 := 112][14 := 112][15 := 111][16 := 114][17 := 116][18 := 101][19 := 100][20 := 79][21 := 73][22 := 68][23 := 67][24 := 80][25 := 114][26 := 111][27 := 118][28 := 105][29 := 100][30 := 101][31 := 114][32 := 115], 33));
    if ($abort_flag) {
        assume {:print "$at(133,2786,2811)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(70,1):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[key]($t6) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:67:19+25
    assume {:print "$track_local(70,1,1):", $t6} $t6 == $t6;

    // $t7 := any::pack<#0>($t0) on_abort goto L2 with $t5 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:68:21+17
    assume {:print "$at(133,2833,2850)"} true;
    call $t7 := $1_any_pack'$1_jwks_SupportedOIDCProviders'($t0);
    if ($abort_flag) {
        assume {:print "$at(133,2833,2850)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(70,1):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[value]($t7) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:68:21+17
    assume {:print "$track_local(70,1,2):", $t7} $t7 == $t7;

    // $t8 := borrow_field<0x1::config_buffer::PendingConfigs>.configs($t4) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:69:28+20
    assume {:print "$at(133,2879,2899)"} true;
    $t8 := $ChildMutation($t4, 0, $Dereference($t4)->$configs);

    // ($t9, $t10) := opaque begin: simple_map::upsert<0x1::string::String, 0x1::any::Any>($t8, $t6, $t7) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:69:9+52

    // $t11 := read_ref($t8) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:69:9+52
    $t11 := $Dereference($t8);

    // $t8 := havoc[mut]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:69:9+52
    havoc $temp_0'$1_simple_map_SimpleMap'$1_string_String_$1_any_Any'';
    $t8 := $UpdateMutation($t8, $temp_0'$1_simple_map_SimpleMap'$1_string_String_$1_any_Any'');

    // assume WellFormed($t8) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:69:9+52
    assume $IsValid'$1_simple_map_SimpleMap'$1_string_String_$1_any_Any''($Dereference($t8));

    // assume And(WellFormed($t9), Le(Len<0x1::string::String>(select option::Option.vec($t9)), 1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:69:9+52
    assume ($IsValid'$1_option_Option'$1_string_String''($t9) && (LenVec($t9->$vec) <= 1));

    // assume And(WellFormed($t10), Le(Len<0x1::any::Any>(select option::Option.vec($t10)), 1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:69:9+52
    assume ($IsValid'$1_option_Option'$1_any_Any''($t10) && (LenVec($t10->$vec) <= 1));

    // assume Implies(Not(simple_map::spec_contains_key<0x1::string::String, 0x1::any::Any>($t11, $t6)), option::$is_none<0x1::string::String>($t9)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:69:9+52
    assume (!$1_simple_map_spec_contains_key'$1_string_String_$1_any_Any'($t11, $t6) ==> $1_option_$is_none'$1_string_String'($t9));

    // assume Implies(Not(simple_map::spec_contains_key<0x1::string::String, 0x1::any::Any>($t11, $t6)), option::$is_none<0x1::any::Any>($t10)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:69:9+52
    assume (!$1_simple_map_spec_contains_key'$1_string_String_$1_any_Any'($t11, $t6) ==> $1_option_$is_none'$1_any_Any'($t10));

    // assume simple_map::spec_contains_key<0x1::string::String, 0x1::any::Any>($t8, $t6) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:69:9+52
    assume $1_simple_map_spec_contains_key'$1_string_String_$1_any_Any'($Dereference($t8), $t6);

    // assume Eq<0x1::any::Any>(simple_map::spec_get<0x1::string::String, 0x1::any::Any>($t8, $t6), $t7) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:69:9+52
    assume $IsEqual'$1_any_Any'($1_simple_map_spec_get'$1_string_String_$1_any_Any'($Dereference($t8), $t6), $t7);

    // assume Implies(simple_map::spec_contains_key<0x1::string::String, 0x1::any::Any>($t11, $t6), And(option::$is_some<0x1::string::String>($t9), Eq<0x1::string::String>(option::spec_borrow<0x1::string::String>($t9), $t6))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:69:9+52
    assume ($1_simple_map_spec_contains_key'$1_string_String_$1_any_Any'($t11, $t6) ==> ($1_option_$is_some'$1_string_String'($t9) && $IsEqual'$1_string_String'($1_option_spec_borrow'$1_string_String'($t9), $t6)));

    // assume Implies(simple_map::spec_contains_key<0x1::string::String, 0x1::any::Any>($t11, $t6), And(option::$is_some<0x1::any::Any>($t10), Eq<0x1::any::Any>(option::spec_borrow<0x1::any::Any>($t10), simple_map::spec_get<0x1::string::String, 0x1::any::Any>($t11, $t6)))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:69:9+52
    assume ($1_simple_map_spec_contains_key'$1_string_String_$1_any_Any'($t11, $t6) ==> ($1_option_$is_some'$1_any_Any'($t10) && $IsEqual'$1_any_Any'($1_option_spec_borrow'$1_any_Any'($t10), $1_simple_map_spec_get'$1_string_String_$1_any_Any'($t11, $t6))));

    // ($t9, $t10) := opaque end: simple_map::upsert<0x1::string::String, 0x1::any::Any>($t8, $t6, $t7) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:69:9+52

    // write_back[Reference($t4).configs (0x1::simple_map::SimpleMap<0x1::string::String, 0x1::any::Any>)]($t8) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:69:9+52
    $t4 := $UpdateMutation($t4, $Update'$1_config_buffer_PendingConfigs'_configs($Dereference($t4), $Dereference($t8)));

    // write_back[0x1::config_buffer::PendingConfigs@]($t4) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:69:9+52
    $1_config_buffer_PendingConfigs_$memory := $ResourceUpdate($1_config_buffer_PendingConfigs_$memory, $GlobalLocationAddress($t4),
        $Dereference($t4));

    // drop($t10) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:69:9+52

    // drop($t9) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:69:9+52

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:70:5+1
    assume {:print "$at(133,2918,2919)"} true;
L1:

    // return () at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:70:5+1
    assume {:print "$at(133,2918,2919)"} true;
    return;

    // label L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:70:5+1
L2:

    // abort($t5) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:70:5+1
    assume {:print "$at(133,2918,2919)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun config_buffer::does_exist<0x1::jwks::SupportedOIDCProviders> [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:53:5+328
procedure {:inline 1} $1_config_buffer_does_exist'$1_jwks_SupportedOIDCProviders'() returns ($ret0: bool)
{
    // declare local variables
    var $t0: $1_string_String;
    var $t1: bool;
    var $t2: $1_string_String;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: $1_config_buffer_PendingConfigs;
    var $t7: int;
    var $t8: Table int ($1_any_Any);
    var $t9: $1_string_String;
    var $t10: bool;
    var $t11: bool;
    var $temp_0'$1_string_String': $1_string_String;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // assume Identical($t2, type_info::$type_name<#0>()) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.spec.move:8:9+42
    assume {:print "$at(134,166,208)"} true;
    assume ($t2 == $1_string_String(Vec(DefaultVecMap()[0 := 48][1 := 120][2 := 49][3 := 58][4 := 58][5 := 106][6 := 119][7 := 107][8 := 115][9 := 58][10 := 58][11 := 83][12 := 117][13 := 112][14 := 112][15 := 111][16 := 114][17 := 116][18 := 101][19 := 100][20 := 79][21 := 73][22 := 68][23 := 67][24 := 80][25 := 114][26 := 111][27 := 118][28 := 105][29 := 100][30 := 101][31 := 114][32 := 115], 33)));

    // $t3 := 0x1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:54:36+16
    assume {:print "$at(133,2221,2237)"} true;
    $t3 := 1;
    assume $IsValid'address'($t3);

    // $t4 := exists<0x1::config_buffer::PendingConfigs>($t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:54:13+40
    $t4 := $ResourceExists($1_config_buffer_PendingConfigs_$memory, $t3);

    // if ($t4) goto L1 else goto L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:54:9+248
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:55:56+16
    assume {:print "$at(133,2297,2313)"} true;
L1:

    // $t5 := 0x1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:55:56+16
    assume {:print "$at(133,2297,2313)"} true;
    $t5 := 1;
    assume $IsValid'address'($t5);

    // $t6 := get_global<0x1::config_buffer::PendingConfigs>($t5) on_abort goto L4 with $t7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:55:26+47
    if (!$ResourceExists($1_config_buffer_PendingConfigs_$memory, $t5)) {
        call $ExecFailureAbort();
    } else {
        $t6 := $ResourceValue($1_config_buffer_PendingConfigs_$memory, $t5);
    }
    if ($abort_flag) {
        assume {:print "$at(133,2267,2314)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(70,3):", $t7} $t7 == $t7;
        goto L4;
    }

    // $t8 := get_field<0x1::config_buffer::PendingConfigs>.configs($t6) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:56:38+15
    assume {:print "$at(133,2353,2368)"} true;
    $t8 := $t6->$configs;

    // $t9 := type_info::type_name<#0>() on_abort goto L4 with $t7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:56:56+25
    $t9 := $1_string_String(Vec(DefaultVecMap()[0 := 48][1 := 120][2 := 49][3 := 58][4 := 58][5 := 106][6 := 119][7 := 107][8 := 115][9 := 58][10 := 58][11 := 83][12 := 117][13 := 112][14 := 112][15 := 111][16 := 114][17 := 116][18 := 101][19 := 100][20 := 79][21 := 73][22 := 68][23 := 67][24 := 80][25 := 114][26 := 111][27 := 118][28 := 105][29 := 100][30 := 101][31 := 114][32 := 115], 33));
    if ($abort_flag) {
        assume {:print "$at(133,2371,2396)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(70,3):", $t7} $t7 == $t7;
        goto L4;
    }

    // trace_local[$t7]($t9) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:56:56+25
    assume {:print "$track_local(70,3,0):", $t9} $t9 == $t9;

    // $t10 := simple_map::contains_key<0x1::string::String, 0x1::any::Any>($t8, $t9) on_abort goto L4 with $t7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:56:13+69
    call $t10 := $1_simple_map_contains_key'$1_string_String_$1_any_Any'($t8, $t9);
    if ($abort_flag) {
        assume {:print "$at(133,2328,2397)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(70,3):", $t7} $t7 == $t7;
        goto L4;
    }

    // $t1 := $t10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:56:13+69
    $t1 := $t10;

    // trace_local[$t1]($t10) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:56:13+69
    assume {:print "$track_local(70,3,1):", $t10} $t10 == $t10;

    // label L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:54:9+248
    assume {:print "$at(133,2194,2442)"} true;
L2:

    // trace_return[0]($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:54:9+248
    assume {:print "$at(133,2194,2442)"} true;
    assume {:print "$track_return(70,3,0):", $t1} $t1 == $t1;

    // goto L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:54:9+248
    goto L3;

    // label L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:58:13+5
    assume {:print "$at(133,2427,2432)"} true;
L0:

    // $t11 := false at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:58:13+5
    assume {:print "$at(133,2427,2432)"} true;
    $t11 := false;
    assume $IsValid'bool'($t11);

    // $t1 := $t11 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:58:13+5
    $t1 := $t11;

    // trace_local[$t1]($t11) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:58:13+5
    assume {:print "$track_local(70,3,1):", $t11} $t11 == $t11;

    // goto L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:58:13+5
    goto L2;

    // label L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:60:5+1
    assume {:print "$at(133,2447,2448)"} true;
L3:

    // return $t1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:60:5+1
    assume {:print "$at(133,2447,2448)"} true;
    $ret0 := $t1;
    return;

    // label L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:60:5+1
L4:

    // abort($t7) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:60:5+1
    assume {:print "$at(133,2447,2448)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun config_buffer::extract_v2<0x1::jwks::SupportedOIDCProviders> [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:82:5+310
procedure {:inline 1} $1_config_buffer_extract_v2'$1_jwks_SupportedOIDCProviders'() returns ($ret0: $1_jwks_SupportedOIDCProviders)
{
    // declare local variables
    var $t0: $1_string_String;
    var $t1: $1_jwks_SupportedOIDCProviders;
    var $t2: $1_config_buffer_PendingConfigs;
    var $t3: $1_string_String;
    var $t4: int;
    var $t5: $Mutation ($1_config_buffer_PendingConfigs);
    var $t6: int;
    var $t7: $1_string_String;
    var $t8: $Mutation (Table int ($1_any_Any));
    var $t9: $1_string_String;
    var $t10: $1_any_Any;
    var $t11: $1_jwks_SupportedOIDCProviders;
    var $temp_0'$1_jwks_SupportedOIDCProviders': $1_jwks_SupportedOIDCProviders;
    var $temp_0'$1_string_String': $1_string_String;

    // bytecode translation starts here
    // assume Identical($t2, global<0x1::config_buffer::PendingConfigs>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.spec.move:31:9+55
    assume {:print "$at(134,891,946)"} true;
    assume ($t2 == $ResourceValue($1_config_buffer_PendingConfigs_$memory, 1));

    // assume Identical($t3, type_info::$type_name<#0>()) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.spec.move:32:9+36
    assume {:print "$at(134,955,991)"} true;
    assume ($t3 == $1_string_String(Vec(DefaultVecMap()[0 := 48][1 := 120][2 := 49][3 := 58][4 := 58][5 := 106][6 := 119][7 := 107][8 := 115][9 := 58][10 := 58][11 := 83][12 := 117][13 := 112][14 := 112][15 := 111][16 := 114][17 := 116][18 := 101][19 := 100][20 := 79][21 := 73][22 := 68][23 := 67][24 := 80][25 := 114][26 := 111][27 := 118][28 := 105][29 := 100][30 := 101][31 := 114][32 := 115], 33)));

    // $t4 := 0x1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:83:57+16
    assume {:print "$at(133,3433,3449)"} true;
    $t4 := 1;
    assume $IsValid'address'($t4);

    // $t5 := borrow_global<0x1::config_buffer::PendingConfigs>($t4) on_abort goto L2 with $t6 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:83:23+51
    if (!$ResourceExists($1_config_buffer_PendingConfigs_$memory, $t4)) {
        call $ExecFailureAbort();
    } else {
        $t5 := $Mutation($Global($t4), EmptyVec(), $ResourceValue($1_config_buffer_PendingConfigs_$memory, $t4));
    }
    if ($abort_flag) {
        assume {:print "$at(133,3399,3450)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(70,4):", $t6} $t6 == $t6;
        goto L2;
    }

    // $t7 := type_info::type_name<#0>() on_abort goto L2 with $t6 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:84:19+25
    assume {:print "$at(133,3470,3495)"} true;
    $t7 := $1_string_String(Vec(DefaultVecMap()[0 := 48][1 := 120][2 := 49][3 := 58][4 := 58][5 := 106][6 := 119][7 := 107][8 := 115][9 := 58][10 := 58][11 := 83][12 := 117][13 := 112][14 := 112][15 := 111][16 := 114][17 := 116][18 := 101][19 := 100][20 := 79][21 := 73][22 := 68][23 := 67][24 := 80][25 := 114][26 := 111][27 := 118][28 := 105][29 := 100][30 := 101][31 := 114][32 := 115], 33));
    if ($abort_flag) {
        assume {:print "$at(133,3470,3495)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(70,4):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[key]($t7) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:84:19+25
    assume {:print "$track_local(70,4,0):", $t7} $t7 == $t7;

    // $t8 := borrow_field<0x1::config_buffer::PendingConfigs>.configs($t5) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:85:52+20
    assume {:print "$at(133,3548,3568)"} true;
    $t8 := $ChildMutation($t5, 0, $Dereference($t5)->$configs);

    // ($t9, $t10) := simple_map::remove<0x1::string::String, 0x1::any::Any>($t8, $t7) on_abort goto L2 with $t6 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:85:33+46
    call $t9,$t10,$t8 := $1_simple_map_remove'$1_string_String_$1_any_Any'($t8, $t7);
    if ($abort_flag) {
        assume {:print "$at(133,3529,3575)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(70,4):", $t6} $t6 == $t6;
        goto L2;
    }

    // write_back[Reference($t5).configs (0x1::simple_map::SimpleMap<0x1::string::String, 0x1::any::Any>)]($t8) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:85:33+46
    $t5 := $UpdateMutation($t5, $Update'$1_config_buffer_PendingConfigs'_configs($Dereference($t5), $Dereference($t8)));

    // write_back[0x1::config_buffer::PendingConfigs@]($t5) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:85:33+46
    $1_config_buffer_PendingConfigs_$memory := $ResourceUpdate($1_config_buffer_PendingConfigs_$memory, $GlobalLocationAddress($t5),
        $Dereference($t5));

    // $t11 := any::unpack<#0>($t10) on_abort goto L2 with $t6 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:86:9+25
    assume {:print "$at(133,3585,3610)"} true;
    call $t11 := $1_any_unpack'$1_jwks_SupportedOIDCProviders'($t10);
    if ($abort_flag) {
        assume {:print "$at(133,3585,3610)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(70,4):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[return]($t11) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:86:9+25
    assume {:print "$track_local(70,4,1):", $t11} $t11 == $t11;

    // drop($t9) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:86:9+25

    // trace_return[0]($t11) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:86:9+25
    assume {:print "$track_return(70,4,0):", $t11} $t11 == $t11;

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:87:5+1
    assume {:print "$at(133,3615,3616)"} true;
L1:

    // return $t11 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:87:5+1
    assume {:print "$at(133,3615,3616)"} true;
    $ret0 := $t11;
    return;

    // label L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:87:5+1
L2:

    // abort($t6) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.move:87:5+1
    assume {:print "$at(133,3615,3616)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// struct randomness_config::RandomnessConfig at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/randomness_config.move:15:5+244
datatype $1_randomness_config_RandomnessConfig {
    $1_randomness_config_RandomnessConfig($variant: $1_copyable_any_Any)
}
function {:inline} $Update'$1_randomness_config_RandomnessConfig'_variant(s: $1_randomness_config_RandomnessConfig, x: $1_copyable_any_Any): $1_randomness_config_RandomnessConfig {
    $1_randomness_config_RandomnessConfig(x)
}
function $IsValid'$1_randomness_config_RandomnessConfig'(s: $1_randomness_config_RandomnessConfig): bool {
    $IsValid'$1_copyable_any_Any'(s->$variant)
}
function {:inline} $IsEqual'$1_randomness_config_RandomnessConfig'(s1: $1_randomness_config_RandomnessConfig, s2: $1_randomness_config_RandomnessConfig): bool {
    $IsEqual'$1_copyable_any_Any'(s1->$variant, s2->$variant)}
var $1_randomness_config_RandomnessConfig_$memory: $Memory $1_randomness_config_RandomnessConfig;

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/comparator.spec.move:30:10+72
function  $1_comparator_spec_compare_u8_vector(left: Vec (int), right: Vec (int)): $1_comparator_Result;
axiom (forall left: Vec (int), right: Vec (int) ::
(var $$res := $1_comparator_spec_compare_u8_vector(left, right);
$IsValid'$1_comparator_Result'($$res)));

// struct comparator::Result at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/comparator.move:9:5+49
datatype $1_comparator_Result {
    $1_comparator_Result($inner: int)
}
function {:inline} $Update'$1_comparator_Result'_inner(s: $1_comparator_Result, x: int): $1_comparator_Result {
    $1_comparator_Result(x)
}
function $IsValid'$1_comparator_Result'(s: $1_comparator_Result): bool {
    $IsValid'u8'(s->$inner)
}
function {:inline} $IsEqual'$1_comparator_Result'(s1: $1_comparator_Result, s2: $1_comparator_Result): bool {
    s1 == s2
}

// fun comparator::is_equal [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/comparator.move:13:5+76
procedure {:inline 1} $1_comparator_is_equal(_$t0: $1_comparator_Result) returns ($ret0: bool)
{
    // declare local variables
    var $t1: $1_comparator_Result;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t0: $1_comparator_Result;
    var $temp_0'$1_comparator_Result': $1_comparator_Result;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t1, $t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/comparator.spec.move:8:9+15
    assume {:print "$at(28,202,217)"} true;
    assume ($t1 == $t0);

    // trace_local[self]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/comparator.move:13:5+1
    assume {:print "$at(27,241,242)"} true;
    assume {:print "$track_local(78,2,0):", $t0} $t0 == $t0;

    // $t2 := get_field<0x1::comparator::Result>.inner($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/comparator.move:14:9+10
    assume {:print "$at(27,292,302)"} true;
    $t2 := $t0->$inner;

    // $t3 := 0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/comparator.move:14:23+5
    $t3 := 0;
    assume $IsValid'u8'($t3);

    // $t4 := ==($t2, $t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/comparator.move:14:9+19
    $t4 := $IsEqual'u8'($t2, $t3);

    // trace_return[0]($t4) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/comparator.move:14:9+19
    assume {:print "$track_return(78,2,0):", $t4} $t4 == $t4;

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/comparator.move:15:5+1
    assume {:print "$at(27,316,317)"} true;
L1:

    // return $t4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/comparator.move:15:5+1
    assume {:print "$at(27,316,317)"} true;
    $ret0 := $t4;
    return;

}

// fun comparator::is_greater_than [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/comparator.move:21:5+85
procedure {:inline 1} $1_comparator_is_greater_than(_$t0: $1_comparator_Result) returns ($ret0: bool)
{
    // declare local variables
    var $t1: $1_comparator_Result;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t0: $1_comparator_Result;
    var $temp_0'$1_comparator_Result': $1_comparator_Result;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t1, $t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/comparator.spec.move:20:9+15
    assume {:print "$at(28,508,523)"} true;
    assume ($t1 == $t0);

    // trace_local[self]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/comparator.move:21:5+1
    assume {:print "$at(27,414,415)"} true;
    assume {:print "$track_local(78,3,0):", $t0} $t0 == $t0;

    // $t2 := get_field<0x1::comparator::Result>.inner($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/comparator.move:22:9+10
    assume {:print "$at(27,472,482)"} true;
    $t2 := $t0->$inner;

    // $t3 := 2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/comparator.move:22:23+7
    $t3 := 2;
    assume $IsValid'u8'($t3);

    // $t4 := ==($t2, $t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/comparator.move:22:9+21
    $t4 := $IsEqual'u8'($t2, $t3);

    // trace_return[0]($t4) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/comparator.move:22:9+21
    assume {:print "$track_return(78,3,0):", $t4} $t4 == $t4;

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/comparator.move:23:5+1
    assume {:print "$at(27,498,499)"} true;
L1:

    // return $t4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/comparator.move:23:5+1
    assume {:print "$at(27,498,499)"} true;
    $ret0 := $t4;
    return;

}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:1029:10+285
function {:inline} $1_jwks_spec_first_match_idx(jwks: Vec ($1_jwks_JWK), jwk_id: Vec (int)): int {
    (if ((var $range_0 := $RangeVec'$1_jwks_JWK'(jwks); (exists $i_1: int :: $InRange($range_0, $i_1) && (var i := $i_1;
    ($IsEqual'vec'u8''($1_jwks_$get_jwk_id(ReadVec(jwks, i)), jwk_id)))))) then ($choice_0(jwks, jwk_id)) else ($1_vector_$length'$1_jwks_JWK'(jwks)))
}

// spec fun at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:568:5+565
function {:inline} $1_jwks_$get_jwk_id(jwk: $1_jwks_JWK): Vec (int) {
    (var variant_type_name := $1_string_$bytes($1_copyable_any_$type_name(jwk->$variant)); (if ($IsEqual'vec'u8''(variant_type_name, ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(48, 120, 49, 58), MakeVec4(58, 106, 119, 107)), MakeVec4(115, 58, 58, 82)), MakeVec4(83, 65, 95, 74)), MakeVec2(87, 75)))) then ((var rsa := $1_copyable_any_$unpack'$1_jwks_RSA_JWK'(jwk->$variant); $1_string_$bytes(rsa->$kid))) else ((if ($IsEqual'vec'u8''(variant_type_name, ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(48, 120, 49, 58), MakeVec4(58, 106, 119, 107)), MakeVec4(115, 58, 58, 85)), MakeVec4(110, 115, 117, 112)), MakeVec4(112, 111, 114, 116)), MakeVec4(101, 100, 74, 87)), MakeVec1(75)))) then ((var unsupported := $1_copyable_any_$unpack'$1_jwks_UnsupportedJWK'(jwk->$variant); unsupported->$id)) else ($Arbitrary_value_of'vec'u8''())))))
}

// struct jwks::AllProvidersJWKs at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:109:5+183
datatype $1_jwks_AllProvidersJWKs {
    $1_jwks_AllProvidersJWKs($entries: Vec ($1_jwks_ProviderJWKs))
}
function {:inline} $Update'$1_jwks_AllProvidersJWKs'_entries(s: $1_jwks_AllProvidersJWKs, x: Vec ($1_jwks_ProviderJWKs)): $1_jwks_AllProvidersJWKs {
    $1_jwks_AllProvidersJWKs(x)
}
function $IsValid'$1_jwks_AllProvidersJWKs'(s: $1_jwks_AllProvidersJWKs): bool {
    $IsValid'vec'$1_jwks_ProviderJWKs''(s->$entries)
}
function {:inline} $IsEqual'$1_jwks_AllProvidersJWKs'(s1: $1_jwks_AllProvidersJWKs, s2: $1_jwks_AllProvidersJWKs): bool {
    $IsEqual'vec'$1_jwks_ProviderJWKs''(s1->$entries, s2->$entries)}

// struct jwks::FederatedJWKs at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:171:5+74
datatype $1_jwks_FederatedJWKs {
    $1_jwks_FederatedJWKs($jwks: $1_jwks_AllProvidersJWKs)
}
function {:inline} $Update'$1_jwks_FederatedJWKs'_jwks(s: $1_jwks_FederatedJWKs, x: $1_jwks_AllProvidersJWKs): $1_jwks_FederatedJWKs {
    $1_jwks_FederatedJWKs(x)
}
function $IsValid'$1_jwks_FederatedJWKs'(s: $1_jwks_FederatedJWKs): bool {
    $IsValid'$1_jwks_AllProvidersJWKs'(s->$jwks)
}
function {:inline} $IsEqual'$1_jwks_FederatedJWKs'(s1: $1_jwks_FederatedJWKs, s2: $1_jwks_FederatedJWKs): bool {
    $IsEqual'$1_jwks_AllProvidersJWKs'(s1->$jwks, s2->$jwks)}
var $1_jwks_FederatedJWKs_$memory: $Memory $1_jwks_FederatedJWKs;

// struct jwks::JWK at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:85:5+229
datatype $1_jwks_JWK {
    $1_jwks_JWK($variant: $1_copyable_any_Any)
}
function {:inline} $Update'$1_jwks_JWK'_variant(s: $1_jwks_JWK, x: $1_copyable_any_Any): $1_jwks_JWK {
    $1_jwks_JWK(x)
}
function $IsValid'$1_jwks_JWK'(s: $1_jwks_JWK): bool {
    $IsValid'$1_copyable_any_Any'(s->$variant)
}
function {:inline} $IsEqual'$1_jwks_JWK'(s1: $1_jwks_JWK, s2: $1_jwks_JWK): bool {
    $IsEqual'$1_copyable_any_Any'(s1->$variant, s2->$variant)}

// struct jwks::OIDCProvider at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:54:5+341
datatype $1_jwks_OIDCProvider {
    $1_jwks_OIDCProvider($name: Vec (int), $config_url: Vec (int))
}
function {:inline} $Update'$1_jwks_OIDCProvider'_name(s: $1_jwks_OIDCProvider, x: Vec (int)): $1_jwks_OIDCProvider {
    $1_jwks_OIDCProvider(x, s->$config_url)
}
function {:inline} $Update'$1_jwks_OIDCProvider'_config_url(s: $1_jwks_OIDCProvider, x: Vec (int)): $1_jwks_OIDCProvider {
    $1_jwks_OIDCProvider(s->$name, x)
}
function $IsValid'$1_jwks_OIDCProvider'(s: $1_jwks_OIDCProvider): bool {
    $IsValid'vec'u8''(s->$name)
      && $IsValid'vec'u8''(s->$config_url)
}
function {:inline} $IsEqual'$1_jwks_OIDCProvider'(s1: $1_jwks_OIDCProvider, s2: $1_jwks_OIDCProvider): bool {
    $IsEqual'vec'u8''(s1->$name, s2->$name)
    && $IsEqual'vec'u8''(s1->$config_url, s2->$config_url)}

// struct jwks::ObservedJWKs at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:115:5+86
datatype $1_jwks_ObservedJWKs {
    $1_jwks_ObservedJWKs($jwks: $1_jwks_AllProvidersJWKs)
}
function {:inline} $Update'$1_jwks_ObservedJWKs'_jwks(s: $1_jwks_ObservedJWKs, x: $1_jwks_AllProvidersJWKs): $1_jwks_ObservedJWKs {
    $1_jwks_ObservedJWKs(x)
}
function $IsValid'$1_jwks_ObservedJWKs'(s: $1_jwks_ObservedJWKs): bool {
    $IsValid'$1_jwks_AllProvidersJWKs'(s->$jwks)
}
function {:inline} $IsEqual'$1_jwks_ObservedJWKs'(s1: $1_jwks_ObservedJWKs, s2: $1_jwks_ObservedJWKs): bool {
    $IsEqual'$1_jwks_AllProvidersJWKs'(s1->$jwks, s2->$jwks)}
var $1_jwks_ObservedJWKs_$memory: $Memory $1_jwks_ObservedJWKs;

// struct jwks::ObservedJWKsUpdated at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:121:5+102
datatype $1_jwks_ObservedJWKsUpdated {
    $1_jwks_ObservedJWKsUpdated($epoch: int, $jwks: $1_jwks_AllProvidersJWKs)
}
function {:inline} $Update'$1_jwks_ObservedJWKsUpdated'_epoch(s: $1_jwks_ObservedJWKsUpdated, x: int): $1_jwks_ObservedJWKsUpdated {
    $1_jwks_ObservedJWKsUpdated(x, s->$jwks)
}
function {:inline} $Update'$1_jwks_ObservedJWKsUpdated'_jwks(s: $1_jwks_ObservedJWKsUpdated, x: $1_jwks_AllProvidersJWKs): $1_jwks_ObservedJWKsUpdated {
    $1_jwks_ObservedJWKsUpdated(s->$epoch, x)
}
function $IsValid'$1_jwks_ObservedJWKsUpdated'(s: $1_jwks_ObservedJWKsUpdated): bool {
    $IsValid'u64'(s->$epoch)
      && $IsValid'$1_jwks_AllProvidersJWKs'(s->$jwks)
}
function {:inline} $IsEqual'$1_jwks_ObservedJWKsUpdated'(s1: $1_jwks_ObservedJWKsUpdated, s2: $1_jwks_ObservedJWKsUpdated): bool {
    $IsEqual'u64'(s1->$epoch, s2->$epoch)
    && $IsEqual'$1_jwks_AllProvidersJWKs'(s1->$jwks, s2->$jwks)}

// struct jwks::Patch at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:127:5+305
datatype $1_jwks_Patch {
    $1_jwks_Patch($variant: $1_copyable_any_Any)
}
function {:inline} $Update'$1_jwks_Patch'_variant(s: $1_jwks_Patch, x: $1_copyable_any_Any): $1_jwks_Patch {
    $1_jwks_Patch(x)
}
function $IsValid'$1_jwks_Patch'(s: $1_jwks_Patch): bool {
    $IsValid'$1_copyable_any_Any'(s->$variant)
}
function {:inline} $IsEqual'$1_jwks_Patch'(s1: $1_jwks_Patch, s2: $1_jwks_Patch): bool {
    $IsEqual'$1_copyable_any_Any'(s1->$variant, s2->$variant)}

// struct jwks::PatchRemoveAll at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:138:5+46
datatype $1_jwks_PatchRemoveAll {
    $1_jwks_PatchRemoveAll($dummy_field: bool)
}
function {:inline} $Update'$1_jwks_PatchRemoveAll'_dummy_field(s: $1_jwks_PatchRemoveAll, x: bool): $1_jwks_PatchRemoveAll {
    $1_jwks_PatchRemoveAll(x)
}
function $IsValid'$1_jwks_PatchRemoveAll'(s: $1_jwks_PatchRemoveAll): bool {
    $IsValid'bool'(s->$dummy_field)
}
function {:inline} $IsEqual'$1_jwks_PatchRemoveAll'(s1: $1_jwks_PatchRemoveAll, s2: $1_jwks_PatchRemoveAll): bool {
    s1 == s2
}

// struct jwks::PatchRemoveIssuer at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:141:5+82
datatype $1_jwks_PatchRemoveIssuer {
    $1_jwks_PatchRemoveIssuer($issuer: Vec (int))
}
function {:inline} $Update'$1_jwks_PatchRemoveIssuer'_issuer(s: $1_jwks_PatchRemoveIssuer, x: Vec (int)): $1_jwks_PatchRemoveIssuer {
    $1_jwks_PatchRemoveIssuer(x)
}
function $IsValid'$1_jwks_PatchRemoveIssuer'(s: $1_jwks_PatchRemoveIssuer): bool {
    $IsValid'vec'u8''(s->$issuer)
}
function {:inline} $IsEqual'$1_jwks_PatchRemoveIssuer'(s1: $1_jwks_PatchRemoveIssuer, s2: $1_jwks_PatchRemoveIssuer): bool {
    $IsEqual'vec'u8''(s1->$issuer, s2->$issuer)}

// struct jwks::PatchRemoveJWK at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:146:5+107
datatype $1_jwks_PatchRemoveJWK {
    $1_jwks_PatchRemoveJWK($issuer: Vec (int), $jwk_id: Vec (int))
}
function {:inline} $Update'$1_jwks_PatchRemoveJWK'_issuer(s: $1_jwks_PatchRemoveJWK, x: Vec (int)): $1_jwks_PatchRemoveJWK {
    $1_jwks_PatchRemoveJWK(x, s->$jwk_id)
}
function {:inline} $Update'$1_jwks_PatchRemoveJWK'_jwk_id(s: $1_jwks_PatchRemoveJWK, x: Vec (int)): $1_jwks_PatchRemoveJWK {
    $1_jwks_PatchRemoveJWK(s->$issuer, x)
}
function $IsValid'$1_jwks_PatchRemoveJWK'(s: $1_jwks_PatchRemoveJWK): bool {
    $IsValid'vec'u8''(s->$issuer)
      && $IsValid'vec'u8''(s->$jwk_id)
}
function {:inline} $IsEqual'$1_jwks_PatchRemoveJWK'(s1: $1_jwks_PatchRemoveJWK, s2: $1_jwks_PatchRemoveJWK): bool {
    $IsEqual'vec'u8''(s1->$issuer, s2->$issuer)
    && $IsEqual'vec'u8''(s1->$jwk_id, s2->$jwk_id)}

// struct jwks::PatchUpsertJWK at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:152:5+97
datatype $1_jwks_PatchUpsertJWK {
    $1_jwks_PatchUpsertJWK($issuer: Vec (int), $jwk: $1_jwks_JWK)
}
function {:inline} $Update'$1_jwks_PatchUpsertJWK'_issuer(s: $1_jwks_PatchUpsertJWK, x: Vec (int)): $1_jwks_PatchUpsertJWK {
    $1_jwks_PatchUpsertJWK(x, s->$jwk)
}
function {:inline} $Update'$1_jwks_PatchUpsertJWK'_jwk(s: $1_jwks_PatchUpsertJWK, x: $1_jwks_JWK): $1_jwks_PatchUpsertJWK {
    $1_jwks_PatchUpsertJWK(s->$issuer, x)
}
function $IsValid'$1_jwks_PatchUpsertJWK'(s: $1_jwks_PatchUpsertJWK): bool {
    $IsValid'vec'u8''(s->$issuer)
      && $IsValid'$1_jwks_JWK'(s->$jwk)
}
function {:inline} $IsEqual'$1_jwks_PatchUpsertJWK'(s1: $1_jwks_PatchUpsertJWK, s2: $1_jwks_PatchUpsertJWK): bool {
    $IsEqual'vec'u8''(s1->$issuer, s2->$issuer)
    && $IsEqual'$1_jwks_JWK'(s1->$jwk, s2->$jwk)}

// struct jwks::PatchedJWKs at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:166:5+72
datatype $1_jwks_PatchedJWKs {
    $1_jwks_PatchedJWKs($jwks: $1_jwks_AllProvidersJWKs)
}
function {:inline} $Update'$1_jwks_PatchedJWKs'_jwks(s: $1_jwks_PatchedJWKs, x: $1_jwks_AllProvidersJWKs): $1_jwks_PatchedJWKs {
    $1_jwks_PatchedJWKs(x)
}
function $IsValid'$1_jwks_PatchedJWKs'(s: $1_jwks_PatchedJWKs): bool {
    $IsValid'$1_jwks_AllProvidersJWKs'(s->$jwks)
}
function {:inline} $IsEqual'$1_jwks_PatchedJWKs'(s1: $1_jwks_PatchedJWKs, s2: $1_jwks_PatchedJWKs): bool {
    $IsEqual'$1_jwks_AllProvidersJWKs'(s1->$jwks, s2->$jwks)}
var $1_jwks_PatchedJWKs_$memory: $Memory $1_jwks_PatchedJWKs;

// struct jwks::Patches at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:160:5+62
datatype $1_jwks_Patches {
    $1_jwks_Patches($patches: Vec ($1_jwks_Patch))
}
function {:inline} $Update'$1_jwks_Patches'_patches(s: $1_jwks_Patches, x: Vec ($1_jwks_Patch)): $1_jwks_Patches {
    $1_jwks_Patches(x)
}
function $IsValid'$1_jwks_Patches'(s: $1_jwks_Patches): bool {
    $IsValid'vec'$1_jwks_Patch''(s->$patches)
}
function {:inline} $IsEqual'$1_jwks_Patches'(s1: $1_jwks_Patches, s2: $1_jwks_Patches): bool {
    $IsEqual'vec'$1_jwks_Patch''(s1->$patches, s2->$patches)}
var $1_jwks_Patches_$memory: $Memory $1_jwks_Patches;

// struct jwks::ProviderJWKs at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:94:5+629
datatype $1_jwks_ProviderJWKs {
    $1_jwks_ProviderJWKs($issuer: Vec (int), $version: int, $jwks: Vec ($1_jwks_JWK))
}
function {:inline} $Update'$1_jwks_ProviderJWKs'_issuer(s: $1_jwks_ProviderJWKs, x: Vec (int)): $1_jwks_ProviderJWKs {
    $1_jwks_ProviderJWKs(x, s->$version, s->$jwks)
}
function {:inline} $Update'$1_jwks_ProviderJWKs'_version(s: $1_jwks_ProviderJWKs, x: int): $1_jwks_ProviderJWKs {
    $1_jwks_ProviderJWKs(s->$issuer, x, s->$jwks)
}
function {:inline} $Update'$1_jwks_ProviderJWKs'_jwks(s: $1_jwks_ProviderJWKs, x: Vec ($1_jwks_JWK)): $1_jwks_ProviderJWKs {
    $1_jwks_ProviderJWKs(s->$issuer, s->$version, x)
}
function $IsValid'$1_jwks_ProviderJWKs'(s: $1_jwks_ProviderJWKs): bool {
    $IsValid'vec'u8''(s->$issuer)
      && $IsValid'u64'(s->$version)
      && $IsValid'vec'$1_jwks_JWK''(s->$jwks)
}
function {:inline} $IsEqual'$1_jwks_ProviderJWKs'(s1: $1_jwks_ProviderJWKs, s2: $1_jwks_ProviderJWKs): bool {
    $IsEqual'vec'u8''(s1->$issuer, s2->$issuer)
    && $IsEqual'u64'(s1->$version, s2->$version)
    && $IsEqual'vec'$1_jwks_JWK''(s1->$jwks, s2->$jwks)}

// struct jwks::RSA_JWK at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:76:5+145
datatype $1_jwks_RSA_JWK {
    $1_jwks_RSA_JWK($kid: $1_string_String, $kty: $1_string_String, $alg: $1_string_String, $e: $1_string_String, $n: $1_string_String)
}
function {:inline} $Update'$1_jwks_RSA_JWK'_kid(s: $1_jwks_RSA_JWK, x: $1_string_String): $1_jwks_RSA_JWK {
    $1_jwks_RSA_JWK(x, s->$kty, s->$alg, s->$e, s->$n)
}
function {:inline} $Update'$1_jwks_RSA_JWK'_kty(s: $1_jwks_RSA_JWK, x: $1_string_String): $1_jwks_RSA_JWK {
    $1_jwks_RSA_JWK(s->$kid, x, s->$alg, s->$e, s->$n)
}
function {:inline} $Update'$1_jwks_RSA_JWK'_alg(s: $1_jwks_RSA_JWK, x: $1_string_String): $1_jwks_RSA_JWK {
    $1_jwks_RSA_JWK(s->$kid, s->$kty, x, s->$e, s->$n)
}
function {:inline} $Update'$1_jwks_RSA_JWK'_e(s: $1_jwks_RSA_JWK, x: $1_string_String): $1_jwks_RSA_JWK {
    $1_jwks_RSA_JWK(s->$kid, s->$kty, s->$alg, x, s->$n)
}
function {:inline} $Update'$1_jwks_RSA_JWK'_n(s: $1_jwks_RSA_JWK, x: $1_string_String): $1_jwks_RSA_JWK {
    $1_jwks_RSA_JWK(s->$kid, s->$kty, s->$alg, s->$e, x)
}
function $IsValid'$1_jwks_RSA_JWK'(s: $1_jwks_RSA_JWK): bool {
    $IsValid'$1_string_String'(s->$kid)
      && $IsValid'$1_string_String'(s->$kty)
      && $IsValid'$1_string_String'(s->$alg)
      && $IsValid'$1_string_String'(s->$e)
      && $IsValid'$1_string_String'(s->$n)
}
function {:inline} $IsEqual'$1_jwks_RSA_JWK'(s1: $1_jwks_RSA_JWK, s2: $1_jwks_RSA_JWK): bool {
    $IsEqual'$1_string_String'(s1->$kid, s2->$kid)
    && $IsEqual'$1_string_String'(s1->$kty, s2->$kty)
    && $IsEqual'$1_string_String'(s1->$alg, s2->$alg)
    && $IsEqual'$1_string_String'(s1->$e, s2->$e)
    && $IsEqual'$1_string_String'(s1->$n, s2->$n)}

// struct jwks::SupportedOIDCProviders at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:64:5+105
datatype $1_jwks_SupportedOIDCProviders {
    $1_jwks_SupportedOIDCProviders($providers: Vec ($1_jwks_OIDCProvider))
}
function {:inline} $Update'$1_jwks_SupportedOIDCProviders'_providers(s: $1_jwks_SupportedOIDCProviders, x: Vec ($1_jwks_OIDCProvider)): $1_jwks_SupportedOIDCProviders {
    $1_jwks_SupportedOIDCProviders(x)
}
function $IsValid'$1_jwks_SupportedOIDCProviders'(s: $1_jwks_SupportedOIDCProviders): bool {
    $IsValid'vec'$1_jwks_OIDCProvider''(s->$providers)
}
function {:inline} $IsEqual'$1_jwks_SupportedOIDCProviders'(s1: $1_jwks_SupportedOIDCProviders, s2: $1_jwks_SupportedOIDCProviders): bool {
    $IsEqual'vec'$1_jwks_OIDCProvider''(s1->$providers, s2->$providers)}
var $1_jwks_SupportedOIDCProviders_$memory: $Memory $1_jwks_SupportedOIDCProviders;

// struct jwks::UnsupportedJWK at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:70:5+104
datatype $1_jwks_UnsupportedJWK {
    $1_jwks_UnsupportedJWK($id: Vec (int), $payload: Vec (int))
}
function {:inline} $Update'$1_jwks_UnsupportedJWK'_id(s: $1_jwks_UnsupportedJWK, x: Vec (int)): $1_jwks_UnsupportedJWK {
    $1_jwks_UnsupportedJWK(x, s->$payload)
}
function {:inline} $Update'$1_jwks_UnsupportedJWK'_payload(s: $1_jwks_UnsupportedJWK, x: Vec (int)): $1_jwks_UnsupportedJWK {
    $1_jwks_UnsupportedJWK(s->$id, x)
}
function $IsValid'$1_jwks_UnsupportedJWK'(s: $1_jwks_UnsupportedJWK): bool {
    $IsValid'vec'u8''(s->$id)
      && $IsValid'vec'u8''(s->$payload)
}
function {:inline} $IsEqual'$1_jwks_UnsupportedJWK'(s1: $1_jwks_UnsupportedJWK, s2: $1_jwks_UnsupportedJWK): bool {
    $IsEqual'vec'u8''(s1->$id, s2->$id)
    && $IsEqual'vec'u8''(s1->$payload, s2->$payload)}

// fun jwks::apply_patch [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:680:5+1968
procedure {:inline 1} $1_jwks_apply_patch(_$t0: $Mutation ($1_jwks_AllProvidersJWKs), _$t1: $1_jwks_Patch) returns ($ret0: $Mutation ($1_jwks_AllProvidersJWKs))
{
    // declare local variables
    var $t2: Vec (int);
    var $t3: $1_jwks_PatchRemoveIssuer;
    var $t4: $1_jwks_PatchRemoveJWK;
    var $t5: $1_option_Option'$1_jwks_ProviderJWKs';
    var $t6: $1_jwks_ProviderJWKs;
    var $t7: $1_jwks_PatchUpsertJWK;
    var $t8: $1_option_Option'$1_jwks_ProviderJWKs';
    var $t9: $1_jwks_ProviderJWKs;
    var $t10: $1_copyable_any_Any;
    var $t11: $1_string_String;
    var $t12: int;
    var $t13: Vec (int);
    var $t14: Vec (int);
    var $t15: bool;
    var $t16: Vec ($1_jwks_ProviderJWKs);
    var $t17: $Mutation (Vec ($1_jwks_ProviderJWKs));
    var $t18: Vec (int);
    var $t19: bool;
    var $t20: $1_copyable_any_Any;
    var $t21: $1_jwks_PatchRemoveIssuer;
    var $t22: Vec (int);
    var $t23: $1_option_Option'$1_jwks_ProviderJWKs';
    var $t24: $1_jwks_AllProvidersJWKs;
    var $t25: bool;
    var $t26: Vec (int);
    var $t27: bool;
    var $t28: $1_copyable_any_Any;
    var $t29: $1_jwks_PatchRemoveJWK;
    var $t30: Vec (int);
    var $t31: $1_jwks_AllProvidersJWKs;
    var $t32: bool;
    var $t33: $1_option_Option'$1_jwks_ProviderJWKs';
    var $t34: bool;
    var $t35: $Mutation ($1_option_Option'$1_jwks_ProviderJWKs');
    var $t36: $1_option_Option'$1_jwks_ProviderJWKs';
    var $t37: bool;
    var $t38: $Mutation ($1_jwks_ProviderJWKs);
    var $t39: Vec (int);
    var $t40: Vec ($1_jwks_JWK);
    var $t41: int;
    var $t42: int;
    var $t43: int;
    var $t44: $1_option_Option'$1_jwks_JWK';
    var $t45: bool;
    var $t46: $1_jwks_ProviderJWKs;
    var $t47: $1_option_Option'$1_jwks_ProviderJWKs';
    var $t48: Vec (int);
    var $t49: bool;
    var $t50: $1_copyable_any_Any;
    var $t51: $1_jwks_PatchUpsertJWK;
    var $t52: Vec (int);
    var $t53: $1_jwks_AllProvidersJWKs;
    var $t54: bool;
    var $t55: $1_option_Option'$1_jwks_ProviderJWKs';
    var $t56: bool;
    var $t57: $Mutation ($1_option_Option'$1_jwks_ProviderJWKs');
    var $t58: $1_option_Option'$1_jwks_ProviderJWKs';
    var $t59: bool;
    var $t60: $Mutation ($1_jwks_ProviderJWKs);
    var $t61: $1_jwks_JWK;
    var $t62: $1_option_Option'$1_jwks_JWK';
    var $t63: $1_jwks_ProviderJWKs;
    var $t64: $1_option_Option'$1_jwks_ProviderJWKs';
    var $t65: Vec (int);
    var $t66: int;
    var $t67: Vec ($1_jwks_JWK);
    var $t68: int;
    var $t69: int;
    var $t0: $Mutation ($1_jwks_AllProvidersJWKs);
    var $t1: $1_jwks_Patch;
    var $temp_0'$1_jwks_AllProvidersJWKs': $1_jwks_AllProvidersJWKs;
    var $temp_0'$1_jwks_Patch': $1_jwks_Patch;
    var $temp_0'$1_jwks_PatchRemoveIssuer': $1_jwks_PatchRemoveIssuer;
    var $temp_0'$1_jwks_PatchRemoveJWK': $1_jwks_PatchRemoveJWK;
    var $temp_0'$1_jwks_PatchUpsertJWK': $1_jwks_PatchUpsertJWK;
    var $temp_0'$1_jwks_ProviderJWKs': $1_jwks_ProviderJWKs;
    var $temp_0'$1_option_Option'$1_jwks_ProviderJWKs'': $1_option_Option'$1_jwks_ProviderJWKs';
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[jwks]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:680:5+1
    assume {:print "$at(2,30381,30382)"} true;
    $temp_0'$1_jwks_AllProvidersJWKs' := $Dereference($t0);
    assume {:print "$track_local(79,2,0):", $temp_0'$1_jwks_AllProvidersJWKs'} $temp_0'$1_jwks_AllProvidersJWKs' == $temp_0'$1_jwks_AllProvidersJWKs';

    // trace_local[patch]($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:680:5+1
    assume {:print "$track_local(79,2,1):", $t1} $t1 == $t1;

    // $t10 := get_field<0x1::jwks::Patch>.variant($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:681:72+14
    assume {:print "$at(2,30513,30527)"} true;
    $t10 := $t1->$variant;

    // $t11 := copyable_any::type_name($t10) on_abort goto L15 with $t12 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:681:48+39
    call $t11 := $1_copyable_any_type_name($t10);
    if ($abort_flag) {
        assume {:print "$at(2,30489,30528)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(79,2):", $t12} $t12 == $t12;
        goto L15;
    }

    // $t13 := string::bytes($t11) on_abort goto L15 with $t12 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:681:34+54
    call $t13 := $1_string_bytes($t11);
    if ($abort_flag) {
        assume {:print "$at(2,30475,30529)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(79,2):", $t12} $t12 == $t12;
        goto L15;
    }

    // trace_local[variant_type_name]($t13) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:681:33+55
    assume {:print "$track_local(79,2,2):", $t13} $t13 == $t13;

    // $t14 := [48, 120, 49, 58, 58, 106, 119, 107, 115, 58, 58, 80, 97, 116, 99, 104, 82, 101, 109, 111, 118, 101, 65, 108, 108] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:682:34+28
    assume {:print "$at(2,30564,30592)"} true;
    $t14 := ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(48, 120, 49, 58), MakeVec4(58, 106, 119, 107)), MakeVec4(115, 58, 58, 80)), MakeVec4(97, 116, 99, 104)), MakeVec4(82, 101, 109, 111)), MakeVec4(118, 101, 65, 108)), MakeVec1(108));
    assume $IsValid'vec'u8''($t14);

    // $t15 := ==($t13, $t14) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:682:13+49
    $t15 := $IsEqual'vec'u8''($t13, $t14);

    // if ($t15) goto L1 else goto L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:682:9+1804
    if ($t15) { goto L1; } else { goto L0; }

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:683:28+6
    assume {:print "$at(2,30623,30629)"} true;
L1:

    // $t16 := vector::empty<0x1::jwks::ProviderJWKs>() on_abort goto L15 with $t12 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:683:28+6
    assume {:print "$at(2,30623,30629)"} true;
    call $t16 := $1_vector_empty'$1_jwks_ProviderJWKs'();
    if ($abort_flag) {
        assume {:print "$at(2,30623,30629)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(79,2):", $t12} $t12 == $t12;
        goto L15;
    }

    // $t17 := borrow_field<0x1::jwks::AllProvidersJWKs>.entries($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:683:13+12
    $t17 := $ChildMutation($t0, 0, $Dereference($t0)->$entries);

    // write_ref($t17, $t16) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:683:13+23
    $t17 := $UpdateMutation($t17, $t16);

    // write_back[Reference($t0).entries (vector<0x1::jwks::ProviderJWKs>)]($t17) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:683:13+23
    $t0 := $UpdateMutation($t0, $Update'$1_jwks_AllProvidersJWKs'_entries($Dereference($t0), $Dereference($t17)));

    // trace_local[jwks]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:683:13+23
    $temp_0'$1_jwks_AllProvidersJWKs' := $Dereference($t0);
    assume {:print "$track_local(79,2,0):", $temp_0'$1_jwks_AllProvidersJWKs'} $temp_0'$1_jwks_AllProvidersJWKs' == $temp_0'$1_jwks_AllProvidersJWKs';

    // label L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:682:9+1804
    assume {:print "$at(2,30539,32343)"} true;
L4:

    // trace_local[jwks]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:682:9+1804
    assume {:print "$at(2,30539,32343)"} true;
    $temp_0'$1_jwks_AllProvidersJWKs' := $Dereference($t0);
    assume {:print "$track_local(79,2,0):", $temp_0'$1_jwks_AllProvidersJWKs'} $temp_0'$1_jwks_AllProvidersJWKs' == $temp_0'$1_jwks_AllProvidersJWKs';

    // pack_ref_deep($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:682:9+1804

    // goto L14 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:682:9+1804
    goto L14;

    // label L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:684:20+17
    assume {:print "$at(2,30652,30669)"} true;
L0:

    // $t18 := [48, 120, 49, 58, 58, 106, 119, 107, 115, 58, 58, 80, 97, 116, 99, 104, 82, 101, 109, 111, 118, 101, 73, 115, 115, 117, 101, 114] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:684:41+31
    assume {:print "$at(2,30673,30704)"} true;
    $t18 := ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(48, 120, 49, 58), MakeVec4(58, 106, 119, 107)), MakeVec4(115, 58, 58, 80)), MakeVec4(97, 116, 99, 104)), MakeVec4(82, 101, 109, 111)), MakeVec4(118, 101, 73, 115)), MakeVec4(115, 117, 101, 114));
    assume $IsValid'vec'u8''($t18);

    // $t19 := ==($t13, $t18) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:684:20+52
    $t19 := $IsEqual'vec'u8''($t13, $t18);

    // if ($t19) goto L3 else goto L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:684:16+1695
    if ($t19) { goto L3; } else { goto L2; }

    // label L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:685:63+5
    assume {:print "$at(2,30770,30775)"} true;
L3:

    // $t20 := get_field<0x1::jwks::Patch>.variant($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:685:63+13
    assume {:print "$at(2,30770,30783)"} true;
    $t20 := $t1->$variant;

    // $t21 := copyable_any::unpack<0x1::jwks::PatchRemoveIssuer>($t20) on_abort goto L15 with $t12 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:685:23+54
    call $t21 := $1_copyable_any_unpack'$1_jwks_PatchRemoveIssuer'($t20);
    if ($abort_flag) {
        assume {:print "$at(2,30730,30784)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(79,2):", $t12} $t12 == $t12;
        goto L15;
    }

    // trace_local[cmd]($t21) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:685:23+54
    assume {:print "$track_local(79,2,3):", $t21} $t21 == $t21;

    // $t22 := get_field<0x1::jwks::PatchRemoveIssuer>.issuer($t21) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:686:33+10
    assume {:print "$at(2,30818,30828)"} true;
    $t22 := $t21->$issuer;

    // $t23 := opaque begin: jwks::remove_issuer($t0, $t22) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:686:13+31

    // $t24 := read_ref($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:686:13+31
    $t24 := $Dereference($t0);

    // $t25 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:686:13+31
    havoc $t25;

    // if ($t25) goto L17 else goto L16 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:686:13+31
    if ($t25) { goto L17; } else { goto L16; }

    // label L17 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:686:13+31
L17:

    // trace_abort($t12) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:686:13+31
    assume {:print "$at(2,30798,30829)"} true;
    assume {:print "$track_abort(79,2):", $t12} $t12 == $t12;

    // goto L15 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:686:13+31
    goto L15;

    // label L16 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:686:13+31
L16:

    // $t0 := havoc[mut]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:686:13+31
    assume {:print "$at(2,30798,30829)"} true;
    havoc $temp_0'$1_jwks_AllProvidersJWKs';
    $t0 := $UpdateMutation($t0, $temp_0'$1_jwks_AllProvidersJWKs');

    // assume And(WellFormed($t0), forall $elem: 0x1::jwks::ProviderJWKs: select jwks::AllProvidersJWKs.entries($t0): forall i: num: TypeDomain<num>() where And(Le(0, i), Lt(i, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): forall j: num: TypeDomain<num>() where And(Lt(i, j), Lt(j, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): Neq<vector<u8>>(jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), i)), jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), j)))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:686:13+31
    assume ($IsValid'$1_jwks_AllProvidersJWKs'($Dereference($t0)) && (var $range_0 := $Dereference($t0)->$entries; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((forall i: int :: $IsValid'num'(i) ==> (((0 <= i) && (i < LenVec($elem->$jwks))))  ==> ((forall j: int :: $IsValid'num'(j) ==> (((i < j) && (j < LenVec($elem->$jwks))))  ==> (!$IsEqual'vec'u8''($1_jwks_$get_jwk_id(ReadVec($elem->$jwks, i)), $1_jwks_$get_jwk_id(ReadVec($elem->$jwks, j))))))))))));

    // assume And(WellFormed($t23), And(Le(Len<0x1::jwks::ProviderJWKs>(select option::Option.vec($t23)), 1), forall $elem: 0x1::jwks::ProviderJWKs: select option::Option.vec($t23): forall i: num: TypeDomain<num>() where And(Le(0, i), Lt(i, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): forall j: num: TypeDomain<num>() where And(Lt(i, j), Lt(j, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): Neq<vector<u8>>(jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), i)), jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), j))))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:686:13+31
    assume ($IsValid'$1_option_Option'$1_jwks_ProviderJWKs''($t23) && ((LenVec($t23->$vec) <= 1) && (var $range_0 := $t23->$vec; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((forall i: int :: $IsValid'num'(i) ==> (((0 <= i) && (i < LenVec($elem->$jwks))))  ==> ((forall j: int :: $IsValid'num'(j) ==> (((i < j) && (j < LenVec($elem->$jwks))))  ==> (!$IsEqual'vec'u8''($1_jwks_$get_jwk_id(ReadVec($elem->$jwks, i)), $1_jwks_$get_jwk_id(ReadVec($elem->$jwks, j)))))))))))));

    // assume Implies(option::$is_none<0x1::jwks::ProviderJWKs>($t23), Eq<0x1::jwks::AllProvidersJWKs>(Freeze(false)($t0), $t24)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:686:13+31
    assume ($1_option_$is_none'$1_jwks_ProviderJWKs'($t23) ==> $IsEqual'$1_jwks_AllProvidersJWKs'($Dereference($t0), $t24));

    // assume Implies(option::$is_none<0x1::jwks::ProviderJWKs>($t23), forall i: num: RangeVec<0x1::jwks::ProviderJWKs>(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t0)): Neq<vector<u8>>(select jwks::ProviderJWKs.issuer<0x1::jwks::ProviderJWKs>(Index(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t0), i)), $t22)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:686:13+31
    assume ($1_option_$is_none'$1_jwks_ProviderJWKs'($t23) ==> (var $range_0 := $RangeVec'$1_jwks_ProviderJWKs'($Dereference($t0)->$entries); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'vec'u8''(ReadVec($Dereference($t0)->$entries, i)->$issuer, $t22))))));

    // assume Implies(option::$is_some<0x1::jwks::ProviderJWKs>($t23), exists idx: num: RangeVec<0x1::jwks::ProviderJWKs>(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t24)): And(And(And(Eq<vector<u8>>(select jwks::ProviderJWKs.issuer<0x1::jwks::ProviderJWKs>(Index(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t24), idx)), $t22), Eq<num>(Add(Len<0x1::jwks::ProviderJWKs>(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t0)), 1), Len<0x1::jwks::ProviderJWKs>(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t24)))), forall i: num: RangeVec<0x1::jwks::ProviderJWKs>(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t24)): Implies(Lt(i, idx), And(Eq<0x1::jwks::ProviderJWKs>(Index(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t0), i), Index(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t24), i)), Neq<vector<u8>>(select jwks::ProviderJWKs.issuer<0x1::jwks::ProviderJWKs>(Index(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t0), i)), $t22)))), forall i: num: RangeVec<0x1::jwks::ProviderJWKs>(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t0)): Implies(Ge(i, idx), Eq<0x1::jwks::ProviderJWKs>(Index(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t0), i), Index(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t24), Add(i, 1)))))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:686:13+31
    assume ($1_option_$is_some'$1_jwks_ProviderJWKs'($t23) ==> (var $range_0 := $RangeVec'$1_jwks_ProviderJWKs'($t24->$entries); (exists $i_1: int :: $InRange($range_0, $i_1) && (var idx := $i_1;
    (((($IsEqual'vec'u8''(ReadVec($t24->$entries, idx)->$issuer, $t22) && $IsEqual'num'((LenVec($Dereference($t0)->$entries) + 1), LenVec($t24->$entries))) && (var $range_2 := $RangeVec'$1_jwks_ProviderJWKs'($t24->$entries); (forall $i_3: int :: $InRange($range_2, $i_3) ==> (var i := $i_3;
    (((i < idx) ==> ($IsEqual'$1_jwks_ProviderJWKs'(ReadVec($Dereference($t0)->$entries, i), ReadVec($t24->$entries, i)) && !$IsEqual'vec'u8''(ReadVec($Dereference($t0)->$entries, i)->$issuer, $t22)))))))) && (var $range_4 := $RangeVec'$1_jwks_ProviderJWKs'($Dereference($t0)->$entries); (forall $i_5: int :: $InRange($range_4, $i_5) ==> (var i := $i_5;
    (((i >= idx) ==> $IsEqual'$1_jwks_ProviderJWKs'(ReadVec($Dereference($t0)->$entries, i), ReadVec($t24->$entries, (i + 1))))))))))))));

    // $t23 := opaque end: jwks::remove_issuer($t0, $t22) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:686:13+31

    // drop($t23) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:686:13+31

    // goto L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:684:74+134
    assume {:print "$at(2,30706,30840)"} true;
    goto L4;

    // label L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:687:20+17
    assume {:print "$at(2,30850,30867)"} true;
L2:

    // $t26 := [48, 120, 49, 58, 58, 106, 119, 107, 115, 58, 58, 80, 97, 116, 99, 104, 82, 101, 109, 111, 118, 101, 74, 87, 75] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:687:41+28
    assume {:print "$at(2,30871,30899)"} true;
    $t26 := ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(48, 120, 49, 58), MakeVec4(58, 106, 119, 107)), MakeVec4(115, 58, 58, 80)), MakeVec4(97, 116, 99, 104)), MakeVec4(82, 101, 109, 111)), MakeVec4(118, 101, 74, 87)), MakeVec1(75));
    assume $IsValid'vec'u8''($t26);

    // $t27 := ==($t13, $t26) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:687:20+49
    $t27 := $IsEqual'vec'u8''($t13, $t26);

    // if ($t27) goto L6 else goto L5 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:687:16+1497
    if ($t27) { goto L6; } else { goto L5; }

    // label L6 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:688:60+5
    assume {:print "$at(2,30962,30967)"} true;
L6:

    // $t28 := get_field<0x1::jwks::Patch>.variant($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:688:60+13
    assume {:print "$at(2,30962,30975)"} true;
    $t28 := $t1->$variant;

    // $t29 := copyable_any::unpack<0x1::jwks::PatchRemoveJWK>($t28) on_abort goto L15 with $t12 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:688:23+51
    call $t29 := $1_copyable_any_unpack'$1_jwks_PatchRemoveJWK'($t28);
    if ($abort_flag) {
        assume {:print "$at(2,30925,30976)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(79,2):", $t12} $t12 == $t12;
        goto L15;
    }

    // trace_local[cmd]($t29) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:688:23+51
    assume {:print "$track_local(79,2,4):", $t29} $t29 == $t29;

    // $t30 := get_field<0x1::jwks::PatchRemoveJWK>.issuer($t29) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:691:56+10
    assume {:print "$at(2,31196,31206)"} true;
    $t30 := $t29->$issuer;

    // $t5 := opaque begin: jwks::remove_issuer($t0, $t30) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:691:36+31

    // $t31 := read_ref($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:691:36+31
    $t31 := $Dereference($t0);

    // $t32 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:691:36+31
    havoc $t32;

    // if ($t32) goto L19 else goto L18 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:691:36+31
    if ($t32) { goto L19; } else { goto L18; }

    // label L19 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:691:36+31
L19:

    // trace_abort($t12) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:691:36+31
    assume {:print "$at(2,31176,31207)"} true;
    assume {:print "$track_abort(79,2):", $t12} $t12 == $t12;

    // goto L15 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:691:36+31
    goto L15;

    // label L18 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:691:36+31
L18:

    // $t0 := havoc[mut]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:691:36+31
    assume {:print "$at(2,31176,31207)"} true;
    havoc $temp_0'$1_jwks_AllProvidersJWKs';
    $t0 := $UpdateMutation($t0, $temp_0'$1_jwks_AllProvidersJWKs');

    // assume And(WellFormed($t0), forall $elem: 0x1::jwks::ProviderJWKs: select jwks::AllProvidersJWKs.entries($t0): forall i: num: TypeDomain<num>() where And(Le(0, i), Lt(i, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): forall j: num: TypeDomain<num>() where And(Lt(i, j), Lt(j, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): Neq<vector<u8>>(jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), i)), jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), j)))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:691:36+31
    assume ($IsValid'$1_jwks_AllProvidersJWKs'($Dereference($t0)) && (var $range_0 := $Dereference($t0)->$entries; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((forall i: int :: $IsValid'num'(i) ==> (((0 <= i) && (i < LenVec($elem->$jwks))))  ==> ((forall j: int :: $IsValid'num'(j) ==> (((i < j) && (j < LenVec($elem->$jwks))))  ==> (!$IsEqual'vec'u8''($1_jwks_$get_jwk_id(ReadVec($elem->$jwks, i)), $1_jwks_$get_jwk_id(ReadVec($elem->$jwks, j))))))))))));

    // assume And(WellFormed($t5), And(Le(Len<0x1::jwks::ProviderJWKs>(select option::Option.vec($t5)), 1), forall $elem: 0x1::jwks::ProviderJWKs: select option::Option.vec($t5): forall i: num: TypeDomain<num>() where And(Le(0, i), Lt(i, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): forall j: num: TypeDomain<num>() where And(Lt(i, j), Lt(j, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): Neq<vector<u8>>(jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), i)), jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), j))))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:691:36+31
    assume ($IsValid'$1_option_Option'$1_jwks_ProviderJWKs''($t5) && ((LenVec($t5->$vec) <= 1) && (var $range_0 := $t5->$vec; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((forall i: int :: $IsValid'num'(i) ==> (((0 <= i) && (i < LenVec($elem->$jwks))))  ==> ((forall j: int :: $IsValid'num'(j) ==> (((i < j) && (j < LenVec($elem->$jwks))))  ==> (!$IsEqual'vec'u8''($1_jwks_$get_jwk_id(ReadVec($elem->$jwks, i)), $1_jwks_$get_jwk_id(ReadVec($elem->$jwks, j)))))))))))));

    // assume Implies(option::$is_none<0x1::jwks::ProviderJWKs>($t5), Eq<0x1::jwks::AllProvidersJWKs>(Freeze(false)($t0), $t31)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:691:36+31
    assume ($1_option_$is_none'$1_jwks_ProviderJWKs'($t5) ==> $IsEqual'$1_jwks_AllProvidersJWKs'($Dereference($t0), $t31));

    // assume Implies(option::$is_none<0x1::jwks::ProviderJWKs>($t5), forall i: num: RangeVec<0x1::jwks::ProviderJWKs>(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t0)): Neq<vector<u8>>(select jwks::ProviderJWKs.issuer<0x1::jwks::ProviderJWKs>(Index(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t0), i)), $t30)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:691:36+31
    assume ($1_option_$is_none'$1_jwks_ProviderJWKs'($t5) ==> (var $range_0 := $RangeVec'$1_jwks_ProviderJWKs'($Dereference($t0)->$entries); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'vec'u8''(ReadVec($Dereference($t0)->$entries, i)->$issuer, $t30))))));

    // assume Implies(option::$is_some<0x1::jwks::ProviderJWKs>($t5), exists idx: num: RangeVec<0x1::jwks::ProviderJWKs>(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t31)): And(And(And(Eq<vector<u8>>(select jwks::ProviderJWKs.issuer<0x1::jwks::ProviderJWKs>(Index(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t31), idx)), $t30), Eq<num>(Add(Len<0x1::jwks::ProviderJWKs>(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t0)), 1), Len<0x1::jwks::ProviderJWKs>(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t31)))), forall i: num: RangeVec<0x1::jwks::ProviderJWKs>(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t31)): Implies(Lt(i, idx), And(Eq<0x1::jwks::ProviderJWKs>(Index(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t0), i), Index(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t31), i)), Neq<vector<u8>>(select jwks::ProviderJWKs.issuer<0x1::jwks::ProviderJWKs>(Index(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t0), i)), $t30)))), forall i: num: RangeVec<0x1::jwks::ProviderJWKs>(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t0)): Implies(Ge(i, idx), Eq<0x1::jwks::ProviderJWKs>(Index(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t0), i), Index(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t31), Add(i, 1)))))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:691:36+31
    assume ($1_option_$is_some'$1_jwks_ProviderJWKs'($t5) ==> (var $range_0 := $RangeVec'$1_jwks_ProviderJWKs'($t31->$entries); (exists $i_1: int :: $InRange($range_0, $i_1) && (var idx := $i_1;
    (((($IsEqual'vec'u8''(ReadVec($t31->$entries, idx)->$issuer, $t30) && $IsEqual'num'((LenVec($Dereference($t0)->$entries) + 1), LenVec($t31->$entries))) && (var $range_2 := $RangeVec'$1_jwks_ProviderJWKs'($t31->$entries); (forall $i_3: int :: $InRange($range_2, $i_3) ==> (var i := $i_3;
    (((i < idx) ==> ($IsEqual'$1_jwks_ProviderJWKs'(ReadVec($Dereference($t0)->$entries, i), ReadVec($t31->$entries, i)) && !$IsEqual'vec'u8''(ReadVec($Dereference($t0)->$entries, i)->$issuer, $t30)))))))) && (var $range_4 := $RangeVec'$1_jwks_ProviderJWKs'($Dereference($t0)->$entries); (forall $i_5: int :: $InRange($range_4, $i_5) ==> (var i := $i_5;
    (((i >= idx) ==> $IsEqual'$1_jwks_ProviderJWKs'(ReadVec($Dereference($t0)->$entries, i), ReadVec($t31->$entries, (i + 1))))))))))))));

    // $t5 := opaque end: jwks::remove_issuer($t0, $t30) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:691:36+31

    // trace_local[existing_jwk_set]($t5) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:691:36+31
    assume {:print "$track_local(79,2,5):", $t5} $t5 == $t5;

    // $t33 := copy($t5) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:692:33+17
    assume {:print "$at(2,31241,31258)"} true;
    $t33 := $t5;

    // $t34 := opaque begin: option::is_some<0x1::jwks::ProviderJWKs>($t33) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:692:17+34

    // assume WellFormed($t34) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:692:17+34
    assume $IsValid'bool'($t34);

    // assume Eq<bool>($t34, option::spec_is_some<0x1::jwks::ProviderJWKs>($t33)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:692:17+34
    assume $IsEqual'bool'($t34, $1_option_spec_is_some'$1_jwks_ProviderJWKs'($t33));

    // $t34 := opaque end: option::is_some<0x1::jwks::ProviderJWKs>($t33) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:692:17+34

    // if ($t34) goto L8 else goto L7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:692:13+232
    if ($t34) { goto L8; } else { goto L7; }

    // label L8 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:693:47+21
    assume {:print "$at(2,31309,31330)"} true;
L8:

    // $t35 := borrow_local($t5) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:693:47+21
    assume {:print "$at(2,31309,31330)"} true;
    $t35 := $Mutation($Local(5), EmptyVec(), $t5);

    // $t6 := opaque begin: option::extract<0x1::jwks::ProviderJWKs>($t35) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:693:31+38

    // $t36 := read_ref($t35) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:693:31+38
    $t36 := $Dereference($t35);

    // assume Identical($t37, option::spec_is_none<0x1::jwks::ProviderJWKs>($t35)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:693:31+38
    assume ($t37 == $1_option_spec_is_none'$1_jwks_ProviderJWKs'($Dereference($t35)));

    // if ($t37) goto L28 else goto L29 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:693:31+38
    if ($t37) { goto L28; } else { goto L29; }

    // label L21 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:693:31+38
L21:

    // assume And(option::spec_is_none<0x1::jwks::ProviderJWKs>($t35), Eq(262145, $t12)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:693:31+38
    assume {:print "$at(2,31293,31331)"} true;
    assume ($1_option_spec_is_none'$1_jwks_ProviderJWKs'($Dereference($t35)) && $IsEqual'num'(262145, $t12));

    // trace_abort($t12) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:693:31+38
    assume {:print "$at(2,31293,31331)"} true;
    assume {:print "$track_abort(79,2):", $t12} $t12 == $t12;

    // goto L15 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:693:31+38
    goto L15;

    // label L20 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:693:31+38
L20:

    // $t35 := havoc[mut]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:693:31+38
    assume {:print "$at(2,31293,31331)"} true;
    havoc $temp_0'$1_option_Option'$1_jwks_ProviderJWKs'';
    $t35 := $UpdateMutation($t35, $temp_0'$1_option_Option'$1_jwks_ProviderJWKs'');

    // assume And(WellFormed($t35), And(Le(Len<0x1::jwks::ProviderJWKs>(select option::Option.vec($t35)), 1), forall $elem: 0x1::jwks::ProviderJWKs: select option::Option.vec($t35): forall i: num: TypeDomain<num>() where And(Le(0, i), Lt(i, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): forall j: num: TypeDomain<num>() where And(Lt(i, j), Lt(j, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): Neq<vector<u8>>(jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), i)), jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), j))))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:693:31+38
    assume ($IsValid'$1_option_Option'$1_jwks_ProviderJWKs''($Dereference($t35)) && ((LenVec($Dereference($t35)->$vec) <= 1) && (var $range_0 := $Dereference($t35)->$vec; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((forall i: int :: $IsValid'num'(i) ==> (((0 <= i) && (i < LenVec($elem->$jwks))))  ==> ((forall j: int :: $IsValid'num'(j) ==> (((i < j) && (j < LenVec($elem->$jwks))))  ==> (!$IsEqual'vec'u8''($1_jwks_$get_jwk_id(ReadVec($elem->$jwks, i)), $1_jwks_$get_jwk_id(ReadVec($elem->$jwks, j)))))))))))));

    // assume And(WellFormed($t6), forall i: num: TypeDomain<num>() where And(Le(0, i), Lt(i, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($t6)))): forall j: num: TypeDomain<num>() where And(Lt(i, j), Lt(j, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($t6)))): Neq<vector<u8>>(jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($t6), i)), jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($t6), j)))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:693:31+38
    assume ($IsValid'$1_jwks_ProviderJWKs'($t6) && (forall i: int :: $IsValid'num'(i) ==> (((0 <= i) && (i < LenVec($t6->$jwks))))  ==> ((forall j: int :: $IsValid'num'(j) ==> (((i < j) && (j < LenVec($t6->$jwks))))  ==> (!$IsEqual'vec'u8''($1_jwks_$get_jwk_id(ReadVec($t6->$jwks, i)), $1_jwks_$get_jwk_id(ReadVec($t6->$jwks, j))))))));

    // assume Eq<0x1::jwks::ProviderJWKs>($t6, option::spec_borrow<0x1::jwks::ProviderJWKs>($t36)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:693:31+38
    assume $IsEqual'$1_jwks_ProviderJWKs'($t6, $1_option_spec_borrow'$1_jwks_ProviderJWKs'($t36));

    // assume option::spec_is_none<0x1::jwks::ProviderJWKs>($t35) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:693:31+38
    assume $1_option_spec_is_none'$1_jwks_ProviderJWKs'($Dereference($t35));

    // $t6 := opaque end: option::extract<0x1::jwks::ProviderJWKs>($t35) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:693:31+38

    // pack_ref_deep($t35) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:693:31+38

    // write_back[LocalRoot($t5)@]($t35) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:693:31+38
    $t5 := $Dereference($t35);

    // trace_local[existing_jwk_set]($t5) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:693:31+38
    assume {:print "$track_local(79,2,5):", $t5} $t5 == $t5;

    // trace_local[jwk_set]($t6) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:693:31+38
    assume {:print "$track_local(79,2,6):", $t6} $t6 == $t6;

    // $t38 := borrow_local($t6) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:694:28+12
    assume {:print "$at(2,31360,31372)"} true;
    $t38 := $Mutation($Local(6), EmptyVec(), $t6);

    // $t39 := get_field<0x1::jwks::PatchRemoveJWK>.jwk_id($t29) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:694:42+10
    $t39 := $t29->$jwk_id;

    // assume Identical($t40, select jwks::ProviderJWKs.jwks<0x1::jwks::ProviderJWKs>($t38)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.spec.move:49:5+25
    assume {:print "$at(3,2467,2492)"} true;
    assume ($t40 == $Dereference($t38)->$jwks);

    // assume Identical($t41, choose min i: num: RangeVec<0x1::jwks::JWK>($t40): Eq<vector<u8>>(jwks::$get_jwk_id(Index($t40, i)), $t39)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.spec.move:50:5+97
    assume {:print "$at(3,2535,2632)"} true;
    assume ($t41 == $choice_1($t40, $t39));

    // assume Identical($t42, $t41) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.spec.move:52:5+19
    assume {:print "$at(3,2637,2656)"} true;
    assume ($t42 == $t41);

    // assume Identical($t43, Sub(Sub(Len<0x1::jwks::JWK>($t40), $t41), 1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.spec.move:53:5+34
    assume {:print "$at(3,2661,2695)"} true;
    assume ($t43 == ((LenVec($t40) - $t41) - 1));

    // $t44 := opaque begin: jwks::remove_jwk($t38, $t39) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:694:17+36
    assume {:print "$at(2,31349,31385)"} true;

    // $t45 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:694:17+36
    havoc $t45;

    // if ($t45) goto L30 else goto L22 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:694:17+36
    if ($t45) { goto L30; } else { goto L22; }

    // label L23 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:694:17+36
L23:

    // trace_abort($t12) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:694:17+36
    assume {:print "$at(2,31349,31385)"} true;
    assume {:print "$track_abort(79,2):", $t12} $t12 == $t12;

    // goto L15 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:694:17+36
    goto L15;

    // label L22 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:694:17+36
L22:

    // $t38 := havoc[mut]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:694:17+36
    assume {:print "$at(2,31349,31385)"} true;
    havoc $temp_0'$1_jwks_ProviderJWKs';
    $t38 := $UpdateMutation($t38, $temp_0'$1_jwks_ProviderJWKs');

    // assume And(WellFormed($t38), forall i: num: TypeDomain<num>() where And(Le(0, i), Lt(i, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($t38)))): forall j: num: TypeDomain<num>() where And(Lt(i, j), Lt(j, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($t38)))): Neq<vector<u8>>(jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($t38), i)), jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($t38), j)))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:694:17+36
    assume ($IsValid'$1_jwks_ProviderJWKs'($Dereference($t38)) && (forall i: int :: $IsValid'num'(i) ==> (((0 <= i) && (i < LenVec($Dereference($t38)->$jwks))))  ==> ((forall j: int :: $IsValid'num'(j) ==> (((i < j) && (j < LenVec($Dereference($t38)->$jwks))))  ==> (!$IsEqual'vec'u8''($1_jwks_$get_jwk_id(ReadVec($Dereference($t38)->$jwks, i)), $1_jwks_$get_jwk_id(ReadVec($Dereference($t38)->$jwks, j))))))));

    // assume And(WellFormed($t44), Le(Len<0x1::jwks::JWK>(select option::Option.vec($t44)), 1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:694:17+36
    assume ($IsValid'$1_option_Option'$1_jwks_JWK''($t44) && (LenVec($t44->$vec) <= 1));

    // assume Implies(option::$is_some<0x1::jwks::JWK>($t44), And(Lt($t41, Len<0x1::jwks::JWK>($t40)), Eq<vector<u8>>(jwks::$get_jwk_id(Index($t40, $t41)), $t39))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:694:17+36
    assume ($1_option_$is_some'$1_jwks_JWK'($t44) ==> (($t41 < LenVec($t40)) && $IsEqual'vec'u8''($1_jwks_$get_jwk_id(ReadVec($t40, $t41)), $t39)));

    // assume Implies(option::$is_none<0x1::jwks::JWK>($t44), Eq<vector<0x1::jwks::JWK>>(select jwks::ProviderJWKs.jwks<0x1::jwks::ProviderJWKs>($t38), $t40)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:694:17+36
    assume ($1_option_$is_none'$1_jwks_JWK'($t44) ==> $IsEqual'vec'$1_jwks_JWK''($Dereference($t38)->$jwks, $t40));

    // assume Implies(option::$is_some<0x1::jwks::JWK>($t44), Eq<num>(Add(Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks<0x1::jwks::ProviderJWKs>($t38)), 1), Len<0x1::jwks::JWK>($t40))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:694:17+36
    assume ($1_option_$is_some'$1_jwks_JWK'($t44) ==> $IsEqual'num'((LenVec($Dereference($t38)->$jwks) + 1), LenVec($t40)));

    // assume Implies(option::$is_some<0x1::jwks::JWK>($t44), forall i: num: TypeDomain<num>(){Index(select jwks::ProviderJWKs.jwks<0x1::jwks::ProviderJWKs>($t38), i)}: Implies(And(Le(0, i), Lt(i, $t42)), Eq<0x1::jwks::JWK>(Index(select jwks::ProviderJWKs.jwks<0x1::jwks::ProviderJWKs>($t38), i), Index($t40, i)))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:694:17+36
    assume ($1_option_$is_some'$1_jwks_JWK'($t44) ==> (forall i: int :: {ReadVec($Dereference($t38)->$jwks, i)}$IsValid'num'(i) ==> ((((0 <= i) && (i < $t42)) ==> $IsEqual'$1_jwks_JWK'(ReadVec($Dereference($t38)->$jwks, i), ReadVec($t40, i))))));

    // assume Implies(option::$is_some<0x1::jwks::JWK>($t44), forall i: num: Range(0, $t42): Eq<0x1::jwks::JWK>(Index(select jwks::ProviderJWKs.jwks<0x1::jwks::ProviderJWKs>($t38), i), Index($t40, i))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:694:17+36
    assume ($1_option_$is_some'$1_jwks_JWK'($t44) ==> (var $range_0 := $Range(0, $t42); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    ($IsEqual'$1_jwks_JWK'(ReadVec($Dereference($t38)->$jwks, i), ReadVec($t40, i)))))));

    // assume Implies(option::$is_some<0x1::jwks::JWK>($t44), forall k: num: Range(0, $t43): Eq<0x1::jwks::JWK>(Index(select jwks::ProviderJWKs.jwks<0x1::jwks::ProviderJWKs>($t38), Add($t41, k)), Index($t40, Add(Add($t41, k), 1)))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:694:17+36
    assume ($1_option_$is_some'$1_jwks_JWK'($t44) ==> (var $range_0 := $Range(0, $t43); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var k := $i_1;
    ($IsEqual'$1_jwks_JWK'(ReadVec($Dereference($t38)->$jwks, ($t41 + k)), ReadVec($t40, (($t41 + k) + 1))))))));

    // $t44 := opaque end: jwks::remove_jwk($t38, $t39) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:694:17+36

    // pack_ref_deep($t38) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:694:17+36

    // write_back[LocalRoot($t6)@]($t38) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:694:17+36
    $t6 := $Dereference($t38);

    // trace_local[jwk_set]($t6) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:694:17+36
    assume {:print "$track_local(79,2,6):", $t6} $t6 == $t6;

    // drop($t44) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:694:17+36

    // $t46 := move($t6) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:695:17+35
    assume {:print "$at(2,31403,31438)"} true;
    $t46 := $t6;

    // $t47 := jwks::upsert_provider_jwks($t0, $t46) on_abort goto L15 with $t12 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:695:17+35
    call $t47,$t0 := $1_jwks_upsert_provider_jwks($t0, $t46);
    if ($abort_flag) {
        assume {:print "$at(2,31403,31438)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(79,2):", $t12} $t12 == $t12;
        goto L15;
    }

    // drop($t47) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:695:17+35

    // goto L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:692:53+192
    assume {:print "$at(2,31261,31453)"} true;
    goto L4;

    // label L7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:692:13+232
L7:

    // drop($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:692:13+232
    assume {:print "$at(2,31221,31453)"} true;

    // goto L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:692:13+232
    goto L4;

    // label L5 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:697:20+17
    assume {:print "$at(2,31474,31491)"} true;
L5:

    // $t48 := [48, 120, 49, 58, 58, 106, 119, 107, 115, 58, 58, 80, 97, 116, 99, 104, 85, 112, 115, 101, 114, 116, 74, 87, 75] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:697:41+28
    assume {:print "$at(2,31495,31523)"} true;
    $t48 := ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(48, 120, 49, 58), MakeVec4(58, 106, 119, 107)), MakeVec4(115, 58, 58, 80)), MakeVec4(97, 116, 99, 104)), MakeVec4(85, 112, 115, 101)), MakeVec4(114, 116, 74, 87)), MakeVec1(75));
    assume $IsValid'vec'u8''($t48);

    // $t49 := ==($t13, $t48) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:697:20+49
    $t49 := $IsEqual'vec'u8''($t13, $t48);

    // if ($t49) goto L10 else goto L9 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:697:16+873
    if ($t49) { goto L10; } else { goto L9; }

    // label L10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:698:60+5
    assume {:print "$at(2,31586,31591)"} true;
L10:

    // $t50 := get_field<0x1::jwks::Patch>.variant($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:698:60+13
    assume {:print "$at(2,31586,31599)"} true;
    $t50 := $t1->$variant;

    // $t51 := copyable_any::unpack<0x1::jwks::PatchUpsertJWK>($t50) on_abort goto L15 with $t12 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:698:23+51
    call $t51 := $1_copyable_any_unpack'$1_jwks_PatchUpsertJWK'($t50);
    if ($abort_flag) {
        assume {:print "$at(2,31549,31600)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(79,2):", $t12} $t12 == $t12;
        goto L15;
    }

    // trace_local[cmd]($t51) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:698:23+51
    assume {:print "$track_local(79,2,7):", $t51} $t51 == $t51;

    // $t52 := get_field<0x1::jwks::PatchUpsertJWK>.issuer($t51) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:701:56+10
    assume {:print "$at(2,31820,31830)"} true;
    $t52 := $t51->$issuer;

    // $t8 := opaque begin: jwks::remove_issuer($t0, $t52) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:701:36+31

    // $t53 := read_ref($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:701:36+31
    $t53 := $Dereference($t0);

    // $t54 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:701:36+31
    havoc $t54;

    // if ($t54) goto L25 else goto L24 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:701:36+31
    if ($t54) { goto L25; } else { goto L24; }

    // label L25 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:701:36+31
L25:

    // trace_abort($t12) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:701:36+31
    assume {:print "$at(2,31800,31831)"} true;
    assume {:print "$track_abort(79,2):", $t12} $t12 == $t12;

    // goto L15 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:701:36+31
    goto L15;

    // label L24 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:701:36+31
L24:

    // $t0 := havoc[mut]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:701:36+31
    assume {:print "$at(2,31800,31831)"} true;
    havoc $temp_0'$1_jwks_AllProvidersJWKs';
    $t0 := $UpdateMutation($t0, $temp_0'$1_jwks_AllProvidersJWKs');

    // assume And(WellFormed($t0), forall $elem: 0x1::jwks::ProviderJWKs: select jwks::AllProvidersJWKs.entries($t0): forall i: num: TypeDomain<num>() where And(Le(0, i), Lt(i, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): forall j: num: TypeDomain<num>() where And(Lt(i, j), Lt(j, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): Neq<vector<u8>>(jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), i)), jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), j)))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:701:36+31
    assume ($IsValid'$1_jwks_AllProvidersJWKs'($Dereference($t0)) && (var $range_0 := $Dereference($t0)->$entries; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((forall i: int :: $IsValid'num'(i) ==> (((0 <= i) && (i < LenVec($elem->$jwks))))  ==> ((forall j: int :: $IsValid'num'(j) ==> (((i < j) && (j < LenVec($elem->$jwks))))  ==> (!$IsEqual'vec'u8''($1_jwks_$get_jwk_id(ReadVec($elem->$jwks, i)), $1_jwks_$get_jwk_id(ReadVec($elem->$jwks, j))))))))))));

    // assume And(WellFormed($t8), And(Le(Len<0x1::jwks::ProviderJWKs>(select option::Option.vec($t8)), 1), forall $elem: 0x1::jwks::ProviderJWKs: select option::Option.vec($t8): forall i: num: TypeDomain<num>() where And(Le(0, i), Lt(i, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): forall j: num: TypeDomain<num>() where And(Lt(i, j), Lt(j, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): Neq<vector<u8>>(jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), i)), jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), j))))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:701:36+31
    assume ($IsValid'$1_option_Option'$1_jwks_ProviderJWKs''($t8) && ((LenVec($t8->$vec) <= 1) && (var $range_0 := $t8->$vec; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((forall i: int :: $IsValid'num'(i) ==> (((0 <= i) && (i < LenVec($elem->$jwks))))  ==> ((forall j: int :: $IsValid'num'(j) ==> (((i < j) && (j < LenVec($elem->$jwks))))  ==> (!$IsEqual'vec'u8''($1_jwks_$get_jwk_id(ReadVec($elem->$jwks, i)), $1_jwks_$get_jwk_id(ReadVec($elem->$jwks, j)))))))))))));

    // assume Implies(option::$is_none<0x1::jwks::ProviderJWKs>($t8), Eq<0x1::jwks::AllProvidersJWKs>(Freeze(false)($t0), $t53)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:701:36+31
    assume ($1_option_$is_none'$1_jwks_ProviderJWKs'($t8) ==> $IsEqual'$1_jwks_AllProvidersJWKs'($Dereference($t0), $t53));

    // assume Implies(option::$is_none<0x1::jwks::ProviderJWKs>($t8), forall i: num: RangeVec<0x1::jwks::ProviderJWKs>(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t0)): Neq<vector<u8>>(select jwks::ProviderJWKs.issuer<0x1::jwks::ProviderJWKs>(Index(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t0), i)), $t52)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:701:36+31
    assume ($1_option_$is_none'$1_jwks_ProviderJWKs'($t8) ==> (var $range_0 := $RangeVec'$1_jwks_ProviderJWKs'($Dereference($t0)->$entries); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'vec'u8''(ReadVec($Dereference($t0)->$entries, i)->$issuer, $t52))))));

    // assume Implies(option::$is_some<0x1::jwks::ProviderJWKs>($t8), exists idx: num: RangeVec<0x1::jwks::ProviderJWKs>(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t53)): And(And(And(Eq<vector<u8>>(select jwks::ProviderJWKs.issuer<0x1::jwks::ProviderJWKs>(Index(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t53), idx)), $t52), Eq<num>(Add(Len<0x1::jwks::ProviderJWKs>(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t0)), 1), Len<0x1::jwks::ProviderJWKs>(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t53)))), forall i: num: RangeVec<0x1::jwks::ProviderJWKs>(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t53)): Implies(Lt(i, idx), And(Eq<0x1::jwks::ProviderJWKs>(Index(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t0), i), Index(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t53), i)), Neq<vector<u8>>(select jwks::ProviderJWKs.issuer<0x1::jwks::ProviderJWKs>(Index(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t0), i)), $t52)))), forall i: num: RangeVec<0x1::jwks::ProviderJWKs>(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t0)): Implies(Ge(i, idx), Eq<0x1::jwks::ProviderJWKs>(Index(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t0), i), Index(select jwks::AllProvidersJWKs.entries<0x1::jwks::AllProvidersJWKs>($t53), Add(i, 1)))))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:701:36+31
    assume ($1_option_$is_some'$1_jwks_ProviderJWKs'($t8) ==> (var $range_0 := $RangeVec'$1_jwks_ProviderJWKs'($t53->$entries); (exists $i_1: int :: $InRange($range_0, $i_1) && (var idx := $i_1;
    (((($IsEqual'vec'u8''(ReadVec($t53->$entries, idx)->$issuer, $t52) && $IsEqual'num'((LenVec($Dereference($t0)->$entries) + 1), LenVec($t53->$entries))) && (var $range_2 := $RangeVec'$1_jwks_ProviderJWKs'($t53->$entries); (forall $i_3: int :: $InRange($range_2, $i_3) ==> (var i := $i_3;
    (((i < idx) ==> ($IsEqual'$1_jwks_ProviderJWKs'(ReadVec($Dereference($t0)->$entries, i), ReadVec($t53->$entries, i)) && !$IsEqual'vec'u8''(ReadVec($Dereference($t0)->$entries, i)->$issuer, $t52)))))))) && (var $range_4 := $RangeVec'$1_jwks_ProviderJWKs'($Dereference($t0)->$entries); (forall $i_5: int :: $InRange($range_4, $i_5) ==> (var i := $i_5;
    (((i >= idx) ==> $IsEqual'$1_jwks_ProviderJWKs'(ReadVec($Dereference($t0)->$entries, i), ReadVec($t53->$entries, (i + 1))))))))))))));

    // $t8 := opaque end: jwks::remove_issuer($t0, $t52) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:701:36+31

    // trace_local[existing_jwk_set]($t8) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:701:36+31
    assume {:print "$track_local(79,2,8):", $t8} $t8 == $t8;

    // $t55 := copy($t8) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:702:47+17
    assume {:print "$at(2,31879,31896)"} true;
    $t55 := $t8;

    // $t56 := opaque begin: option::is_some<0x1::jwks::ProviderJWKs>($t55) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:702:31+34

    // assume WellFormed($t56) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:702:31+34
    assume $IsValid'bool'($t56);

    // assume Eq<bool>($t56, option::spec_is_some<0x1::jwks::ProviderJWKs>($t55)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:702:31+34
    assume $IsEqual'bool'($t56, $1_option_spec_is_some'$1_jwks_ProviderJWKs'($t55));

    // $t56 := opaque end: option::is_some<0x1::jwks::ProviderJWKs>($t55) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:702:31+34

    // if ($t56) goto L12 else goto L11 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:702:27+288
    if ($t56) { goto L12; } else { goto L11; }

    // label L12 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:703:33+21
    assume {:print "$at(2,31933,31954)"} true;
L12:

    // $t57 := borrow_local($t8) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:703:33+21
    assume {:print "$at(2,31933,31954)"} true;
    $t57 := $Mutation($Local(8), EmptyVec(), $t8);

    // $t9 := opaque begin: option::extract<0x1::jwks::ProviderJWKs>($t57) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:703:17+38

    // $t58 := read_ref($t57) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:703:17+38
    $t58 := $Dereference($t57);

    // assume Identical($t59, option::spec_is_none<0x1::jwks::ProviderJWKs>($t57)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:703:17+38
    assume ($t59 == $1_option_spec_is_none'$1_jwks_ProviderJWKs'($Dereference($t57)));

    // if ($t59) goto L31 else goto L32 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:703:17+38
    if ($t59) { goto L31; } else { goto L32; }

    // label L27 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:703:17+38
L27:

    // assume And(option::spec_is_none<0x1::jwks::ProviderJWKs>($t57), Eq(262145, $t12)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:703:17+38
    assume {:print "$at(2,31917,31955)"} true;
    assume ($1_option_spec_is_none'$1_jwks_ProviderJWKs'($Dereference($t57)) && $IsEqual'num'(262145, $t12));

    // trace_abort($t12) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:703:17+38
    assume {:print "$at(2,31917,31955)"} true;
    assume {:print "$track_abort(79,2):", $t12} $t12 == $t12;

    // goto L15 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:703:17+38
    goto L15;

    // label L26 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:703:17+38
L26:

    // $t57 := havoc[mut]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:703:17+38
    assume {:print "$at(2,31917,31955)"} true;
    havoc $temp_0'$1_option_Option'$1_jwks_ProviderJWKs'';
    $t57 := $UpdateMutation($t57, $temp_0'$1_option_Option'$1_jwks_ProviderJWKs'');

    // assume And(WellFormed($t57), And(Le(Len<0x1::jwks::ProviderJWKs>(select option::Option.vec($t57)), 1), forall $elem: 0x1::jwks::ProviderJWKs: select option::Option.vec($t57): forall i: num: TypeDomain<num>() where And(Le(0, i), Lt(i, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): forall j: num: TypeDomain<num>() where And(Lt(i, j), Lt(j, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): Neq<vector<u8>>(jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), i)), jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), j))))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:703:17+38
    assume ($IsValid'$1_option_Option'$1_jwks_ProviderJWKs''($Dereference($t57)) && ((LenVec($Dereference($t57)->$vec) <= 1) && (var $range_0 := $Dereference($t57)->$vec; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((forall i: int :: $IsValid'num'(i) ==> (((0 <= i) && (i < LenVec($elem->$jwks))))  ==> ((forall j: int :: $IsValid'num'(j) ==> (((i < j) && (j < LenVec($elem->$jwks))))  ==> (!$IsEqual'vec'u8''($1_jwks_$get_jwk_id(ReadVec($elem->$jwks, i)), $1_jwks_$get_jwk_id(ReadVec($elem->$jwks, j)))))))))))));

    // assume And(WellFormed($t9), forall i: num: TypeDomain<num>() where And(Le(0, i), Lt(i, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($t9)))): forall j: num: TypeDomain<num>() where And(Lt(i, j), Lt(j, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($t9)))): Neq<vector<u8>>(jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($t9), i)), jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($t9), j)))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:703:17+38
    assume ($IsValid'$1_jwks_ProviderJWKs'($t9) && (forall i: int :: $IsValid'num'(i) ==> (((0 <= i) && (i < LenVec($t9->$jwks))))  ==> ((forall j: int :: $IsValid'num'(j) ==> (((i < j) && (j < LenVec($t9->$jwks))))  ==> (!$IsEqual'vec'u8''($1_jwks_$get_jwk_id(ReadVec($t9->$jwks, i)), $1_jwks_$get_jwk_id(ReadVec($t9->$jwks, j))))))));

    // assume Eq<0x1::jwks::ProviderJWKs>($t9, option::spec_borrow<0x1::jwks::ProviderJWKs>($t58)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:703:17+38
    assume $IsEqual'$1_jwks_ProviderJWKs'($t9, $1_option_spec_borrow'$1_jwks_ProviderJWKs'($t58));

    // assume option::spec_is_none<0x1::jwks::ProviderJWKs>($t57) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:703:17+38
    assume $1_option_spec_is_none'$1_jwks_ProviderJWKs'($Dereference($t57));

    // $t9 := opaque end: option::extract<0x1::jwks::ProviderJWKs>($t57) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:703:17+38

    // pack_ref_deep($t57) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:703:17+38

    // write_back[LocalRoot($t8)@]($t57) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:703:17+38
    $t8 := $Dereference($t57);

    // trace_local[existing_jwk_set]($t8) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:703:17+38
    assume {:print "$track_local(79,2,8):", $t8} $t8 == $t8;

    // trace_local[jwk_set]($t9) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:703:17+38
    assume {:print "$track_local(79,2,9):", $t9} $t9 == $t9;

    // label L13 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:711:24+12
    assume {:print "$at(2,32172,32184)"} true;
L13:

    // $t60 := borrow_local($t9) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:711:24+12
    assume {:print "$at(2,32172,32184)"} true;
    $t60 := $Mutation($Local(9), EmptyVec(), $t9);

    // $t61 := get_field<0x1::jwks::PatchUpsertJWK>.jwk($t51) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:711:38+7
    $t61 := $t51->$jwk;

    // $t62 := jwks::upsert_jwk($t60, $t61) on_abort goto L15 with $t12 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:711:13+33
    call $t62,$t60 := $1_jwks_upsert_jwk($t60, $t61);
    if ($abort_flag) {
        assume {:print "$at(2,32161,32194)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(79,2):", $t12} $t12 == $t12;
        goto L15;
    }

    // pack_ref_deep($t60) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:711:13+33

    // write_back[LocalRoot($t9)@]($t60) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:711:13+33
    $t9 := $Dereference($t60);

    // trace_local[jwk_set]($t9) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:711:13+33
    assume {:print "$track_local(79,2,9):", $t9} $t9 == $t9;

    // drop($t62) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:711:13+33

    // $t63 := move($t9) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:712:13+35
    assume {:print "$at(2,32208,32243)"} true;
    $t63 := $t9;

    // $t64 := jwks::upsert_provider_jwks($t0, $t63) on_abort goto L15 with $t12 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:712:13+35
    call $t64,$t0 := $1_jwks_upsert_provider_jwks($t0, $t63);
    if ($abort_flag) {
        assume {:print "$at(2,32208,32243)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(79,2):", $t12} $t12 == $t12;
        goto L15;
    }

    // drop($t64) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:712:13+35

    // goto L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:712:13+35
    goto L4;

    // label L11 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:707:29+3
    assume {:print "$at(2,32068,32071)"} true;
L11:

    // $t65 := get_field<0x1::jwks::PatchUpsertJWK>.issuer($t51) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:707:29+10
    assume {:print "$at(2,32068,32078)"} true;
    $t65 := $t51->$issuer;

    // $t66 := 0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:706:30+1
    assume {:print "$at(2,32037,32038)"} true;
    $t66 := 0;
    assume $IsValid'u64'($t66);

    // $t67 := vector::empty<0x1::jwks::JWK>() on_abort goto L15 with $t12 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:708:27+6
    assume {:print "$at(2,32106,32112)"} true;
    call $t67 := $1_vector_empty'$1_jwks_JWK'();
    if ($abort_flag) {
        assume {:print "$at(2,32106,32112)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(79,2):", $t12} $t12 == $t12;
        goto L15;
    }

    // $t9 := pack 0x1::jwks::ProviderJWKs($t65, $t66, $t67) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:705:17+140
    assume {:print "$at(2,31993,32133)"} true;
    $t9 := $1_jwks_ProviderJWKs($t65, $t66, $t67);

    // trace_local[jwk_set]($t9) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:705:17+140
    assume {:print "$track_local(79,2,9):", $t9} $t9 == $t9;

    // goto L13 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:705:17+140
    goto L13;

    // label L9 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:714:13+59
    assume {:print "$at(2,32274,32333)"} true;
L9:

    // pack_ref_deep($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:714:13+59
    assume {:print "$at(2,32274,32333)"} true;

    // drop($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:714:13+59

    // $t68 := 3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:714:48+22
    $t68 := 3;
    assume $IsValid'u64'($t68);

    // $t69 := error::invalid_argument($t68) on_abort goto L15 with $t12 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:714:18+54
    call $t69 := $1_error_invalid_argument($t68);
    if ($abort_flag) {
        assume {:print "$at(2,32279,32333)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(79,2):", $t12} $t12 == $t12;
        goto L15;
    }

    // trace_abort($t69) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:714:13+59
    assume {:print "$at(2,32274,32333)"} true;
    assume {:print "$track_abort(79,2):", $t69} $t69 == $t69;

    // $t12 := move($t69) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:714:13+59
    $t12 := $t69;

    // goto L15 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:714:13+59
    goto L15;

    // label L14 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:716:5+1
    assume {:print "$at(2,32348,32349)"} true;
L14:

    // return () at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:716:5+1
    assume {:print "$at(2,32348,32349)"} true;
    $ret0 := $t0;
    return;

    // label L15 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:716:5+1
L15:

    // abort($t12) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:716:5+1
    assume {:print "$at(2,32348,32349)"} true;
    $abort_code := $t12;
    $abort_flag := true;
    return;

    // label L28 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L28:

    // drop($t0) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L21 at <internal>:1:1+10
    goto L21;

    // label L29 at <internal>:1:1+10
L29:

    // drop($t35) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L20 at <internal>:1:1+10
    goto L20;

    // label L30 at <internal>:1:1+10
L30:

    // drop($t0) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L23 at <internal>:1:1+10
    goto L23;

    // label L31 at <internal>:1:1+10
L31:

    // drop($t0) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L27 at <internal>:1:1+10
    goto L27;

    // label L32 at <internal>:1:1+10
L32:

    // drop($t57) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L26 at <internal>:1:1+10
    goto L26;

}

// fun jwks::get_jwk_id [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:568:5+565
procedure {:inline 1} $1_jwks_get_jwk_id(_$t0: $1_jwks_JWK) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t1: Vec (int);
    var $t2: $1_jwks_RSA_JWK;
    var $t3: Vec (int);
    var $t4: $1_jwks_UnsupportedJWK;
    var $t5: $1_copyable_any_Any;
    var $t6: $1_string_String;
    var $t7: int;
    var $t8: Vec (int);
    var $t9: Vec (int);
    var $t10: bool;
    var $t11: $1_copyable_any_Any;
    var $t12: $1_jwks_RSA_JWK;
    var $t13: $1_string_String;
    var $t14: Vec (int);
    var $t15: Vec (int);
    var $t16: bool;
    var $t17: $1_copyable_any_Any;
    var $t18: $1_jwks_UnsupportedJWK;
    var $t19: Vec (int);
    var $t20: int;
    var $t21: int;
    var $t0: $1_jwks_JWK;
    var $temp_0'$1_jwks_JWK': $1_jwks_JWK;
    var $temp_0'$1_jwks_RSA_JWK': $1_jwks_RSA_JWK;
    var $temp_0'$1_jwks_UnsupportedJWK': $1_jwks_UnsupportedJWK;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[jwk]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:568:5+1
    assume {:print "$at(2,26045,26046)"} true;
    assume {:print "$track_local(79,4,0):", $t0} $t0 == $t0;

    // $t5 := get_field<0x1::jwks::JWK>.variant($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:569:72+12
    assume {:print "$at(2,26156,26168)"} true;
    $t5 := $t0->$variant;

    // $t6 := copyable_any::type_name($t5) on_abort goto L6 with $t7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:569:48+37
    call $t6 := $1_copyable_any_type_name($t5);
    if ($abort_flag) {
        assume {:print "$at(2,26132,26169)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(79,4):", $t7} $t7 == $t7;
        goto L6;
    }

    // $t8 := string::bytes($t6) on_abort goto L6 with $t7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:569:34+52
    call $t8 := $1_string_bytes($t6);
    if ($abort_flag) {
        assume {:print "$at(2,26118,26170)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(79,4):", $t7} $t7 == $t7;
        goto L6;
    }

    // trace_local[variant_type_name]($t8) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:569:33+53
    assume {:print "$track_local(79,4,1):", $t8} $t8 == $t8;

    // $t9 := [48, 120, 49, 58, 58, 106, 119, 107, 115, 58, 58, 82, 83, 65, 95, 74, 87, 75] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:570:34+21
    assume {:print "$at(2,26205,26226)"} true;
    $t9 := ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(48, 120, 49, 58), MakeVec4(58, 106, 119, 107)), MakeVec4(115, 58, 58, 82)), MakeVec4(83, 65, 95, 74)), MakeVec2(87, 75));
    assume $IsValid'vec'u8''($t9);

    // $t10 := ==($t8, $t9) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:570:13+42
    $t10 := $IsEqual'vec'u8''($t8, $t9);

    // if ($t10) goto L1 else goto L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:570:9+424
    if ($t10) { goto L1; } else { goto L0; }

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:571:53+11
    assume {:print "$at(2,26282,26293)"} true;
L1:

    // $t11 := get_field<0x1::jwks::JWK>.variant($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:571:53+11
    assume {:print "$at(2,26282,26293)"} true;
    $t11 := $t0->$variant;

    // $t12 := copyable_any::unpack<0x1::jwks::RSA_JWK>($t11) on_abort goto L6 with $t7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:571:23+42
    call $t12 := $1_copyable_any_unpack'$1_jwks_RSA_JWK'($t11);
    if ($abort_flag) {
        assume {:print "$at(2,26252,26294)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(79,4):", $t7} $t7 == $t7;
        goto L6;
    }

    // trace_local[rsa]($t12) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:571:23+42
    assume {:print "$track_local(79,4,2):", $t12} $t12 == $t12;

    // $t13 := get_field<0x1::jwks::RSA_JWK>.kid($t12) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:572:28+8
    assume {:print "$at(2,26323,26331)"} true;
    $t13 := $t12->$kid;

    // $t14 := string::bytes($t13) on_abort goto L6 with $t7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:572:14+23
    call $t14 := $1_string_bytes($t13);
    if ($abort_flag) {
        assume {:print "$at(2,26309,26332)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(79,4):", $t7} $t7 == $t7;
        goto L6;
    }

    // $t3 := $t14 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:572:13+24
    $t3 := $t14;

    // trace_local[$t7]($t14) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:572:13+24
    assume {:print "$track_local(79,4,3):", $t14} $t14 == $t14;

    // label L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:570:9+424
    assume {:print "$at(2,26180,26604)"} true;
L4:

    // trace_return[0]($t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:570:9+424
    assume {:print "$at(2,26180,26604)"} true;
    assume {:print "$track_return(79,4,0):", $t3} $t3 == $t3;

    // goto L5 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:570:9+424
    goto L5;

    // label L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:573:20+17
    assume {:print "$at(2,26352,26369)"} true;
L0:

    // $t15 := [48, 120, 49, 58, 58, 106, 119, 107, 115, 58, 58, 85, 110, 115, 117, 112, 112, 111, 114, 116, 101, 100, 74, 87, 75] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:573:41+28
    assume {:print "$at(2,26373,26401)"} true;
    $t15 := ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(48, 120, 49, 58), MakeVec4(58, 106, 119, 107)), MakeVec4(115, 58, 58, 85)), MakeVec4(110, 115, 117, 112)), MakeVec4(112, 111, 114, 116)), MakeVec4(101, 100, 74, 87)), MakeVec1(75));
    assume $IsValid'vec'u8''($t15);

    // $t16 := ==($t8, $t15) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:573:20+49
    $t16 := $IsEqual'vec'u8''($t8, $t15);

    // if ($t16) goto L3 else goto L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:573:16+256
    if ($t16) { goto L3; } else { goto L2; }

    // label L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:574:68+11
    assume {:print "$at(2,26472,26483)"} true;
L3:

    // $t17 := get_field<0x1::jwks::JWK>.variant($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:574:68+11
    assume {:print "$at(2,26472,26483)"} true;
    $t17 := $t0->$variant;

    // $t18 := copyable_any::unpack<0x1::jwks::UnsupportedJWK>($t17) on_abort goto L6 with $t7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:574:31+49
    call $t18 := $1_copyable_any_unpack'$1_jwks_UnsupportedJWK'($t17);
    if ($abort_flag) {
        assume {:print "$at(2,26435,26484)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(79,4):", $t7} $t7 == $t7;
        goto L6;
    }

    // trace_local[unsupported]($t18) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:574:31+49
    assume {:print "$track_local(79,4,4):", $t18} $t18 == $t18;

    // $t19 := get_field<0x1::jwks::UnsupportedJWK>.id($t18) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:575:13+14
    assume {:print "$at(2,26498,26512)"} true;
    $t19 := $t18->$id;

    // $t3 := $t19 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:575:13+14
    $t3 := $t19;

    // trace_local[$t7]($t19) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:575:13+14
    assume {:print "$track_local(79,4,3):", $t19} $t19 == $t19;

    // goto L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:575:13+14
    goto L4;

    // label L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:577:13+52
    assume {:print "$at(2,26542,26594)"} true;
L2:

    // $t20 := 4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:577:43+20
    assume {:print "$at(2,26572,26592)"} true;
    $t20 := 4;
    assume $IsValid'u64'($t20);

    // $t21 := error::invalid_argument($t20) on_abort goto L6 with $t7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:577:18+47
    call $t21 := $1_error_invalid_argument($t20);
    if ($abort_flag) {
        assume {:print "$at(2,26547,26594)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(79,4):", $t7} $t7 == $t7;
        goto L6;
    }

    // trace_abort($t21) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:577:13+52
    assume {:print "$at(2,26542,26594)"} true;
    assume {:print "$track_abort(79,4):", $t21} $t21 == $t21;

    // $t7 := move($t21) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:577:13+52
    $t7 := $t21;

    // goto L6 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:577:13+52
    goto L6;

    // label L5 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:579:5+1
    assume {:print "$at(2,26609,26610)"} true;
L5:

    // return $t3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:579:5+1
    assume {:print "$at(2,26609,26610)"} true;
    $ret0 := $t3;
    return;

    // label L6 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:579:5+1
L6:

    // abort($t7) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:579:5+1
    assume {:print "$at(2,26609,26610)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun jwks::get_jwk_id [verification] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:568:5+565
procedure {:timeLimit 40} $1_jwks_get_jwk_id$verify(_$t0: $1_jwks_JWK) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t1: Vec (int);
    var $t2: $1_jwks_RSA_JWK;
    var $t3: Vec (int);
    var $t4: $1_jwks_UnsupportedJWK;
    var $t5: $1_copyable_any_Any;
    var $t6: $1_string_String;
    var $t7: int;
    var $t8: Vec (int);
    var $t9: Vec (int);
    var $t10: bool;
    var $t11: $1_copyable_any_Any;
    var $t12: $1_jwks_RSA_JWK;
    var $t13: $1_string_String;
    var $t14: Vec (int);
    var $t15: Vec (int);
    var $t16: bool;
    var $t17: $1_copyable_any_Any;
    var $t18: $1_jwks_UnsupportedJWK;
    var $t19: Vec (int);
    var $t20: int;
    var $t21: int;
    var $t0: $1_jwks_JWK;
    var $temp_0'$1_jwks_JWK': $1_jwks_JWK;
    var $temp_0'$1_jwks_RSA_JWK': $1_jwks_RSA_JWK;
    var $temp_0'$1_jwks_UnsupportedJWK': $1_jwks_UnsupportedJWK;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:568:5+1
    assume {:print "$at(2,26045,26046)"} true;
    assume $IsValid'$1_jwks_JWK'($t0);

    // trace_local[jwk]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:568:5+1
    assume {:print "$track_local(79,4,0):", $t0} $t0 == $t0;

    // $t5 := get_field<0x1::jwks::JWK>.variant($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:569:72+12
    assume {:print "$at(2,26156,26168)"} true;
    $t5 := $t0->$variant;

    // $t6 := copyable_any::type_name($t5) on_abort goto L6 with $t7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:569:48+37
    call $t6 := $1_copyable_any_type_name($t5);
    if ($abort_flag) {
        assume {:print "$at(2,26132,26169)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(79,4):", $t7} $t7 == $t7;
        goto L6;
    }

    // $t8 := string::bytes($t6) on_abort goto L6 with $t7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:569:34+52
    call $t8 := $1_string_bytes($t6);
    if ($abort_flag) {
        assume {:print "$at(2,26118,26170)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(79,4):", $t7} $t7 == $t7;
        goto L6;
    }

    // trace_local[variant_type_name]($t8) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:569:33+53
    assume {:print "$track_local(79,4,1):", $t8} $t8 == $t8;

    // $t9 := [48, 120, 49, 58, 58, 106, 119, 107, 115, 58, 58, 82, 83, 65, 95, 74, 87, 75] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:570:34+21
    assume {:print "$at(2,26205,26226)"} true;
    $t9 := ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(48, 120, 49, 58), MakeVec4(58, 106, 119, 107)), MakeVec4(115, 58, 58, 82)), MakeVec4(83, 65, 95, 74)), MakeVec2(87, 75));
    assume $IsValid'vec'u8''($t9);

    // $t10 := ==($t8, $t9) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:570:13+42
    $t10 := $IsEqual'vec'u8''($t8, $t9);

    // if ($t10) goto L1 else goto L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:570:9+424
    if ($t10) { goto L1; } else { goto L0; }

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:571:53+11
    assume {:print "$at(2,26282,26293)"} true;
L1:

    // $t11 := get_field<0x1::jwks::JWK>.variant($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:571:53+11
    assume {:print "$at(2,26282,26293)"} true;
    $t11 := $t0->$variant;

    // $t12 := copyable_any::unpack<0x1::jwks::RSA_JWK>($t11) on_abort goto L6 with $t7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:571:23+42
    call $t12 := $1_copyable_any_unpack'$1_jwks_RSA_JWK'($t11);
    if ($abort_flag) {
        assume {:print "$at(2,26252,26294)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(79,4):", $t7} $t7 == $t7;
        goto L6;
    }

    // trace_local[rsa]($t12) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:571:23+42
    assume {:print "$track_local(79,4,2):", $t12} $t12 == $t12;

    // $t13 := get_field<0x1::jwks::RSA_JWK>.kid($t12) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:572:28+8
    assume {:print "$at(2,26323,26331)"} true;
    $t13 := $t12->$kid;

    // $t14 := string::bytes($t13) on_abort goto L6 with $t7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:572:14+23
    call $t14 := $1_string_bytes($t13);
    if ($abort_flag) {
        assume {:print "$at(2,26309,26332)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(79,4):", $t7} $t7 == $t7;
        goto L6;
    }

    // $t3 := $t14 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:572:13+24
    $t3 := $t14;

    // trace_local[$t7]($t14) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:572:13+24
    assume {:print "$track_local(79,4,3):", $t14} $t14 == $t14;

    // label L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:570:9+424
    assume {:print "$at(2,26180,26604)"} true;
L4:

    // trace_return[0]($t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:570:9+424
    assume {:print "$at(2,26180,26604)"} true;
    assume {:print "$track_return(79,4,0):", $t3} $t3 == $t3;

    // goto L5 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:570:9+424
    goto L5;

    // label L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:573:20+17
    assume {:print "$at(2,26352,26369)"} true;
L0:

    // $t15 := [48, 120, 49, 58, 58, 106, 119, 107, 115, 58, 58, 85, 110, 115, 117, 112, 112, 111, 114, 116, 101, 100, 74, 87, 75] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:573:41+28
    assume {:print "$at(2,26373,26401)"} true;
    $t15 := ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(48, 120, 49, 58), MakeVec4(58, 106, 119, 107)), MakeVec4(115, 58, 58, 85)), MakeVec4(110, 115, 117, 112)), MakeVec4(112, 111, 114, 116)), MakeVec4(101, 100, 74, 87)), MakeVec1(75));
    assume $IsValid'vec'u8''($t15);

    // $t16 := ==($t8, $t15) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:573:20+49
    $t16 := $IsEqual'vec'u8''($t8, $t15);

    // if ($t16) goto L3 else goto L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:573:16+256
    if ($t16) { goto L3; } else { goto L2; }

    // label L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:574:68+11
    assume {:print "$at(2,26472,26483)"} true;
L3:

    // $t17 := get_field<0x1::jwks::JWK>.variant($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:574:68+11
    assume {:print "$at(2,26472,26483)"} true;
    $t17 := $t0->$variant;

    // $t18 := copyable_any::unpack<0x1::jwks::UnsupportedJWK>($t17) on_abort goto L6 with $t7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:574:31+49
    call $t18 := $1_copyable_any_unpack'$1_jwks_UnsupportedJWK'($t17);
    if ($abort_flag) {
        assume {:print "$at(2,26435,26484)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(79,4):", $t7} $t7 == $t7;
        goto L6;
    }

    // trace_local[unsupported]($t18) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:574:31+49
    assume {:print "$track_local(79,4,4):", $t18} $t18 == $t18;

    // $t19 := get_field<0x1::jwks::UnsupportedJWK>.id($t18) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:575:13+14
    assume {:print "$at(2,26498,26512)"} true;
    $t19 := $t18->$id;

    // $t3 := $t19 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:575:13+14
    $t3 := $t19;

    // trace_local[$t7]($t19) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:575:13+14
    assume {:print "$track_local(79,4,3):", $t19} $t19 == $t19;

    // goto L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:575:13+14
    goto L4;

    // label L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:577:13+52
    assume {:print "$at(2,26542,26594)"} true;
L2:

    // $t20 := 4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:577:43+20
    assume {:print "$at(2,26572,26592)"} true;
    $t20 := 4;
    assume $IsValid'u64'($t20);

    // $t21 := error::invalid_argument($t20) on_abort goto L6 with $t7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:577:18+47
    call $t21 := $1_error_invalid_argument($t20);
    if ($abort_flag) {
        assume {:print "$at(2,26547,26594)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(79,4):", $t7} $t7 == $t7;
        goto L6;
    }

    // trace_abort($t21) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:577:13+52
    assume {:print "$at(2,26542,26594)"} true;
    assume {:print "$track_abort(79,4):", $t21} $t21 == $t21;

    // $t7 := move($t21) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:577:13+52
    $t7 := $t21;

    // goto L6 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:577:13+52
    goto L6;

    // label L5 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:579:5+1
    assume {:print "$at(2,26609,26610)"} true;
L5:

    // return $t3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:579:5+1
    assume {:print "$at(2,26609,26610)"} true;
    $ret0 := $t3;
    return;

    // label L6 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:579:5+1
L6:

    // abort($t7) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:579:5+1
    assume {:print "$at(2,26609,26610)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun jwks::new_patch_remove_all [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:386:5+134
procedure {:inline 1} $1_jwks_new_patch_remove_all() returns ($ret0: $1_jwks_Patch)
{
    // declare local variables
    var $t0: bool;
    var $t1: $1_jwks_PatchRemoveAll;
    var $t2: $1_copyable_any_Any;
    var $t3: $1_jwks_Patch;
    var $temp_0'$1_jwks_Patch': $1_jwks_Patch;

    // bytecode translation starts here
    // $t0 := false at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:388:41+17
    assume {:print "$at(2,18196,18213)"} true;
    $t0 := false;
    assume $IsValid'bool'($t0);

    // $t1 := pack 0x1::jwks::PatchRemoveAll($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:388:41+17
    $t1 := $1_jwks_PatchRemoveAll($t0);

    // $t2 := opaque begin: copyable_any::pack<0x1::jwks::PatchRemoveAll>($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:388:22+37

    // assume WellFormed($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:388:22+37
    assume $IsValid'$1_copyable_any_Any'($t2);

    // assume Eq<0x1::copyable_any::Any>($t2, pack copyable_any::Any(type_info::$type_name<0x1::jwks::PatchRemoveAll>(), bcs::serialize<0x1::jwks::PatchRemoveAll>($t1))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:388:22+37
    assume $IsEqual'$1_copyable_any_Any'($t2, $1_copyable_any_Any($1_string_String(Vec(DefaultVecMap()[0 := 48][1 := 120][2 := 49][3 := 58][4 := 58][5 := 106][6 := 119][7 := 107][8 := 115][9 := 58][10 := 58][11 := 80][12 := 97][13 := 116][14 := 99][15 := 104][16 := 82][17 := 101][18 := 109][19 := 111][20 := 118][21 := 101][22 := 65][23 := 108][24 := 108], 25)), $1_bcs_serialize'$1_jwks_PatchRemoveAll'($t1)));

    // assume from_bcs::deserializable<0x1::jwks::PatchRemoveAll>(select copyable_any::Any.data<0x1::copyable_any::Any>($t2)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:388:22+37
    assume $1_from_bcs_deserializable'$1_jwks_PatchRemoveAll'($t2->$data);

    // $t2 := opaque end: copyable_any::pack<0x1::jwks::PatchRemoveAll>($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:388:22+37

    // $t3 := pack 0x1::jwks::Patch($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:387:9+77
    assume {:print "$at(2,18148,18225)"} true;
    $t3 := $1_jwks_Patch($t2);

    // trace_return[0]($t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:387:9+77
    assume {:print "$track_return(79,6,0):", $t3} $t3 == $t3;

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:390:5+1
    assume {:print "$at(2,18230,18231)"} true;
L1:

    // return $t3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:390:5+1
    assume {:print "$at(2,18230,18231)"} true;
    $ret0 := $t3;
    return;

}

// fun jwks::new_patch_remove_issuer [verification] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:393:5+166
procedure {:timeLimit 40} $1_jwks_new_patch_remove_issuer$verify(_$t0: Vec (int)) returns ($ret0: $1_jwks_Patch)
{
    // declare local variables
    var $t1: $1_jwks_PatchRemoveIssuer;
    var $t2: $1_copyable_any_Any;
    var $t3: $1_jwks_Patch;
    var $t0: Vec (int);
    var $temp_0'$1_jwks_Patch': $1_jwks_Patch;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:393:5+1
    assume {:print "$at(2,18315,18316)"} true;
    assume $IsValid'vec'u8''($t0);

    // trace_local[issuer]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:393:5+1
    assume {:print "$track_local(79,7,0):", $t0} $t0 == $t0;

    // $t1 := pack 0x1::jwks::PatchRemoveIssuer($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:395:41+28
    assume {:print "$at(2,18435,18463)"} true;
    $t1 := $1_jwks_PatchRemoveIssuer($t0);

    // $t2 := opaque begin: copyable_any::pack<0x1::jwks::PatchRemoveIssuer>($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:395:22+48

    // assume WellFormed($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:395:22+48
    assume $IsValid'$1_copyable_any_Any'($t2);

    // assume Eq<0x1::copyable_any::Any>($t2, pack copyable_any::Any(type_info::$type_name<0x1::jwks::PatchRemoveIssuer>(), bcs::serialize<0x1::jwks::PatchRemoveIssuer>($t1))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:395:22+48
    assume $IsEqual'$1_copyable_any_Any'($t2, $1_copyable_any_Any($1_string_String(Vec(DefaultVecMap()[0 := 48][1 := 120][2 := 49][3 := 58][4 := 58][5 := 106][6 := 119][7 := 107][8 := 115][9 := 58][10 := 58][11 := 80][12 := 97][13 := 116][14 := 99][15 := 104][16 := 82][17 := 101][18 := 109][19 := 111][20 := 118][21 := 101][22 := 73][23 := 115][24 := 115][25 := 117][26 := 101][27 := 114], 28)), $1_bcs_serialize'$1_jwks_PatchRemoveIssuer'($t1)));

    // assume from_bcs::deserializable<0x1::jwks::PatchRemoveIssuer>(select copyable_any::Any.data<0x1::copyable_any::Any>($t2)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:395:22+48
    assume $1_from_bcs_deserializable'$1_jwks_PatchRemoveIssuer'($t2->$data);

    // $t2 := opaque end: copyable_any::pack<0x1::jwks::PatchRemoveIssuer>($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:395:22+48

    // $t3 := pack 0x1::jwks::Patch($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:394:9+88
    assume {:print "$at(2,18387,18475)"} true;
    $t3 := $1_jwks_Patch($t2);

    // trace_return[0]($t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:394:9+88
    assume {:print "$track_return(79,7,0):", $t3} $t3 == $t3;

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:397:5+1
    assume {:print "$at(2,18480,18481)"} true;
L1:

    // return $t3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:397:5+1
    assume {:print "$at(2,18480,18481)"} true;
    $ret0 := $t3;
    return;

}

// fun jwks::new_patch_upsert_jwk [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:407:5+174
procedure {:inline 1} $1_jwks_new_patch_upsert_jwk(_$t0: Vec (int), _$t1: $1_jwks_JWK) returns ($ret0: $1_jwks_Patch)
{
    // declare local variables
    var $t2: $1_jwks_PatchUpsertJWK;
    var $t3: $1_copyable_any_Any;
    var $t4: $1_jwks_Patch;
    var $t0: Vec (int);
    var $t1: $1_jwks_JWK;
    var $temp_0'$1_jwks_JWK': $1_jwks_JWK;
    var $temp_0'$1_jwks_Patch': $1_jwks_Patch;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[issuer]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:407:5+1
    assume {:print "$at(2,18828,18829)"} true;
    assume {:print "$track_local(79,9,0):", $t0} $t0 == $t0;

    // trace_local[jwk]($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:407:5+1
    assume {:print "$track_local(79,9,1):", $t1} $t1 == $t1;

    // $t2 := pack 0x1::jwks::PatchUpsertJWK($t0, $t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:409:41+30
    assume {:print "$at(2,18955,18985)"} true;
    $t2 := $1_jwks_PatchUpsertJWK($t0, $t1);

    // $t3 := opaque begin: copyable_any::pack<0x1::jwks::PatchUpsertJWK>($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:409:22+50

    // assume WellFormed($t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:409:22+50
    assume $IsValid'$1_copyable_any_Any'($t3);

    // assume Eq<0x1::copyable_any::Any>($t3, pack copyable_any::Any(type_info::$type_name<0x1::jwks::PatchUpsertJWK>(), bcs::serialize<0x1::jwks::PatchUpsertJWK>($t2))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:409:22+50
    assume $IsEqual'$1_copyable_any_Any'($t3, $1_copyable_any_Any($1_string_String(Vec(DefaultVecMap()[0 := 48][1 := 120][2 := 49][3 := 58][4 := 58][5 := 106][6 := 119][7 := 107][8 := 115][9 := 58][10 := 58][11 := 80][12 := 97][13 := 116][14 := 99][15 := 104][16 := 85][17 := 112][18 := 115][19 := 101][20 := 114][21 := 116][22 := 74][23 := 87][24 := 75], 25)), $1_bcs_serialize'$1_jwks_PatchUpsertJWK'($t2)));

    // assume from_bcs::deserializable<0x1::jwks::PatchUpsertJWK>(select copyable_any::Any.data<0x1::copyable_any::Any>($t3)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:409:22+50
    assume $1_from_bcs_deserializable'$1_jwks_PatchUpsertJWK'($t3->$data);

    // $t3 := opaque end: copyable_any::pack<0x1::jwks::PatchUpsertJWK>($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:409:22+50

    // $t4 := pack 0x1::jwks::Patch($t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:408:9+89
    assume {:print "$at(2,18907,18996)"} true;
    $t4 := $1_jwks_Patch($t3);

    // trace_return[0]($t4) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:408:9+89
    assume {:print "$track_return(79,9,0):", $t4} $t4 == $t4;

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:411:5+1
    assume {:print "$at(2,19001,19002)"} true;
L1:

    // return $t4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:411:5+1
    assume {:print "$at(2,19001,19002)"} true;
    $ret0 := $t4;
    return;

}

// fun jwks::new_rsa_jwk [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:414:5+288
procedure {:inline 1} $1_jwks_new_rsa_jwk(_$t0: $1_string_String, _$t1: $1_string_String, _$t2: $1_string_String, _$t3: $1_string_String) returns ($ret0: $1_jwks_JWK)
{
    // declare local variables
    var $t4: $1_string_String;
    var $t5: Vec (int);
    var $t6: $1_string_String;
    var $t7: int;
    var $t8: $1_jwks_RSA_JWK;
    var $t9: $1_copyable_any_Any;
    var $t10: $1_jwks_JWK;
    var $t0: $1_string_String;
    var $t1: $1_string_String;
    var $t2: $1_string_String;
    var $t3: $1_string_String;
    var $temp_0'$1_jwks_JWK': $1_jwks_JWK;
    var $temp_0'$1_string_String': $1_string_String;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // trace_local[kid]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:414:5+1
    assume {:print "$at(2,19053,19054)"} true;
    assume {:print "$track_local(79,10,0):", $t0} $t0 == $t0;

    // trace_local[alg]($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:414:5+1
    assume {:print "$track_local(79,10,1):", $t1} $t1 == $t1;

    // trace_local[e]($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:414:5+1
    assume {:print "$track_local(79,10,2):", $t2} $t2 == $t2;

    // trace_local[n]($t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:414:5+1
    assume {:print "$track_local(79,10,3):", $t3} $t3 == $t3;

    // $t5 := [82, 83, 65] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:418:27+6
    assume {:print "$at(2,19242,19248)"} true;
    $t5 := MakeVec3(82, 83, 65);
    assume $IsValid'vec'u8''($t5);

    // $t6 := string::utf8($t5) on_abort goto L2 with $t7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:418:22+12
    call $t6 := $1_string_utf8($t5);
    if ($abort_flag) {
        assume {:print "$at(2,19237,19249)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(79,10):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_local[$kty]($t6) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:418:22+12
    assume {:print "$track_local(79,10,4):", $t6} $t6 == $t6;

    // $t8 := pack 0x1::jwks::RSA_JWK($t0, $t6, $t1, $t2, $t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:416:41+138
    assume {:print "$at(2,19185,19323)"} true;
    $t8 := $1_jwks_RSA_JWK($t0, $t6, $t1, $t2, $t3);

    // $t9 := opaque begin: copyable_any::pack<0x1::jwks::RSA_JWK>($t8) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:416:22+158

    // assume WellFormed($t9) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:416:22+158
    assume $IsValid'$1_copyable_any_Any'($t9);

    // assume Eq<0x1::copyable_any::Any>($t9, pack copyable_any::Any(type_info::$type_name<0x1::jwks::RSA_JWK>(), bcs::serialize<0x1::jwks::RSA_JWK>($t8))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:416:22+158
    assume $IsEqual'$1_copyable_any_Any'($t9, $1_copyable_any_Any($1_string_String(Vec(DefaultVecMap()[0 := 48][1 := 120][2 := 49][3 := 58][4 := 58][5 := 106][6 := 119][7 := 107][8 := 115][9 := 58][10 := 58][11 := 82][12 := 83][13 := 65][14 := 95][15 := 74][16 := 87][17 := 75], 18)), $1_bcs_serialize'$1_jwks_RSA_JWK'($t8)));

    // assume from_bcs::deserializable<0x1::jwks::RSA_JWK>(select copyable_any::Any.data<0x1::copyable_any::Any>($t9)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:416:22+158
    assume $1_from_bcs_deserializable'$1_jwks_RSA_JWK'($t9->$data);

    // $t9 := opaque end: copyable_any::pack<0x1::jwks::RSA_JWK>($t8) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:416:22+158

    // $t10 := pack 0x1::jwks::JWK($t9) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:415:9+196
    assume {:print "$at(2,19139,19335)"} true;
    $t10 := $1_jwks_JWK($t9);

    // trace_return[0]($t10) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:415:9+196
    assume {:print "$track_return(79,10,0):", $t10} $t10 == $t10;

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:424:5+1
    assume {:print "$at(2,19340,19341)"} true;
L1:

    // return $t10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:424:5+1
    assume {:print "$at(2,19340,19341)"} true;
    $ret0 := $t10;
    return;

    // label L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:424:5+1
L2:

    // abort($t7) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:424:5+1
    assume {:print "$at(2,19340,19341)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun jwks::new_rsa_jwk [verification] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:414:5+288
procedure {:timeLimit 40} $1_jwks_new_rsa_jwk$verify(_$t0: $1_string_String, _$t1: $1_string_String, _$t2: $1_string_String, _$t3: $1_string_String) returns ($ret0: $1_jwks_JWK)
{
    // declare local variables
    var $t4: $1_string_String;
    var $t5: Vec (int);
    var $t6: $1_string_String;
    var $t7: int;
    var $t8: $1_jwks_RSA_JWK;
    var $t9: $1_copyable_any_Any;
    var $t10: $1_jwks_JWK;
    var $t0: $1_string_String;
    var $t1: $1_string_String;
    var $t2: $1_string_String;
    var $t3: $1_string_String;
    var $temp_0'$1_jwks_JWK': $1_jwks_JWK;
    var $temp_0'$1_string_String': $1_string_String;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:414:5+1
    assume {:print "$at(2,19053,19054)"} true;
    assume $IsValid'$1_string_String'($t0);

    // assume WellFormed($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:414:5+1
    assume $IsValid'$1_string_String'($t1);

    // assume WellFormed($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:414:5+1
    assume $IsValid'$1_string_String'($t2);

    // assume WellFormed($t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:414:5+1
    assume $IsValid'$1_string_String'($t3);

    // trace_local[kid]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:414:5+1
    assume {:print "$track_local(79,10,0):", $t0} $t0 == $t0;

    // trace_local[alg]($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:414:5+1
    assume {:print "$track_local(79,10,1):", $t1} $t1 == $t1;

    // trace_local[e]($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:414:5+1
    assume {:print "$track_local(79,10,2):", $t2} $t2 == $t2;

    // trace_local[n]($t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:414:5+1
    assume {:print "$track_local(79,10,3):", $t3} $t3 == $t3;

    // $t5 := [82, 83, 65] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:418:27+6
    assume {:print "$at(2,19242,19248)"} true;
    $t5 := MakeVec3(82, 83, 65);
    assume $IsValid'vec'u8''($t5);

    // $t6 := string::utf8($t5) on_abort goto L2 with $t7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:418:22+12
    call $t6 := $1_string_utf8($t5);
    if ($abort_flag) {
        assume {:print "$at(2,19237,19249)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(79,10):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_local[$kty]($t6) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:418:22+12
    assume {:print "$track_local(79,10,4):", $t6} $t6 == $t6;

    // $t8 := pack 0x1::jwks::RSA_JWK($t0, $t6, $t1, $t2, $t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:416:41+138
    assume {:print "$at(2,19185,19323)"} true;
    $t8 := $1_jwks_RSA_JWK($t0, $t6, $t1, $t2, $t3);

    // $t9 := opaque begin: copyable_any::pack<0x1::jwks::RSA_JWK>($t8) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:416:22+158

    // assume WellFormed($t9) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:416:22+158
    assume $IsValid'$1_copyable_any_Any'($t9);

    // assume Eq<0x1::copyable_any::Any>($t9, pack copyable_any::Any(type_info::$type_name<0x1::jwks::RSA_JWK>(), bcs::serialize<0x1::jwks::RSA_JWK>($t8))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:416:22+158
    assume $IsEqual'$1_copyable_any_Any'($t9, $1_copyable_any_Any($1_string_String(Vec(DefaultVecMap()[0 := 48][1 := 120][2 := 49][3 := 58][4 := 58][5 := 106][6 := 119][7 := 107][8 := 115][9 := 58][10 := 58][11 := 82][12 := 83][13 := 65][14 := 95][15 := 74][16 := 87][17 := 75], 18)), $1_bcs_serialize'$1_jwks_RSA_JWK'($t8)));

    // assume from_bcs::deserializable<0x1::jwks::RSA_JWK>(select copyable_any::Any.data<0x1::copyable_any::Any>($t9)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:416:22+158
    assume $1_from_bcs_deserializable'$1_jwks_RSA_JWK'($t9->$data);

    // $t9 := opaque end: copyable_any::pack<0x1::jwks::RSA_JWK>($t8) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:416:22+158

    // $t10 := pack 0x1::jwks::JWK($t9) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:415:9+196
    assume {:print "$at(2,19139,19335)"} true;
    $t10 := $1_jwks_JWK($t9);

    // trace_return[0]($t10) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:415:9+196
    assume {:print "$track_return(79,10,0):", $t10} $t10 == $t10;

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:424:5+1
    assume {:print "$at(2,19340,19341)"} true;
L1:

    // return $t10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:424:5+1
    assume {:print "$at(2,19340,19341)"} true;
    $ret0 := $t10;
    return;

    // label L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:424:5+1
L2:

    // abort($t7) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:424:5+1
    assume {:print "$at(2,19340,19341)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun jwks::patch_federated_jwks [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:183:5+1097
procedure {:inline 1} $1_jwks_patch_federated_jwks(_$t0: $signer, _$t1: Vec ($1_jwks_Patch)) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: $Mutation ($1_jwks_FederatedJWKs);
    var $t4: Vec ($1_jwks_Patch);
    var $t5: int;
    var $t6: int;
    var $t7: $1_jwks_Patch;
    var $t8: Vec (int);
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: bool;
    var $t14: Vec ($1_jwks_ProviderJWKs);
    var $t15: $1_jwks_AllProvidersJWKs;
    var $t16: $1_jwks_FederatedJWKs;
    var $t17: $Mutation ($1_jwks_FederatedJWKs);
    var $t18: int;
    var $t19: int;
    var $t20: bool;
    var $t21: $1_jwks_Patch;
    var $t22: int;
    var $t23: int;
    var $t24: $Mutation ($1_jwks_AllProvidersJWKs);
    var $t25: $1_jwks_FederatedJWKs;
    var $t26: Vec (int);
    var $t27: int;
    var $t28: int;
    var $t29: bool;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t0: $signer;
    var $t1: Vec ($1_jwks_Patch);
    var $temp_0'$1_jwks_FederatedJWKs': $1_jwks_FederatedJWKs;
    var $temp_0'$1_jwks_Patch': $1_jwks_Patch;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $temp_0'vec'$1_jwks_Patch'': Vec ($1_jwks_Patch);
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[jwk_owner]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:183:5+1
    assume {:print "$at(2,6880,6881)"} true;
    assume {:print "$track_local(79,12,0):", $t0} $t0 == $t0;

    // trace_local[patches]($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:183:5+1
    assume {:print "$track_local(79,12,1):", $t1} $t1 == $t1;

    // $t9 := signer::address_of($t0) on_abort goto L12 with $t10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:185:63+29
    assume {:print "$at(2,7153,7182)"} true;
    call $t9 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,7153,7182)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,12):", $t10} $t10 == $t10;
        goto L12;
    }

    // $t11 := system_addresses::is_aptos_framework_address($t9) on_abort goto L12 with $t10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:185:18+75
    call $t11 := $1_system_addresses_is_aptos_framework_address($t9);
    if ($abort_flag) {
        assume {:print "$at(2,7108,7183)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,12):", $t10} $t10 == $t10;
        goto L12;
    }

    // if ($t11) goto L0 else goto L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:185:17+76
    if ($t11) { goto L0; } else { goto L1; }

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:189:24+29
    assume {:print "$at(2,7300,7329)"} true;
L1:

    // $t12 := signer::address_of($t0) on_abort goto L12 with $t10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:189:24+29
    assume {:print "$at(2,7300,7329)"} true;
    call $t12 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,7300,7329)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,12):", $t10} $t10 == $t10;
        goto L12;
    }

    // trace_local[$t4]($t12) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:189:24+29
    assume {:print "$track_local(79,12,2):", $t12} $t12 == $t12;

    // $t13 := exists<0x1::jwks::FederatedJWKs>($t12) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:190:14+31
    assume {:print "$at(2,7344,7375)"} true;
    $t13 := $ResourceExists($1_jwks_FederatedJWKs_$memory, $t12);

    // if ($t13) goto L2 else goto L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:190:13+32
    if ($t13) { goto L2; } else { goto L3; }

    // label L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:191:21+9
    assume {:print "$at(2,7399,7408)"} true;
L3:

    // $t14 := vector::empty<0x1::jwks::ProviderJWKs>() on_abort goto L12 with $t10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:191:82+6
    assume {:print "$at(2,7460,7466)"} true;
    call $t14 := $1_vector_empty'$1_jwks_ProviderJWKs'();
    if ($abort_flag) {
        assume {:print "$at(2,7460,7466)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,12):", $t10} $t10 == $t10;
        goto L12;
    }

    // $t15 := pack 0x1::jwks::AllProvidersJWKs($t14) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:191:54+38
    $t15 := $1_jwks_AllProvidersJWKs($t14);

    // $t16 := pack 0x1::jwks::FederatedJWKs($t15) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:191:32+62
    $t16 := $1_jwks_FederatedJWKs($t15);

    // move_to<0x1::jwks::FederatedJWKs>($t16, $t0) on_abort goto L12 with $t10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:191:13+82
    if ($ResourceExists($1_jwks_FederatedJWKs_$memory, $t0->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_jwks_FederatedJWKs_$memory := $ResourceUpdate($1_jwks_FederatedJWKs_$memory, $t0->$addr, $t16);
    }
    if ($abort_flag) {
        assume {:print "$at(2,7391,7473)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,12):", $t10} $t10 == $t10;
        goto L12;
    }

    // label L9 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:194:24+42
    assume {:print "$at(2,7510,7552)"} true;
L9:

    // $t17 := borrow_global<0x1::jwks::FederatedJWKs>($t12) on_abort goto L12 with $t10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:194:24+42
    assume {:print "$at(2,7510,7552)"} true;
    if (!$ResourceExists($1_jwks_FederatedJWKs_$memory, $t12)) {
        call $ExecFailureAbort();
    } else {
        $t17 := $Mutation($Global($t12), EmptyVec(), $ResourceValue($1_jwks_FederatedJWKs_$memory, $t12));
    }
    if ($abort_flag) {
        assume {:print "$at(2,7510,7552)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,12):", $t10} $t10 == $t10;
        goto L12;
    }

    // trace_local[fed_jwks]($t17) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:194:24+42
    $temp_0'$1_jwks_FederatedJWKs' := $Dereference($t17);
    assume {:print "$track_local(79,12,3):", $temp_0'$1_jwks_FederatedJWKs'} $temp_0'$1_jwks_FederatedJWKs' == $temp_0'$1_jwks_FederatedJWKs';

    // trace_local[$t16]($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:195:30+8
    assume {:print "$at(2,7583,7591)"} true;
    assume {:print "$track_local(79,12,4):", $t1} $t1 == $t1;

    // $t18 := 0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:396:17+1
    assume {:print "$at(20,14433,14434)"} true;
    $t18 := 0;
    assume $IsValid'u64'($t18);

    // trace_local[i]($t18) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:396:17+1
    assume {:print "$track_local(79,12,5):", $t18} $t18 == $t18;

    // $t19 := vector::length<0x1::jwks::Patch>($t1) on_abort goto L12 with $t10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:397:19+13
    assume {:print "$at(20,14454,14467)"} true;
    call $t19 := $1_vector_length'$1_jwks_Patch'($t1);
    if ($abort_flag) {
        assume {:print "$at(20,14454,14467)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,12):", $t10} $t10 == $t10;
        goto L12;
    }

    // trace_local[len]($t19) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:397:19+13
    assume {:print "$track_local(79,12,6):", $t19} $t19 == $t19;

    // label L6 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume {:print "$at(20,14484,14485)"} true;
L6:

    // $t5 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume {:print "$at(20,14484,14485)"} true;
    havoc $t5;

    // assume WellFormed($t5) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume $IsValid'u64'($t5);

    // $t20 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    havoc $t20;

    // assume WellFormed($t20) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume $IsValid'bool'($t20);

    // $t21 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    havoc $t21;

    // assume WellFormed($t21) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume $IsValid'$1_jwks_Patch'($t21);

    // $t22 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    havoc $t22;

    // assume WellFormed($t22) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume $IsValid'u64'($t22);

    // $t23 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    havoc $t23;

    // assume WellFormed($t23) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume $IsValid'u64'($t23);

    // $t17 := havoc[mut]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    havoc $temp_0'$1_jwks_FederatedJWKs';
    $t17 := $UpdateMutation($t17, $temp_0'$1_jwks_FederatedJWKs');

    // assume And(WellFormed($t17), forall $elem: 0x1::jwks::ProviderJWKs: select jwks::AllProvidersJWKs.entries(select jwks::FederatedJWKs.jwks($t17)): forall i: num: TypeDomain<num>() where And(Le(0, i), Lt(i, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): forall j: num: TypeDomain<num>() where And(Lt(i, j), Lt(j, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): Neq<vector<u8>>(jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), i)), jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), j)))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume ($IsValid'$1_jwks_FederatedJWKs'($Dereference($t17)) && (var $range_0 := $Dereference($t17)->$jwks->$entries; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((forall i: int :: $IsValid'num'(i) ==> (((0 <= i) && (i < LenVec($elem->$jwks))))  ==> ((forall j: int :: $IsValid'num'(j) ==> (((i < j) && (j < LenVec($elem->$jwks))))  ==> (!$IsEqual'vec'u8''($1_jwks_$get_jwk_id(ReadVec($elem->$jwks, i)), $1_jwks_$get_jwk_id(ReadVec($elem->$jwks, j))))))))))));

    // $t24 := havoc[mut_all]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    havoc $t24;

    // assume And(WellFormed($t24), forall $elem: 0x1::jwks::ProviderJWKs: select jwks::AllProvidersJWKs.entries($t24): forall i: num: TypeDomain<num>() where And(Le(0, i), Lt(i, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): forall j: num: TypeDomain<num>() where And(Lt(i, j), Lt(j, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): Neq<vector<u8>>(jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), i)), jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), j)))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume ($IsValid'$1_jwks_AllProvidersJWKs'($Dereference($t24)) && (var $range_0 := $Dereference($t24)->$entries; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((forall i: int :: $IsValid'num'(i) ==> (((0 <= i) && (i < LenVec($elem->$jwks))))  ==> ((forall j: int :: $IsValid'num'(j) ==> (((i < j) && (j < LenVec($elem->$jwks))))  ==> (!$IsEqual'vec'u8''($1_jwks_$get_jwk_id(ReadVec($elem->$jwks, i)), $1_jwks_$get_jwk_id(ReadVec($elem->$jwks, j))))))))))));

    // trace_local[i]($t5) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume {:print "$info(): enter loop, variable(s) i havocked and reassigned"} true;
    assume {:print "$track_local(79,12,5):", $t5} $t5 == $t5;

    // assume Not(AbortFlag()) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume !$abort_flag;

    // $t20 := <($t5, $t19) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+7
    call $t20 := $Lt($t5, $t19);

    // if ($t20) goto L5 else goto L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:9+77
    if ($t20) { goto L5; } else { goto L4; }

    // label L5 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:399:15+4
    assume {:print "$at(20,14509,14513)"} true;
L5:

    // $t21 := vector::borrow<0x1::jwks::Patch>($t1, $t5) on_abort goto L12 with $t10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:399:15+14
    assume {:print "$at(20,14509,14523)"} true;
    call $t21 := $1_vector_borrow'$1_jwks_Patch'($t1, $t5);
    if ($abort_flag) {
        assume {:print "$at(20,14509,14523)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,12):", $t10} $t10 == $t10;
        goto L12;
    }

    // trace_local[$t22]($t21) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:399:15+14
    assume {:print "$track_local(79,12,7):", $t21} $t21 == $t21;

    // $t24 := borrow_field<0x1::jwks::FederatedJWKs>.jwks($t17) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:197:25+18
    assume {:print "$at(2,7661,7679)"} true;
    $t24 := $ChildMutation($t17, 0, $Dereference($t17)->$jwks);

    // jwks::apply_patch($t24, $t21) on_abort goto L12 with $t10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:197:13+39
    call $t24 := $1_jwks_apply_patch($t24, $t21);
    if ($abort_flag) {
        assume {:print "$at(2,7649,7688)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,12):", $t10} $t10 == $t10;
        goto L12;
    }

    // write_back[Reference($t17).jwks (0x1::jwks::AllProvidersJWKs)]($t24) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:197:13+39
    $t17 := $UpdateMutation($t17, $Update'$1_jwks_FederatedJWKs'_jwks($Dereference($t17), $Dereference($t24)));

    // $t22 := 1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:400:18+1
    assume {:print "$at(20,14543,14544)"} true;
    $t22 := 1;
    assume $IsValid'u64'($t22);

    // $t23 := +($t5, $t22) on_abort goto L12 with $t10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:400:13+6
    call $t23 := $AddU64($t5, $t22);
    if ($abort_flag) {
        assume {:print "$at(20,14538,14544)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,12):", $t10} $t10 == $t10;
        goto L12;
    }

    // trace_local[i]($t23) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:400:13+6
    assume {:print "$track_local(79,12,5):", $t23} $t23 == $t23;

    // goto L10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:9+77
    assume {:print "$at(20,14477,14554)"} true;
    goto L10;

    // label L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:9+77
L4:

    // $t25 := read_ref($t17) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:201:55+8
    assume {:print "$at(2,7848,7856)"} true;
    $t25 := $Dereference($t17);

    // pack_ref_deep($t17) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:201:55+8

    // write_back[0x1::jwks::FederatedJWKs@]($t17) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:201:55+8
    $1_jwks_FederatedJWKs_$memory := $ResourceUpdate($1_jwks_FederatedJWKs_$memory, $GlobalLocationAddress($t17),
        $Dereference($t17));

    // $t26 := bcs::to_bytes<0x1::jwks::FederatedJWKs>($t25) on_abort goto L12 with $t10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:201:41+23
    call $t26 := $1_bcs_to_bytes'$1_jwks_FederatedJWKs'($t25);
    if ($abort_flag) {
        assume {:print "$at(2,7834,7857)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,12):", $t10} $t10 == $t10;
        goto L12;
    }

    // trace_local[$t32]($t26) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:201:41+23
    assume {:print "$track_local(79,12,8):", $t26} $t26 == $t26;

    // $t27 := vector::length<u8>($t26) on_abort goto L12 with $t10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:201:25+40
    call $t27 := $1_vector_length'u8'($t26);
    if ($abort_flag) {
        assume {:print "$at(2,7818,7858)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,12):", $t10} $t10 == $t10;
        goto L12;
    }

    // $t28 := 2048 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:202:29+29
    assume {:print "$at(2,7888,7917)"} true;
    $t28 := 2048;
    assume $IsValid'u64'($t28);

    // $t29 := <($t27, $t28) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:202:17+41
    call $t29 := $Lt($t27, $t28);

    // if ($t29) goto L8 else goto L7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:202:9+6
    if ($t29) { goto L8; } else { goto L7; }

    // label L8 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:183:104+998
    assume {:print "$at(2,6979,7977)"} true;
L8:

    // goto L11 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:183:104+998
    assume {:print "$at(2,6979,7977)"} true;
    goto L11;

    // label L7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:202:84+25
    assume {:print "$at(2,7943,7968)"} true;
L7:

    // $t30 := 8 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:202:84+25
    assume {:print "$at(2,7943,7968)"} true;
    $t30 := 8;
    assume $IsValid'u64'($t30);

    // $t31 := error::invalid_argument($t30) on_abort goto L12 with $t10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:202:60+50
    call $t31 := $1_error_invalid_argument($t30);
    if ($abort_flag) {
        assume {:print "$at(2,7919,7969)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,12):", $t10} $t10 == $t10;
        goto L12;
    }

    // trace_abort($t31) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:202:9+6
    assume {:print "$at(2,7868,7874)"} true;
    assume {:print "$track_abort(79,12):", $t31} $t31 == $t31;

    // $t10 := move($t31) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:202:9+6
    $t10 := $t31;

    // goto L12 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:202:9+6
    goto L12;

    // label L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:190:9+145
    assume {:print "$at(2,7339,7484)"} true;
L2:

    // goto L9 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:190:9+145
    assume {:print "$at(2,7339,7484)"} true;
    goto L9;

    // label L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:185:9+6
    assume {:print "$at(2,7099,7105)"} true;
L0:

    // $t32 := 7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:186:37+42
    assume {:print "$at(2,7221,7263)"} true;
    $t32 := 7;
    assume $IsValid'u64'($t32);

    // $t33 := error::invalid_argument($t32) on_abort goto L12 with $t10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:186:13+67
    call $t33 := $1_error_invalid_argument($t32);
    if ($abort_flag) {
        assume {:print "$at(2,7197,7264)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,12):", $t10} $t10 == $t10;
        goto L12;
    }

    // trace_abort($t33) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:185:9+6
    assume {:print "$at(2,7099,7105)"} true;
    assume {:print "$track_abort(79,12):", $t33} $t33 == $t33;

    // $t10 := move($t33) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:185:9+6
    $t10 := $t33;

    // goto L12 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:185:9+6
    goto L12;

    // label L10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:185:9+6
    // Loop invariant checking block for the loop started with header: L6
L10:

    // stop() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:185:9+6
    assume {:print "$at(2,7099,7105)"} true;
    assume false;
    return;

    // label L11 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:203:5+1
    assume {:print "$at(2,7976,7977)"} true;
L11:

    // return () at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:203:5+1
    assume {:print "$at(2,7976,7977)"} true;
    return;

    // label L12 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:203:5+1
L12:

    // abort($t10) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:203:5+1
    assume {:print "$at(2,7976,7977)"} true;
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun jwks::patch_federated_jwks [verification] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:183:5+1097
procedure {:timeLimit 40} $1_jwks_patch_federated_jwks$verify(_$t0: $signer, _$t1: Vec ($1_jwks_Patch)) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: $Mutation ($1_jwks_FederatedJWKs);
    var $t4: Vec ($1_jwks_Patch);
    var $t5: int;
    var $t6: int;
    var $t7: $1_jwks_Patch;
    var $t8: Vec (int);
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: bool;
    var $t14: Vec ($1_jwks_ProviderJWKs);
    var $t15: $1_jwks_AllProvidersJWKs;
    var $t16: $1_jwks_FederatedJWKs;
    var $t17: $Mutation ($1_jwks_FederatedJWKs);
    var $t18: int;
    var $t19: int;
    var $t20: bool;
    var $t21: $1_jwks_Patch;
    var $t22: int;
    var $t23: int;
    var $t24: $Mutation ($1_jwks_AllProvidersJWKs);
    var $t25: $1_jwks_FederatedJWKs;
    var $t26: Vec (int);
    var $t27: int;
    var $t28: int;
    var $t29: bool;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t0: $signer;
    var $t1: Vec ($1_jwks_Patch);
    var $temp_0'$1_jwks_FederatedJWKs': $1_jwks_FederatedJWKs;
    var $temp_0'$1_jwks_Patch': $1_jwks_Patch;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $temp_0'vec'$1_jwks_Patch'': Vec ($1_jwks_Patch);
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:183:5+1
    assume {:print "$at(2,6880,6881)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:183:5+1
    assume $IsValid'vec'$1_jwks_Patch''($t1);

    // assume forall $rsc: 0x1::jwks::FederatedJWKs: ResourceDomain<0x1::jwks::FederatedJWKs>(): And(WellFormed($rsc), forall $elem: 0x1::jwks::ProviderJWKs: select jwks::AllProvidersJWKs.entries(select jwks::FederatedJWKs.jwks($rsc)): forall i: num: TypeDomain<num>() where And(Le(0, i), Lt(i, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): forall j: num: TypeDomain<num>() where And(Lt(i, j), Lt(j, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): Neq<vector<u8>>(jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), i)), jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), j)))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:183:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_jwks_FederatedJWKs_$memory, $a_0)}(var $rsc := $ResourceValue($1_jwks_FederatedJWKs_$memory, $a_0);
    (($IsValid'$1_jwks_FederatedJWKs'($rsc) && (var $range_1 := $rsc->$jwks->$entries; (forall $i_2: int :: InRangeVec($range_1, $i_2) ==> (var $elem := ReadVec($range_1, $i_2);
    ((forall i: int :: $IsValid'num'(i) ==> (((0 <= i) && (i < LenVec($elem->$jwks))))  ==> ((forall j: int :: $IsValid'num'(j) ==> (((i < j) && (j < LenVec($elem->$jwks))))  ==> (!$IsEqual'vec'u8''($1_jwks_$get_jwk_id(ReadVec($elem->$jwks, i)), $1_jwks_$get_jwk_id(ReadVec($elem->$jwks, j)))))))))))))));

    // trace_local[jwk_owner]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:183:5+1
    assume {:print "$track_local(79,12,0):", $t0} $t0 == $t0;

    // trace_local[patches]($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:183:5+1
    assume {:print "$track_local(79,12,1):", $t1} $t1 == $t1;

    // $t9 := signer::address_of($t0) on_abort goto L12 with $t10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:185:63+29
    assume {:print "$at(2,7153,7182)"} true;
    call $t9 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,7153,7182)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,12):", $t10} $t10 == $t10;
        goto L12;
    }

    // $t11 := system_addresses::is_aptos_framework_address($t9) on_abort goto L12 with $t10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:185:18+75
    call $t11 := $1_system_addresses_is_aptos_framework_address($t9);
    if ($abort_flag) {
        assume {:print "$at(2,7108,7183)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,12):", $t10} $t10 == $t10;
        goto L12;
    }

    // if ($t11) goto L0 else goto L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:185:17+76
    if ($t11) { goto L0; } else { goto L1; }

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:189:24+29
    assume {:print "$at(2,7300,7329)"} true;
L1:

    // $t12 := signer::address_of($t0) on_abort goto L12 with $t10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:189:24+29
    assume {:print "$at(2,7300,7329)"} true;
    call $t12 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,7300,7329)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,12):", $t10} $t10 == $t10;
        goto L12;
    }

    // trace_local[$t4]($t12) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:189:24+29
    assume {:print "$track_local(79,12,2):", $t12} $t12 == $t12;

    // $t13 := exists<0x1::jwks::FederatedJWKs>($t12) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:190:14+31
    assume {:print "$at(2,7344,7375)"} true;
    $t13 := $ResourceExists($1_jwks_FederatedJWKs_$memory, $t12);

    // if ($t13) goto L2 else goto L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:190:13+32
    if ($t13) { goto L2; } else { goto L3; }

    // label L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:191:21+9
    assume {:print "$at(2,7399,7408)"} true;
L3:

    // $t14 := vector::empty<0x1::jwks::ProviderJWKs>() on_abort goto L12 with $t10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:191:82+6
    assume {:print "$at(2,7460,7466)"} true;
    call $t14 := $1_vector_empty'$1_jwks_ProviderJWKs'();
    if ($abort_flag) {
        assume {:print "$at(2,7460,7466)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,12):", $t10} $t10 == $t10;
        goto L12;
    }

    // $t15 := pack 0x1::jwks::AllProvidersJWKs($t14) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:191:54+38
    $t15 := $1_jwks_AllProvidersJWKs($t14);

    // $t16 := pack 0x1::jwks::FederatedJWKs($t15) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:191:32+62
    $t16 := $1_jwks_FederatedJWKs($t15);

    // move_to<0x1::jwks::FederatedJWKs>($t16, $t0) on_abort goto L12 with $t10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:191:13+82
    if ($ResourceExists($1_jwks_FederatedJWKs_$memory, $t0->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_jwks_FederatedJWKs_$memory := $ResourceUpdate($1_jwks_FederatedJWKs_$memory, $t0->$addr, $t16);
    }
    if ($abort_flag) {
        assume {:print "$at(2,7391,7473)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,12):", $t10} $t10 == $t10;
        goto L12;
    }

    // label L9 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:194:24+42
    assume {:print "$at(2,7510,7552)"} true;
L9:

    // $t17 := borrow_global<0x1::jwks::FederatedJWKs>($t12) on_abort goto L12 with $t10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:194:24+42
    assume {:print "$at(2,7510,7552)"} true;
    if (!$ResourceExists($1_jwks_FederatedJWKs_$memory, $t12)) {
        call $ExecFailureAbort();
    } else {
        $t17 := $Mutation($Global($t12), EmptyVec(), $ResourceValue($1_jwks_FederatedJWKs_$memory, $t12));
    }
    if ($abort_flag) {
        assume {:print "$at(2,7510,7552)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,12):", $t10} $t10 == $t10;
        goto L12;
    }

    // trace_local[fed_jwks]($t17) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:194:24+42
    $temp_0'$1_jwks_FederatedJWKs' := $Dereference($t17);
    assume {:print "$track_local(79,12,3):", $temp_0'$1_jwks_FederatedJWKs'} $temp_0'$1_jwks_FederatedJWKs' == $temp_0'$1_jwks_FederatedJWKs';

    // trace_local[$t16]($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:195:30+8
    assume {:print "$at(2,7583,7591)"} true;
    assume {:print "$track_local(79,12,4):", $t1} $t1 == $t1;

    // $t18 := 0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:396:17+1
    assume {:print "$at(20,14433,14434)"} true;
    $t18 := 0;
    assume $IsValid'u64'($t18);

    // trace_local[i]($t18) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:396:17+1
    assume {:print "$track_local(79,12,5):", $t18} $t18 == $t18;

    // $t19 := vector::length<0x1::jwks::Patch>($t1) on_abort goto L12 with $t10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:397:19+13
    assume {:print "$at(20,14454,14467)"} true;
    call $t19 := $1_vector_length'$1_jwks_Patch'($t1);
    if ($abort_flag) {
        assume {:print "$at(20,14454,14467)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,12):", $t10} $t10 == $t10;
        goto L12;
    }

    // trace_local[len]($t19) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:397:19+13
    assume {:print "$track_local(79,12,6):", $t19} $t19 == $t19;

    // label L6 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume {:print "$at(20,14484,14485)"} true;
L6:

    // $t5 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume {:print "$at(20,14484,14485)"} true;
    havoc $t5;

    // assume WellFormed($t5) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume $IsValid'u64'($t5);

    // $t20 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    havoc $t20;

    // assume WellFormed($t20) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume $IsValid'bool'($t20);

    // $t21 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    havoc $t21;

    // assume WellFormed($t21) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume $IsValid'$1_jwks_Patch'($t21);

    // $t22 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    havoc $t22;

    // assume WellFormed($t22) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume $IsValid'u64'($t22);

    // $t23 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    havoc $t23;

    // assume WellFormed($t23) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume $IsValid'u64'($t23);

    // $t17 := havoc[mut]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    havoc $temp_0'$1_jwks_FederatedJWKs';
    $t17 := $UpdateMutation($t17, $temp_0'$1_jwks_FederatedJWKs');

    // assume And(WellFormed($t17), forall $elem: 0x1::jwks::ProviderJWKs: select jwks::AllProvidersJWKs.entries(select jwks::FederatedJWKs.jwks($t17)): forall i: num: TypeDomain<num>() where And(Le(0, i), Lt(i, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): forall j: num: TypeDomain<num>() where And(Lt(i, j), Lt(j, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): Neq<vector<u8>>(jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), i)), jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), j)))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume ($IsValid'$1_jwks_FederatedJWKs'($Dereference($t17)) && (var $range_0 := $Dereference($t17)->$jwks->$entries; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((forall i: int :: $IsValid'num'(i) ==> (((0 <= i) && (i < LenVec($elem->$jwks))))  ==> ((forall j: int :: $IsValid'num'(j) ==> (((i < j) && (j < LenVec($elem->$jwks))))  ==> (!$IsEqual'vec'u8''($1_jwks_$get_jwk_id(ReadVec($elem->$jwks, i)), $1_jwks_$get_jwk_id(ReadVec($elem->$jwks, j))))))))))));

    // $t24 := havoc[mut_all]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    havoc $t24;

    // assume And(WellFormed($t24), forall $elem: 0x1::jwks::ProviderJWKs: select jwks::AllProvidersJWKs.entries($t24): forall i: num: TypeDomain<num>() where And(Le(0, i), Lt(i, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): forall j: num: TypeDomain<num>() where And(Lt(i, j), Lt(j, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): Neq<vector<u8>>(jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), i)), jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), j)))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume ($IsValid'$1_jwks_AllProvidersJWKs'($Dereference($t24)) && (var $range_0 := $Dereference($t24)->$entries; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((forall i: int :: $IsValid'num'(i) ==> (((0 <= i) && (i < LenVec($elem->$jwks))))  ==> ((forall j: int :: $IsValid'num'(j) ==> (((i < j) && (j < LenVec($elem->$jwks))))  ==> (!$IsEqual'vec'u8''($1_jwks_$get_jwk_id(ReadVec($elem->$jwks, i)), $1_jwks_$get_jwk_id(ReadVec($elem->$jwks, j))))))))))));

    // trace_local[i]($t5) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume {:print "$info(): enter loop, variable(s) i havocked and reassigned"} true;
    assume {:print "$track_local(79,12,5):", $t5} $t5 == $t5;

    // assume Not(AbortFlag()) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume !$abort_flag;

    // $t20 := <($t5, $t19) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+7
    call $t20 := $Lt($t5, $t19);

    // if ($t20) goto L5 else goto L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:9+77
    if ($t20) { goto L5; } else { goto L4; }

    // label L5 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:399:15+4
    assume {:print "$at(20,14509,14513)"} true;
L5:

    // $t21 := vector::borrow<0x1::jwks::Patch>($t1, $t5) on_abort goto L12 with $t10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:399:15+14
    assume {:print "$at(20,14509,14523)"} true;
    call $t21 := $1_vector_borrow'$1_jwks_Patch'($t1, $t5);
    if ($abort_flag) {
        assume {:print "$at(20,14509,14523)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,12):", $t10} $t10 == $t10;
        goto L12;
    }

    // trace_local[$t22]($t21) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:399:15+14
    assume {:print "$track_local(79,12,7):", $t21} $t21 == $t21;

    // $t24 := borrow_field<0x1::jwks::FederatedJWKs>.jwks($t17) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:197:25+18
    assume {:print "$at(2,7661,7679)"} true;
    $t24 := $ChildMutation($t17, 0, $Dereference($t17)->$jwks);

    // jwks::apply_patch($t24, $t21) on_abort goto L12 with $t10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:197:13+39
    call $t24 := $1_jwks_apply_patch($t24, $t21);
    if ($abort_flag) {
        assume {:print "$at(2,7649,7688)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,12):", $t10} $t10 == $t10;
        goto L12;
    }

    // write_back[Reference($t17).jwks (0x1::jwks::AllProvidersJWKs)]($t24) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:197:13+39
    $t17 := $UpdateMutation($t17, $Update'$1_jwks_FederatedJWKs'_jwks($Dereference($t17), $Dereference($t24)));

    // $t22 := 1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:400:18+1
    assume {:print "$at(20,14543,14544)"} true;
    $t22 := 1;
    assume $IsValid'u64'($t22);

    // $t23 := +($t5, $t22) on_abort goto L12 with $t10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:400:13+6
    call $t23 := $AddU64($t5, $t22);
    if ($abort_flag) {
        assume {:print "$at(20,14538,14544)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,12):", $t10} $t10 == $t10;
        goto L12;
    }

    // trace_local[i]($t23) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:400:13+6
    assume {:print "$track_local(79,12,5):", $t23} $t23 == $t23;

    // goto L10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:9+77
    assume {:print "$at(20,14477,14554)"} true;
    goto L10;

    // label L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:9+77
L4:

    // $t25 := read_ref($t17) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:201:55+8
    assume {:print "$at(2,7848,7856)"} true;
    $t25 := $Dereference($t17);

    // assert forall $elem: 0x1::jwks::ProviderJWKs: select jwks::AllProvidersJWKs.entries(select jwks::FederatedJWKs.jwks($t17)): forall i: num: TypeDomain<num>() where And(Le(0, i), Lt(i, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): forall j: num: TypeDomain<num>() where And(Lt(i, j), Lt(j, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): Neq<vector<u8>>(jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), i)), jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), j))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.spec.move:9:9+170
    // data invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.spec.move:9:9+170
    assume {:print "$at(3,288,458)"} true;
    assert {:msg "assert_failed(3,288,458): data invariant does not hold"}
      (var $range_0 := $Dereference($t17)->$jwks->$entries; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((forall i: int :: $IsValid'num'(i) ==> (((0 <= i) && (i < LenVec($elem->$jwks))))  ==> ((forall j: int :: $IsValid'num'(j) ==> (((i < j) && (j < LenVec($elem->$jwks))))  ==> (!$IsEqual'vec'u8''($1_jwks_$get_jwk_id(ReadVec($elem->$jwks, i)), $1_jwks_$get_jwk_id(ReadVec($elem->$jwks, j)))))))))));

    // write_back[0x1::jwks::FederatedJWKs@]($t17) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:201:55+8
    assume {:print "$at(2,7848,7856)"} true;
    $1_jwks_FederatedJWKs_$memory := $ResourceUpdate($1_jwks_FederatedJWKs_$memory, $GlobalLocationAddress($t17),
        $Dereference($t17));

    // $t26 := bcs::to_bytes<0x1::jwks::FederatedJWKs>($t25) on_abort goto L12 with $t10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:201:41+23
    call $t26 := $1_bcs_to_bytes'$1_jwks_FederatedJWKs'($t25);
    if ($abort_flag) {
        assume {:print "$at(2,7834,7857)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,12):", $t10} $t10 == $t10;
        goto L12;
    }

    // trace_local[$t32]($t26) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:201:41+23
    assume {:print "$track_local(79,12,8):", $t26} $t26 == $t26;

    // $t27 := vector::length<u8>($t26) on_abort goto L12 with $t10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:201:25+40
    call $t27 := $1_vector_length'u8'($t26);
    if ($abort_flag) {
        assume {:print "$at(2,7818,7858)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,12):", $t10} $t10 == $t10;
        goto L12;
    }

    // $t28 := 2048 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:202:29+29
    assume {:print "$at(2,7888,7917)"} true;
    $t28 := 2048;
    assume $IsValid'u64'($t28);

    // $t29 := <($t27, $t28) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:202:17+41
    call $t29 := $Lt($t27, $t28);

    // if ($t29) goto L8 else goto L7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:202:9+6
    if ($t29) { goto L8; } else { goto L7; }

    // label L8 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:183:104+998
    assume {:print "$at(2,6979,7977)"} true;
L8:

    // goto L11 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:183:104+998
    assume {:print "$at(2,6979,7977)"} true;
    goto L11;

    // label L7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:202:84+25
    assume {:print "$at(2,7943,7968)"} true;
L7:

    // $t30 := 8 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:202:84+25
    assume {:print "$at(2,7943,7968)"} true;
    $t30 := 8;
    assume $IsValid'u64'($t30);

    // $t31 := error::invalid_argument($t30) on_abort goto L12 with $t10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:202:60+50
    call $t31 := $1_error_invalid_argument($t30);
    if ($abort_flag) {
        assume {:print "$at(2,7919,7969)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,12):", $t10} $t10 == $t10;
        goto L12;
    }

    // trace_abort($t31) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:202:9+6
    assume {:print "$at(2,7868,7874)"} true;
    assume {:print "$track_abort(79,12):", $t31} $t31 == $t31;

    // $t10 := move($t31) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:202:9+6
    $t10 := $t31;

    // goto L12 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:202:9+6
    goto L12;

    // label L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:190:9+145
    assume {:print "$at(2,7339,7484)"} true;
L2:

    // goto L9 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:190:9+145
    assume {:print "$at(2,7339,7484)"} true;
    goto L9;

    // label L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:185:9+6
    assume {:print "$at(2,7099,7105)"} true;
L0:

    // $t32 := 7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:186:37+42
    assume {:print "$at(2,7221,7263)"} true;
    $t32 := 7;
    assume $IsValid'u64'($t32);

    // $t33 := error::invalid_argument($t32) on_abort goto L12 with $t10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:186:13+67
    call $t33 := $1_error_invalid_argument($t32);
    if ($abort_flag) {
        assume {:print "$at(2,7197,7264)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,12):", $t10} $t10 == $t10;
        goto L12;
    }

    // trace_abort($t33) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:185:9+6
    assume {:print "$at(2,7099,7105)"} true;
    assume {:print "$track_abort(79,12):", $t33} $t33 == $t33;

    // $t10 := move($t33) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:185:9+6
    $t10 := $t33;

    // goto L12 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:185:9+6
    goto L12;

    // label L10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:185:9+6
    // Loop invariant checking block for the loop started with header: L6
L10:

    // stop() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:185:9+6
    assume {:print "$at(2,7099,7105)"} true;
    assume false;
    return;

    // label L11 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:203:5+1
    assume {:print "$at(2,7976,7977)"} true;
L11:

    // return () at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:203:5+1
    assume {:print "$at(2,7976,7977)"} true;
    return;

    // label L12 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:203:5+1
L12:

    // abort($t10) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:203:5+1
    assume {:print "$at(2,7976,7977)"} true;
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun jwks::regenerate_patched_jwks [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:523:5+445
procedure {:inline 1} $1_jwks_regenerate_patched_jwks() returns ()
{
    // declare local variables
    var $t0: $1_jwks_AllProvidersJWKs;
    var $t1: Vec ($1_jwks_Patch);
    var $t2: int;
    var $t3: int;
    var $t4: $1_jwks_Patch;
    var $t5: int;
    var $t6: $1_jwks_ObservedJWKs;
    var $t7: int;
    var $t8: int;
    var $t9: $1_jwks_Patches;
    var $t10: Vec ($1_jwks_Patch);
    var $t11: int;
    var $t12: int;
    var $t13: bool;
    var $t14: $1_jwks_Patch;
    var $t15: int;
    var $t16: int;
    var $t17: $Mutation ($1_jwks_AllProvidersJWKs);
    var $t18: $1_jwks_AllProvidersJWKs;
    var $t19: $1_jwks_PatchedJWKs;
    var $t20: int;
    var $t21: $Mutation ($1_jwks_PatchedJWKs);
    var $temp_0'$1_jwks_AllProvidersJWKs': $1_jwks_AllProvidersJWKs;
    var $temp_0'$1_jwks_Patch': $1_jwks_Patch;
    var $temp_0'u64': int;
    var $temp_0'vec'$1_jwks_Patch'': Vec ($1_jwks_Patch);

    // bytecode translation starts here
    // $t5 := 0x1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:524:48+16
    assume {:print "$at(2,24207,24223)"} true;
    $t5 := 1;
    assume $IsValid'address'($t5);

    // $t6 := get_global<0x1::jwks::ObservedJWKs>($t5) on_abort goto L5 with $t7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:524:20+45
    if (!$ResourceExists($1_jwks_ObservedJWKs_$memory, $t5)) {
        call $ExecFailureAbort();
    } else {
        $t6 := $ResourceValue($1_jwks_ObservedJWKs_$memory, $t5);
    }
    if ($abort_flag) {
        assume {:print "$at(2,24179,24224)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(79,13):", $t7} $t7 == $t7;
        goto L5;
    }

    // $t0 := get_field<0x1::jwks::ObservedJWKs>.jwks($t6) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:524:20+50
    $t0 := $t6->$jwks;

    // trace_local[jwks]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:524:20+50
    assume {:print "$track_local(79,13,0):", $t0} $t0 == $t0;

    // $t8 := 0x1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:525:46+16
    assume {:print "$at(2,24276,24292)"} true;
    $t8 := 1;
    assume $IsValid'address'($t8);

    // $t9 := get_global<0x1::jwks::Patches>($t8) on_abort goto L5 with $t7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:525:23+40
    if (!$ResourceExists($1_jwks_Patches_$memory, $t8)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $ResourceValue($1_jwks_Patches_$memory, $t8);
    }
    if ($abort_flag) {
        assume {:print "$at(2,24253,24293)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(79,13):", $t7} $t7 == $t7;
        goto L5;
    }

    // $t10 := get_field<0x1::jwks::Patches>.patches($t9) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:526:30+16
    assume {:print "$at(2,24324,24340)"} true;
    $t10 := $t9->$patches;

    // trace_local[$t7]($t10) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:526:30+16
    assume {:print "$track_local(79,13,1):", $t10} $t10 == $t10;

    // $t11 := 0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:396:17+1
    assume {:print "$at(20,14433,14434)"} true;
    $t11 := 0;
    assume $IsValid'u64'($t11);

    // trace_local[i]($t11) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:396:17+1
    assume {:print "$track_local(79,13,2):", $t11} $t11 == $t11;

    // $t12 := vector::length<0x1::jwks::Patch>($t10) on_abort goto L5 with $t7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:397:19+13
    assume {:print "$at(20,14454,14467)"} true;
    call $t12 := $1_vector_length'$1_jwks_Patch'($t10);
    if ($abort_flag) {
        assume {:print "$at(20,14454,14467)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(79,13):", $t7} $t7 == $t7;
        goto L5;
    }

    // trace_local[len]($t12) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:397:19+13
    assume {:print "$track_local(79,13,3):", $t12} $t12 == $t12;

    // label L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume {:print "$at(20,14484,14485)"} true;
L2:

    // $t0 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume {:print "$at(20,14484,14485)"} true;
    havoc $t0;

    // assume And(WellFormed($t0), forall $elem: 0x1::jwks::ProviderJWKs: select jwks::AllProvidersJWKs.entries($t0): forall i: num: TypeDomain<num>() where And(Le(0, i), Lt(i, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): forall j: num: TypeDomain<num>() where And(Lt(i, j), Lt(j, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): Neq<vector<u8>>(jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), i)), jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), j)))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume ($IsValid'$1_jwks_AllProvidersJWKs'($t0) && (var $range_0 := $t0->$entries; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((forall i: int :: $IsValid'num'(i) ==> (((0 <= i) && (i < LenVec($elem->$jwks))))  ==> ((forall j: int :: $IsValid'num'(j) ==> (((i < j) && (j < LenVec($elem->$jwks))))  ==> (!$IsEqual'vec'u8''($1_jwks_$get_jwk_id(ReadVec($elem->$jwks, i)), $1_jwks_$get_jwk_id(ReadVec($elem->$jwks, j))))))))))));

    // $t2 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    havoc $t2;

    // assume WellFormed($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume $IsValid'u64'($t2);

    // $t13 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    havoc $t13;

    // assume WellFormed($t13) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume $IsValid'bool'($t13);

    // $t14 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    havoc $t14;

    // assume WellFormed($t14) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume $IsValid'$1_jwks_Patch'($t14);

    // $t15 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    havoc $t15;

    // assume WellFormed($t15) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume $IsValid'u64'($t15);

    // $t16 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    havoc $t16;

    // assume WellFormed($t16) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume $IsValid'u64'($t16);

    // $t17 := havoc[mut_all]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    havoc $t17;

    // assume And(WellFormed($t17), forall $elem: 0x1::jwks::ProviderJWKs: select jwks::AllProvidersJWKs.entries($t17): forall i: num: TypeDomain<num>() where And(Le(0, i), Lt(i, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): forall j: num: TypeDomain<num>() where And(Lt(i, j), Lt(j, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): Neq<vector<u8>>(jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), i)), jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), j)))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume ($IsValid'$1_jwks_AllProvidersJWKs'($Dereference($t17)) && (var $range_0 := $Dereference($t17)->$entries; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((forall i: int :: $IsValid'num'(i) ==> (((0 <= i) && (i < LenVec($elem->$jwks))))  ==> ((forall j: int :: $IsValid'num'(j) ==> (((i < j) && (j < LenVec($elem->$jwks))))  ==> (!$IsEqual'vec'u8''($1_jwks_$get_jwk_id(ReadVec($elem->$jwks, i)), $1_jwks_$get_jwk_id(ReadVec($elem->$jwks, j))))))))))));

    // trace_local[jwks]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume {:print "$info(): enter loop, variable(s) jwks, i havocked and reassigned"} true;
    assume {:print "$track_local(79,13,0):", $t0} $t0 == $t0;

    // trace_local[i]($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume {:print "$track_local(79,13,2):", $t2} $t2 == $t2;

    // assume Not(AbortFlag()) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+1
    assume !$abort_flag;

    // $t13 := <($t2, $t12) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:16+7
    call $t13 := $Lt($t2, $t12);

    // if ($t13) goto L1 else goto L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:9+77
    if ($t13) { goto L1; } else { goto L0; }

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:399:15+4
    assume {:print "$at(20,14509,14513)"} true;
L1:

    // $t14 := vector::borrow<0x1::jwks::Patch>($t10, $t2) on_abort goto L5 with $t7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:399:15+14
    assume {:print "$at(20,14509,14523)"} true;
    call $t14 := $1_vector_borrow'$1_jwks_Patch'($t10, $t2);
    if ($abort_flag) {
        assume {:print "$at(20,14509,14523)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(79,13):", $t7} $t7 == $t7;
        goto L5;
    }

    // trace_local[$t13]($t14) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:399:15+14
    assume {:print "$track_local(79,13,4):", $t14} $t14 == $t14;

    // $t17 := borrow_local($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:528:25+9
    assume {:print "$at(2,24410,24419)"} true;
    $t17 := $Mutation($Local(0), EmptyVec(), $t0);

    // jwks::apply_patch($t17, $t14) on_abort goto L5 with $t7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:528:13+30
    call $t17 := $1_jwks_apply_patch($t17, $t14);
    if ($abort_flag) {
        assume {:print "$at(2,24398,24428)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(79,13):", $t7} $t7 == $t7;
        goto L5;
    }

    // pack_ref_deep($t17) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:528:13+30

    // write_back[LocalRoot($t0)@]($t17) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:528:13+30
    $t0 := $Dereference($t17);

    // trace_local[jwks]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:528:13+30
    assume {:print "$track_local(79,13,0):", $t0} $t0 == $t0;

    // $t15 := 1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:400:18+1
    assume {:print "$at(20,14543,14544)"} true;
    $t15 := 1;
    assume $IsValid'u64'($t15);

    // $t16 := +($t2, $t15) on_abort goto L5 with $t7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:400:13+6
    call $t16 := $AddU64($t2, $t15);
    if ($abort_flag) {
        assume {:print "$at(20,14538,14544)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(79,13):", $t7} $t7 == $t7;
        goto L5;
    }

    // trace_local[i]($t16) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:400:13+6
    assume {:print "$track_local(79,13,2):", $t16} $t16 == $t16;

    // goto L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:9+77
    assume {:print "$at(20,14477,14554)"} true;
    goto L3;

    // label L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:9+77
L0:

    // $t18 := move($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:530:61+20
    assume {:print "$at(2,24502,24522)"} true;
    $t18 := $t0;

    // $t19 := pack 0x1::jwks::PatchedJWKs($t18) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:530:61+20
    $t19 := $1_jwks_PatchedJWKs($t18);

    // $t20 := 0x1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:530:41+16
    $t20 := 1;
    assume $IsValid'address'($t20);

    // $t21 := borrow_global<0x1::jwks::PatchedJWKs>($t20) on_abort goto L5 with $t7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:530:10+48
    if (!$ResourceExists($1_jwks_PatchedJWKs_$memory, $t20)) {
        call $ExecFailureAbort();
    } else {
        $t21 := $Mutation($Global($t20), EmptyVec(), $ResourceValue($1_jwks_PatchedJWKs_$memory, $t20));
    }
    if ($abort_flag) {
        assume {:print "$at(2,24451,24499)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(79,13):", $t7} $t7 == $t7;
        goto L5;
    }

    // write_ref($t21, $t19) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:530:9+72
    $t21 := $UpdateMutation($t21, $t19);

    // pack_ref_deep($t21) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:530:9+72

    // write_back[0x1::jwks::PatchedJWKs@]($t21) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:530:9+72
    $1_jwks_PatchedJWKs_$memory := $ResourceUpdate($1_jwks_PatchedJWKs_$memory, $GlobalLocationAddress($t21),
        $Dereference($t21));

    // goto L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:523:79+371
    assume {:print "$at(2,24158,24529)"} true;
    goto L4;

    // label L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:9+77
    // Loop invariant checking block for the loop started with header: L2
    assume {:print "$at(20,14477,14554)"} true;
L3:

    // stop() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:398:9+77
    assume {:print "$at(20,14477,14554)"} true;
    assume false;
    return;

    // label L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:531:5+1
    assume {:print "$at(2,24528,24529)"} true;
L4:

    // return () at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:531:5+1
    assume {:print "$at(2,24528,24529)"} true;
    return;

    // label L5 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:531:5+1
L5:

    // abort($t7) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:531:5+1
    assume {:print "$at(2,24528,24529)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun jwks::remove_oidc_provider [verification] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+363
procedure {:timeLimit 40} $1_jwks_remove_oidc_provider$verify(_$t0: $signer, _$t1: Vec (int)) returns ($ret0: $1_option_Option'vec'u8'')
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: $Mutation ($1_jwks_SupportedOIDCProviders);
    var $t6: $1_option_Option'vec'u8'';
    var $t0: $signer;
    var $t1: Vec (int);
    var $temp_0'$1_option_Option'vec'u8''': $1_option_Option'vec'u8'';
    var $temp_0'signer': $signer;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+1
    assume {:print "$at(2,15714,15715)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+1
    assume $IsValid'vec'u8''($t1);

    // assume forall $rsc: 0x1::chain_status::GenesisEndMarker: ResourceDomain<0x1::chain_status::GenesisEndMarker>(): WellFormed($rsc) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0)}(var $rsc := $ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0);
    ($IsValid'$1_chain_status_GenesisEndMarker'($rsc))));

    // assume forall $rsc: 0x1::timestamp::CurrentTimeMicroseconds: ResourceDomain<0x1::timestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_timestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: 0x1::staking_config::StakingConfig: ResourceDomain<0x1::staking_config::StakingConfig>(): And(WellFormed($rsc), And(And(And(And(Le(select staking_config::StakingConfig.rewards_rate($rsc), 1000000), Gt(select staking_config::StakingConfig.rewards_rate_denominator($rsc), 0)), Le(select staking_config::StakingConfig.rewards_rate($rsc), select staking_config::StakingConfig.rewards_rate_denominator($rsc))), Gt(select staking_config::StakingConfig.recurring_lockup_duration_secs($rsc), 0)), And(Gt(select staking_config::StakingConfig.voting_power_increase_limit($rsc), 0), Le(select staking_config::StakingConfig.voting_power_increase_limit($rsc), 50)))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_staking_config_StakingConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_staking_config_StakingConfig_$memory, $a_0);
    (($IsValid'$1_staking_config_StakingConfig'($rsc) && ((((($rsc->$rewards_rate <= 1000000) && ($rsc->$rewards_rate_denominator > 0)) && ($rsc->$rewards_rate <= $rsc->$rewards_rate_denominator)) && ($rsc->$recurring_lockup_duration_secs > 0)) && (($rsc->$voting_power_increase_limit > 0) && ($rsc->$voting_power_increase_limit <= 50)))))));

    // assume forall $rsc: 0x1::staking_config::StakingRewardsConfig: ResourceDomain<0x1::staking_config::StakingRewardsConfig>(): And(WellFormed($rsc), And(And(And(fixed_point64::spec_less_or_equal(select staking_config::StakingRewardsConfig.rewards_rate($rsc), fixed_point64::spec_create_from_u128(1)), fixed_point64::spec_less_or_equal(select staking_config::StakingRewardsConfig.min_rewards_rate($rsc), select staking_config::StakingRewardsConfig.rewards_rate($rsc))), Gt(select staking_config::StakingRewardsConfig.rewards_rate_period_in_secs($rsc), 0)), Le(fixed_point64::spec_ceil(select staking_config::StakingRewardsConfig.rewards_rate_decrease_rate($rsc)), 1))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_staking_config_StakingRewardsConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_staking_config_StakingRewardsConfig_$memory, $a_0);
    (($IsValid'$1_staking_config_StakingRewardsConfig'($rsc) && ((($1_fixed_point64_spec_less_or_equal($rsc->$rewards_rate, $1_fixed_point64_spec_create_from_u128(1)) && $1_fixed_point64_spec_less_or_equal($rsc->$min_rewards_rate, $rsc->$rewards_rate)) && ($rsc->$rewards_rate_period_in_secs > 0)) && ($1_fixed_point64_spec_ceil($rsc->$rewards_rate_decrease_rate) <= 1))))));

    // assume forall $rsc: 0x1::reconfiguration_state::State: ResourceDomain<0x1::reconfiguration_state::State>(): And(WellFormed($rsc), And(And(And(And(Or(Eq<vector<u8>>(select string::String.bytes<0x1::string::String>(copyable_any::$type_name(select reconfiguration_state::State.variant($rsc))), [48, 120, 49, 58, 58, 114, 101, 99, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 95, 115, 116, 97, 116, 101, 58, 58, 83, 116, 97, 116, 101, 65, 99, 116, 105, 118, 101]), Eq<vector<u8>>(select string::String.bytes<0x1::string::String>(copyable_any::$type_name(select reconfiguration_state::State.variant($rsc))), [48, 120, 49, 58, 58, 114, 101, 99, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 95, 115, 116, 97, 116, 101, 58, 58, 83, 116, 97, 116, 101, 73, 110, 97, 99, 116, 105, 118, 101])), Implies(Eq<vector<u8>>(select string::String.bytes<0x1::string::String>(copyable_any::$type_name(select reconfiguration_state::State.variant($rsc))), [48, 120, 49, 58, 58, 114, 101, 99, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 95, 115, 116, 97, 116, 101, 58, 58, 83, 116, 97, 116, 101, 65, 99, 116, 105, 118, 101]), from_bcs::deserializable<0x1::reconfiguration_state::StateActive>(select copyable_any::Any.data<0x1::copyable_any::Any>(select reconfiguration_state::State.variant($rsc))))), Implies(Eq<vector<u8>>(select string::String.bytes<0x1::string::String>(copyable_any::$type_name(select reconfiguration_state::State.variant($rsc))), [48, 120, 49, 58, 58, 114, 101, 99, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 95, 115, 116, 97, 116, 101, 58, 58, 83, 116, 97, 116, 101, 73, 110, 97, 99, 116, 105, 118, 101]), from_bcs::deserializable<0x1::reconfiguration_state::StateInactive>(select copyable_any::Any.data<0x1::copyable_any::Any>(select reconfiguration_state::State.variant($rsc))))), Implies(Eq<vector<u8>>(select string::String.bytes<0x1::string::String>(copyable_any::$type_name(select reconfiguration_state::State.variant($rsc))), [48, 120, 49, 58, 58, 114, 101, 99, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 95, 115, 116, 97, 116, 101, 58, 58, 83, 116, 97, 116, 101, 65, 99, 116, 105, 118, 101]), Eq<0x1::string::String>(type_info::$type_name<0x1::reconfiguration_state::StateActive>(), select copyable_any::Any.type_name<0x1::copyable_any::Any>(select reconfiguration_state::State.variant($rsc))))), Implies(Eq<vector<u8>>(select string::String.bytes<0x1::string::String>(copyable_any::$type_name(select reconfiguration_state::State.variant($rsc))), [48, 120, 49, 58, 58, 114, 101, 99, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 95, 115, 116, 97, 116, 101, 58, 58, 83, 116, 97, 116, 101, 73, 110, 97, 99, 116, 105, 118, 101]), Eq<0x1::string::String>(type_info::$type_name<0x1::reconfiguration_state::StateInactive>(), select copyable_any::Any.type_name<0x1::copyable_any::Any>(select reconfiguration_state::State.variant($rsc)))))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_state_State_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_state_State_$memory, $a_0);
    (($IsValid'$1_reconfiguration_state_State'($rsc) && ((((($IsEqual'vec'u8''($1_copyable_any_$type_name($rsc->$variant)->$bytes, ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(48, 120, 49, 58), MakeVec4(58, 114, 101, 99)), MakeVec4(111, 110, 102, 105)), MakeVec4(103, 117, 114, 97)), MakeVec4(116, 105, 111, 110)), MakeVec4(95, 115, 116, 97)), MakeVec4(116, 101, 58, 58)), MakeVec4(83, 116, 97, 116)), MakeVec4(101, 65, 99, 116)), MakeVec3(105, 118, 101))) || $IsEqual'vec'u8''($1_copyable_any_$type_name($rsc->$variant)->$bytes, ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(48, 120, 49, 58), MakeVec4(58, 114, 101, 99)), MakeVec4(111, 110, 102, 105)), MakeVec4(103, 117, 114, 97)), MakeVec4(116, 105, 111, 110)), MakeVec4(95, 115, 116, 97)), MakeVec4(116, 101, 58, 58)), MakeVec4(83, 116, 97, 116)), MakeVec4(101, 73, 110, 97)), MakeVec4(99, 116, 105, 118)), MakeVec1(101)))) && ($IsEqual'vec'u8''($1_copyable_any_$type_name($rsc->$variant)->$bytes, ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(48, 120, 49, 58), MakeVec4(58, 114, 101, 99)), MakeVec4(111, 110, 102, 105)), MakeVec4(103, 117, 114, 97)), MakeVec4(116, 105, 111, 110)), MakeVec4(95, 115, 116, 97)), MakeVec4(116, 101, 58, 58)), MakeVec4(83, 116, 97, 116)), MakeVec4(101, 65, 99, 116)), MakeVec3(105, 118, 101))) ==> $1_from_bcs_deserializable'$1_reconfiguration_state_StateActive'($rsc->$variant->$data))) && ($IsEqual'vec'u8''($1_copyable_any_$type_name($rsc->$variant)->$bytes, ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(48, 120, 49, 58), MakeVec4(58, 114, 101, 99)), MakeVec4(111, 110, 102, 105)), MakeVec4(103, 117, 114, 97)), MakeVec4(116, 105, 111, 110)), MakeVec4(95, 115, 116, 97)), MakeVec4(116, 101, 58, 58)), MakeVec4(83, 116, 97, 116)), MakeVec4(101, 73, 110, 97)), MakeVec4(99, 116, 105, 118)), MakeVec1(101))) ==> $1_from_bcs_deserializable'$1_reconfiguration_state_StateInactive'($rsc->$variant->$data))) && ($IsEqual'vec'u8''($1_copyable_any_$type_name($rsc->$variant)->$bytes, ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(48, 120, 49, 58), MakeVec4(58, 114, 101, 99)), MakeVec4(111, 110, 102, 105)), MakeVec4(103, 117, 114, 97)), MakeVec4(116, 105, 111, 110)), MakeVec4(95, 115, 116, 97)), MakeVec4(116, 101, 58, 58)), MakeVec4(83, 116, 97, 116)), MakeVec4(101, 65, 99, 116)), MakeVec3(105, 118, 101))) ==> $IsEqual'$1_string_String'($1_string_String(Vec(DefaultVecMap()[0 := 48][1 := 120][2 := 49][3 := 58][4 := 58][5 := 114][6 := 101][7 := 99][8 := 111][9 := 110][10 := 102][11 := 105][12 := 103][13 := 117][14 := 114][15 := 97][16 := 116][17 := 105][18 := 111][19 := 110][20 := 95][21 := 115][22 := 116][23 := 97][24 := 116][25 := 101][26 := 58][27 := 58][28 := 83][29 := 116][30 := 97][31 := 116][32 := 101][33 := 65][34 := 99][35 := 116][36 := 105][37 := 118][38 := 101], 39)), $rsc->$variant->$type_name))) && ($IsEqual'vec'u8''($1_copyable_any_$type_name($rsc->$variant)->$bytes, ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(48, 120, 49, 58), MakeVec4(58, 114, 101, 99)), MakeVec4(111, 110, 102, 105)), MakeVec4(103, 117, 114, 97)), MakeVec4(116, 105, 111, 110)), MakeVec4(95, 115, 116, 97)), MakeVec4(116, 101, 58, 58)), MakeVec4(83, 116, 97, 116)), MakeVec4(101, 73, 110, 97)), MakeVec4(99, 116, 105, 118)), MakeVec1(101))) ==> $IsEqual'$1_string_String'($1_string_String(Vec(DefaultVecMap()[0 := 48][1 := 120][2 := 49][3 := 58][4 := 58][5 := 114][6 := 101][7 := 99][8 := 111][9 := 110][10 := 102][11 := 105][12 := 103][13 := 117][14 := 114][15 := 97][16 := 116][17 := 105][18 := 111][19 := 110][20 := 95][21 := 115][22 := 116][23 := 97][24 := 116][25 := 101][26 := 58][27 := 58][28 := 83][29 := 116][30 := 97][31 := 116][32 := 101][33 := 73][34 := 110][35 := 97][36 := 99][37 := 116][38 := 105][39 := 118][40 := 101], 41)), $rsc->$variant->$type_name)))))));

    // assume forall $rsc: 0x1::stake::AptosCoinCapabilities: ResourceDomain<0x1::stake::AptosCoinCapabilities>(): WellFormed($rsc) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_AptosCoinCapabilities_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_AptosCoinCapabilities_$memory, $a_0);
    ($IsValid'$1_stake_AptosCoinCapabilities'($rsc))));

    // assume forall $rsc: 0x1::stake::ValidatorPerformance: ResourceDomain<0x1::stake::ValidatorPerformance>(): WellFormed($rsc) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorPerformance'($rsc))));

    // assume forall $rsc: 0x1::stake::ValidatorSet: ResourceDomain<0x1::stake::ValidatorSet>(): And(WellFormed($rsc), Eq<u8>(select stake::ValidatorSet.consensus_scheme($rsc), 0)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorSet_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorSet_$memory, $a_0);
    (($IsValid'$1_stake_ValidatorSet'($rsc) && $IsEqual'u8'($rsc->$consensus_scheme, 0)))));

    // assume forall $rsc: 0x1::transaction_fee::AptosCoinCapabilities: ResourceDomain<0x1::transaction_fee::AptosCoinCapabilities>(): WellFormed($rsc) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_transaction_fee_AptosCoinCapabilities_$memory, $a_0)}(var $rsc := $ResourceValue($1_transaction_fee_AptosCoinCapabilities_$memory, $a_0);
    ($IsValid'$1_transaction_fee_AptosCoinCapabilities'($rsc))));

    // assume forall $rsc: 0x1::transaction_fee::AptosFABurnCapabilities: ResourceDomain<0x1::transaction_fee::AptosFABurnCapabilities>(): WellFormed($rsc) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_transaction_fee_AptosFABurnCapabilities_$memory, $a_0)}(var $rsc := $ResourceValue($1_transaction_fee_AptosFABurnCapabilities_$memory, $a_0);
    ($IsValid'$1_transaction_fee_AptosFABurnCapabilities'($rsc))));

    // assume forall $rsc: 0x1::state_storage::GasParameter: ResourceDomain<0x1::state_storage::GasParameter>(): WellFormed($rsc) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_state_storage_GasParameter_$memory, $a_0)}(var $rsc := $ResourceValue($1_state_storage_GasParameter_$memory, $a_0);
    ($IsValid'$1_state_storage_GasParameter'($rsc))));

    // assume forall $rsc: 0x1::state_storage::StateStorageUsage: ResourceDomain<0x1::state_storage::StateStorageUsage>(): WellFormed($rsc) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_state_storage_StateStorageUsage_$memory, $a_0)}(var $rsc := $ResourceValue($1_state_storage_StateStorageUsage_$memory, $a_0);
    ($IsValid'$1_state_storage_StateStorageUsage'($rsc))));

    // assume forall $rsc: 0x1::storage_gas::StorageGas: ResourceDomain<0x1::storage_gas::StorageGas>(): WellFormed($rsc) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_storage_gas_StorageGas_$memory, $a_0)}(var $rsc := $ResourceValue($1_storage_gas_StorageGas_$memory, $a_0);
    ($IsValid'$1_storage_gas_StorageGas'($rsc))));

    // assume forall $rsc: 0x1::storage_gas::StorageGasConfig: ResourceDomain<0x1::storage_gas::StorageGasConfig>(): And(WellFormed($rsc), And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(Gt(select storage_gas::UsageGasConfig.target_usage(select storage_gas::StorageGasConfig.item_config($rsc)), 0), Le(select storage_gas::UsageGasConfig.target_usage(select storage_gas::StorageGasConfig.item_config($rsc)), Div(18446744073709551615, 10000))), Le(select storage_gas::GasCurve.min_gas(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.item_config($rsc))), select storage_gas::GasCurve.max_gas(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.item_config($rsc))))), Le(select storage_gas::GasCurve.max_gas(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.item_config($rsc))), Div(18446744073709551615, 10000))), And(And(Implies(Gt(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.item_config($rsc)))), 0), Gt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.item_config($rsc))), 0)), 0)), Implies(Gt(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.item_config($rsc)))), 0), Lt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.item_config($rsc))), Sub(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.item_config($rsc)))), 1))), 10000))), forall i: num: Range(0, Sub(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.item_config($rsc)))), 1)): And(Lt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.item_config($rsc))), i)), select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.item_config($rsc))), Add(i, 1)))), Le(select storage_gas::Point.y<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.item_config($rsc))), i)), select storage_gas::Point.y<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.item_config($rsc))), Add(i, 1))))))), forall $elem: 0x1::storage_gas::Point: select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.item_config($rsc))): And(Le(select storage_gas::Point.x($elem), 10000), Le(select storage_gas::Point.y($elem), 10000))), Le(select storage_gas::GasCurve.min_gas(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.item_config($rsc))), select storage_gas::GasCurve.max_gas(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.item_config($rsc))))), Le(select storage_gas::GasCurve.max_gas(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.item_config($rsc))), Div(18446744073709551615, 10000))), And(And(Implies(Gt(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.item_config($rsc)))), 0), Gt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.item_config($rsc))), 0)), 0)), Implies(Gt(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.item_config($rsc)))), 0), Lt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.item_config($rsc))), Sub(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.item_config($rsc)))), 1))), 10000))), forall i: num: Range(0, Sub(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.item_config($rsc)))), 1)): And(Lt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.item_config($rsc))), i)), select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.item_config($rsc))), Add(i, 1)))), Le(select storage_gas::Point.y<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.item_config($rsc))), i)), select storage_gas::Point.y<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.item_config($rsc))), Add(i, 1))))))), forall $elem: 0x1::storage_gas::Point: select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.item_config($rsc))): And(Le(select storage_gas::Point.x($elem), 10000), Le(select storage_gas::Point.y($elem), 10000))), Le(select storage_gas::GasCurve.min_gas(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.item_config($rsc))), select storage_gas::GasCurve.max_gas(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.item_config($rsc))))), Le(select storage_gas::GasCurve.max_gas(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.item_config($rsc))), Div(18446744073709551615, 10000))), And(And(Implies(Gt(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.item_config($rsc)))), 0), Gt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.item_config($rsc))), 0)), 0)), Implies(Gt(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.item_config($rsc)))), 0), Lt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.item_config($rsc))), Sub(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.item_config($rsc)))), 1))), 10000))), forall i: num: Range(0, Sub(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.item_config($rsc)))), 1)): And(Lt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.item_config($rsc))), i)), select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.item_config($rsc))), Add(i, 1)))), Le(select storage_gas::Point.y<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.item_config($rsc))), i)), select storage_gas::Point.y<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.item_config($rsc))), Add(i, 1))))))), forall $elem: 0x1::storage_gas::Point: select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.item_config($rsc))): And(Le(select storage_gas::Point.x($elem), 10000), Le(select storage_gas::Point.y($elem), 10000))), Gt(select storage_gas::UsageGasConfig.target_usage(select storage_gas::StorageGasConfig.byte_config($rsc)), 0)), Le(select storage_gas::UsageGasConfig.target_usage(select storage_gas::StorageGasConfig.byte_config($rsc)), Div(18446744073709551615, 10000))), Le(select storage_gas::GasCurve.min_gas(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), select storage_gas::GasCurve.max_gas(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.byte_config($rsc))))), Le(select storage_gas::GasCurve.max_gas(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), Div(18446744073709551615, 10000))), And(And(Implies(Gt(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.byte_config($rsc)))), 0), Gt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), 0)), 0)), Implies(Gt(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.byte_config($rsc)))), 0), Lt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), Sub(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.byte_config($rsc)))), 1))), 10000))), forall i: num: Range(0, Sub(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.byte_config($rsc)))), 1)): And(Lt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), i)), select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), Add(i, 1)))), Le(select storage_gas::Point.y<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), i)), select storage_gas::Point.y<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), Add(i, 1))))))), forall $elem: 0x1::storage_gas::Point: select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.byte_config($rsc))): And(Le(select storage_gas::Point.x($elem), 10000), Le(select storage_gas::Point.y($elem), 10000))), Le(select storage_gas::GasCurve.min_gas(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), select storage_gas::GasCurve.max_gas(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.byte_config($rsc))))), Le(select storage_gas::GasCurve.max_gas(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), Div(18446744073709551615, 10000))), And(And(Implies(Gt(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.byte_config($rsc)))), 0), Gt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), 0)), 0)), Implies(Gt(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.byte_config($rsc)))), 0), Lt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), Sub(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.byte_config($rsc)))), 1))), 10000))), forall i: num: Range(0, Sub(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.byte_config($rsc)))), 1)): And(Lt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), i)), select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), Add(i, 1)))), Le(select storage_gas::Point.y<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), i)), select storage_gas::Point.y<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), Add(i, 1))))))), forall $elem: 0x1::storage_gas::Point: select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.byte_config($rsc))): And(Le(select storage_gas::Point.x($elem), 10000), Le(select storage_gas::Point.y($elem), 10000))), Le(select storage_gas::GasCurve.min_gas(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), select storage_gas::GasCurve.max_gas(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.byte_config($rsc))))), Le(select storage_gas::GasCurve.max_gas(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), Div(18446744073709551615, 10000))), And(And(Implies(Gt(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.byte_config($rsc)))), 0), Gt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), 0)), 0)), Implies(Gt(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.byte_config($rsc)))), 0), Lt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), Sub(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.byte_config($rsc)))), 1))), 10000))), forall i: num: Range(0, Sub(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.byte_config($rsc)))), 1)): And(Lt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), i)), select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), Add(i, 1)))), Le(select storage_gas::Point.y<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), i)), select storage_gas::Point.y<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), Add(i, 1))))))), forall $elem: 0x1::storage_gas::Point: select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.byte_config($rsc))): And(Le(select storage_gas::Point.x($elem), 10000), Le(select storage_gas::Point.y($elem), 10000)))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_storage_gas_StorageGasConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_storage_gas_StorageGasConfig_$memory, $a_0);
    (($IsValid'$1_storage_gas_StorageGasConfig'($rsc) && (((((((((((((((((((((((((((($rsc->$item_config->$target_usage > 0) && ($rsc->$item_config->$target_usage <= (18446744073709551615 div 10000))) && ($rsc->$item_config->$read_curve->$min_gas <= $rsc->$item_config->$read_curve->$max_gas)) && ($rsc->$item_config->$read_curve->$max_gas <= (18446744073709551615 div 10000))) && ((((LenVec($rsc->$item_config->$read_curve->$points) > 0) ==> (ReadVec($rsc->$item_config->$read_curve->$points, 0)->$x > 0)) && ((LenVec($rsc->$item_config->$read_curve->$points) > 0) ==> (ReadVec($rsc->$item_config->$read_curve->$points, (LenVec($rsc->$item_config->$read_curve->$points) - 1))->$x < 10000))) && (var $range_1 := $Range(0, (LenVec($rsc->$item_config->$read_curve->$points) - 1)); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (((ReadVec($rsc->$item_config->$read_curve->$points, i)->$x < ReadVec($rsc->$item_config->$read_curve->$points, (i + 1))->$x) && (ReadVec($rsc->$item_config->$read_curve->$points, i)->$y <= ReadVec($rsc->$item_config->$read_curve->$points, (i + 1))->$y)))))))) && (var $range_3 := $rsc->$item_config->$read_curve->$points; (forall $i_4: int :: InRangeVec($range_3, $i_4) ==> (var $elem := ReadVec($range_3, $i_4);
    ((($elem->$x <= 10000) && ($elem->$y <= 10000))))))) && ($rsc->$item_config->$create_curve->$min_gas <= $rsc->$item_config->$create_curve->$max_gas)) && ($rsc->$item_config->$create_curve->$max_gas <= (18446744073709551615 div 10000))) && ((((LenVec($rsc->$item_config->$create_curve->$points) > 0) ==> (ReadVec($rsc->$item_config->$create_curve->$points, 0)->$x > 0)) && ((LenVec($rsc->$item_config->$create_curve->$points) > 0) ==> (ReadVec($rsc->$item_config->$create_curve->$points, (LenVec($rsc->$item_config->$create_curve->$points) - 1))->$x < 10000))) && (var $range_5 := $Range(0, (LenVec($rsc->$item_config->$create_curve->$points) - 1)); (forall $i_6: int :: $InRange($range_5, $i_6) ==> (var i := $i_6;
    (((ReadVec($rsc->$item_config->$create_curve->$points, i)->$x < ReadVec($rsc->$item_config->$create_curve->$points, (i + 1))->$x) && (ReadVec($rsc->$item_config->$create_curve->$points, i)->$y <= ReadVec($rsc->$item_config->$create_curve->$points, (i + 1))->$y)))))))) && (var $range_7 := $rsc->$item_config->$create_curve->$points; (forall $i_8: int :: InRangeVec($range_7, $i_8) ==> (var $elem := ReadVec($range_7, $i_8);
    ((($elem->$x <= 10000) && ($elem->$y <= 10000))))))) && ($rsc->$item_config->$write_curve->$min_gas <= $rsc->$item_config->$write_curve->$max_gas)) && ($rsc->$item_config->$write_curve->$max_gas <= (18446744073709551615 div 10000))) && ((((LenVec($rsc->$item_config->$write_curve->$points) > 0) ==> (ReadVec($rsc->$item_config->$write_curve->$points, 0)->$x > 0)) && ((LenVec($rsc->$item_config->$write_curve->$points) > 0) ==> (ReadVec($rsc->$item_config->$write_curve->$points, (LenVec($rsc->$item_config->$write_curve->$points) - 1))->$x < 10000))) && (var $range_9 := $Range(0, (LenVec($rsc->$item_config->$write_curve->$points) - 1)); (forall $i_10: int :: $InRange($range_9, $i_10) ==> (var i := $i_10;
    (((ReadVec($rsc->$item_config->$write_curve->$points, i)->$x < ReadVec($rsc->$item_config->$write_curve->$points, (i + 1))->$x) && (ReadVec($rsc->$item_config->$write_curve->$points, i)->$y <= ReadVec($rsc->$item_config->$write_curve->$points, (i + 1))->$y)))))))) && (var $range_11 := $rsc->$item_config->$write_curve->$points; (forall $i_12: int :: InRangeVec($range_11, $i_12) ==> (var $elem := ReadVec($range_11, $i_12);
    ((($elem->$x <= 10000) && ($elem->$y <= 10000))))))) && ($rsc->$byte_config->$target_usage > 0)) && ($rsc->$byte_config->$target_usage <= (18446744073709551615 div 10000))) && ($rsc->$byte_config->$read_curve->$min_gas <= $rsc->$byte_config->$read_curve->$max_gas)) && ($rsc->$byte_config->$read_curve->$max_gas <= (18446744073709551615 div 10000))) && ((((LenVec($rsc->$byte_config->$read_curve->$points) > 0) ==> (ReadVec($rsc->$byte_config->$read_curve->$points, 0)->$x > 0)) && ((LenVec($rsc->$byte_config->$read_curve->$points) > 0) ==> (ReadVec($rsc->$byte_config->$read_curve->$points, (LenVec($rsc->$byte_config->$read_curve->$points) - 1))->$x < 10000))) && (var $range_13 := $Range(0, (LenVec($rsc->$byte_config->$read_curve->$points) - 1)); (forall $i_14: int :: $InRange($range_13, $i_14) ==> (var i := $i_14;
    (((ReadVec($rsc->$byte_config->$read_curve->$points, i)->$x < ReadVec($rsc->$byte_config->$read_curve->$points, (i + 1))->$x) && (ReadVec($rsc->$byte_config->$read_curve->$points, i)->$y <= ReadVec($rsc->$byte_config->$read_curve->$points, (i + 1))->$y)))))))) && (var $range_15 := $rsc->$byte_config->$read_curve->$points; (forall $i_16: int :: InRangeVec($range_15, $i_16) ==> (var $elem := ReadVec($range_15, $i_16);
    ((($elem->$x <= 10000) && ($elem->$y <= 10000))))))) && ($rsc->$byte_config->$create_curve->$min_gas <= $rsc->$byte_config->$create_curve->$max_gas)) && ($rsc->$byte_config->$create_curve->$max_gas <= (18446744073709551615 div 10000))) && ((((LenVec($rsc->$byte_config->$create_curve->$points) > 0) ==> (ReadVec($rsc->$byte_config->$create_curve->$points, 0)->$x > 0)) && ((LenVec($rsc->$byte_config->$create_curve->$points) > 0) ==> (ReadVec($rsc->$byte_config->$create_curve->$points, (LenVec($rsc->$byte_config->$create_curve->$points) - 1))->$x < 10000))) && (var $range_17 := $Range(0, (LenVec($rsc->$byte_config->$create_curve->$points) - 1)); (forall $i_18: int :: $InRange($range_17, $i_18) ==> (var i := $i_18;
    (((ReadVec($rsc->$byte_config->$create_curve->$points, i)->$x < ReadVec($rsc->$byte_config->$create_curve->$points, (i + 1))->$x) && (ReadVec($rsc->$byte_config->$create_curve->$points, i)->$y <= ReadVec($rsc->$byte_config->$create_curve->$points, (i + 1))->$y)))))))) && (var $range_19 := $rsc->$byte_config->$create_curve->$points; (forall $i_20: int :: InRangeVec($range_19, $i_20) ==> (var $elem := ReadVec($range_19, $i_20);
    ((($elem->$x <= 10000) && ($elem->$y <= 10000))))))) && ($rsc->$byte_config->$write_curve->$min_gas <= $rsc->$byte_config->$write_curve->$max_gas)) && ($rsc->$byte_config->$write_curve->$max_gas <= (18446744073709551615 div 10000))) && ((((LenVec($rsc->$byte_config->$write_curve->$points) > 0) ==> (ReadVec($rsc->$byte_config->$write_curve->$points, 0)->$x > 0)) && ((LenVec($rsc->$byte_config->$write_curve->$points) > 0) ==> (ReadVec($rsc->$byte_config->$write_curve->$points, (LenVec($rsc->$byte_config->$write_curve->$points) - 1))->$x < 10000))) && (var $range_21 := $Range(0, (LenVec($rsc->$byte_config->$write_curve->$points) - 1)); (forall $i_22: int :: $InRange($range_21, $i_22) ==> (var i := $i_22;
    (((ReadVec($rsc->$byte_config->$write_curve->$points, i)->$x < ReadVec($rsc->$byte_config->$write_curve->$points, (i + 1))->$x) && (ReadVec($rsc->$byte_config->$write_curve->$points, i)->$y <= ReadVec($rsc->$byte_config->$write_curve->$points, (i + 1))->$y)))))))) && (var $range_23 := $rsc->$byte_config->$write_curve->$points; (forall $i_24: int :: InRangeVec($range_23, $i_24) ==> (var $elem := ReadVec($range_23, $i_24);
    ((($elem->$x <= 10000) && ($elem->$y <= 10000)))))))))));

    // assume forall $rsc: 0x1::reconfiguration::Configuration: ResourceDomain<0x1::reconfiguration::Configuration>(): WellFormed($rsc) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_Configuration_$memory, $a_0);
    ($IsValid'$1_reconfiguration_Configuration'($rsc))));

    // assume forall $rsc: 0x1::jwks::SupportedOIDCProviders: ResourceDomain<0x1::jwks::SupportedOIDCProviders>(): WellFormed($rsc) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_jwks_SupportedOIDCProviders_$memory, $a_0)}(var $rsc := $ResourceValue($1_jwks_SupportedOIDCProviders_$memory, $a_0);
    ($IsValid'$1_jwks_SupportedOIDCProviders'($rsc))));

    // assume forall $rsc: 0x1::dkg::DKGState: ResourceDomain<0x1::dkg::DKGState>(): And(WellFormed($rsc), And(Le(Len<0x1::dkg::DKGSessionState>(select option::Option.vec(select dkg::DKGState.last_completed($rsc))), 1), Le(Len<0x1::dkg::DKGSessionState>(select option::Option.vec(select dkg::DKGState.in_progress($rsc))), 1))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_dkg_DKGState_$memory, $a_0)}(var $rsc := $ResourceValue($1_dkg_DKGState_$memory, $a_0);
    (($IsValid'$1_dkg_DKGState'($rsc) && ((LenVec($rsc->$last_completed->$vec) <= 1) && (LenVec($rsc->$in_progress->$vec) <= 1))))));

    // assume forall $rsc: 0x1::consensus_config::ConsensusConfig: ResourceDomain<0x1::consensus_config::ConsensusConfig>(): WellFormed($rsc) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_consensus_config_ConsensusConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_consensus_config_ConsensusConfig_$memory, $a_0);
    ($IsValid'$1_consensus_config_ConsensusConfig'($rsc))));

    // assume forall $rsc: 0x1::randomness::PerBlockRandomness: ResourceDomain<0x1::randomness::PerBlockRandomness>(): And(WellFormed($rsc), Le(Len<vector<u8>>(select option::Option.vec(select randomness::PerBlockRandomness.seed($rsc))), 1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_randomness_PerBlockRandomness_$memory, $a_0)}(var $rsc := $ResourceValue($1_randomness_PerBlockRandomness_$memory, $a_0);
    (($IsValid'$1_randomness_PerBlockRandomness'($rsc) && (LenVec($rsc->$seed->$vec) <= 1)))));

    // assume forall $rsc: 0x1::block::BlockResource: ResourceDomain<0x1::block::BlockResource>(): And(WellFormed($rsc), Gt(select block::BlockResource.epoch_interval($rsc), 0)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_block_BlockResource_$memory, $a_0)}(var $rsc := $ResourceValue($1_block_BlockResource_$memory, $a_0);
    (($IsValid'$1_block_BlockResource'($rsc) && ($rsc->$epoch_interval > 0)))));

    // assume forall $rsc: 0x1::block::CommitHistory: ResourceDomain<0x1::block::CommitHistory>(): And(WellFormed($rsc), Gt(select block::CommitHistory.max_capacity($rsc), 0)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_block_CommitHistory_$memory, $a_0)}(var $rsc := $ResourceValue($1_block_CommitHistory_$memory, $a_0);
    (($IsValid'$1_block_CommitHistory'($rsc) && ($rsc->$max_capacity > 0)))));

    // assume Eq<bool>(chain_status::$is_genesis(), Not(chain_status::$is_operating())) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+363
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/chain_status.spec.move:27:9+42
    assume $IsEqual'bool'($1_chain_status_$is_genesis($1_chain_status_GenesisEndMarker_$memory), !$1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory));

    // assume Implies(chain_status::$is_operating(), exists<0x1::timestamp::CurrentTimeMicroseconds>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+363
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.spec.move:36:9+107
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, 1));

    // assume Implies(chain_status::$is_operating(), exists<0x1::staking_config::StakingConfig>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+363
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/staking_config.spec.move:60:9+97
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_staking_config_StakingConfig_$memory, 1));

    // assume Implies(chain_status::$is_operating(), exists<0x1::staking_config::StakingRewardsConfig>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+363
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/staking_config.spec.move:61:9+104
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_staking_config_StakingRewardsConfig_$memory, 1));

    // assume Implies(chain_status::$is_operating(), exists<0x1::reconfiguration_state::State>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+363
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration_state.spec.move:5:9+89
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_reconfiguration_state_State_$memory, 1));

    // assume Implies(chain_status::$is_operating(), exists<0x1::stake::AptosCoinCapabilities>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+363
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:49:9+105
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_stake_AptosCoinCapabilities_$memory, 1));

    // assume Implies(chain_status::$is_operating(), exists<0x1::stake::ValidatorPerformance>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+363
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:50:9+104
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_stake_ValidatorPerformance_$memory, 1));

    // assume Implies(chain_status::$is_operating(), exists<0x1::stake::ValidatorSet>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+363
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:51:9+96
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_stake_ValidatorSet_$memory, 1));

    // assume Implies(chain_status::$is_operating(), Or(exists<0x1::transaction_fee::AptosCoinCapabilities>(0x1), exists<0x1::transaction_fee::AptosFABurnCapabilities>(0x1))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+363
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/transaction_fee.spec.move:61:9+158
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($ResourceExists($1_transaction_fee_AptosCoinCapabilities_$memory, 1) || $ResourceExists($1_transaction_fee_AptosFABurnCapabilities_$memory, 1)));

    // assume Implies(chain_status::$is_operating(), exists<0x1::state_storage::StateStorageUsage>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+363
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/state_storage.spec.move:48:9+101
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_state_storage_StateStorageUsage_$memory, 1));

    // assume Implies(chain_status::$is_operating(), exists<0x1::state_storage::GasParameter>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+363
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/state_storage.spec.move:49:9+96
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_state_storage_GasParameter_$memory, 1));

    // assume Implies(chain_status::$is_operating(), exists<0x1::storage_gas::StorageGasConfig>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+363
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/storage_gas.spec.move:69:9+100
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_storage_gas_StorageGasConfig_$memory, 1));

    // assume Implies(chain_status::$is_operating(), exists<0x1::storage_gas::StorageGas>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+363
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/storage_gas.spec.move:70:9+94
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_storage_gas_StorageGas_$memory, 1));

    // assume Implies(chain_status::$is_operating(), exists<0x1::reconfiguration::Configuration>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+363
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.spec.move:50:9+97
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_reconfiguration_Configuration_$memory, 1));

    // assume Implies(chain_status::$is_operating(), Ge(timestamp::spec_now_microseconds(), reconfiguration::$last_reconfiguration_time())) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+363
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.spec.move:51:9+137
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) >= $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory)));

    // assume Implies(chain_status::$is_operating(), exists<0x1::dkg::DKGState>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+363
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/dkg.spec.move:5:9+92
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_dkg_DKGState_$memory, 1));

    // assume Implies(chain_status::$is_operating(), exists<0x1::consensus_config::ConsensusConfig>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+363
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/consensus_config.spec.move:28:9+99
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_consensus_config_ConsensusConfig_$memory, 1));

    // assume Implies(chain_status::$is_operating(), exists<0x1::randomness::PerBlockRandomness>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+363
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/randomness.spec.move:6:9+102
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_randomness_PerBlockRandomness_$memory, 1));

    // assume Implies(chain_status::$is_operating(), exists<0x1::block::BlockResource>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+363
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/block.spec.move:47:9+97
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_block_BlockResource_$memory, 1));

    // assume Implies(chain_status::$is_operating(), exists<0x1::block::CommitHistory>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+363
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/block.spec.move:49:9+97
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_block_CommitHistory_$memory, 1));

    // trace_local[fx]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+1
    assume {:print "$track_local(79,17,0):", $t0} $t0 == $t0;

    // trace_local[name]($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:5+1
    assume {:print "$track_local(79,17,1):", $t1} $t1 == $t1;

    // opaque begin: system_addresses::assert_aptos_framework($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:336:9+44
    assume {:print "$at(2,15839,15883)"} true;

    // assume Identical($t2, Neq<address>(signer::$address_of($t0), 0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:336:9+44
    assume ($t2 == !$IsEqual'address'($1_signer_$address_of($t0), 1));

    // if ($t2) goto L4 else goto L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:336:9+44
    if ($t2) { goto L4; } else { goto L3; }

    // label L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:336:9+44
L4:

    // assume And(Neq<address>(signer::$address_of($t0), 0x1), Eq(5, $t3)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:336:9+44
    assume {:print "$at(2,15839,15883)"} true;
    assume (!$IsEqual'address'($1_signer_$address_of($t0), 1) && $IsEqual'num'(5, $t3));

    // trace_abort($t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:336:9+44
    assume {:print "$at(2,15839,15883)"} true;
    assume {:print "$track_abort(79,17):", $t3} $t3 == $t3;

    // goto L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:336:9+44
    goto L2;

    // label L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:336:9+44
L3:

    // opaque end: system_addresses::assert_aptos_framework($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:336:9+44
    assume {:print "$at(2,15839,15883)"} true;

    // chain_status::assert_genesis() on_abort goto L2 with $t3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:337:9+30
    assume {:print "$at(2,15893,15923)"} true;
    call $1_chain_status_assert_genesis();
    if ($abort_flag) {
        assume {:print "$at(2,15893,15923)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(79,17):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := 0x1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:339:70+16
    assume {:print "$at(2,15995,16011)"} true;
    $t4 := 1;
    assume $IsValid'address'($t4);

    // $t5 := borrow_global<0x1::jwks::SupportedOIDCProviders>($t4) on_abort goto L2 with $t3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:339:28+59
    if (!$ResourceExists($1_jwks_SupportedOIDCProviders_$memory, $t4)) {
        call $ExecFailureAbort();
    } else {
        $t5 := $Mutation($Global($t4), EmptyVec(), $ResourceValue($1_jwks_SupportedOIDCProviders_$memory, $t4));
    }
    if ($abort_flag) {
        assume {:print "$at(2,15953,16012)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(79,17):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t6 := jwks::remove_oidc_provider_internal($t5, $t1) on_abort goto L2 with $t3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:340:9+49
    assume {:print "$at(2,16022,16071)"} true;
    call $t6,$t5 := $1_jwks_remove_oidc_provider_internal($t5, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,16022,16071)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(79,17):", $t3} $t3 == $t3;
        goto L2;
    }

    // write_back[0x1::jwks::SupportedOIDCProviders@]($t5) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:340:9+49
    $1_jwks_SupportedOIDCProviders_$memory := $ResourceUpdate($1_jwks_SupportedOIDCProviders_$memory, $GlobalLocationAddress($t5),
        $Dereference($t5));

    // trace_return[0]($t6) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:335:120+248
    assume {:print "$at(2,15829,16077)"} true;
    assume {:print "$track_return(79,17,0):", $t6} $t6 == $t6;

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:341:5+1
    assume {:print "$at(2,16076,16077)"} true;
L1:

    // return $t6 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:341:5+1
    assume {:print "$at(2,16076,16077)"} true;
    $ret0 := $t6;
    return;

    // label L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:341:5+1
L2:

    // abort($t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:341:5+1
    assume {:print "$at(2,16076,16077)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun jwks::remove_oidc_provider_for_next_epoch [verification] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:352:5+570
procedure {:timeLimit 40} $1_jwks_remove_oidc_provider_for_next_epoch$verify(_$t0: $signer, _$t1: Vec (int)) returns ($ret0: $1_option_Option'vec'u8'')
{
    // declare local variables
    var $t2: $1_jwks_SupportedOIDCProviders;
    var $t3: bool;
    var $t4: int;
    var $t5: $1_string_String;
    var $t6: bool;
    var $t7: $1_config_buffer_PendingConfigs;
    var $t8: $1_string_String;
    var $t9: $Mutation ($1_jwks_SupportedOIDCProviders);
    var $t10: $1_option_Option'vec'u8'';
    var $t11: $1_jwks_SupportedOIDCProviders;
    var $t12: int;
    var $t0: $signer;
    var $t1: Vec (int);
    var $temp_0'$1_jwks_SupportedOIDCProviders': $1_jwks_SupportedOIDCProviders;
    var $temp_0'$1_option_Option'vec'u8''': $1_option_Option'vec'u8'';
    var $temp_0'signer': $signer;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:352:5+1
    assume {:print "$at(2,16467,16468)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:352:5+1
    assume $IsValid'vec'u8''($t1);

    // assume forall $rsc: 0x1::config_buffer::PendingConfigs: ResourceDomain<0x1::config_buffer::PendingConfigs>(): WellFormed($rsc) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:352:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_config_buffer_PendingConfigs_$memory, $a_0)}(var $rsc := $ResourceValue($1_config_buffer_PendingConfigs_$memory, $a_0);
    ($IsValid'$1_config_buffer_PendingConfigs'($rsc))));

    // assume forall $rsc: 0x1::jwks::SupportedOIDCProviders: ResourceDomain<0x1::jwks::SupportedOIDCProviders>(): WellFormed($rsc) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:352:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_jwks_SupportedOIDCProviders_$memory, $a_0)}(var $rsc := $ResourceValue($1_jwks_SupportedOIDCProviders_$memory, $a_0);
    ($IsValid'$1_jwks_SupportedOIDCProviders'($rsc))));

    // trace_local[fx]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:352:5+1
    assume {:print "$track_local(79,18,0):", $t0} $t0 == $t0;

    // trace_local[name]($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:352:5+1
    assume {:print "$track_local(79,18,1):", $t1} $t1 == $t1;

    // opaque begin: system_addresses::assert_aptos_framework($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:353:9+44
    assume {:print "$at(2,16607,16651)"} true;

    // assume Identical($t3, Neq<address>(signer::$address_of($t0), 0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:353:9+44
    assume ($t3 == !$IsEqual'address'($1_signer_$address_of($t0), 1));

    // if ($t3) goto L6 else goto L5 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:353:9+44
    if ($t3) { goto L6; } else { goto L5; }

    // label L6 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:353:9+44
L6:

    // assume And(Neq<address>(signer::$address_of($t0), 0x1), Eq(5, $t4)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:353:9+44
    assume {:print "$at(2,16607,16651)"} true;
    assume (!$IsEqual'address'($1_signer_$address_of($t0), 1) && $IsEqual'num'(5, $t4));

    // trace_abort($t4) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:353:9+44
    assume {:print "$at(2,16607,16651)"} true;
    assume {:print "$track_abort(79,18):", $t4} $t4 == $t4;

    // goto L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:353:9+44
    goto L4;

    // label L5 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:353:9+44
L5:

    // opaque end: system_addresses::assert_aptos_framework($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:353:9+44
    assume {:print "$at(2,16607,16651)"} true;

    // assume Identical($t5, type_info::$type_name<0x1::jwks::SupportedOIDCProviders>()) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.spec.move:8:9+42
    assume {:print "$at(134,166,208)"} true;
    assume ($t5 == $1_string_String(Vec(DefaultVecMap()[0 := 48][1 := 120][2 := 49][3 := 58][4 := 58][5 := 106][6 := 119][7 := 107][8 := 115][9 := 58][10 := 58][11 := 83][12 := 117][13 := 112][14 := 112][15 := 111][16 := 114][17 := 116][18 := 101][19 := 100][20 := 79][21 := 73][22 := 68][23 := 67][24 := 80][25 := 114][26 := 111][27 := 118][28 := 105][29 := 100][30 := 101][31 := 114][32 := 115], 33)));

    // $t6 := config_buffer::does_exist<0x1::jwks::SupportedOIDCProviders>() on_abort goto L4 with $t4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:355:32+51
    assume {:print "$at(2,16685,16736)"} true;
    call $t6 := $1_config_buffer_does_exist'$1_jwks_SupportedOIDCProviders'();
    if ($abort_flag) {
        assume {:print "$at(2,16685,16736)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(79,18):", $t4} $t4 == $t4;
        goto L4;
    }

    // if ($t6) goto L1 else goto L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:355:28+218
    if ($t6) { goto L1; } else { goto L0; }

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:356:13+51
    assume {:print "$at(2,16752,16803)"} true;
L1:

    // assume Identical($t7, global<0x1::config_buffer::PendingConfigs>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.spec.move:31:9+55
    assume {:print "$at(134,891,946)"} true;
    assume ($t7 == $ResourceValue($1_config_buffer_PendingConfigs_$memory, 1));

    // assume Identical($t8, type_info::$type_name<0x1::jwks::SupportedOIDCProviders>()) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/config_buffer.spec.move:32:9+36
    assume {:print "$at(134,955,991)"} true;
    assume ($t8 == $1_string_String(Vec(DefaultVecMap()[0 := 48][1 := 120][2 := 49][3 := 58][4 := 58][5 := 106][6 := 119][7 := 107][8 := 115][9 := 58][10 := 58][11 := 83][12 := 117][13 := 112][14 := 112][15 := 111][16 := 114][17 := 116][18 := 101][19 := 100][20 := 79][21 := 73][22 := 68][23 := 67][24 := 80][25 := 114][26 := 111][27 := 118][28 := 105][29 := 100][30 := 101][31 := 114][32 := 115], 33)));

    // $t2 := config_buffer::extract_v2<0x1::jwks::SupportedOIDCProviders>() on_abort goto L4 with $t4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:356:13+51
    assume {:print "$at(2,16752,16803)"} true;
    call $t2 := $1_config_buffer_extract_v2'$1_jwks_SupportedOIDCProviders'();
    if ($abort_flag) {
        assume {:print "$at(2,16752,16803)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(79,18):", $t4} $t4 == $t4;
        goto L4;
    }

    // trace_local[provider_set]($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:356:13+51
    assume {:print "$track_local(79,18,2):", $t2} $t2 == $t2;

    // label L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:360:49+17
    assume {:print "$at(2,16949,16966)"} true;
L2:

    // $t9 := borrow_local($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:360:49+17
    assume {:print "$at(2,16949,16966)"} true;
    $t9 := $Mutation($Local(2), EmptyVec(), $t2);

    // $t10 := jwks::remove_oidc_provider_internal($t9, $t1) on_abort goto L4 with $t4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:360:19+54
    call $t10,$t9 := $1_jwks_remove_oidc_provider_internal($t9, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,16919,16973)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(79,18):", $t4} $t4 == $t4;
        goto L4;
    }

    // write_back[LocalRoot($t2)@]($t9) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:360:19+54
    $t2 := $Dereference($t9);

    // trace_local[provider_set]($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:360:19+54
    assume {:print "$track_local(79,18,2):", $t2} $t2 == $t2;

    // $t11 := move($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:361:9+35
    assume {:print "$at(2,16983,17018)"} true;
    $t11 := $t2;

    // config_buffer::upsert<0x1::jwks::SupportedOIDCProviders>($t11) on_abort goto L4 with $t4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:361:9+35
    call $1_config_buffer_upsert'$1_jwks_SupportedOIDCProviders'($t11);
    if ($abort_flag) {
        assume {:print "$at(2,16983,17018)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(79,18):", $t4} $t4 == $t4;
        goto L4;
    }

    // trace_return[0]($t10) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:352:135+440
    assume {:print "$at(2,16597,17037)"} true;
    assume {:print "$track_return(79,18,0):", $t10} $t10 == $t10;

    // goto L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:352:135+440
    goto L3;

    // label L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:358:52+16
    assume {:print "$at(2,16872,16888)"} true;
L0:

    // $t12 := 0x1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:358:52+16
    assume {:print "$at(2,16872,16888)"} true;
    $t12 := 1;
    assume $IsValid'address'($t12);

    // $t2 := get_global<0x1::jwks::SupportedOIDCProviders>($t12) on_abort goto L4 with $t4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:358:14+55
    if (!$ResourceExists($1_jwks_SupportedOIDCProviders_$memory, $t12)) {
        call $ExecFailureAbort();
    } else {
        $t2 := $ResourceValue($1_jwks_SupportedOIDCProviders_$memory, $t12);
    }
    if ($abort_flag) {
        assume {:print "$at(2,16834,16889)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(79,18):", $t4} $t4 == $t4;
        goto L4;
    }

    // trace_local[provider_set]($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:358:13+56
    assume {:print "$track_local(79,18,2):", $t2} $t2 == $t2;

    // goto L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:358:13+56
    goto L2;

    // label L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:363:5+1
    assume {:print "$at(2,17036,17037)"} true;
L3:

    // return $t10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:363:5+1
    assume {:print "$at(2,17036,17037)"} true;
    $ret0 := $t10;
    return;

    // label L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:363:5+1
L4:

    // abort($t4) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:363:5+1
    assume {:print "$at(2,17036,17037)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun jwks::remove_oidc_provider_internal [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:444:5+512
procedure {:inline 1} $1_jwks_remove_oidc_provider_internal(_$t0: $Mutation ($1_jwks_SupportedOIDCProviders), _$t1: Vec (int)) returns ($ret0: $1_option_Option'vec'u8'', $ret1: $Mutation ($1_jwks_SupportedOIDCProviders))
{
    // declare local variables
    var $t2: Vec ($1_jwks_OIDCProvider);
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: $1_jwks_OIDCProvider;
    var $t9: $1_option_Option'vec'u8'';
    var $t10: Vec ($1_jwks_OIDCProvider);
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: $1_jwks_OIDCProvider;
    var $t18: Vec (int);
    var $t19: bool;
    var $t20: int;
    var $t21: int;
    var $t22: bool;
    var $t23: $Mutation (Vec ($1_jwks_OIDCProvider));
    var $t24: $1_jwks_OIDCProvider;
    var $t25: Vec (int);
    var $t26: $1_option_Option'vec'u8'';
    var $t27: $1_option_Option'vec'u8'';
    var $t0: $Mutation ($1_jwks_SupportedOIDCProviders);
    var $t1: Vec (int);
    var $temp_0'$1_jwks_OIDCProvider': $1_jwks_OIDCProvider;
    var $temp_0'$1_jwks_SupportedOIDCProviders': $1_jwks_SupportedOIDCProviders;
    var $temp_0'$1_option_Option'vec'u8''': $1_option_Option'vec'u8'';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'$1_jwks_OIDCProvider'': Vec ($1_jwks_OIDCProvider);
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[provider_set]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:444:5+1
    assume {:print "$at(2,20210,20211)"} true;
    $temp_0'$1_jwks_SupportedOIDCProviders' := $Dereference($t0);
    assume {:print "$track_local(79,19,0):", $temp_0'$1_jwks_SupportedOIDCProviders'} $temp_0'$1_jwks_SupportedOIDCProviders' == $temp_0'$1_jwks_SupportedOIDCProviders';

    // trace_local[name]($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:444:5+1
    assume {:print "$track_local(79,19,1):", $t1} $t1 == $t1;

    // $t10 := get_field<0x1::jwks::SupportedOIDCProviders>.providers($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:445:47+23
    assume {:print "$at(2,20373,20396)"} true;
    $t10 := $Dereference($t0)->$providers;

    // trace_local[self]($t10) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:239:23+4
    assume {:print "$at(20,8575,8579)"} true;
    assume {:print "$track_local(79,19,2):", $t10} $t10 == $t10;

    // $t11 := false at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:240:20+5
    assume {:print "$at(20,8666,8671)"} true;
    $t11 := false;
    assume $IsValid'bool'($t11);

    // $t3 := $t11 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:240:20+5
    $t3 := $t11;

    // trace_local[find]($t11) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:240:20+5
    assume {:print "$track_local(79,19,3):", $t11} $t11 == $t11;

    // $t12 := 0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:241:27+1
    assume {:print "$at(20,8699,8700)"} true;
    $t12 := 0;
    assume $IsValid'u64'($t12);

    // $t4 := $t12 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:241:27+1
    $t4 := $t12;

    // trace_local[found_index]($t12) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:241:27+1
    assume {:print "$track_local(79,19,4):", $t12} $t12 == $t12;

    // $t13 := 0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:242:17+1
    assume {:print "$at(20,8718,8719)"} true;
    $t13 := 0;
    assume $IsValid'u64'($t13);

    // trace_local[i]($t13) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:242:17+1
    assume {:print "$track_local(79,19,5):", $t13} $t13 == $t13;

    // $t14 := vector::length<0x1::jwks::OIDCProvider>($t10) on_abort goto L11 with $t15 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:243:19+13
    assume {:print "$at(20,8739,8752)"} true;
    call $t14 := $1_vector_length'$1_jwks_OIDCProvider'($t10);
    if ($abort_flag) {
        assume {:print "$at(20,8739,8752)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(79,19):", $t15} $t15 == $t15;
        goto L11;
    }

    // trace_local[len]($t14) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:243:19+13
    assume {:print "$track_local(79,19,6):", $t14} $t14 == $t14;

    // label L8 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:245:13+190
    assume {:print "$at(20,8783,8973)"} true;
L8:

    // assert Le($t13, $t14) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:246:17+19
    assume {:print "$at(20,8806,8825)"} true;
    assert {:msg "assert_failed(20,8806,8825): base case of the loop invariant does not hold"}
      ($t13 <= $t14);

    // assert forall j: num: TypeDomain<num>() where And(Ge(j, 0), Lt(j, $t13)): Not({
    //   let (obj: &0x1::jwks::OIDCProvider): (&0x1::jwks::OIDCProvider) = Tuple(Index($t10, j));
    //   {
    //     let provider: &0x1::jwks::OIDCProvider = obj;
    //     Eq<vector<u8>>(select jwks::OIDCProvider.name<0x1::jwks::OIDCProvider>(provider), $t1)
    //   }
    // }) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:247:17+59
    assume {:print "$at(20,8842,8901)"} true;
    assert {:msg "assert_failed(20,8842,8901): base case of the loop invariant does not hold"}
      (forall j: int :: $IsValid'num'(j) ==> (((j >= 0) && (j < $t13)))  ==> (!(var obj := ReadVec($t10, j); (var provider := obj; $IsEqual'vec'u8''(provider->$name, $t1)))));

    // assert Implies($t11, And(Lt($t13, $t14), {
    //   let (obj: &0x1::jwks::OIDCProvider): (&0x1::jwks::OIDCProvider) = Tuple(Index($t10, $t13));
    //   {
    //     let provider: &0x1::jwks::OIDCProvider = obj;
    //     Eq<vector<u8>>(select jwks::OIDCProvider.name<0x1::jwks::OIDCProvider>(provider), $t1)
    //   }
    // })) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    assume {:print "$at(20,8918,8959)"} true;
    assert {:msg "assert_failed(20,8918,8959): base case of the loop invariant does not hold"}
      ($t11 ==> (($t13 < $t14) && (var obj := ReadVec($t10, $t13); (var provider := obj; $IsEqual'vec'u8''(provider->$name, $t1)))));

    // $t5 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    havoc $t5;

    // assume WellFormed($t5) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    assume $IsValid'u64'($t5);

    // $t16 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    havoc $t16;

    // assume WellFormed($t16) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    assume $IsValid'bool'($t16);

    // $t17 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    havoc $t17;

    // assume WellFormed($t17) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    assume $IsValid'$1_jwks_OIDCProvider'($t17);

    // $t18 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    havoc $t18;

    // assume WellFormed($t18) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    assume $IsValid'vec'u8''($t18);

    // $t19 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    havoc $t19;

    // assume WellFormed($t19) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    assume $IsValid'bool'($t19);

    // $t20 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    havoc $t20;

    // assume WellFormed($t20) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    assume $IsValid'u64'($t20);

    // $t21 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    havoc $t21;

    // assume WellFormed($t21) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    assume $IsValid'u64'($t21);

    // trace_local[i]($t5) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    assume {:print "$info(): enter loop, variable(s) i havocked and reassigned"} true;
    assume {:print "$track_local(79,19,5):", $t5} $t5 == $t5;

    // assume Not(AbortFlag()) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    assume {:print "$info(): loop invariant holds at current state"} true;
    assume !$abort_flag;

    // assume Le($t5, $t14) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:246:17+19
    assume {:print "$at(20,8806,8825)"} true;
    assume ($t5 <= $t14);

    // assume forall j: num: TypeDomain<num>() where And(Ge(j, 0), Lt(j, $t5)): Not({
    //   let (obj: &0x1::jwks::OIDCProvider): (&0x1::jwks::OIDCProvider) = Tuple(Index($t10, j));
    //   {
    //     let provider: &0x1::jwks::OIDCProvider = obj;
    //     Eq<vector<u8>>(select jwks::OIDCProvider.name<0x1::jwks::OIDCProvider>(provider), $t1)
    //   }
    // }) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:247:17+59
    assume {:print "$at(20,8842,8901)"} true;
    assume (forall j: int :: $IsValid'num'(j) ==> (((j >= 0) && (j < $t5)))  ==> (!(var obj := ReadVec($t10, j); (var provider := obj; $IsEqual'vec'u8''(provider->$name, $t1)))));

    // assume Implies($t11, And(Lt($t5, $t14), {
    //   let (obj: &0x1::jwks::OIDCProvider): (&0x1::jwks::OIDCProvider) = Tuple(Index($t10, $t5));
    //   {
    //     let provider: &0x1::jwks::OIDCProvider = obj;
    //     Eq<vector<u8>>(select jwks::OIDCProvider.name<0x1::jwks::OIDCProvider>(provider), $t1)
    //   }
    // })) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    assume {:print "$at(20,8918,8959)"} true;
    assume ($t11 ==> (($t5 < $t14) && (var obj := ReadVec($t10, $t5); (var provider := obj; $IsEqual'vec'u8''(provider->$name, $t1)))));

    // $t16 := <($t5, $t14) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:250:13+7
    assume {:print "$at(20,8987,8994)"} true;
    call $t16 := $Lt($t5, $t14);

    // if ($t16) goto L0 else goto L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:244:9+507
    assume {:print "$at(20,8762,9269)"} true;
    if ($t16) { goto L0; } else { goto L2; }

    // label L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:253:19+4
    assume {:print "$at(20,9122,9126)"} true;
L0:

    // $t17 := vector::borrow<0x1::jwks::OIDCProvider>($t10, $t5) on_abort goto L11 with $t15 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:253:19+14
    assume {:print "$at(20,9122,9136)"} true;
    call $t17 := $1_vector_borrow'$1_jwks_OIDCProvider'($t10, $t5);
    if ($abort_flag) {
        assume {:print "$at(20,9122,9136)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(79,19):", $t15} $t15 == $t15;
        goto L11;
    }

    // $t18 := get_field<0x1::jwks::OIDCProvider>.name($t17) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:447:13+13
    assume {:print "$at(2,20465,20478)"} true;
    $t18 := $t17->$name;

    // $t19 := ==($t18, $t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:447:13+21
    $t19 := $IsEqual'vec'u8''($t18, $t1);

    // if ($t19) goto L4 else goto L12 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:253:13+122
    assume {:print "$at(20,9116,9238)"} true;
    if ($t19) { goto L4; } else { goto L12; }

    // label L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:254:24+4
    assume {:print "$at(20,9164,9168)"} true;
L4:

    // $t22 := true at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:254:24+4
    assume {:print "$at(20,9164,9168)"} true;
    $t22 := true;
    assume $IsValid'bool'($t22);

    // $t3 := $t22 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:254:17+11
    $t3 := $t22;

    // trace_local[find]($t22) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:254:17+11
    assume {:print "$track_local(79,19,3):", $t22} $t22 == $t22;

    // $t4 := $t5 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:255:17+15
    assume {:print "$at(20,9186,9201)"} true;
    $t4 := $t5;

    // trace_local[found_index]($t5) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:255:17+15
    assume {:print "$track_local(79,19,4):", $t5} $t5 == $t5;

    // label L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:260:9+100
    assume {:print "$at(20,9279,9379)"} true;
L2:

    // assert Iff(Not($t3), forall j: num: TypeDomain<num>() where And(Ge(j, 0), Lt(j, $t14)): Not({
    //   let (obj: &0x1::jwks::OIDCProvider): (&0x1::jwks::OIDCProvider) = Tuple(Index($t10, j));
    //   {
    //     let provider: &0x1::jwks::OIDCProvider = obj;
    //     Eq<vector<u8>>(select jwks::OIDCProvider.name<0x1::jwks::OIDCProvider>(provider), $t1)
    //   }
    // })) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:261:13+71
    assume {:print "$at(20,9298,9369)"} true;
    assert {:msg "assert_failed(20,9298,9369): unknown assertion failed"}
      (!$t3 <==> (forall j: int :: $IsValid'num'(j) ==> (((j >= 0) && (j < $t14)))  ==> (!(var obj := ReadVec($t10, j); (var provider := obj; $IsEqual'vec'u8''(provider->$name, $t1))))));

    // trace_local[$t12]($t4) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:263:16+11
    assume {:print "$at(20,9396,9407)"} true;
    assume {:print "$track_local(79,19,7):", $t4} $t4 == $t4;

    // if ($t3) goto L6 else goto L5 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:450:9+208
    assume {:print "$at(2,20508,20716)"} true;
    if ($t3) { goto L6; } else { goto L5; }

    // label L6 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:451:52+27
    assume {:print "$at(2,20578,20605)"} true;
L6:

    // $t23 := borrow_field<0x1::jwks::SupportedOIDCProviders>.providers($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:451:52+27
    assume {:print "$at(2,20578,20605)"} true;
    $t23 := $ChildMutation($t0, 0, $Dereference($t0)->$providers);

    // $t24 := vector::swap_remove<0x1::jwks::OIDCProvider>($t23, $t4) on_abort goto L11 with $t15 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:451:32+53
    call $t24,$t23 := $1_vector_swap_remove'$1_jwks_OIDCProvider'($t23, $t4);
    if ($abort_flag) {
        assume {:print "$at(2,20558,20611)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(79,19):", $t15} $t15 == $t15;
        goto L11;
    }

    // write_back[Reference($t0).providers (vector<0x1::jwks::OIDCProvider>)]($t23) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:451:32+53
    $t0 := $UpdateMutation($t0, $Update'$1_jwks_SupportedOIDCProviders'_providers($Dereference($t0), $Dereference($t23)));

    // trace_local[provider_set]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:451:32+53
    $temp_0'$1_jwks_SupportedOIDCProviders' := $Dereference($t0);
    assume {:print "$track_local(79,19,0):", $temp_0'$1_jwks_SupportedOIDCProviders'} $temp_0'$1_jwks_SupportedOIDCProviders' == $temp_0'$1_jwks_SupportedOIDCProviders';

    // trace_local[old_provider]($t24) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:451:32+53
    assume {:print "$track_local(79,19,8):", $t24} $t24 == $t24;

    // $t25 := get_field<0x1::jwks::OIDCProvider>.config_url($t24) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:452:26+23
    assume {:print "$at(2,20638,20661)"} true;
    $t25 := $t24->$config_url;

    // $t26 := opaque begin: option::some<vector<u8>>($t25) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:452:13+37

    // assume And(WellFormed($t26), Le(Len<vector<u8>>(select option::Option.vec($t26)), 1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:452:13+37
    assume ($IsValid'$1_option_Option'vec'u8'''($t26) && (LenVec($t26->$vec) <= 1));

    // assume Eq<0x1::option::Option<vector<u8>>>($t26, option::spec_some<vector<u8>>($t25)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:452:13+37
    assume $IsEqual'$1_option_Option'vec'u8'''($t26, $1_option_spec_some'vec'u8''($t25));

    // $t26 := opaque end: option::some<vector<u8>>($t25) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:452:13+37

    // $t9 := $t26 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:452:13+37
    $t9 := $t26;

    // trace_local[return]($t26) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:452:13+37
    assume {:print "$track_local(79,19,9):", $t26} $t26 == $t26;

    // label L7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:450:9+208
    assume {:print "$at(2,20508,20716)"} true;
L7:

    // trace_return[0]($t9) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:450:9+208
    assume {:print "$at(2,20508,20716)"} true;
    assume {:print "$track_return(79,19,0):", $t9} $t9 == $t9;

    // trace_local[provider_set]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:450:9+208
    $temp_0'$1_jwks_SupportedOIDCProviders' := $Dereference($t0);
    assume {:print "$track_local(79,19,0):", $temp_0'$1_jwks_SupportedOIDCProviders'} $temp_0'$1_jwks_SupportedOIDCProviders' == $temp_0'$1_jwks_SupportedOIDCProviders';

    // goto L10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:450:9+208
    goto L10;

    // label L5 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:454:13+14
    assume {:print "$at(2,20692,20706)"} true;
L5:

    // drop($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:454:13+14
    assume {:print "$at(2,20692,20706)"} true;

    // $t27 := opaque begin: option::none<vector<u8>>() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:454:13+14

    // assume And(WellFormed($t27), Le(Len<vector<u8>>(select option::Option.vec($t27)), 1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:454:13+14
    assume ($IsValid'$1_option_Option'vec'u8'''($t27) && (LenVec($t27->$vec) <= 1));

    // assume Eq<0x1::option::Option<vector<u8>>>($t27, option::spec_none<vector<u8>>()) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:454:13+14
    assume $IsEqual'$1_option_Option'vec'u8'''($t27, $1_option_spec_none'vec'u8''());

    // $t27 := opaque end: option::none<vector<u8>>() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:454:13+14

    // $t9 := $t27 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:454:13+14
    $t9 := $t27;

    // trace_local[return]($t27) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:454:13+14
    assume {:print "$track_local(79,19,9):", $t27} $t27 == $t27;

    // goto L7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:454:13+14
    goto L7;

    // label L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:258:13+1
    assume {:print "$at(20,9252,9253)"} true;
L3:

    // $t20 := 1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:258:18+1
    assume {:print "$at(20,9257,9258)"} true;
    $t20 := 1;
    assume $IsValid'u64'($t20);

    // $t21 := +($t5, $t20) on_abort goto L11 with $t15 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:258:13+6
    call $t21 := $AddU64($t5, $t20);
    if ($abort_flag) {
        assume {:print "$at(20,9252,9258)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(79,19):", $t15} $t15 == $t15;
        goto L11;
    }

    // trace_local[i]($t21) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:258:13+6
    assume {:print "$track_local(79,19,5):", $t21} $t21 == $t21;

    // label L9 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:258:13+1
    // Loop invariant checking block for the loop started with header: L8
L9:

    // assert Le($t21, $t14) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:246:17+19
    assume {:print "$at(20,8806,8825)"} true;
    assert {:msg "assert_failed(20,8806,8825): induction case of the loop invariant does not hold"}
      ($t21 <= $t14);

    // assert forall j: num: TypeDomain<num>() where And(Ge(j, 0), Lt(j, $t21)): Not({
    //   let (obj: &0x1::jwks::OIDCProvider): (&0x1::jwks::OIDCProvider) = Tuple(Index($t10, j));
    //   {
    //     let provider: &0x1::jwks::OIDCProvider = obj;
    //     Eq<vector<u8>>(select jwks::OIDCProvider.name<0x1::jwks::OIDCProvider>(provider), $t1)
    //   }
    // }) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:247:17+59
    assume {:print "$at(20,8842,8901)"} true;
    assert {:msg "assert_failed(20,8842,8901): induction case of the loop invariant does not hold"}
      (forall j: int :: $IsValid'num'(j) ==> (((j >= 0) && (j < $t21)))  ==> (!(var obj := ReadVec($t10, j); (var provider := obj; $IsEqual'vec'u8''(provider->$name, $t1)))));

    // assert Implies($t11, And(Lt($t21, $t14), {
    //   let (obj: &0x1::jwks::OIDCProvider): (&0x1::jwks::OIDCProvider) = Tuple(Index($t10, $t21));
    //   {
    //     let provider: &0x1::jwks::OIDCProvider = obj;
    //     Eq<vector<u8>>(select jwks::OIDCProvider.name<0x1::jwks::OIDCProvider>(provider), $t1)
    //   }
    // })) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    assume {:print "$at(20,8918,8959)"} true;
    assert {:msg "assert_failed(20,8918,8959): induction case of the loop invariant does not hold"}
      ($t11 ==> (($t21 < $t14) && (var obj := ReadVec($t10, $t21); (var provider := obj; $IsEqual'vec'u8''(provider->$name, $t1)))));

    // stop() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    assume false;
    return;

    // label L10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:456:5+1
    assume {:print "$at(2,20721,20722)"} true;
L10:

    // return $t9 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:456:5+1
    assume {:print "$at(2,20721,20722)"} true;
    $ret0 := $t9;
    $ret1 := $t0;
    return;

    // label L11 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:456:5+1
L11:

    // abort($t15) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:456:5+1
    assume {:print "$at(2,20721,20722)"} true;
    $abort_code := $t15;
    $abort_flag := true;
    return;

    // label L12 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L12:

    // drop($t0) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L3 at <internal>:1:1+10
    goto L3;

}

// fun jwks::set_patches [verification] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:379:5+272
procedure {:timeLimit 40} $1_jwks_set_patches$verify(_$t0: $signer, _$t1: Vec ($1_jwks_Patch)) returns ()
{
    // declare local variables
    var $t2: $Mutation (Vec ($1_jwks_Patch));
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: $Mutation ($1_jwks_Patches);
    var $t7: $Mutation (Vec ($1_jwks_Patch));
    var $t0: $signer;
    var $t1: Vec ($1_jwks_Patch);
    var $temp_0'signer': $signer;
    var $temp_0'vec'$1_jwks_Patch'': Vec ($1_jwks_Patch);
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:379:5+1
    assume {:print "$at(2,17768,17769)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:379:5+1
    assume $IsValid'vec'$1_jwks_Patch''($t1);

    // assume forall $rsc: 0x1::jwks::ObservedJWKs: ResourceDomain<0x1::jwks::ObservedJWKs>(): And(WellFormed($rsc), forall $elem: 0x1::jwks::ProviderJWKs: select jwks::AllProvidersJWKs.entries(select jwks::ObservedJWKs.jwks($rsc)): forall i: num: TypeDomain<num>() where And(Le(0, i), Lt(i, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): forall j: num: TypeDomain<num>() where And(Lt(i, j), Lt(j, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): Neq<vector<u8>>(jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), i)), jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), j)))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:379:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_jwks_ObservedJWKs_$memory, $a_0)}(var $rsc := $ResourceValue($1_jwks_ObservedJWKs_$memory, $a_0);
    (($IsValid'$1_jwks_ObservedJWKs'($rsc) && (var $range_1 := $rsc->$jwks->$entries; (forall $i_2: int :: InRangeVec($range_1, $i_2) ==> (var $elem := ReadVec($range_1, $i_2);
    ((forall i: int :: $IsValid'num'(i) ==> (((0 <= i) && (i < LenVec($elem->$jwks))))  ==> ((forall j: int :: $IsValid'num'(j) ==> (((i < j) && (j < LenVec($elem->$jwks))))  ==> (!$IsEqual'vec'u8''($1_jwks_$get_jwk_id(ReadVec($elem->$jwks, i)), $1_jwks_$get_jwk_id(ReadVec($elem->$jwks, j)))))))))))))));

    // assume forall $rsc: 0x1::jwks::PatchedJWKs: ResourceDomain<0x1::jwks::PatchedJWKs>(): And(WellFormed($rsc), forall $elem: 0x1::jwks::ProviderJWKs: select jwks::AllProvidersJWKs.entries(select jwks::PatchedJWKs.jwks($rsc)): forall i: num: TypeDomain<num>() where And(Le(0, i), Lt(i, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): forall j: num: TypeDomain<num>() where And(Lt(i, j), Lt(j, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): Neq<vector<u8>>(jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), i)), jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), j)))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:379:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_jwks_PatchedJWKs_$memory, $a_0)}(var $rsc := $ResourceValue($1_jwks_PatchedJWKs_$memory, $a_0);
    (($IsValid'$1_jwks_PatchedJWKs'($rsc) && (var $range_1 := $rsc->$jwks->$entries; (forall $i_2: int :: InRangeVec($range_1, $i_2) ==> (var $elem := ReadVec($range_1, $i_2);
    ((forall i: int :: $IsValid'num'(i) ==> (((0 <= i) && (i < LenVec($elem->$jwks))))  ==> ((forall j: int :: $IsValid'num'(j) ==> (((i < j) && (j < LenVec($elem->$jwks))))  ==> (!$IsEqual'vec'u8''($1_jwks_$get_jwk_id(ReadVec($elem->$jwks, i)), $1_jwks_$get_jwk_id(ReadVec($elem->$jwks, j)))))))))))))));

    // assume forall $rsc: 0x1::jwks::Patches: ResourceDomain<0x1::jwks::Patches>(): WellFormed($rsc) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:379:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_jwks_Patches_$memory, $a_0)}(var $rsc := $ResourceValue($1_jwks_Patches_$memory, $a_0);
    ($IsValid'$1_jwks_Patches'($rsc))));

    // trace_local[fx]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:379:5+1
    assume {:print "$track_local(79,20,0):", $t0} $t0 == $t0;

    // trace_local[patches]($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:379:5+1
    assume {:print "$track_local(79,20,1):", $t1} $t1 == $t1;

    // opaque begin: system_addresses::assert_aptos_framework($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:380:9+44
    assume {:print "$at(2,17882,17926)"} true;

    // assume Identical($t3, Neq<address>(signer::$address_of($t0), 0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:380:9+44
    assume ($t3 == !$IsEqual'address'($1_signer_$address_of($t0), 1));

    // if ($t3) goto L4 else goto L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:380:9+44
    if ($t3) { goto L4; } else { goto L3; }

    // label L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:380:9+44
L4:

    // assume And(Neq<address>(signer::$address_of($t0), 0x1), Eq(5, $t4)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:380:9+44
    assume {:print "$at(2,17882,17926)"} true;
    assume (!$IsEqual'address'($1_signer_$address_of($t0), 1) && $IsEqual'num'(5, $t4));

    // trace_abort($t4) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:380:9+44
    assume {:print "$at(2,17882,17926)"} true;
    assume {:print "$track_abort(79,20):", $t4} $t4 == $t4;

    // goto L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:380:9+44
    goto L2;

    // label L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:380:9+44
L3:

    // opaque end: system_addresses::assert_aptos_framework($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:380:9+44
    assume {:print "$at(2,17882,17926)"} true;

    // $t5 := 0x1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:381:36+16
    assume {:print "$at(2,17963,17979)"} true;
    $t5 := 1;
    assume $IsValid'address'($t5);

    // $t6 := borrow_global<0x1::jwks::Patches>($t5) on_abort goto L2 with $t4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:381:9+44
    if (!$ResourceExists($1_jwks_Patches_$memory, $t5)) {
        call $ExecFailureAbort();
    } else {
        $t6 := $Mutation($Global($t5), EmptyVec(), $ResourceValue($1_jwks_Patches_$memory, $t5));
    }
    if ($abort_flag) {
        assume {:print "$at(2,17936,17980)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(79,20):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t7 := borrow_field<0x1::jwks::Patches>.patches($t6) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:381:9+52
    $t7 := $ChildMutation($t6, 0, $Dereference($t6)->$patches);

    // trace_local[$t2]($t7) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:381:9+62
    $temp_0'vec'$1_jwks_Patch'' := $Dereference($t7);
    assume {:print "$track_local(79,20,2):", $temp_0'vec'$1_jwks_Patch''} $temp_0'vec'$1_jwks_Patch'' == $temp_0'vec'$1_jwks_Patch'';

    // write_ref($t7, $t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:381:9+62
    $t7 := $UpdateMutation($t7, $t1);

    // write_back[Reference($t6).patches (vector<0x1::jwks::Patch>)]($t7) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:381:9+62
    $t6 := $UpdateMutation($t6, $Update'$1_jwks_Patches'_patches($Dereference($t6), $Dereference($t7)));

    // write_back[0x1::jwks::Patches@]($t6) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:381:9+62
    $1_jwks_Patches_$memory := $ResourceUpdate($1_jwks_Patches_$memory, $GlobalLocationAddress($t6),
        $Dereference($t6));

    // jwks::regenerate_patched_jwks() on_abort goto L2 with $t4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:382:9+25
    assume {:print "$at(2,18008,18033)"} true;
    call $1_jwks_regenerate_patched_jwks();
    if ($abort_flag) {
        assume {:print "$at(2,18008,18033)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(79,20):", $t4} $t4 == $t4;
        goto L2;
    }

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:383:5+1
    assume {:print "$at(2,18039,18040)"} true;
L1:

    // return () at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:383:5+1
    assume {:print "$at(2,18039,18040)"} true;
    return;

    // label L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:383:5+1
L2:

    // abort($t4) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:383:5+1
    assume {:print "$at(2,18039,18040)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun jwks::try_get_jwk_by_issuer [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:534:5+449
procedure {:inline 1} $1_jwks_try_get_jwk_by_issuer(_$t0: $1_jwks_AllProvidersJWKs, _$t1: Vec (int), _$t2: Vec (int)) returns ($ret0: $1_option_Option'$1_jwks_JWK')
{
    // declare local variables
    var $t3: Vec ($1_jwks_ProviderJWKs);
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: $1_jwks_ProviderJWKs;
    var $t9: int;
    var $t10: $1_option_Option'$1_jwks_JWK';
    var $t11: Vec ($1_jwks_ProviderJWKs);
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: $1_jwks_ProviderJWKs;
    var $t19: Vec (int);
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: bool;
    var $t24: Vec ($1_jwks_ProviderJWKs);
    var $t25: $1_jwks_ProviderJWKs;
    var $t26: int;
    var $t27: $1_option_Option'$1_jwks_JWK';
    var $t28: bool;
    var $t29: $1_option_Option'$1_jwks_JWK';
    var $t0: $1_jwks_AllProvidersJWKs;
    var $t1: Vec (int);
    var $t2: Vec (int);
    var $temp_0'$1_jwks_AllProvidersJWKs': $1_jwks_AllProvidersJWKs;
    var $temp_0'$1_jwks_ProviderJWKs': $1_jwks_ProviderJWKs;
    var $temp_0'$1_option_Option'$1_jwks_JWK'': $1_option_Option'$1_jwks_JWK';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'$1_jwks_ProviderJWKs'': Vec ($1_jwks_ProviderJWKs);
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[jwks]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:534:5+1
    assume {:print "$at(2,24616,24617)"} true;
    assume {:print "$track_local(79,22,0):", $t0} $t0 == $t0;

    // trace_local[issuer]($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:534:5+1
    assume {:print "$track_local(79,22,1):", $t1} $t1 == $t1;

    // trace_local[jwk_id]($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:534:5+1
    assume {:print "$track_local(79,22,2):", $t2} $t2 == $t2;

    // $t11 := get_field<0x1::jwks::AllProvidersJWKs>.entries($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:535:50+13
    assume {:print "$at(2,24771,24784)"} true;
    $t11 := $t0->$entries;

    // trace_local[self]($t11) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:239:23+4
    assume {:print "$at(20,8575,8579)"} true;
    assume {:print "$track_local(79,22,3):", $t11} $t11 == $t11;

    // $t12 := false at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:240:20+5
    assume {:print "$at(20,8666,8671)"} true;
    $t12 := false;
    assume $IsValid'bool'($t12);

    // $t4 := $t12 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:240:20+5
    $t4 := $t12;

    // trace_local[find]($t12) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:240:20+5
    assume {:print "$track_local(79,22,4):", $t12} $t12 == $t12;

    // $t13 := 0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:241:27+1
    assume {:print "$at(20,8699,8700)"} true;
    $t13 := 0;
    assume $IsValid'u64'($t13);

    // $t5 := $t13 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:241:27+1
    $t5 := $t13;

    // trace_local[found_index]($t13) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:241:27+1
    assume {:print "$track_local(79,22,5):", $t13} $t13 == $t13;

    // $t14 := 0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:242:17+1
    assume {:print "$at(20,8718,8719)"} true;
    $t14 := 0;
    assume $IsValid'u64'($t14);

    // trace_local[i]($t14) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:242:17+1
    assume {:print "$track_local(79,22,6):", $t14} $t14 == $t14;

    // $t15 := vector::length<0x1::jwks::ProviderJWKs>($t11) on_abort goto L11 with $t16 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:243:19+13
    assume {:print "$at(20,8739,8752)"} true;
    call $t15 := $1_vector_length'$1_jwks_ProviderJWKs'($t11);
    if ($abort_flag) {
        assume {:print "$at(20,8739,8752)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(79,22):", $t16} $t16 == $t16;
        goto L11;
    }

    // trace_local[len]($t15) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:243:19+13
    assume {:print "$track_local(79,22,7):", $t15} $t15 == $t15;

    // label L8 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:245:13+190
    assume {:print "$at(20,8783,8973)"} true;
L8:

    // assert Le($t14, $t15) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:246:17+19
    assume {:print "$at(20,8806,8825)"} true;
    assert {:msg "assert_failed(20,8806,8825): base case of the loop invariant does not hold"}
      ($t14 <= $t15);

    // assert forall j: num: TypeDomain<num>() where And(Ge(j, 0), Lt(j, $t14)): Not({
    //   let (obj: &0x1::jwks::ProviderJWKs): (&0x1::jwks::ProviderJWKs) = Tuple(Index($t11, j));
    //   {
    //     let provider_jwks: &0x1::jwks::ProviderJWKs = obj;
    //     Eq<vector<u8>>($t1, select jwks::ProviderJWKs.issuer<0x1::jwks::ProviderJWKs>(provider_jwks))
    //   }
    // }) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:247:17+59
    assume {:print "$at(20,8842,8901)"} true;
    assert {:msg "assert_failed(20,8842,8901): base case of the loop invariant does not hold"}
      (forall j: int :: $IsValid'num'(j) ==> (((j >= 0) && (j < $t14)))  ==> (!(var obj := ReadVec($t11, j); (var provider_jwks := obj; $IsEqual'vec'u8''($t1, provider_jwks->$issuer)))));

    // assert Implies($t12, And(Lt($t14, $t15), {
    //   let (obj: &0x1::jwks::ProviderJWKs): (&0x1::jwks::ProviderJWKs) = Tuple(Index($t11, $t14));
    //   {
    //     let provider_jwks: &0x1::jwks::ProviderJWKs = obj;
    //     Eq<vector<u8>>($t1, select jwks::ProviderJWKs.issuer<0x1::jwks::ProviderJWKs>(provider_jwks))
    //   }
    // })) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    assume {:print "$at(20,8918,8959)"} true;
    assert {:msg "assert_failed(20,8918,8959): base case of the loop invariant does not hold"}
      ($t12 ==> (($t14 < $t15) && (var obj := ReadVec($t11, $t14); (var provider_jwks := obj; $IsEqual'vec'u8''($t1, provider_jwks->$issuer)))));

    // $t6 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    havoc $t6;

    // assume WellFormed($t6) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    assume $IsValid'u64'($t6);

    // $t17 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    havoc $t17;

    // assume WellFormed($t17) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    assume $IsValid'bool'($t17);

    // $t18 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    havoc $t18;

    // assume And(WellFormed($t18), forall i: num: TypeDomain<num>() where And(Le(0, i), Lt(i, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($t18)))): forall j: num: TypeDomain<num>() where And(Lt(i, j), Lt(j, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($t18)))): Neq<vector<u8>>(jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($t18), i)), jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($t18), j)))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    assume ($IsValid'$1_jwks_ProviderJWKs'($t18) && (forall i: int :: $IsValid'num'(i) ==> (((0 <= i) && (i < LenVec($t18->$jwks))))  ==> ((forall j: int :: $IsValid'num'(j) ==> (((i < j) && (j < LenVec($t18->$jwks))))  ==> (!$IsEqual'vec'u8''($1_jwks_$get_jwk_id(ReadVec($t18->$jwks, i)), $1_jwks_$get_jwk_id(ReadVec($t18->$jwks, j))))))));

    // $t19 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    havoc $t19;

    // assume WellFormed($t19) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    assume $IsValid'vec'u8''($t19);

    // $t20 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    havoc $t20;

    // assume WellFormed($t20) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    assume $IsValid'bool'($t20);

    // $t21 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    havoc $t21;

    // assume WellFormed($t21) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    assume $IsValid'u64'($t21);

    // $t22 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    havoc $t22;

    // assume WellFormed($t22) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    assume $IsValid'u64'($t22);

    // trace_local[i]($t6) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    assume {:print "$info(): enter loop, variable(s) i havocked and reassigned"} true;
    assume {:print "$track_local(79,22,6):", $t6} $t6 == $t6;

    // assume Not(AbortFlag()) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    assume {:print "$info(): loop invariant holds at current state"} true;
    assume !$abort_flag;

    // assume Le($t6, $t15) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:246:17+19
    assume {:print "$at(20,8806,8825)"} true;
    assume ($t6 <= $t15);

    // assume forall j: num: TypeDomain<num>() where And(Ge(j, 0), Lt(j, $t6)): Not({
    //   let (obj: &0x1::jwks::ProviderJWKs): (&0x1::jwks::ProviderJWKs) = Tuple(Index($t11, j));
    //   {
    //     let provider_jwks: &0x1::jwks::ProviderJWKs = obj;
    //     Eq<vector<u8>>($t1, select jwks::ProviderJWKs.issuer<0x1::jwks::ProviderJWKs>(provider_jwks))
    //   }
    // }) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:247:17+59
    assume {:print "$at(20,8842,8901)"} true;
    assume (forall j: int :: $IsValid'num'(j) ==> (((j >= 0) && (j < $t6)))  ==> (!(var obj := ReadVec($t11, j); (var provider_jwks := obj; $IsEqual'vec'u8''($t1, provider_jwks->$issuer)))));

    // assume Implies($t12, And(Lt($t6, $t15), {
    //   let (obj: &0x1::jwks::ProviderJWKs): (&0x1::jwks::ProviderJWKs) = Tuple(Index($t11, $t6));
    //   {
    //     let provider_jwks: &0x1::jwks::ProviderJWKs = obj;
    //     Eq<vector<u8>>($t1, select jwks::ProviderJWKs.issuer<0x1::jwks::ProviderJWKs>(provider_jwks))
    //   }
    // })) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    assume {:print "$at(20,8918,8959)"} true;
    assume ($t12 ==> (($t6 < $t15) && (var obj := ReadVec($t11, $t6); (var provider_jwks := obj; $IsEqual'vec'u8''($t1, provider_jwks->$issuer)))));

    // $t17 := <($t6, $t15) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:250:13+7
    assume {:print "$at(20,8987,8994)"} true;
    call $t17 := $Lt($t6, $t15);

    // if ($t17) goto L0 else goto L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:244:9+507
    assume {:print "$at(20,8762,9269)"} true;
    if ($t17) { goto L0; } else { goto L2; }

    // label L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:253:19+4
    assume {:print "$at(20,9122,9126)"} true;
L0:

    // $t18 := vector::borrow<0x1::jwks::ProviderJWKs>($t11, $t6) on_abort goto L11 with $t16 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:253:19+14
    assume {:print "$at(20,9122,9136)"} true;
    call $t18 := $1_vector_borrow'$1_jwks_ProviderJWKs'($t11, $t6);
    if ($abort_flag) {
        assume {:print "$at(20,9122,9136)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(79,22):", $t16} $t16 == $t16;
        goto L11;
    }

    // trace_local[$t16]($t18) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:253:19+14
    assume {:print "$track_local(79,22,8):", $t18} $t18 == $t18;

    // $t19 := get_field<0x1::jwks::ProviderJWKs>.issuer($t18) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:537:23+20
    assume {:print "$at(2,24868,24888)"} true;
    $t19 := $t18->$issuer;

    // $t20 := ==($t1, $t19) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:537:13+30
    $t20 := $IsEqual'vec'u8''($t1, $t19);

    // if ($t20) goto L4 else goto L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:253:13+122
    assume {:print "$at(20,9116,9238)"} true;
    if ($t20) { goto L4; } else { goto L3; }

    // label L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:254:24+4
    assume {:print "$at(20,9164,9168)"} true;
L4:

    // $t23 := true at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:254:24+4
    assume {:print "$at(20,9164,9168)"} true;
    $t23 := true;
    assume $IsValid'bool'($t23);

    // $t4 := $t23 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:254:17+11
    $t4 := $t23;

    // trace_local[find]($t23) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:254:17+11
    assume {:print "$track_local(79,22,4):", $t23} $t23 == $t23;

    // $t5 := $t6 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:255:17+15
    assume {:print "$at(20,9186,9201)"} true;
    $t5 := $t6;

    // trace_local[found_index]($t6) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:255:17+15
    assume {:print "$track_local(79,22,5):", $t6} $t6 == $t6;

    // label L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:260:9+100
    assume {:print "$at(20,9279,9379)"} true;
L2:

    // assert Iff(Not($t4), forall j: num: TypeDomain<num>() where And(Ge(j, 0), Lt(j, $t15)): Not({
    //   let (obj: &0x1::jwks::ProviderJWKs): (&0x1::jwks::ProviderJWKs) = Tuple(Index($t11, j));
    //   {
    //     let provider_jwks: &0x1::jwks::ProviderJWKs = obj;
    //     Eq<vector<u8>>($t1, select jwks::ProviderJWKs.issuer<0x1::jwks::ProviderJWKs>(provider_jwks))
    //   }
    // })) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:261:13+71
    assume {:print "$at(20,9298,9369)"} true;
    assert {:msg "assert_failed(20,9298,9369): unknown assertion failed"}
      (!$t4 <==> (forall j: int :: $IsValid'num'(j) ==> (((j >= 0) && (j < $t15)))  ==> (!(var obj := ReadVec($t11, j); (var provider_jwks := obj; $IsEqual'vec'u8''($t1, provider_jwks->$issuer))))));

    // trace_local[$t13]($t5) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:263:16+11
    assume {:print "$at(20,9396,9407)"} true;
    assume {:print "$track_local(79,22,9):", $t5} $t5 == $t5;

    // if ($t4) goto L6 else goto L5 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:540:9+149
    assume {:print "$at(2,24910,25059)"} true;
    if ($t4) { goto L6; } else { goto L5; }

    // label L6 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:541:46+13
    assume {:print "$at(2,24975,24988)"} true;
L6:

    // $t24 := get_field<0x1::jwks::AllProvidersJWKs>.entries($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:541:46+13
    assume {:print "$at(2,24975,24988)"} true;
    $t24 := $t0->$entries;

    // $t25 := vector::borrow<0x1::jwks::ProviderJWKs>($t24, $t5) on_abort goto L11 with $t16 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:541:31+36
    call $t25 := $1_vector_borrow'$1_jwks_ProviderJWKs'($t24, $t5);
    if ($abort_flag) {
        assume {:print "$at(2,24960,24996)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(79,22):", $t16} $t16 == $t16;
        goto L11;
    }

    // assume Identical($t26, jwks::spec_first_match_idx(select jwks::ProviderJWKs.jwks<0x1::jwks::ProviderJWKs>($t25), $t2)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.spec.move:136:5+59
    assume {:print "$at(3,6036,6095)"} true;
    assume ($t26 == $1_jwks_spec_first_match_idx($t25->$jwks, $t2));

    // $t27 := opaque begin: jwks::try_get_jwk_by_id($t25, $t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:541:13+63
    assume {:print "$at(2,24942,25005)"} true;

    // $t28 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:541:13+63
    havoc $t28;

    // if ($t28) goto L13 else goto L12 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:541:13+63
    if ($t28) { goto L13; } else { goto L12; }

    // label L13 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:541:13+63
L13:

    // trace_abort($t16) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:541:13+63
    assume {:print "$at(2,24942,25005)"} true;
    assume {:print "$track_abort(79,22):", $t16} $t16 == $t16;

    // goto L11 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:541:13+63
    goto L11;

    // label L12 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:541:13+63
L12:

    // assume And(WellFormed($t27), Le(Len<0x1::jwks::JWK>(select option::Option.vec($t27)), 1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:541:13+63
    assume {:print "$at(2,24942,25005)"} true;
    assume ($IsValid'$1_option_Option'$1_jwks_JWK''($t27) && (LenVec($t27->$vec) <= 1));

    // assume Implies(option::$is_none<0x1::jwks::JWK>($t27), Eq<u64>($t26, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks<0x1::jwks::ProviderJWKs>($t25)))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:541:13+63
    assume ($1_option_$is_none'$1_jwks_JWK'($t27) ==> $IsEqual'u64'($t26, LenVec($t25->$jwks)));

    // assume Implies(option::$is_some<0x1::jwks::JWK>($t27), And(And(Lt($t26, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks<0x1::jwks::ProviderJWKs>($t25))), Eq<0x1::jwks::JWK>(Index(select jwks::ProviderJWKs.jwks<0x1::jwks::ProviderJWKs>($t25), $t26), option::$borrow<0x1::jwks::JWK>($t27))), Eq<vector<u8>>(jwks::$get_jwk_id(option::$borrow<0x1::jwks::JWK>($t27)), $t2))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:541:13+63
    assume ($1_option_$is_some'$1_jwks_JWK'($t27) ==> ((($t26 < LenVec($t25->$jwks)) && $IsEqual'$1_jwks_JWK'(ReadVec($t25->$jwks, $t26), $1_option_$borrow'$1_jwks_JWK'($t27))) && $IsEqual'vec'u8''($1_jwks_$get_jwk_id($1_option_$borrow'$1_jwks_JWK'($t27)), $t2)));

    // $t27 := opaque end: jwks::try_get_jwk_by_id($t25, $t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:541:13+63

    // $t10 := $t27 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:541:13+63
    $t10 := $t27;

    // trace_local[return]($t27) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:541:13+63
    assume {:print "$track_local(79,22,10):", $t27} $t27 == $t27;

    // label L7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:540:9+149
    assume {:print "$at(2,24910,25059)"} true;
L7:

    // trace_return[0]($t10) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:540:9+149
    assume {:print "$at(2,24910,25059)"} true;
    assume {:print "$track_return(79,22,0):", $t10} $t10 == $t10;

    // goto L10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:540:9+149
    goto L10;

    // label L5 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:543:13+14
    assume {:print "$at(2,25035,25049)"} true;
L5:

    // $t29 := opaque begin: option::none<0x1::jwks::JWK>() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:543:13+14
    assume {:print "$at(2,25035,25049)"} true;

    // assume And(WellFormed($t29), Le(Len<0x1::jwks::JWK>(select option::Option.vec($t29)), 1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:543:13+14
    assume ($IsValid'$1_option_Option'$1_jwks_JWK''($t29) && (LenVec($t29->$vec) <= 1));

    // assume Eq<0x1::option::Option<0x1::jwks::JWK>>($t29, option::spec_none<0x1::jwks::JWK>()) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:543:13+14
    assume $IsEqual'$1_option_Option'$1_jwks_JWK''($t29, $1_option_spec_none'$1_jwks_JWK'());

    // $t29 := opaque end: option::none<0x1::jwks::JWK>() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:543:13+14

    // $t10 := $t29 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:543:13+14
    $t10 := $t29;

    // trace_local[return]($t29) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:543:13+14
    assume {:print "$track_local(79,22,10):", $t29} $t29 == $t29;

    // goto L7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:543:13+14
    goto L7;

    // label L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:258:13+1
    assume {:print "$at(20,9252,9253)"} true;
L3:

    // $t21 := 1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:258:18+1
    assume {:print "$at(20,9257,9258)"} true;
    $t21 := 1;
    assume $IsValid'u64'($t21);

    // $t22 := +($t6, $t21) on_abort goto L11 with $t16 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:258:13+6
    call $t22 := $AddU64($t6, $t21);
    if ($abort_flag) {
        assume {:print "$at(20,9252,9258)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(79,22):", $t16} $t16 == $t16;
        goto L11;
    }

    // trace_local[i]($t22) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:258:13+6
    assume {:print "$track_local(79,22,6):", $t22} $t22 == $t22;

    // label L9 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:258:13+1
    // Loop invariant checking block for the loop started with header: L8
L9:

    // assert Le($t22, $t15) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:246:17+19
    assume {:print "$at(20,8806,8825)"} true;
    assert {:msg "assert_failed(20,8806,8825): induction case of the loop invariant does not hold"}
      ($t22 <= $t15);

    // assert forall j: num: TypeDomain<num>() where And(Ge(j, 0), Lt(j, $t22)): Not({
    //   let (obj: &0x1::jwks::ProviderJWKs): (&0x1::jwks::ProviderJWKs) = Tuple(Index($t11, j));
    //   {
    //     let provider_jwks: &0x1::jwks::ProviderJWKs = obj;
    //     Eq<vector<u8>>($t1, select jwks::ProviderJWKs.issuer<0x1::jwks::ProviderJWKs>(provider_jwks))
    //   }
    // }) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:247:17+59
    assume {:print "$at(20,8842,8901)"} true;
    assert {:msg "assert_failed(20,8842,8901): induction case of the loop invariant does not hold"}
      (forall j: int :: $IsValid'num'(j) ==> (((j >= 0) && (j < $t22)))  ==> (!(var obj := ReadVec($t11, j); (var provider_jwks := obj; $IsEqual'vec'u8''($t1, provider_jwks->$issuer)))));

    // assert Implies($t12, And(Lt($t22, $t15), {
    //   let (obj: &0x1::jwks::ProviderJWKs): (&0x1::jwks::ProviderJWKs) = Tuple(Index($t11, $t22));
    //   {
    //     let provider_jwks: &0x1::jwks::ProviderJWKs = obj;
    //     Eq<vector<u8>>($t1, select jwks::ProviderJWKs.issuer<0x1::jwks::ProviderJWKs>(provider_jwks))
    //   }
    // })) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    assume {:print "$at(20,8918,8959)"} true;
    assert {:msg "assert_failed(20,8918,8959): induction case of the loop invariant does not hold"}
      ($t12 ==> (($t22 < $t15) && (var obj := ReadVec($t11, $t22); (var provider_jwks := obj; $IsEqual'vec'u8''($t1, provider_jwks->$issuer)))));

    // stop() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:248:17+41
    assume false;
    return;

    // label L10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:545:5+1
    assume {:print "$at(2,25064,25065)"} true;
L10:

    // return $t10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:545:5+1
    assume {:print "$at(2,25064,25065)"} true;
    $ret0 := $t10;
    return;

    // label L11 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:545:5+1
L11:

    // abort($t16) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:545:5+1
    assume {:print "$at(2,25064,25065)"} true;
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun jwks::try_get_patched_jwk [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:288:5+235
procedure {:inline 1} $1_jwks_try_get_patched_jwk(_$t0: Vec (int), _$t1: Vec (int)) returns ($ret0: $1_option_Option'$1_jwks_JWK')
{
    // declare local variables
    var $t2: int;
    var $t3: $1_jwks_PatchedJWKs;
    var $t4: int;
    var $t5: $1_jwks_AllProvidersJWKs;
    var $t6: $1_option_Option'$1_jwks_JWK';
    var $t0: Vec (int);
    var $t1: Vec (int);
    var $temp_0'$1_option_Option'$1_jwks_JWK'': $1_option_Option'$1_jwks_JWK';
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[issuer]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:288:5+1
    assume {:print "$at(2,13442,13443)"} true;
    assume {:print "$track_local(79,23,0):", $t0} $t0 == $t0;

    // trace_local[jwk_id]($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:288:5+1
    assume {:print "$track_local(79,23,1):", $t1} $t1 == $t1;

    // $t2 := 0x1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:289:48+16
    assume {:print "$at(2,13596,13612)"} true;
    $t2 := 1;
    assume $IsValid'address'($t2);

    // $t3 := get_global<0x1::jwks::PatchedJWKs>($t2) on_abort goto L2 with $t4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:289:21+44
    if (!$ResourceExists($1_jwks_PatchedJWKs_$memory, $t2)) {
        call $ExecFailureAbort();
    } else {
        $t3 := $ResourceValue($1_jwks_PatchedJWKs_$memory, $t2);
    }
    if ($abort_flag) {
        assume {:print "$at(2,13569,13613)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(79,23):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t5 := get_field<0x1::jwks::PatchedJWKs>.jwks($t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:289:20+50
    $t5 := $t3->$jwks;

    // $t6 := jwks::try_get_jwk_by_issuer($t5, $t0, $t1) on_abort goto L2 with $t4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:290:9+43
    assume {:print "$at(2,13628,13671)"} true;
    call $t6 := $1_jwks_try_get_jwk_by_issuer($t5, $t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,13628,13671)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(79,23):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_return[0]($t6) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:290:9+43
    assume {:print "$track_return(79,23,0):", $t6} $t6 == $t6;

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:291:5+1
    assume {:print "$at(2,13676,13677)"} true;
L1:

    // return $t6 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:291:5+1
    assume {:print "$at(2,13676,13677)"} true;
    $ret0 := $t6;
    return;

    // label L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:291:5+1
L2:

    // abort($t4) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:291:5+1
    assume {:print "$at(2,13676,13677)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun jwks::upsert_jwk [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:632:5+1030
procedure {:inline 1} $1_jwks_upsert_jwk(_$t0: $Mutation ($1_jwks_ProviderJWKs), _$t1: $1_jwks_JWK) returns ($ret0: $1_option_Option'$1_jwks_JWK', $ret1: $Mutation ($1_jwks_ProviderJWKs))
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: $1_jwks_JWK;
    var $t6: $1_comparator_Result;
    var $t7: $Mutation ($1_jwks_JWK);
    var $t8: $1_option_Option'$1_jwks_JWK';
    var $t9: bool;
    var $t10: int;
    var $t11: Vec ($1_jwks_JWK);
    var $t12: int;
    var $t13: int;
    var $t14: bool;
    var $t15: Vec ($1_jwks_JWK);
    var $t16: $1_jwks_JWK;
    var $t17: Vec (int);
    var $t18: Vec (int);
    var $t19: $1_comparator_Result;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: $1_comparator_Result;
    var $t26: $1_comparator_Result;
    var $t27: bool;
    var $t28: $Mutation (Vec ($1_jwks_JWK));
    var $t29: $Mutation ($1_jwks_JWK);
    var $t30: $1_jwks_JWK;
    var $t31: $1_option_Option'$1_jwks_JWK';
    var $t32: $Mutation (Vec ($1_jwks_JWK));
    var $t33: $1_option_Option'$1_jwks_JWK';
    var $t0: $Mutation ($1_jwks_ProviderJWKs);
    var $t1: $1_jwks_JWK;
    var $temp_0'$1_comparator_Result': $1_comparator_Result;
    var $temp_0'$1_jwks_JWK': $1_jwks_JWK;
    var $temp_0'$1_jwks_ProviderJWKs': $1_jwks_ProviderJWKs;
    var $temp_0'$1_option_Option'$1_jwks_JWK'': $1_option_Option'$1_jwks_JWK';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[set]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:632:5+1
    assume {:print "$at(2,28726,28727)"} true;
    $temp_0'$1_jwks_ProviderJWKs' := $Dereference($t0);
    assume {:print "$track_local(79,26,0):", $temp_0'$1_jwks_ProviderJWKs'} $temp_0'$1_jwks_ProviderJWKs' == $temp_0'$1_jwks_ProviderJWKs';

    // trace_local[jwk]($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:632:5+1
    assume {:print "$track_local(79,26,1):", $t1} $t1 == $t1;

    // $t9 := false at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:633:21+5
    assume {:print "$at(2,28810,28815)"} true;
    $t9 := false;
    assume $IsValid'bool'($t9);

    // $t2 := $t9 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:633:21+5
    $t2 := $t9;

    // trace_local[found]($t9) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:633:21+5
    assume {:print "$track_local(79,26,2):", $t9} $t9 == $t9;

    // $t10 := 0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:634:21+1
    assume {:print "$at(2,28837,28838)"} true;
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // trace_local[index]($t10) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:634:21+1
    assume {:print "$track_local(79,26,3):", $t10} $t10 == $t10;

    // $t11 := get_field<0x1::jwks::ProviderJWKs>.jwks($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:635:42+9
    assume {:print "$at(2,28881,28890)"} true;
    $t11 := $Dereference($t0)->$jwks;

    // $t12 := vector::length<0x1::jwks::JWK>($t11) on_abort goto L11 with $t13 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:635:27+25
    call $t12 := $1_vector_length'$1_jwks_JWK'($t11);
    if ($abort_flag) {
        assume {:print "$at(2,28866,28891)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(79,26):", $t13} $t13 == $t13;
        goto L11;
    }

    // trace_local[num_entries]($t12) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:635:27+25
    assume {:print "$track_local(79,26,4):", $t12} $t12 == $t12;

    // label L5 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:636:16+5
    assume {:print "$at(2,28908,28913)"} true;
L5:

    // $t3 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:636:16+5
    assume {:print "$at(2,28908,28913)"} true;
    havoc $t3;

    // assume WellFormed($t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:636:16+5
    assume $IsValid'u64'($t3);

    // $t14 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:636:16+5
    havoc $t14;

    // assume WellFormed($t14) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:636:16+5
    assume $IsValid'bool'($t14);

    // $t15 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:636:16+5
    havoc $t15;

    // assume WellFormed($t15) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:636:16+5
    assume $IsValid'vec'$1_jwks_JWK''($t15);

    // $t16 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:636:16+5
    havoc $t16;

    // assume WellFormed($t16) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:636:16+5
    assume $IsValid'$1_jwks_JWK'($t16);

    // $t17 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:636:16+5
    havoc $t17;

    // assume WellFormed($t17) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:636:16+5
    assume $IsValid'vec'u8''($t17);

    // $t18 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:636:16+5
    havoc $t18;

    // assume WellFormed($t18) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:636:16+5
    assume $IsValid'vec'u8''($t18);

    // $t19 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:636:16+5
    havoc $t19;

    // assume And(WellFormed($t19), Or(Or(Eq<u8>(select comparator::Result.inner($t19), 0), Eq<u8>(select comparator::Result.inner($t19), 1)), Eq<u8>(select comparator::Result.inner($t19), 2))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:636:16+5
    assume ($IsValid'$1_comparator_Result'($t19) && (($IsEqual'u8'($t19->$inner, 0) || $IsEqual'u8'($t19->$inner, 1)) || $IsEqual'u8'($t19->$inner, 2)));

    // $t20 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:636:16+5
    havoc $t20;

    // assume WellFormed($t20) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:636:16+5
    assume $IsValid'bool'($t20);

    // $t21 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:636:16+5
    havoc $t21;

    // assume WellFormed($t21) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:636:16+5
    assume $IsValid'u64'($t21);

    // $t22 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:636:16+5
    havoc $t22;

    // assume WellFormed($t22) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:636:16+5
    assume $IsValid'u64'($t22);

    // trace_local[index]($t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:636:16+5
    assume {:print "$info(): enter loop, variable(s) index havocked and reassigned"} true;
    assume {:print "$track_local(79,26,3):", $t3} $t3 == $t3;

    // assume Not(AbortFlag()) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:636:16+5
    assume !$abort_flag;

    // $t14 := <($t3, $t12) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:636:16+19
    call $t14 := $Lt($t3, $t12);

    // if ($t14) goto L0 else goto L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:636:9+377
    if ($t14) { goto L0; } else { goto L2; }

    // label L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:637:44+9
    assume {:print "$at(2,28974,28983)"} true;
L0:

    // $t15 := get_field<0x1::jwks::ProviderJWKs>.jwks($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:637:44+9
    assume {:print "$at(2,28974,28983)"} true;
    $t15 := $Dereference($t0)->$jwks;

    // $t16 := vector::borrow<0x1::jwks::JWK>($t15, $t3) on_abort goto L11 with $t13 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:637:29+32
    call $t16 := $1_vector_borrow'$1_jwks_JWK'($t15, $t3);
    if ($abort_flag) {
        assume {:print "$at(2,28959,28991)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(79,26):", $t13} $t13 == $t13;
        goto L11;
    }

    // trace_local[cur_entry]($t16) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:637:29+32
    assume {:print "$track_local(79,26,5):", $t16} $t16 == $t16;

    // $t17 := jwks::get_jwk_id($t1) on_abort goto L11 with $t13 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:638:48+16
    assume {:print "$at(2,29040,29056)"} true;
    call $t17 := $1_jwks_get_jwk_id($t1);
    if ($abort_flag) {
        assume {:print "$at(2,29040,29056)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(79,26):", $t13} $t13 == $t13;
        goto L11;
    }

    // $t18 := jwks::get_jwk_id($t16) on_abort goto L11 with $t13 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:638:66+21
    call $t18 := $1_jwks_get_jwk_id($t16);
    if ($abort_flag) {
        assume {:print "$at(2,29058,29079)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(79,26):", $t13} $t13 == $t13;
        goto L11;
    }

    // assume Identical($t23, Len<u8>($t17)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/comparator.spec.move:37:9+28
    assume {:print "$at(28,1049,1077)"} true;
    assume ($t23 == LenVec($t17));

    // assume Identical($t24, Len<u8>($t18)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/comparator.spec.move:38:9+30
    assume {:print "$at(28,1086,1116)"} true;
    assume ($t24 == LenVec($t18));

    // $t19 := opaque begin: comparator::compare_u8_vector($t17, $t18) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:638:30+58
    assume {:print "$at(2,29022,29080)"} true;

    // assume And(WellFormed($t19), Or(Or(Eq<u8>(select comparator::Result.inner($t19), 0), Eq<u8>(select comparator::Result.inner($t19), 1)), Eq<u8>(select comparator::Result.inner($t19), 2))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:638:30+58
    assume ($IsValid'$1_comparator_Result'($t19) && (($IsEqual'u8'($t19->$inner, 0) || $IsEqual'u8'($t19->$inner, 1)) || $IsEqual'u8'($t19->$inner, 2)));

    // assume Implies(Eq<u8>(select comparator::Result.inner<0x1::comparator::Result>($t19), 0), And(Eq<num>($t23, $t24), forall i: u64: TypeDomain<u64>() where Lt(i, $t23): Eq<u8>(Index($t17, i), Index($t18, i)))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:638:30+58
    assume ($IsEqual'u8'($t19->$inner, 0) ==> ($IsEqual'num'($t23, $t24) && (forall i: int :: $IsValid'u64'(i) ==> ((i < $t23))  ==> ($IsEqual'u8'(ReadVec($t17, i), ReadVec($t18, i))))));

    // assume Implies(Eq<u8>(select comparator::Result.inner<0x1::comparator::Result>($t19), 1), Or(exists i: u64: TypeDomain<u64>() where Lt(i, $t23): And(And(Lt(i, $t24), Lt(Index($t17, i), Index($t18, i))), forall j: u64: TypeDomain<u64>() where Lt(j, i): Eq<u8>(Index($t17, j), Index($t18, j))), Lt($t23, $t24))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:638:30+58
    assume ($IsEqual'u8'($t19->$inner, 1) ==> ((exists i: int :: $IsValid'u64'(i) && ((i < $t23))  && ((((i < $t24) && (ReadVec($t17, i) < ReadVec($t18, i))) && (forall j: int :: $IsValid'u64'(j) ==> ((j < i))  ==> ($IsEqual'u8'(ReadVec($t17, j), ReadVec($t18, j))))))) || ($t23 < $t24)));

    // assume Implies(Eq<u8>(select comparator::Result.inner<0x1::comparator::Result>($t19), 2), Or(exists i: u64: TypeDomain<u64>() where Lt(i, $t23): And(And(Lt(i, $t24), Gt(Index($t17, i), Index($t18, i))), forall j: u64: TypeDomain<u64>() where Lt(j, i): Eq<u8>(Index($t17, j), Index($t18, j))), Gt($t23, $t24))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:638:30+58
    assume ($IsEqual'u8'($t19->$inner, 2) ==> ((exists i: int :: $IsValid'u64'(i) && ((i < $t23))  && ((((i < $t24) && (ReadVec($t17, i) > ReadVec($t18, i))) && (forall j: int :: $IsValid'u64'(j) ==> ((j < i))  ==> ($IsEqual'u8'(ReadVec($t17, j), ReadVec($t18, j))))))) || ($t23 > $t24)));

    // assume Eq<0x1::comparator::Result>($t19, comparator::spec_compare_u8_vector($t17, $t18)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:638:30+58
    assume $IsEqual'$1_comparator_Result'($t19, $1_comparator_spec_compare_u8_vector($t17, $t18));

    // $t19 := opaque end: comparator::compare_u8_vector($t17, $t18) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:638:30+58

    // trace_local[comparison]($t19) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:638:30+58
    assume {:print "$track_local(79,26,6):", $t19} $t19 == $t19;

    // assume Identical($t25, $t19) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/comparator.spec.move:20:9+15
    assume {:print "$at(28,508,523)"} true;
    assume ($t25 == $t19);

    // $t20 := comparator::is_greater_than($t19) on_abort goto L11 with $t13 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:639:17+28
    assume {:print "$at(2,29098,29126)"} true;
    call $t20 := $1_comparator_is_greater_than($t19);
    if ($abort_flag) {
        assume {:print "$at(2,29098,29126)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(79,26):", $t13} $t13 == $t13;
        goto L11;
    }

    // if ($t20) goto L12 else goto L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:639:13+174
    if ($t20) { goto L12; } else { goto L3; }

    // label L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:640:25+5
    assume {:print "$at(2,29154,29159)"} true;
L4:

    // $t21 := 1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:640:33+1
    assume {:print "$at(2,29162,29163)"} true;
    $t21 := 1;
    assume $IsValid'u64'($t21);

    // $t22 := +($t3, $t21) on_abort goto L11 with $t13 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:640:25+9
    call $t22 := $AddU64($t3, $t21);
    if ($abort_flag) {
        assume {:print "$at(2,29154,29163)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(79,26):", $t13} $t13 == $t13;
        goto L11;
    }

    // trace_local[index]($t22) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:640:17+17
    assume {:print "$track_local(79,26,3):", $t22} $t22 == $t22;

    // goto L9 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:636:9+377
    assume {:print "$at(2,28901,29278)"} true;
    goto L9;

    // label L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:642:34+11
    assume {:print "$at(2,29219,29230)"} true;
L3:

    // assume Identical($t26, $t19) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/comparator.spec.move:8:9+15
    assume {:print "$at(28,202,217)"} true;
    assume ($t26 == $t19);

    // $t27 := comparator::is_equal($t19) on_abort goto L11 with $t13 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:642:25+21
    assume {:print "$at(2,29210,29231)"} true;
    call $t27 := $1_comparator_is_equal($t19);
    if ($abort_flag) {
        assume {:print "$at(2,29210,29231)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(79,26):", $t13} $t13 == $t13;
        goto L11;
    }

    // $t2 := $t27 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:642:17+29
    $t2 := $t27;

    // trace_local[found]($t27) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:642:17+29
    assume {:print "$track_local(79,26,2):", $t27} $t27 == $t27;

    // label L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:649:19+285
    assume {:print "$at(2,29451,29736)"} true;
L2:

    // if ($t2) goto L7 else goto L6 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:649:19+285
    assume {:print "$at(2,29451,29736)"} true;
    if ($t2) { goto L7; } else { goto L6; }

    // label L7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:650:44+13
    assume {:print "$at(2,29507,29520)"} true;
L7:

    // $t28 := borrow_field<0x1::jwks::ProviderJWKs>.jwks($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:650:44+13
    assume {:print "$at(2,29507,29520)"} true;
    $t28 := $ChildMutation($t0, 2, $Dereference($t0)->$jwks);

    // $t29 := vector::borrow_mut<0x1::jwks::JWK>($t28, $t3) on_abort goto L11 with $t13 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:650:25+40
    call $t29,$t28 := $1_vector_borrow_mut'$1_jwks_JWK'($t28, $t3);
    if ($abort_flag) {
        assume {:print "$at(2,29488,29528)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(79,26):", $t13} $t13 == $t13;
        goto L11;
    }

    // trace_local[entry]($t29) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:650:25+40
    $temp_0'$1_jwks_JWK' := $Dereference($t29);
    assume {:print "$track_local(79,26,7):", $temp_0'$1_jwks_JWK'} $temp_0'$1_jwks_JWK' == $temp_0'$1_jwks_JWK';

    // $t30 := read_ref($t29) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:651:42+6
    assume {:print "$at(2,29571,29577)"} true;
    $t30 := $Dereference($t29);

    // $t31 := opaque begin: option::some<0x1::jwks::JWK>($t30) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:651:29+20

    // assume And(WellFormed($t31), Le(Len<0x1::jwks::JWK>(select option::Option.vec($t31)), 1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:651:29+20
    assume ($IsValid'$1_option_Option'$1_jwks_JWK''($t31) && (LenVec($t31->$vec) <= 1));

    // assume Eq<0x1::option::Option<0x1::jwks::JWK>>($t31, option::spec_some<0x1::jwks::JWK>($t30)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:651:29+20
    assume $IsEqual'$1_option_Option'$1_jwks_JWK''($t31, $1_option_spec_some'$1_jwks_JWK'($t30));

    // $t31 := opaque end: option::some<0x1::jwks::JWK>($t30) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:651:29+20

    // $t8 := $t31 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:651:29+20
    $t8 := $t31;

    // trace_local[old_entry]($t31) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:651:29+20
    assume {:print "$track_local(79,26,8):", $t31} $t31 == $t31;

    // write_ref($t29, $t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:652:13+12
    assume {:print "$at(2,29592,29604)"} true;
    $t29 := $UpdateMutation($t29, $t1);

    // write_back[Reference($t28)[]]($t29) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:652:13+12
    $t28 := $UpdateMutation($t28, UpdateVec($Dereference($t28), ReadVec($t29->p, LenVec($t28->p)), $Dereference($t29)));

    // write_back[Reference($t0).jwks (vector<0x1::jwks::JWK>)]($t28) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:652:13+12
    $t0 := $UpdateMutation($t0, $Update'$1_jwks_ProviderJWKs'_jwks($Dereference($t0), $Dereference($t28)));

    // trace_local[set]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:652:13+12
    $temp_0'$1_jwks_ProviderJWKs' := $Dereference($t0);
    assume {:print "$track_local(79,26,0):", $temp_0'$1_jwks_ProviderJWKs'} $temp_0'$1_jwks_ProviderJWKs' == $temp_0'$1_jwks_ProviderJWKs';

    // label L8 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:659:9+3
    assume {:print "$at(2,29747,29750)"} true;
L8:

    // trace_return[0]($t8) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:632:67+968
    assume {:print "$at(2,28788,29756)"} true;
    assume {:print "$track_return(79,26,0):", $t8} $t8 == $t8;

    // trace_local[set]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:632:67+968
    $temp_0'$1_jwks_ProviderJWKs' := $Dereference($t0);
    assume {:print "$track_local(79,26,0):", $temp_0'$1_jwks_ProviderJWKs'} $temp_0'$1_jwks_ProviderJWKs' == $temp_0'$1_jwks_ProviderJWKs';

    // pack_ref_deep($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:632:67+968

    // goto L10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:632:67+968
    goto L10;

    // label L6 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:655:28+13
    assume {:print "$at(2,29672,29685)"} true;
L6:

    // $t32 := borrow_field<0x1::jwks::ProviderJWKs>.jwks($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:655:28+13
    assume {:print "$at(2,29672,29685)"} true;
    $t32 := $ChildMutation($t0, 2, $Dereference($t0)->$jwks);

    // vector::insert<0x1::jwks::JWK>($t32, $t3, $t1) on_abort goto L11 with $t13 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:655:13+41
    call $t32 := $1_vector_insert'$1_jwks_JWK'($t32, $t3, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,29657,29698)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(79,26):", $t13} $t13 == $t13;
        goto L11;
    }

    // write_back[Reference($t0).jwks (vector<0x1::jwks::JWK>)]($t32) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:655:13+41
    $t0 := $UpdateMutation($t0, $Update'$1_jwks_ProviderJWKs'_jwks($Dereference($t0), $Dereference($t32)));

    // trace_local[set]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:655:13+41
    $temp_0'$1_jwks_ProviderJWKs' := $Dereference($t0);
    assume {:print "$track_local(79,26,0):", $temp_0'$1_jwks_ProviderJWKs'} $temp_0'$1_jwks_ProviderJWKs' == $temp_0'$1_jwks_ProviderJWKs';

    // $t33 := opaque begin: option::none<0x1::jwks::JWK>() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:656:13+14
    assume {:print "$at(2,29712,29726)"} true;

    // assume And(WellFormed($t33), Le(Len<0x1::jwks::JWK>(select option::Option.vec($t33)), 1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:656:13+14
    assume ($IsValid'$1_option_Option'$1_jwks_JWK''($t33) && (LenVec($t33->$vec) <= 1));

    // assume Eq<0x1::option::Option<0x1::jwks::JWK>>($t33, option::spec_none<0x1::jwks::JWK>()) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:656:13+14
    assume $IsEqual'$1_option_Option'$1_jwks_JWK''($t33, $1_option_spec_none'$1_jwks_JWK'());

    // $t33 := opaque end: option::none<0x1::jwks::JWK>() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:656:13+14

    // $t8 := $t33 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:656:13+14
    $t8 := $t33;

    // trace_local[old_entry]($t33) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:656:13+14
    assume {:print "$track_local(79,26,8):", $t33} $t33 == $t33;

    // goto L8 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:656:13+14
    goto L8;

    // label L9 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:655:28+13
    // Loop invariant checking block for the loop started with header: L5
    assume {:print "$at(2,29672,29685)"} true;
L9:

    // stop() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:655:28+13
    assume {:print "$at(2,29672,29685)"} true;
    assume false;
    return;

    // label L10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:660:5+1
    assume {:print "$at(2,29755,29756)"} true;
L10:

    // return $t8 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:660:5+1
    assume {:print "$at(2,29755,29756)"} true;
    $ret0 := $t8;
    $ret1 := $t0;
    return;

    // label L11 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:660:5+1
L11:

    // abort($t13) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:660:5+1
    assume {:print "$at(2,29755,29756)"} true;
    $abort_code := $t13;
    $abort_flag := true;
    return;

    // label L12 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L12:

    // drop($t0) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L4 at <internal>:1:1+10
    goto L4;

}

// fun jwks::upsert_oidc_provider [verification] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+523
procedure {:timeLimit 40} $1_jwks_upsert_oidc_provider$verify(_$t0: $signer, _$t1: Vec (int), _$t2: Vec (int)) returns ($ret0: $1_option_Option'vec'u8'')
{
    // declare local variables
    var $t3: $Mutation ($1_jwks_SupportedOIDCProviders);
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: $Mutation ($1_jwks_SupportedOIDCProviders);
    var $t8: $1_option_Option'vec'u8'';
    var $t9: $Mutation (Vec ($1_jwks_OIDCProvider));
    var $t10: $1_jwks_OIDCProvider;
    var $t0: $signer;
    var $t1: Vec (int);
    var $t2: Vec (int);
    var $temp_0'$1_jwks_SupportedOIDCProviders': $1_jwks_SupportedOIDCProviders;
    var $temp_0'$1_option_Option'vec'u8''': $1_option_Option'vec'u8'';
    var $temp_0'signer': $signer;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+1
    assume {:print "$at(2,13847,13848)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+1
    assume $IsValid'vec'u8''($t1);

    // assume WellFormed($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+1
    assume $IsValid'vec'u8''($t2);

    // assume forall $rsc: 0x1::chain_status::GenesisEndMarker: ResourceDomain<0x1::chain_status::GenesisEndMarker>(): WellFormed($rsc) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0)}(var $rsc := $ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0);
    ($IsValid'$1_chain_status_GenesisEndMarker'($rsc))));

    // assume forall $rsc: 0x1::timestamp::CurrentTimeMicroseconds: ResourceDomain<0x1::timestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_timestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: 0x1::staking_config::StakingConfig: ResourceDomain<0x1::staking_config::StakingConfig>(): And(WellFormed($rsc), And(And(And(And(Le(select staking_config::StakingConfig.rewards_rate($rsc), 1000000), Gt(select staking_config::StakingConfig.rewards_rate_denominator($rsc), 0)), Le(select staking_config::StakingConfig.rewards_rate($rsc), select staking_config::StakingConfig.rewards_rate_denominator($rsc))), Gt(select staking_config::StakingConfig.recurring_lockup_duration_secs($rsc), 0)), And(Gt(select staking_config::StakingConfig.voting_power_increase_limit($rsc), 0), Le(select staking_config::StakingConfig.voting_power_increase_limit($rsc), 50)))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_staking_config_StakingConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_staking_config_StakingConfig_$memory, $a_0);
    (($IsValid'$1_staking_config_StakingConfig'($rsc) && ((((($rsc->$rewards_rate <= 1000000) && ($rsc->$rewards_rate_denominator > 0)) && ($rsc->$rewards_rate <= $rsc->$rewards_rate_denominator)) && ($rsc->$recurring_lockup_duration_secs > 0)) && (($rsc->$voting_power_increase_limit > 0) && ($rsc->$voting_power_increase_limit <= 50)))))));

    // assume forall $rsc: 0x1::staking_config::StakingRewardsConfig: ResourceDomain<0x1::staking_config::StakingRewardsConfig>(): And(WellFormed($rsc), And(And(And(fixed_point64::spec_less_or_equal(select staking_config::StakingRewardsConfig.rewards_rate($rsc), fixed_point64::spec_create_from_u128(1)), fixed_point64::spec_less_or_equal(select staking_config::StakingRewardsConfig.min_rewards_rate($rsc), select staking_config::StakingRewardsConfig.rewards_rate($rsc))), Gt(select staking_config::StakingRewardsConfig.rewards_rate_period_in_secs($rsc), 0)), Le(fixed_point64::spec_ceil(select staking_config::StakingRewardsConfig.rewards_rate_decrease_rate($rsc)), 1))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_staking_config_StakingRewardsConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_staking_config_StakingRewardsConfig_$memory, $a_0);
    (($IsValid'$1_staking_config_StakingRewardsConfig'($rsc) && ((($1_fixed_point64_spec_less_or_equal($rsc->$rewards_rate, $1_fixed_point64_spec_create_from_u128(1)) && $1_fixed_point64_spec_less_or_equal($rsc->$min_rewards_rate, $rsc->$rewards_rate)) && ($rsc->$rewards_rate_period_in_secs > 0)) && ($1_fixed_point64_spec_ceil($rsc->$rewards_rate_decrease_rate) <= 1))))));

    // assume forall $rsc: 0x1::reconfiguration_state::State: ResourceDomain<0x1::reconfiguration_state::State>(): And(WellFormed($rsc), And(And(And(And(Or(Eq<vector<u8>>(select string::String.bytes<0x1::string::String>(copyable_any::$type_name(select reconfiguration_state::State.variant($rsc))), [48, 120, 49, 58, 58, 114, 101, 99, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 95, 115, 116, 97, 116, 101, 58, 58, 83, 116, 97, 116, 101, 65, 99, 116, 105, 118, 101]), Eq<vector<u8>>(select string::String.bytes<0x1::string::String>(copyable_any::$type_name(select reconfiguration_state::State.variant($rsc))), [48, 120, 49, 58, 58, 114, 101, 99, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 95, 115, 116, 97, 116, 101, 58, 58, 83, 116, 97, 116, 101, 73, 110, 97, 99, 116, 105, 118, 101])), Implies(Eq<vector<u8>>(select string::String.bytes<0x1::string::String>(copyable_any::$type_name(select reconfiguration_state::State.variant($rsc))), [48, 120, 49, 58, 58, 114, 101, 99, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 95, 115, 116, 97, 116, 101, 58, 58, 83, 116, 97, 116, 101, 65, 99, 116, 105, 118, 101]), from_bcs::deserializable<0x1::reconfiguration_state::StateActive>(select copyable_any::Any.data<0x1::copyable_any::Any>(select reconfiguration_state::State.variant($rsc))))), Implies(Eq<vector<u8>>(select string::String.bytes<0x1::string::String>(copyable_any::$type_name(select reconfiguration_state::State.variant($rsc))), [48, 120, 49, 58, 58, 114, 101, 99, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 95, 115, 116, 97, 116, 101, 58, 58, 83, 116, 97, 116, 101, 73, 110, 97, 99, 116, 105, 118, 101]), from_bcs::deserializable<0x1::reconfiguration_state::StateInactive>(select copyable_any::Any.data<0x1::copyable_any::Any>(select reconfiguration_state::State.variant($rsc))))), Implies(Eq<vector<u8>>(select string::String.bytes<0x1::string::String>(copyable_any::$type_name(select reconfiguration_state::State.variant($rsc))), [48, 120, 49, 58, 58, 114, 101, 99, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 95, 115, 116, 97, 116, 101, 58, 58, 83, 116, 97, 116, 101, 65, 99, 116, 105, 118, 101]), Eq<0x1::string::String>(type_info::$type_name<0x1::reconfiguration_state::StateActive>(), select copyable_any::Any.type_name<0x1::copyable_any::Any>(select reconfiguration_state::State.variant($rsc))))), Implies(Eq<vector<u8>>(select string::String.bytes<0x1::string::String>(copyable_any::$type_name(select reconfiguration_state::State.variant($rsc))), [48, 120, 49, 58, 58, 114, 101, 99, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 95, 115, 116, 97, 116, 101, 58, 58, 83, 116, 97, 116, 101, 73, 110, 97, 99, 116, 105, 118, 101]), Eq<0x1::string::String>(type_info::$type_name<0x1::reconfiguration_state::StateInactive>(), select copyable_any::Any.type_name<0x1::copyable_any::Any>(select reconfiguration_state::State.variant($rsc)))))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_state_State_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_state_State_$memory, $a_0);
    (($IsValid'$1_reconfiguration_state_State'($rsc) && ((((($IsEqual'vec'u8''($1_copyable_any_$type_name($rsc->$variant)->$bytes, ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(48, 120, 49, 58), MakeVec4(58, 114, 101, 99)), MakeVec4(111, 110, 102, 105)), MakeVec4(103, 117, 114, 97)), MakeVec4(116, 105, 111, 110)), MakeVec4(95, 115, 116, 97)), MakeVec4(116, 101, 58, 58)), MakeVec4(83, 116, 97, 116)), MakeVec4(101, 65, 99, 116)), MakeVec3(105, 118, 101))) || $IsEqual'vec'u8''($1_copyable_any_$type_name($rsc->$variant)->$bytes, ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(48, 120, 49, 58), MakeVec4(58, 114, 101, 99)), MakeVec4(111, 110, 102, 105)), MakeVec4(103, 117, 114, 97)), MakeVec4(116, 105, 111, 110)), MakeVec4(95, 115, 116, 97)), MakeVec4(116, 101, 58, 58)), MakeVec4(83, 116, 97, 116)), MakeVec4(101, 73, 110, 97)), MakeVec4(99, 116, 105, 118)), MakeVec1(101)))) && ($IsEqual'vec'u8''($1_copyable_any_$type_name($rsc->$variant)->$bytes, ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(48, 120, 49, 58), MakeVec4(58, 114, 101, 99)), MakeVec4(111, 110, 102, 105)), MakeVec4(103, 117, 114, 97)), MakeVec4(116, 105, 111, 110)), MakeVec4(95, 115, 116, 97)), MakeVec4(116, 101, 58, 58)), MakeVec4(83, 116, 97, 116)), MakeVec4(101, 65, 99, 116)), MakeVec3(105, 118, 101))) ==> $1_from_bcs_deserializable'$1_reconfiguration_state_StateActive'($rsc->$variant->$data))) && ($IsEqual'vec'u8''($1_copyable_any_$type_name($rsc->$variant)->$bytes, ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(48, 120, 49, 58), MakeVec4(58, 114, 101, 99)), MakeVec4(111, 110, 102, 105)), MakeVec4(103, 117, 114, 97)), MakeVec4(116, 105, 111, 110)), MakeVec4(95, 115, 116, 97)), MakeVec4(116, 101, 58, 58)), MakeVec4(83, 116, 97, 116)), MakeVec4(101, 73, 110, 97)), MakeVec4(99, 116, 105, 118)), MakeVec1(101))) ==> $1_from_bcs_deserializable'$1_reconfiguration_state_StateInactive'($rsc->$variant->$data))) && ($IsEqual'vec'u8''($1_copyable_any_$type_name($rsc->$variant)->$bytes, ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(48, 120, 49, 58), MakeVec4(58, 114, 101, 99)), MakeVec4(111, 110, 102, 105)), MakeVec4(103, 117, 114, 97)), MakeVec4(116, 105, 111, 110)), MakeVec4(95, 115, 116, 97)), MakeVec4(116, 101, 58, 58)), MakeVec4(83, 116, 97, 116)), MakeVec4(101, 65, 99, 116)), MakeVec3(105, 118, 101))) ==> $IsEqual'$1_string_String'($1_string_String(Vec(DefaultVecMap()[0 := 48][1 := 120][2 := 49][3 := 58][4 := 58][5 := 114][6 := 101][7 := 99][8 := 111][9 := 110][10 := 102][11 := 105][12 := 103][13 := 117][14 := 114][15 := 97][16 := 116][17 := 105][18 := 111][19 := 110][20 := 95][21 := 115][22 := 116][23 := 97][24 := 116][25 := 101][26 := 58][27 := 58][28 := 83][29 := 116][30 := 97][31 := 116][32 := 101][33 := 65][34 := 99][35 := 116][36 := 105][37 := 118][38 := 101], 39)), $rsc->$variant->$type_name))) && ($IsEqual'vec'u8''($1_copyable_any_$type_name($rsc->$variant)->$bytes, ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(48, 120, 49, 58), MakeVec4(58, 114, 101, 99)), MakeVec4(111, 110, 102, 105)), MakeVec4(103, 117, 114, 97)), MakeVec4(116, 105, 111, 110)), MakeVec4(95, 115, 116, 97)), MakeVec4(116, 101, 58, 58)), MakeVec4(83, 116, 97, 116)), MakeVec4(101, 73, 110, 97)), MakeVec4(99, 116, 105, 118)), MakeVec1(101))) ==> $IsEqual'$1_string_String'($1_string_String(Vec(DefaultVecMap()[0 := 48][1 := 120][2 := 49][3 := 58][4 := 58][5 := 114][6 := 101][7 := 99][8 := 111][9 := 110][10 := 102][11 := 105][12 := 103][13 := 117][14 := 114][15 := 97][16 := 116][17 := 105][18 := 111][19 := 110][20 := 95][21 := 115][22 := 116][23 := 97][24 := 116][25 := 101][26 := 58][27 := 58][28 := 83][29 := 116][30 := 97][31 := 116][32 := 101][33 := 73][34 := 110][35 := 97][36 := 99][37 := 116][38 := 105][39 := 118][40 := 101], 41)), $rsc->$variant->$type_name)))))));

    // assume forall $rsc: 0x1::stake::AptosCoinCapabilities: ResourceDomain<0x1::stake::AptosCoinCapabilities>(): WellFormed($rsc) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_AptosCoinCapabilities_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_AptosCoinCapabilities_$memory, $a_0);
    ($IsValid'$1_stake_AptosCoinCapabilities'($rsc))));

    // assume forall $rsc: 0x1::stake::ValidatorPerformance: ResourceDomain<0x1::stake::ValidatorPerformance>(): WellFormed($rsc) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorPerformance'($rsc))));

    // assume forall $rsc: 0x1::stake::ValidatorSet: ResourceDomain<0x1::stake::ValidatorSet>(): And(WellFormed($rsc), Eq<u8>(select stake::ValidatorSet.consensus_scheme($rsc), 0)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorSet_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorSet_$memory, $a_0);
    (($IsValid'$1_stake_ValidatorSet'($rsc) && $IsEqual'u8'($rsc->$consensus_scheme, 0)))));

    // assume forall $rsc: 0x1::transaction_fee::AptosCoinCapabilities: ResourceDomain<0x1::transaction_fee::AptosCoinCapabilities>(): WellFormed($rsc) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_transaction_fee_AptosCoinCapabilities_$memory, $a_0)}(var $rsc := $ResourceValue($1_transaction_fee_AptosCoinCapabilities_$memory, $a_0);
    ($IsValid'$1_transaction_fee_AptosCoinCapabilities'($rsc))));

    // assume forall $rsc: 0x1::transaction_fee::AptosFABurnCapabilities: ResourceDomain<0x1::transaction_fee::AptosFABurnCapabilities>(): WellFormed($rsc) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_transaction_fee_AptosFABurnCapabilities_$memory, $a_0)}(var $rsc := $ResourceValue($1_transaction_fee_AptosFABurnCapabilities_$memory, $a_0);
    ($IsValid'$1_transaction_fee_AptosFABurnCapabilities'($rsc))));

    // assume forall $rsc: 0x1::state_storage::GasParameter: ResourceDomain<0x1::state_storage::GasParameter>(): WellFormed($rsc) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_state_storage_GasParameter_$memory, $a_0)}(var $rsc := $ResourceValue($1_state_storage_GasParameter_$memory, $a_0);
    ($IsValid'$1_state_storage_GasParameter'($rsc))));

    // assume forall $rsc: 0x1::state_storage::StateStorageUsage: ResourceDomain<0x1::state_storage::StateStorageUsage>(): WellFormed($rsc) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_state_storage_StateStorageUsage_$memory, $a_0)}(var $rsc := $ResourceValue($1_state_storage_StateStorageUsage_$memory, $a_0);
    ($IsValid'$1_state_storage_StateStorageUsage'($rsc))));

    // assume forall $rsc: 0x1::storage_gas::StorageGas: ResourceDomain<0x1::storage_gas::StorageGas>(): WellFormed($rsc) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_storage_gas_StorageGas_$memory, $a_0)}(var $rsc := $ResourceValue($1_storage_gas_StorageGas_$memory, $a_0);
    ($IsValid'$1_storage_gas_StorageGas'($rsc))));

    // assume forall $rsc: 0x1::storage_gas::StorageGasConfig: ResourceDomain<0x1::storage_gas::StorageGasConfig>(): And(WellFormed($rsc), And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(Gt(select storage_gas::UsageGasConfig.target_usage(select storage_gas::StorageGasConfig.item_config($rsc)), 0), Le(select storage_gas::UsageGasConfig.target_usage(select storage_gas::StorageGasConfig.item_config($rsc)), Div(18446744073709551615, 10000))), Le(select storage_gas::GasCurve.min_gas(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.item_config($rsc))), select storage_gas::GasCurve.max_gas(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.item_config($rsc))))), Le(select storage_gas::GasCurve.max_gas(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.item_config($rsc))), Div(18446744073709551615, 10000))), And(And(Implies(Gt(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.item_config($rsc)))), 0), Gt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.item_config($rsc))), 0)), 0)), Implies(Gt(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.item_config($rsc)))), 0), Lt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.item_config($rsc))), Sub(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.item_config($rsc)))), 1))), 10000))), forall i: num: Range(0, Sub(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.item_config($rsc)))), 1)): And(Lt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.item_config($rsc))), i)), select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.item_config($rsc))), Add(i, 1)))), Le(select storage_gas::Point.y<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.item_config($rsc))), i)), select storage_gas::Point.y<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.item_config($rsc))), Add(i, 1))))))), forall $elem: 0x1::storage_gas::Point: select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.item_config($rsc))): And(Le(select storage_gas::Point.x($elem), 10000), Le(select storage_gas::Point.y($elem), 10000))), Le(select storage_gas::GasCurve.min_gas(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.item_config($rsc))), select storage_gas::GasCurve.max_gas(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.item_config($rsc))))), Le(select storage_gas::GasCurve.max_gas(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.item_config($rsc))), Div(18446744073709551615, 10000))), And(And(Implies(Gt(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.item_config($rsc)))), 0), Gt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.item_config($rsc))), 0)), 0)), Implies(Gt(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.item_config($rsc)))), 0), Lt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.item_config($rsc))), Sub(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.item_config($rsc)))), 1))), 10000))), forall i: num: Range(0, Sub(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.item_config($rsc)))), 1)): And(Lt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.item_config($rsc))), i)), select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.item_config($rsc))), Add(i, 1)))), Le(select storage_gas::Point.y<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.item_config($rsc))), i)), select storage_gas::Point.y<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.item_config($rsc))), Add(i, 1))))))), forall $elem: 0x1::storage_gas::Point: select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.item_config($rsc))): And(Le(select storage_gas::Point.x($elem), 10000), Le(select storage_gas::Point.y($elem), 10000))), Le(select storage_gas::GasCurve.min_gas(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.item_config($rsc))), select storage_gas::GasCurve.max_gas(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.item_config($rsc))))), Le(select storage_gas::GasCurve.max_gas(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.item_config($rsc))), Div(18446744073709551615, 10000))), And(And(Implies(Gt(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.item_config($rsc)))), 0), Gt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.item_config($rsc))), 0)), 0)), Implies(Gt(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.item_config($rsc)))), 0), Lt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.item_config($rsc))), Sub(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.item_config($rsc)))), 1))), 10000))), forall i: num: Range(0, Sub(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.item_config($rsc)))), 1)): And(Lt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.item_config($rsc))), i)), select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.item_config($rsc))), Add(i, 1)))), Le(select storage_gas::Point.y<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.item_config($rsc))), i)), select storage_gas::Point.y<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.item_config($rsc))), Add(i, 1))))))), forall $elem: 0x1::storage_gas::Point: select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.item_config($rsc))): And(Le(select storage_gas::Point.x($elem), 10000), Le(select storage_gas::Point.y($elem), 10000))), Gt(select storage_gas::UsageGasConfig.target_usage(select storage_gas::StorageGasConfig.byte_config($rsc)), 0)), Le(select storage_gas::UsageGasConfig.target_usage(select storage_gas::StorageGasConfig.byte_config($rsc)), Div(18446744073709551615, 10000))), Le(select storage_gas::GasCurve.min_gas(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), select storage_gas::GasCurve.max_gas(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.byte_config($rsc))))), Le(select storage_gas::GasCurve.max_gas(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), Div(18446744073709551615, 10000))), And(And(Implies(Gt(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.byte_config($rsc)))), 0), Gt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), 0)), 0)), Implies(Gt(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.byte_config($rsc)))), 0), Lt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), Sub(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.byte_config($rsc)))), 1))), 10000))), forall i: num: Range(0, Sub(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.byte_config($rsc)))), 1)): And(Lt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), i)), select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), Add(i, 1)))), Le(select storage_gas::Point.y<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), i)), select storage_gas::Point.y<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), Add(i, 1))))))), forall $elem: 0x1::storage_gas::Point: select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.read_curve(select storage_gas::StorageGasConfig.byte_config($rsc))): And(Le(select storage_gas::Point.x($elem), 10000), Le(select storage_gas::Point.y($elem), 10000))), Le(select storage_gas::GasCurve.min_gas(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), select storage_gas::GasCurve.max_gas(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.byte_config($rsc))))), Le(select storage_gas::GasCurve.max_gas(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), Div(18446744073709551615, 10000))), And(And(Implies(Gt(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.byte_config($rsc)))), 0), Gt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), 0)), 0)), Implies(Gt(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.byte_config($rsc)))), 0), Lt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), Sub(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.byte_config($rsc)))), 1))), 10000))), forall i: num: Range(0, Sub(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.byte_config($rsc)))), 1)): And(Lt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), i)), select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), Add(i, 1)))), Le(select storage_gas::Point.y<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), i)), select storage_gas::Point.y<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), Add(i, 1))))))), forall $elem: 0x1::storage_gas::Point: select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.create_curve(select storage_gas::StorageGasConfig.byte_config($rsc))): And(Le(select storage_gas::Point.x($elem), 10000), Le(select storage_gas::Point.y($elem), 10000))), Le(select storage_gas::GasCurve.min_gas(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), select storage_gas::GasCurve.max_gas(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.byte_config($rsc))))), Le(select storage_gas::GasCurve.max_gas(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), Div(18446744073709551615, 10000))), And(And(Implies(Gt(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.byte_config($rsc)))), 0), Gt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), 0)), 0)), Implies(Gt(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.byte_config($rsc)))), 0), Lt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), Sub(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.byte_config($rsc)))), 1))), 10000))), forall i: num: Range(0, Sub(Len<0x1::storage_gas::Point>(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.byte_config($rsc)))), 1)): And(Lt(select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), i)), select storage_gas::Point.x<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), Add(i, 1)))), Le(select storage_gas::Point.y<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), i)), select storage_gas::Point.y<0x1::storage_gas::Point>(Index(select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.byte_config($rsc))), Add(i, 1))))))), forall $elem: 0x1::storage_gas::Point: select storage_gas::GasCurve.points(select storage_gas::UsageGasConfig.write_curve(select storage_gas::StorageGasConfig.byte_config($rsc))): And(Le(select storage_gas::Point.x($elem), 10000), Le(select storage_gas::Point.y($elem), 10000)))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_storage_gas_StorageGasConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_storage_gas_StorageGasConfig_$memory, $a_0);
    (($IsValid'$1_storage_gas_StorageGasConfig'($rsc) && (((((((((((((((((((((((((((($rsc->$item_config->$target_usage > 0) && ($rsc->$item_config->$target_usage <= (18446744073709551615 div 10000))) && ($rsc->$item_config->$read_curve->$min_gas <= $rsc->$item_config->$read_curve->$max_gas)) && ($rsc->$item_config->$read_curve->$max_gas <= (18446744073709551615 div 10000))) && ((((LenVec($rsc->$item_config->$read_curve->$points) > 0) ==> (ReadVec($rsc->$item_config->$read_curve->$points, 0)->$x > 0)) && ((LenVec($rsc->$item_config->$read_curve->$points) > 0) ==> (ReadVec($rsc->$item_config->$read_curve->$points, (LenVec($rsc->$item_config->$read_curve->$points) - 1))->$x < 10000))) && (var $range_1 := $Range(0, (LenVec($rsc->$item_config->$read_curve->$points) - 1)); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (((ReadVec($rsc->$item_config->$read_curve->$points, i)->$x < ReadVec($rsc->$item_config->$read_curve->$points, (i + 1))->$x) && (ReadVec($rsc->$item_config->$read_curve->$points, i)->$y <= ReadVec($rsc->$item_config->$read_curve->$points, (i + 1))->$y)))))))) && (var $range_3 := $rsc->$item_config->$read_curve->$points; (forall $i_4: int :: InRangeVec($range_3, $i_4) ==> (var $elem := ReadVec($range_3, $i_4);
    ((($elem->$x <= 10000) && ($elem->$y <= 10000))))))) && ($rsc->$item_config->$create_curve->$min_gas <= $rsc->$item_config->$create_curve->$max_gas)) && ($rsc->$item_config->$create_curve->$max_gas <= (18446744073709551615 div 10000))) && ((((LenVec($rsc->$item_config->$create_curve->$points) > 0) ==> (ReadVec($rsc->$item_config->$create_curve->$points, 0)->$x > 0)) && ((LenVec($rsc->$item_config->$create_curve->$points) > 0) ==> (ReadVec($rsc->$item_config->$create_curve->$points, (LenVec($rsc->$item_config->$create_curve->$points) - 1))->$x < 10000))) && (var $range_5 := $Range(0, (LenVec($rsc->$item_config->$create_curve->$points) - 1)); (forall $i_6: int :: $InRange($range_5, $i_6) ==> (var i := $i_6;
    (((ReadVec($rsc->$item_config->$create_curve->$points, i)->$x < ReadVec($rsc->$item_config->$create_curve->$points, (i + 1))->$x) && (ReadVec($rsc->$item_config->$create_curve->$points, i)->$y <= ReadVec($rsc->$item_config->$create_curve->$points, (i + 1))->$y)))))))) && (var $range_7 := $rsc->$item_config->$create_curve->$points; (forall $i_8: int :: InRangeVec($range_7, $i_8) ==> (var $elem := ReadVec($range_7, $i_8);
    ((($elem->$x <= 10000) && ($elem->$y <= 10000))))))) && ($rsc->$item_config->$write_curve->$min_gas <= $rsc->$item_config->$write_curve->$max_gas)) && ($rsc->$item_config->$write_curve->$max_gas <= (18446744073709551615 div 10000))) && ((((LenVec($rsc->$item_config->$write_curve->$points) > 0) ==> (ReadVec($rsc->$item_config->$write_curve->$points, 0)->$x > 0)) && ((LenVec($rsc->$item_config->$write_curve->$points) > 0) ==> (ReadVec($rsc->$item_config->$write_curve->$points, (LenVec($rsc->$item_config->$write_curve->$points) - 1))->$x < 10000))) && (var $range_9 := $Range(0, (LenVec($rsc->$item_config->$write_curve->$points) - 1)); (forall $i_10: int :: $InRange($range_9, $i_10) ==> (var i := $i_10;
    (((ReadVec($rsc->$item_config->$write_curve->$points, i)->$x < ReadVec($rsc->$item_config->$write_curve->$points, (i + 1))->$x) && (ReadVec($rsc->$item_config->$write_curve->$points, i)->$y <= ReadVec($rsc->$item_config->$write_curve->$points, (i + 1))->$y)))))))) && (var $range_11 := $rsc->$item_config->$write_curve->$points; (forall $i_12: int :: InRangeVec($range_11, $i_12) ==> (var $elem := ReadVec($range_11, $i_12);
    ((($elem->$x <= 10000) && ($elem->$y <= 10000))))))) && ($rsc->$byte_config->$target_usage > 0)) && ($rsc->$byte_config->$target_usage <= (18446744073709551615 div 10000))) && ($rsc->$byte_config->$read_curve->$min_gas <= $rsc->$byte_config->$read_curve->$max_gas)) && ($rsc->$byte_config->$read_curve->$max_gas <= (18446744073709551615 div 10000))) && ((((LenVec($rsc->$byte_config->$read_curve->$points) > 0) ==> (ReadVec($rsc->$byte_config->$read_curve->$points, 0)->$x > 0)) && ((LenVec($rsc->$byte_config->$read_curve->$points) > 0) ==> (ReadVec($rsc->$byte_config->$read_curve->$points, (LenVec($rsc->$byte_config->$read_curve->$points) - 1))->$x < 10000))) && (var $range_13 := $Range(0, (LenVec($rsc->$byte_config->$read_curve->$points) - 1)); (forall $i_14: int :: $InRange($range_13, $i_14) ==> (var i := $i_14;
    (((ReadVec($rsc->$byte_config->$read_curve->$points, i)->$x < ReadVec($rsc->$byte_config->$read_curve->$points, (i + 1))->$x) && (ReadVec($rsc->$byte_config->$read_curve->$points, i)->$y <= ReadVec($rsc->$byte_config->$read_curve->$points, (i + 1))->$y)))))))) && (var $range_15 := $rsc->$byte_config->$read_curve->$points; (forall $i_16: int :: InRangeVec($range_15, $i_16) ==> (var $elem := ReadVec($range_15, $i_16);
    ((($elem->$x <= 10000) && ($elem->$y <= 10000))))))) && ($rsc->$byte_config->$create_curve->$min_gas <= $rsc->$byte_config->$create_curve->$max_gas)) && ($rsc->$byte_config->$create_curve->$max_gas <= (18446744073709551615 div 10000))) && ((((LenVec($rsc->$byte_config->$create_curve->$points) > 0) ==> (ReadVec($rsc->$byte_config->$create_curve->$points, 0)->$x > 0)) && ((LenVec($rsc->$byte_config->$create_curve->$points) > 0) ==> (ReadVec($rsc->$byte_config->$create_curve->$points, (LenVec($rsc->$byte_config->$create_curve->$points) - 1))->$x < 10000))) && (var $range_17 := $Range(0, (LenVec($rsc->$byte_config->$create_curve->$points) - 1)); (forall $i_18: int :: $InRange($range_17, $i_18) ==> (var i := $i_18;
    (((ReadVec($rsc->$byte_config->$create_curve->$points, i)->$x < ReadVec($rsc->$byte_config->$create_curve->$points, (i + 1))->$x) && (ReadVec($rsc->$byte_config->$create_curve->$points, i)->$y <= ReadVec($rsc->$byte_config->$create_curve->$points, (i + 1))->$y)))))))) && (var $range_19 := $rsc->$byte_config->$create_curve->$points; (forall $i_20: int :: InRangeVec($range_19, $i_20) ==> (var $elem := ReadVec($range_19, $i_20);
    ((($elem->$x <= 10000) && ($elem->$y <= 10000))))))) && ($rsc->$byte_config->$write_curve->$min_gas <= $rsc->$byte_config->$write_curve->$max_gas)) && ($rsc->$byte_config->$write_curve->$max_gas <= (18446744073709551615 div 10000))) && ((((LenVec($rsc->$byte_config->$write_curve->$points) > 0) ==> (ReadVec($rsc->$byte_config->$write_curve->$points, 0)->$x > 0)) && ((LenVec($rsc->$byte_config->$write_curve->$points) > 0) ==> (ReadVec($rsc->$byte_config->$write_curve->$points, (LenVec($rsc->$byte_config->$write_curve->$points) - 1))->$x < 10000))) && (var $range_21 := $Range(0, (LenVec($rsc->$byte_config->$write_curve->$points) - 1)); (forall $i_22: int :: $InRange($range_21, $i_22) ==> (var i := $i_22;
    (((ReadVec($rsc->$byte_config->$write_curve->$points, i)->$x < ReadVec($rsc->$byte_config->$write_curve->$points, (i + 1))->$x) && (ReadVec($rsc->$byte_config->$write_curve->$points, i)->$y <= ReadVec($rsc->$byte_config->$write_curve->$points, (i + 1))->$y)))))))) && (var $range_23 := $rsc->$byte_config->$write_curve->$points; (forall $i_24: int :: InRangeVec($range_23, $i_24) ==> (var $elem := ReadVec($range_23, $i_24);
    ((($elem->$x <= 10000) && ($elem->$y <= 10000)))))))))));

    // assume forall $rsc: 0x1::reconfiguration::Configuration: ResourceDomain<0x1::reconfiguration::Configuration>(): WellFormed($rsc) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_Configuration_$memory, $a_0);
    ($IsValid'$1_reconfiguration_Configuration'($rsc))));

    // assume forall $rsc: 0x1::jwks::SupportedOIDCProviders: ResourceDomain<0x1::jwks::SupportedOIDCProviders>(): WellFormed($rsc) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_jwks_SupportedOIDCProviders_$memory, $a_0)}(var $rsc := $ResourceValue($1_jwks_SupportedOIDCProviders_$memory, $a_0);
    ($IsValid'$1_jwks_SupportedOIDCProviders'($rsc))));

    // assume forall $rsc: 0x1::dkg::DKGState: ResourceDomain<0x1::dkg::DKGState>(): And(WellFormed($rsc), And(Le(Len<0x1::dkg::DKGSessionState>(select option::Option.vec(select dkg::DKGState.last_completed($rsc))), 1), Le(Len<0x1::dkg::DKGSessionState>(select option::Option.vec(select dkg::DKGState.in_progress($rsc))), 1))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_dkg_DKGState_$memory, $a_0)}(var $rsc := $ResourceValue($1_dkg_DKGState_$memory, $a_0);
    (($IsValid'$1_dkg_DKGState'($rsc) && ((LenVec($rsc->$last_completed->$vec) <= 1) && (LenVec($rsc->$in_progress->$vec) <= 1))))));

    // assume forall $rsc: 0x1::consensus_config::ConsensusConfig: ResourceDomain<0x1::consensus_config::ConsensusConfig>(): WellFormed($rsc) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_consensus_config_ConsensusConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_consensus_config_ConsensusConfig_$memory, $a_0);
    ($IsValid'$1_consensus_config_ConsensusConfig'($rsc))));

    // assume forall $rsc: 0x1::randomness::PerBlockRandomness: ResourceDomain<0x1::randomness::PerBlockRandomness>(): And(WellFormed($rsc), Le(Len<vector<u8>>(select option::Option.vec(select randomness::PerBlockRandomness.seed($rsc))), 1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_randomness_PerBlockRandomness_$memory, $a_0)}(var $rsc := $ResourceValue($1_randomness_PerBlockRandomness_$memory, $a_0);
    (($IsValid'$1_randomness_PerBlockRandomness'($rsc) && (LenVec($rsc->$seed->$vec) <= 1)))));

    // assume forall $rsc: 0x1::block::BlockResource: ResourceDomain<0x1::block::BlockResource>(): And(WellFormed($rsc), Gt(select block::BlockResource.epoch_interval($rsc), 0)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_block_BlockResource_$memory, $a_0)}(var $rsc := $ResourceValue($1_block_BlockResource_$memory, $a_0);
    (($IsValid'$1_block_BlockResource'($rsc) && ($rsc->$epoch_interval > 0)))));

    // assume forall $rsc: 0x1::block::CommitHistory: ResourceDomain<0x1::block::CommitHistory>(): And(WellFormed($rsc), Gt(select block::CommitHistory.max_capacity($rsc), 0)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_block_CommitHistory_$memory, $a_0)}(var $rsc := $ResourceValue($1_block_CommitHistory_$memory, $a_0);
    (($IsValid'$1_block_CommitHistory'($rsc) && ($rsc->$max_capacity > 0)))));

    // assume Eq<bool>(chain_status::$is_genesis(), Not(chain_status::$is_operating())) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+523
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/chain_status.spec.move:27:9+42
    assume $IsEqual'bool'($1_chain_status_$is_genesis($1_chain_status_GenesisEndMarker_$memory), !$1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory));

    // assume Implies(chain_status::$is_operating(), exists<0x1::timestamp::CurrentTimeMicroseconds>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+523
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.spec.move:36:9+107
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, 1));

    // assume Implies(chain_status::$is_operating(), exists<0x1::staking_config::StakingConfig>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+523
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/staking_config.spec.move:60:9+97
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_staking_config_StakingConfig_$memory, 1));

    // assume Implies(chain_status::$is_operating(), exists<0x1::staking_config::StakingRewardsConfig>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+523
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/staking_config.spec.move:61:9+104
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_staking_config_StakingRewardsConfig_$memory, 1));

    // assume Implies(chain_status::$is_operating(), exists<0x1::reconfiguration_state::State>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+523
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration_state.spec.move:5:9+89
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_reconfiguration_state_State_$memory, 1));

    // assume Implies(chain_status::$is_operating(), exists<0x1::stake::AptosCoinCapabilities>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+523
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:49:9+105
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_stake_AptosCoinCapabilities_$memory, 1));

    // assume Implies(chain_status::$is_operating(), exists<0x1::stake::ValidatorPerformance>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+523
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:50:9+104
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_stake_ValidatorPerformance_$memory, 1));

    // assume Implies(chain_status::$is_operating(), exists<0x1::stake::ValidatorSet>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+523
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:51:9+96
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_stake_ValidatorSet_$memory, 1));

    // assume Implies(chain_status::$is_operating(), Or(exists<0x1::transaction_fee::AptosCoinCapabilities>(0x1), exists<0x1::transaction_fee::AptosFABurnCapabilities>(0x1))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+523
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/transaction_fee.spec.move:61:9+158
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($ResourceExists($1_transaction_fee_AptosCoinCapabilities_$memory, 1) || $ResourceExists($1_transaction_fee_AptosFABurnCapabilities_$memory, 1)));

    // assume Implies(chain_status::$is_operating(), exists<0x1::state_storage::StateStorageUsage>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+523
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/state_storage.spec.move:48:9+101
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_state_storage_StateStorageUsage_$memory, 1));

    // assume Implies(chain_status::$is_operating(), exists<0x1::state_storage::GasParameter>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+523
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/state_storage.spec.move:49:9+96
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_state_storage_GasParameter_$memory, 1));

    // assume Implies(chain_status::$is_operating(), exists<0x1::storage_gas::StorageGasConfig>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+523
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/storage_gas.spec.move:69:9+100
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_storage_gas_StorageGasConfig_$memory, 1));

    // assume Implies(chain_status::$is_operating(), exists<0x1::storage_gas::StorageGas>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+523
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/storage_gas.spec.move:70:9+94
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_storage_gas_StorageGas_$memory, 1));

    // assume Implies(chain_status::$is_operating(), exists<0x1::reconfiguration::Configuration>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+523
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.spec.move:50:9+97
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_reconfiguration_Configuration_$memory, 1));

    // assume Implies(chain_status::$is_operating(), Ge(timestamp::spec_now_microseconds(), reconfiguration::$last_reconfiguration_time())) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+523
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.spec.move:51:9+137
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) >= $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory)));

    // assume Implies(chain_status::$is_operating(), exists<0x1::dkg::DKGState>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+523
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/dkg.spec.move:5:9+92
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_dkg_DKGState_$memory, 1));

    // assume Implies(chain_status::$is_operating(), exists<0x1::consensus_config::ConsensusConfig>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+523
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/consensus_config.spec.move:28:9+99
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_consensus_config_ConsensusConfig_$memory, 1));

    // assume Implies(chain_status::$is_operating(), exists<0x1::randomness::PerBlockRandomness>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+523
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/randomness.spec.move:6:9+102
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_randomness_PerBlockRandomness_$memory, 1));

    // assume Implies(chain_status::$is_operating(), exists<0x1::block::BlockResource>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+523
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/block.spec.move:47:9+97
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_block_BlockResource_$memory, 1));

    // assume Implies(chain_status::$is_operating(), exists<0x1::block::CommitHistory>(0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+523
    // global invariant at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/block.spec.move:49:9+97
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_block_CommitHistory_$memory, 1));

    // trace_local[fx]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+1
    assume {:print "$track_local(79,27,0):", $t0} $t0 == $t0;

    // trace_local[name]($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+1
    assume {:print "$track_local(79,27,1):", $t1} $t1 == $t1;

    // trace_local[config_url]($t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:5+1
    assume {:print "$track_local(79,27,2):", $t2} $t2 == $t2;

    // opaque begin: system_addresses::assert_aptos_framework($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:297:9+44
    assume {:print "$at(2,13996,14040)"} true;

    // assume Identical($t4, Neq<address>(signer::$address_of($t0), 0x1)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:297:9+44
    assume ($t4 == !$IsEqual'address'($1_signer_$address_of($t0), 1));

    // if ($t4) goto L4 else goto L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:297:9+44
    if ($t4) { goto L4; } else { goto L3; }

    // label L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:297:9+44
L4:

    // assume And(Neq<address>(signer::$address_of($t0), 0x1), Eq(5, $t5)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:297:9+44
    assume {:print "$at(2,13996,14040)"} true;
    assume (!$IsEqual'address'($1_signer_$address_of($t0), 1) && $IsEqual'num'(5, $t5));

    // trace_abort($t5) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:297:9+44
    assume {:print "$at(2,13996,14040)"} true;
    assume {:print "$track_abort(79,27):", $t5} $t5 == $t5;

    // goto L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:297:9+44
    goto L2;

    // label L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:297:9+44
L3:

    // opaque end: system_addresses::assert_aptos_framework($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:297:9+44
    assume {:print "$at(2,13996,14040)"} true;

    // chain_status::assert_genesis() on_abort goto L2 with $t5 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:298:9+30
    assume {:print "$at(2,14050,14080)"} true;
    call $1_chain_status_assert_genesis();
    if ($abort_flag) {
        assume {:print "$at(2,14050,14080)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(79,27):", $t5} $t5 == $t5;
        goto L2;
    }

    // $t6 := 0x1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:300:70+16
    assume {:print "$at(2,14152,14168)"} true;
    $t6 := 1;
    assume $IsValid'address'($t6);

    // $t7 := borrow_global<0x1::jwks::SupportedOIDCProviders>($t6) on_abort goto L2 with $t5 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:300:28+59
    if (!$ResourceExists($1_jwks_SupportedOIDCProviders_$memory, $t6)) {
        call $ExecFailureAbort();
    } else {
        $t7 := $Mutation($Global($t6), EmptyVec(), $ResourceValue($1_jwks_SupportedOIDCProviders_$memory, $t6));
    }
    if ($abort_flag) {
        assume {:print "$at(2,14110,14169)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(79,27):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[provider_set]($t7) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:300:28+59
    $temp_0'$1_jwks_SupportedOIDCProviders' := $Dereference($t7);
    assume {:print "$track_local(79,27,3):", $temp_0'$1_jwks_SupportedOIDCProviders'} $temp_0'$1_jwks_SupportedOIDCProviders' == $temp_0'$1_jwks_SupportedOIDCProviders';

    // $t8 := jwks::remove_oidc_provider_internal($t7, $t1) on_abort goto L2 with $t5 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:302:29+49
    assume {:print "$at(2,14200,14249)"} true;
    call $t8,$t7 := $1_jwks_remove_oidc_provider_internal($t7, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,14200,14249)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(79,27):", $t5} $t5 == $t5;
        goto L2;
    }

    // $t9 := borrow_field<0x1::jwks::SupportedOIDCProviders>.providers($t7) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:303:27+27
    assume {:print "$at(2,14277,14304)"} true;
    $t9 := $ChildMutation($t7, 0, $Dereference($t7)->$providers);

    // $t10 := pack 0x1::jwks::OIDCProvider($t1, $t2) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:303:56+33
    $t10 := $1_jwks_OIDCProvider($t1, $t2);

    // vector::push_back<0x1::jwks::OIDCProvider>($t9, $t10) on_abort goto L2 with $t5 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:303:9+81
    call $t9 := $1_vector_push_back'$1_jwks_OIDCProvider'($t9, $t10);
    if ($abort_flag) {
        assume {:print "$at(2,14259,14340)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(79,27):", $t5} $t5 == $t5;
        goto L2;
    }

    // write_back[Reference($t7).providers (vector<0x1::jwks::OIDCProvider>)]($t9) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:303:9+81
    $t7 := $UpdateMutation($t7, $Update'$1_jwks_SupportedOIDCProviders'_providers($Dereference($t7), $Dereference($t9)));

    // write_back[0x1::jwks::SupportedOIDCProviders@]($t7) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:303:9+81
    $1_jwks_SupportedOIDCProviders_$memory := $ResourceUpdate($1_jwks_SupportedOIDCProviders_$memory, $GlobalLocationAddress($t7),
        $Dereference($t7));

    // trace_return[0]($t8) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:296:144+384
    assume {:print "$at(2,13986,14370)"} true;
    assume {:print "$track_return(79,27,0):", $t8} $t8 == $t8;

    // label L1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:305:5+1
    assume {:print "$at(2,14369,14370)"} true;
L1:

    // return $t8 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:305:5+1
    assume {:print "$at(2,14369,14370)"} true;
    $ret0 := $t8;
    return;

    // label L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:305:5+1
L2:

    // abort($t5) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:305:5+1
    assume {:print "$at(2,14369,14370)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun jwks::upsert_provider_jwks [baseline] at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:583:5+1202
procedure {:inline 1} $1_jwks_upsert_provider_jwks(_$t0: $Mutation ($1_jwks_AllProvidersJWKs), _$t1: $1_jwks_ProviderJWKs) returns ($ret0: $1_option_Option'$1_jwks_ProviderJWKs', $ret1: $Mutation ($1_jwks_AllProvidersJWKs))
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: $1_jwks_ProviderJWKs;
    var $t6: $1_comparator_Result;
    var $t7: $Mutation ($1_jwks_ProviderJWKs);
    var $t8: $1_option_Option'$1_jwks_ProviderJWKs';
    var $t9: bool;
    var $t10: int;
    var $t11: Vec ($1_jwks_ProviderJWKs);
    var $t12: int;
    var $t13: int;
    var $t14: bool;
    var $t15: Vec ($1_jwks_ProviderJWKs);
    var $t16: $1_jwks_ProviderJWKs;
    var $t17: Vec (int);
    var $t18: Vec (int);
    var $t19: $1_comparator_Result;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: $1_comparator_Result;
    var $t26: $1_comparator_Result;
    var $t27: bool;
    var $t28: $Mutation (Vec ($1_jwks_ProviderJWKs));
    var $t29: $Mutation ($1_jwks_ProviderJWKs);
    var $t30: $1_jwks_ProviderJWKs;
    var $t31: $1_option_Option'$1_jwks_ProviderJWKs';
    var $t32: $Mutation (Vec ($1_jwks_ProviderJWKs));
    var $t33: $1_option_Option'$1_jwks_ProviderJWKs';
    var $t0: $Mutation ($1_jwks_AllProvidersJWKs);
    var $t1: $1_jwks_ProviderJWKs;
    var $temp_0'$1_comparator_Result': $1_comparator_Result;
    var $temp_0'$1_jwks_AllProvidersJWKs': $1_jwks_AllProvidersJWKs;
    var $temp_0'$1_jwks_ProviderJWKs': $1_jwks_ProviderJWKs;
    var $temp_0'$1_option_Option'$1_jwks_ProviderJWKs'': $1_option_Option'$1_jwks_ProviderJWKs';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[jwks]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:583:5+1
    assume {:print "$at(2,26802,26803)"} true;
    $temp_0'$1_jwks_AllProvidersJWKs' := $Dereference($t0);
    assume {:print "$track_local(79,29,0):", $temp_0'$1_jwks_AllProvidersJWKs'} $temp_0'$1_jwks_AllProvidersJWKs' == $temp_0'$1_jwks_AllProvidersJWKs';

    // trace_local[provider_jwks]($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:583:5+1
    assume {:print "$track_local(79,29,1):", $t1} $t1 == $t1;

    // $t9 := false at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:585:21+5
    assume {:print "$at(2,27023,27028)"} true;
    $t9 := false;
    assume $IsValid'bool'($t9);

    // $t2 := $t9 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:585:21+5
    $t2 := $t9;

    // trace_local[found]($t9) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:585:21+5
    assume {:print "$track_local(79,29,2):", $t9} $t9 == $t9;

    // $t10 := 0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:586:21+1
    assume {:print "$at(2,27050,27051)"} true;
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // trace_local[index]($t10) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:586:21+1
    assume {:print "$track_local(79,29,3):", $t10} $t10 == $t10;

    // $t11 := get_field<0x1::jwks::AllProvidersJWKs>.entries($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:587:42+13
    assume {:print "$at(2,27094,27107)"} true;
    $t11 := $Dereference($t0)->$entries;

    // $t12 := vector::length<0x1::jwks::ProviderJWKs>($t11) on_abort goto L11 with $t13 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:587:27+29
    call $t12 := $1_vector_length'$1_jwks_ProviderJWKs'($t11);
    if ($abort_flag) {
        assume {:print "$at(2,27079,27108)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(79,29):", $t13} $t13 == $t13;
        goto L11;
    }

    // trace_local[num_entries]($t12) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:587:27+29
    assume {:print "$track_local(79,29,4):", $t12} $t12 == $t12;

    // label L5 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:588:16+5
    assume {:print "$at(2,27125,27130)"} true;
L5:

    // $t3 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:588:16+5
    assume {:print "$at(2,27125,27130)"} true;
    havoc $t3;

    // assume WellFormed($t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:588:16+5
    assume $IsValid'u64'($t3);

    // $t14 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:588:16+5
    havoc $t14;

    // assume WellFormed($t14) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:588:16+5
    assume $IsValid'bool'($t14);

    // $t15 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:588:16+5
    havoc $t15;

    // assume And(WellFormed($t15), forall $elem: 0x1::jwks::ProviderJWKs: $t15: forall i: num: TypeDomain<num>() where And(Le(0, i), Lt(i, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): forall j: num: TypeDomain<num>() where And(Lt(i, j), Lt(j, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): Neq<vector<u8>>(jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), i)), jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), j)))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:588:16+5
    assume ($IsValid'vec'$1_jwks_ProviderJWKs''($t15) && (var $range_0 := $t15; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((forall i: int :: $IsValid'num'(i) ==> (((0 <= i) && (i < LenVec($elem->$jwks))))  ==> ((forall j: int :: $IsValid'num'(j) ==> (((i < j) && (j < LenVec($elem->$jwks))))  ==> (!$IsEqual'vec'u8''($1_jwks_$get_jwk_id(ReadVec($elem->$jwks, i)), $1_jwks_$get_jwk_id(ReadVec($elem->$jwks, j))))))))))));

    // $t16 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:588:16+5
    havoc $t16;

    // assume And(WellFormed($t16), forall i: num: TypeDomain<num>() where And(Le(0, i), Lt(i, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($t16)))): forall j: num: TypeDomain<num>() where And(Lt(i, j), Lt(j, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($t16)))): Neq<vector<u8>>(jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($t16), i)), jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($t16), j)))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:588:16+5
    assume ($IsValid'$1_jwks_ProviderJWKs'($t16) && (forall i: int :: $IsValid'num'(i) ==> (((0 <= i) && (i < LenVec($t16->$jwks))))  ==> ((forall j: int :: $IsValid'num'(j) ==> (((i < j) && (j < LenVec($t16->$jwks))))  ==> (!$IsEqual'vec'u8''($1_jwks_$get_jwk_id(ReadVec($t16->$jwks, i)), $1_jwks_$get_jwk_id(ReadVec($t16->$jwks, j))))))));

    // $t17 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:588:16+5
    havoc $t17;

    // assume WellFormed($t17) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:588:16+5
    assume $IsValid'vec'u8''($t17);

    // $t18 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:588:16+5
    havoc $t18;

    // assume WellFormed($t18) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:588:16+5
    assume $IsValid'vec'u8''($t18);

    // $t19 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:588:16+5
    havoc $t19;

    // assume And(WellFormed($t19), Or(Or(Eq<u8>(select comparator::Result.inner($t19), 0), Eq<u8>(select comparator::Result.inner($t19), 1)), Eq<u8>(select comparator::Result.inner($t19), 2))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:588:16+5
    assume ($IsValid'$1_comparator_Result'($t19) && (($IsEqual'u8'($t19->$inner, 0) || $IsEqual'u8'($t19->$inner, 1)) || $IsEqual'u8'($t19->$inner, 2)));

    // $t20 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:588:16+5
    havoc $t20;

    // assume WellFormed($t20) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:588:16+5
    assume $IsValid'bool'($t20);

    // $t21 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:588:16+5
    havoc $t21;

    // assume WellFormed($t21) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:588:16+5
    assume $IsValid'u64'($t21);

    // $t22 := havoc[val]() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:588:16+5
    havoc $t22;

    // assume WellFormed($t22) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:588:16+5
    assume $IsValid'u64'($t22);

    // trace_local[index]($t3) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:588:16+5
    assume {:print "$info(): enter loop, variable(s) index havocked and reassigned"} true;
    assume {:print "$track_local(79,29,3):", $t3} $t3 == $t3;

    // assume Not(AbortFlag()) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:588:16+5
    assume !$abort_flag;

    // $t14 := <($t3, $t12) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:588:16+19
    call $t14 := $Lt($t3, $t12);

    // if ($t14) goto L0 else goto L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:588:9+380
    if ($t14) { goto L0; } else { goto L2; }

    // label L0 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:589:44+13
    assume {:print "$at(2,27191,27204)"} true;
L0:

    // $t15 := get_field<0x1::jwks::AllProvidersJWKs>.entries($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:589:44+13
    assume {:print "$at(2,27191,27204)"} true;
    $t15 := $Dereference($t0)->$entries;

    // $t16 := vector::borrow<0x1::jwks::ProviderJWKs>($t15, $t3) on_abort goto L11 with $t13 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:589:29+36
    call $t16 := $1_vector_borrow'$1_jwks_ProviderJWKs'($t15, $t3);
    if ($abort_flag) {
        assume {:print "$at(2,27176,27212)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(79,29):", $t13} $t13 == $t13;
        goto L11;
    }

    // trace_local[cur_entry]($t16) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:589:29+36
    assume {:print "$track_local(79,29,5):", $t16} $t16 == $t16;

    // $t17 := get_field<0x1::jwks::ProviderJWKs>.issuer($t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:590:48+20
    assume {:print "$at(2,27261,27281)"} true;
    $t17 := $t1->$issuer;

    // $t18 := get_field<0x1::jwks::ProviderJWKs>.issuer($t16) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:590:70+16
    $t18 := $t16->$issuer;

    // assume Identical($t23, Len<u8>($t17)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/comparator.spec.move:37:9+28
    assume {:print "$at(28,1049,1077)"} true;
    assume ($t23 == LenVec($t17));

    // assume Identical($t24, Len<u8>($t18)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/comparator.spec.move:38:9+30
    assume {:print "$at(28,1086,1116)"} true;
    assume ($t24 == LenVec($t18));

    // $t19 := opaque begin: comparator::compare_u8_vector($t17, $t18) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:590:30+57
    assume {:print "$at(2,27243,27300)"} true;

    // assume And(WellFormed($t19), Or(Or(Eq<u8>(select comparator::Result.inner($t19), 0), Eq<u8>(select comparator::Result.inner($t19), 1)), Eq<u8>(select comparator::Result.inner($t19), 2))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:590:30+57
    assume ($IsValid'$1_comparator_Result'($t19) && (($IsEqual'u8'($t19->$inner, 0) || $IsEqual'u8'($t19->$inner, 1)) || $IsEqual'u8'($t19->$inner, 2)));

    // assume Implies(Eq<u8>(select comparator::Result.inner<0x1::comparator::Result>($t19), 0), And(Eq<num>($t23, $t24), forall i: u64: TypeDomain<u64>() where Lt(i, $t23): Eq<u8>(Index($t17, i), Index($t18, i)))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:590:30+57
    assume ($IsEqual'u8'($t19->$inner, 0) ==> ($IsEqual'num'($t23, $t24) && (forall i: int :: $IsValid'u64'(i) ==> ((i < $t23))  ==> ($IsEqual'u8'(ReadVec($t17, i), ReadVec($t18, i))))));

    // assume Implies(Eq<u8>(select comparator::Result.inner<0x1::comparator::Result>($t19), 1), Or(exists i: u64: TypeDomain<u64>() where Lt(i, $t23): And(And(Lt(i, $t24), Lt(Index($t17, i), Index($t18, i))), forall j: u64: TypeDomain<u64>() where Lt(j, i): Eq<u8>(Index($t17, j), Index($t18, j))), Lt($t23, $t24))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:590:30+57
    assume ($IsEqual'u8'($t19->$inner, 1) ==> ((exists i: int :: $IsValid'u64'(i) && ((i < $t23))  && ((((i < $t24) && (ReadVec($t17, i) < ReadVec($t18, i))) && (forall j: int :: $IsValid'u64'(j) ==> ((j < i))  ==> ($IsEqual'u8'(ReadVec($t17, j), ReadVec($t18, j))))))) || ($t23 < $t24)));

    // assume Implies(Eq<u8>(select comparator::Result.inner<0x1::comparator::Result>($t19), 2), Or(exists i: u64: TypeDomain<u64>() where Lt(i, $t23): And(And(Lt(i, $t24), Gt(Index($t17, i), Index($t18, i))), forall j: u64: TypeDomain<u64>() where Lt(j, i): Eq<u8>(Index($t17, j), Index($t18, j))), Gt($t23, $t24))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:590:30+57
    assume ($IsEqual'u8'($t19->$inner, 2) ==> ((exists i: int :: $IsValid'u64'(i) && ((i < $t23))  && ((((i < $t24) && (ReadVec($t17, i) > ReadVec($t18, i))) && (forall j: int :: $IsValid'u64'(j) ==> ((j < i))  ==> ($IsEqual'u8'(ReadVec($t17, j), ReadVec($t18, j))))))) || ($t23 > $t24)));

    // assume Eq<0x1::comparator::Result>($t19, comparator::spec_compare_u8_vector($t17, $t18)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:590:30+57
    assume $IsEqual'$1_comparator_Result'($t19, $1_comparator_spec_compare_u8_vector($t17, $t18));

    // $t19 := opaque end: comparator::compare_u8_vector($t17, $t18) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:590:30+57

    // trace_local[comparison]($t19) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:590:30+57
    assume {:print "$track_local(79,29,6):", $t19} $t19 == $t19;

    // assume Identical($t25, $t19) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/comparator.spec.move:20:9+15
    assume {:print "$at(28,508,523)"} true;
    assume ($t25 == $t19);

    // $t20 := comparator::is_greater_than($t19) on_abort goto L11 with $t13 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:591:17+28
    assume {:print "$at(2,27318,27346)"} true;
    call $t20 := $1_comparator_is_greater_than($t19);
    if ($abort_flag) {
        assume {:print "$at(2,27318,27346)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(79,29):", $t13} $t13 == $t13;
        goto L11;
    }

    // if ($t20) goto L12 else goto L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:591:13+174
    if ($t20) { goto L12; } else { goto L3; }

    // label L4 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:592:25+5
    assume {:print "$at(2,27374,27379)"} true;
L4:

    // $t21 := 1 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:592:33+1
    assume {:print "$at(2,27382,27383)"} true;
    $t21 := 1;
    assume $IsValid'u64'($t21);

    // $t22 := +($t3, $t21) on_abort goto L11 with $t13 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:592:25+9
    call $t22 := $AddU64($t3, $t21);
    if ($abort_flag) {
        assume {:print "$at(2,27374,27383)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(79,29):", $t13} $t13 == $t13;
        goto L11;
    }

    // trace_local[index]($t22) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:592:17+17
    assume {:print "$track_local(79,29,3):", $t22} $t22 == $t22;

    // goto L9 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:588:9+380
    assume {:print "$at(2,27118,27498)"} true;
    goto L9;

    // label L3 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:594:34+11
    assume {:print "$at(2,27439,27450)"} true;
L3:

    // assume Identical($t26, $t19) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/comparator.spec.move:8:9+15
    assume {:print "$at(28,202,217)"} true;
    assume ($t26 == $t19);

    // $t27 := comparator::is_equal($t19) on_abort goto L11 with $t13 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:594:25+21
    assume {:print "$at(2,27430,27451)"} true;
    call $t27 := $1_comparator_is_equal($t19);
    if ($abort_flag) {
        assume {:print "$at(2,27430,27451)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(79,29):", $t13} $t13 == $t13;
        goto L11;
    }

    // $t2 := $t27 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:594:17+29
    $t2 := $t27;

    // trace_local[found]($t27) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:594:17+29
    assume {:print "$track_local(79,29,2):", $t27} $t27 == $t27;

    // label L2 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:601:19+313
    assume {:print "$at(2,27671,27984)"} true;
L2:

    // if ($t2) goto L7 else goto L6 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:601:19+313
    assume {:print "$at(2,27671,27984)"} true;
    if ($t2) { goto L7; } else { goto L6; }

    // label L7 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:602:44+17
    assume {:print "$at(2,27727,27744)"} true;
L7:

    // $t28 := borrow_field<0x1::jwks::AllProvidersJWKs>.entries($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:602:44+17
    assume {:print "$at(2,27727,27744)"} true;
    $t28 := $ChildMutation($t0, 0, $Dereference($t0)->$entries);

    // $t29 := vector::borrow_mut<0x1::jwks::ProviderJWKs>($t28, $t3) on_abort goto L11 with $t13 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:602:25+44
    call $t29,$t28 := $1_vector_borrow_mut'$1_jwks_ProviderJWKs'($t28, $t3);
    if ($abort_flag) {
        assume {:print "$at(2,27708,27752)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(79,29):", $t13} $t13 == $t13;
        goto L11;
    }

    // trace_local[entry]($t29) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:602:25+44
    $temp_0'$1_jwks_ProviderJWKs' := $Dereference($t29);
    assume {:print "$track_local(79,29,7):", $temp_0'$1_jwks_ProviderJWKs'} $temp_0'$1_jwks_ProviderJWKs' == $temp_0'$1_jwks_ProviderJWKs';

    // $t30 := read_ref($t29) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:603:42+6
    assume {:print "$at(2,27795,27801)"} true;
    $t30 := $Dereference($t29);

    // $t31 := opaque begin: option::some<0x1::jwks::ProviderJWKs>($t30) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:603:29+20

    // assume And(WellFormed($t31), And(Le(Len<0x1::jwks::ProviderJWKs>(select option::Option.vec($t31)), 1), forall $elem: 0x1::jwks::ProviderJWKs: select option::Option.vec($t31): forall i: num: TypeDomain<num>() where And(Le(0, i), Lt(i, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): forall j: num: TypeDomain<num>() where And(Lt(i, j), Lt(j, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): Neq<vector<u8>>(jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), i)), jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), j))))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:603:29+20
    assume ($IsValid'$1_option_Option'$1_jwks_ProviderJWKs''($t31) && ((LenVec($t31->$vec) <= 1) && (var $range_0 := $t31->$vec; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((forall i: int :: $IsValid'num'(i) ==> (((0 <= i) && (i < LenVec($elem->$jwks))))  ==> ((forall j: int :: $IsValid'num'(j) ==> (((i < j) && (j < LenVec($elem->$jwks))))  ==> (!$IsEqual'vec'u8''($1_jwks_$get_jwk_id(ReadVec($elem->$jwks, i)), $1_jwks_$get_jwk_id(ReadVec($elem->$jwks, j)))))))))))));

    // assume Eq<0x1::option::Option<0x1::jwks::ProviderJWKs>>($t31, option::spec_some<0x1::jwks::ProviderJWKs>($t30)) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:603:29+20
    assume $IsEqual'$1_option_Option'$1_jwks_ProviderJWKs''($t31, $1_option_spec_some'$1_jwks_ProviderJWKs'($t30));

    // $t31 := opaque end: option::some<0x1::jwks::ProviderJWKs>($t30) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:603:29+20

    // $t8 := $t31 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:603:29+20
    $t8 := $t31;

    // trace_local[old_entry]($t31) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:603:29+20
    assume {:print "$track_local(79,29,8):", $t31} $t31 == $t31;

    // write_ref($t29, $t1) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:604:13+22
    assume {:print "$at(2,27816,27838)"} true;
    $t29 := $UpdateMutation($t29, $t1);

    // write_back[Reference($t28)[]]($t29) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:604:13+22
    $t28 := $UpdateMutation($t28, UpdateVec($Dereference($t28), ReadVec($t29->p, LenVec($t28->p)), $Dereference($t29)));

    // write_back[Reference($t0).entries (vector<0x1::jwks::ProviderJWKs>)]($t28) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:604:13+22
    $t0 := $UpdateMutation($t0, $Update'$1_jwks_AllProvidersJWKs'_entries($Dereference($t0), $Dereference($t28)));

    // trace_local[jwks]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:604:13+22
    $temp_0'$1_jwks_AllProvidersJWKs' := $Dereference($t0);
    assume {:print "$track_local(79,29,0):", $temp_0'$1_jwks_AllProvidersJWKs'} $temp_0'$1_jwks_AllProvidersJWKs' == $temp_0'$1_jwks_AllProvidersJWKs';

    // label L8 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:611:9+3
    assume {:print "$at(2,27995,27998)"} true;
L8:

    // trace_return[0]($t8) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:583:110+1097
    assume {:print "$at(2,26907,28004)"} true;
    assume {:print "$track_return(79,29,0):", $t8} $t8 == $t8;

    // trace_local[jwks]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:583:110+1097
    $temp_0'$1_jwks_AllProvidersJWKs' := $Dereference($t0);
    assume {:print "$track_local(79,29,0):", $temp_0'$1_jwks_AllProvidersJWKs'} $temp_0'$1_jwks_AllProvidersJWKs' == $temp_0'$1_jwks_AllProvidersJWKs';

    // pack_ref_deep($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:583:110+1097

    // goto L10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:583:110+1097
    goto L10;

    // label L6 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:607:28+17
    assume {:print "$at(2,27906,27923)"} true;
L6:

    // $t32 := borrow_field<0x1::jwks::AllProvidersJWKs>.entries($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:607:28+17
    assume {:print "$at(2,27906,27923)"} true;
    $t32 := $ChildMutation($t0, 0, $Dereference($t0)->$entries);

    // vector::insert<0x1::jwks::ProviderJWKs>($t32, $t3, $t1) on_abort goto L11 with $t13 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:607:13+55
    call $t32 := $1_vector_insert'$1_jwks_ProviderJWKs'($t32, $t3, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,27891,27946)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(79,29):", $t13} $t13 == $t13;
        goto L11;
    }

    // write_back[Reference($t0).entries (vector<0x1::jwks::ProviderJWKs>)]($t32) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:607:13+55
    $t0 := $UpdateMutation($t0, $Update'$1_jwks_AllProvidersJWKs'_entries($Dereference($t0), $Dereference($t32)));

    // trace_local[jwks]($t0) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:607:13+55
    $temp_0'$1_jwks_AllProvidersJWKs' := $Dereference($t0);
    assume {:print "$track_local(79,29,0):", $temp_0'$1_jwks_AllProvidersJWKs'} $temp_0'$1_jwks_AllProvidersJWKs' == $temp_0'$1_jwks_AllProvidersJWKs';

    // $t33 := opaque begin: option::none<0x1::jwks::ProviderJWKs>() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:608:13+14
    assume {:print "$at(2,27960,27974)"} true;

    // assume And(WellFormed($t33), And(Le(Len<0x1::jwks::ProviderJWKs>(select option::Option.vec($t33)), 1), forall $elem: 0x1::jwks::ProviderJWKs: select option::Option.vec($t33): forall i: num: TypeDomain<num>() where And(Le(0, i), Lt(i, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): forall j: num: TypeDomain<num>() where And(Lt(i, j), Lt(j, Len<0x1::jwks::JWK>(select jwks::ProviderJWKs.jwks($elem)))): Neq<vector<u8>>(jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), i)), jwks::$get_jwk_id(Index(select jwks::ProviderJWKs.jwks($elem), j))))) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:608:13+14
    assume ($IsValid'$1_option_Option'$1_jwks_ProviderJWKs''($t33) && ((LenVec($t33->$vec) <= 1) && (var $range_0 := $t33->$vec; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((forall i: int :: $IsValid'num'(i) ==> (((0 <= i) && (i < LenVec($elem->$jwks))))  ==> ((forall j: int :: $IsValid'num'(j) ==> (((i < j) && (j < LenVec($elem->$jwks))))  ==> (!$IsEqual'vec'u8''($1_jwks_$get_jwk_id(ReadVec($elem->$jwks, i)), $1_jwks_$get_jwk_id(ReadVec($elem->$jwks, j)))))))))))));

    // assume Eq<0x1::option::Option<0x1::jwks::ProviderJWKs>>($t33, option::spec_none<0x1::jwks::ProviderJWKs>()) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:608:13+14
    assume $IsEqual'$1_option_Option'$1_jwks_ProviderJWKs''($t33, $1_option_spec_none'$1_jwks_ProviderJWKs'());

    // $t33 := opaque end: option::none<0x1::jwks::ProviderJWKs>() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:608:13+14

    // $t8 := $t33 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:608:13+14
    $t8 := $t33;

    // trace_local[old_entry]($t33) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:608:13+14
    assume {:print "$track_local(79,29,8):", $t33} $t33 == $t33;

    // goto L8 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:608:13+14
    goto L8;

    // label L9 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:607:28+17
    // Loop invariant checking block for the loop started with header: L5
    assume {:print "$at(2,27906,27923)"} true;
L9:

    // stop() at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:607:28+17
    assume {:print "$at(2,27906,27923)"} true;
    assume false;
    return;

    // label L10 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:612:5+1
    assume {:print "$at(2,28003,28004)"} true;
L10:

    // return $t8 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:612:5+1
    assume {:print "$at(2,28003,28004)"} true;
    $ret0 := $t8;
    $ret1 := $t0;
    return;

    // label L11 at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:612:5+1
L11:

    // abort($t13) at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:612:5+1
    assume {:print "$at(2,28003,28004)"} true;
    $abort_code := $t13;
    $abort_flag := true;
    return;

    // label L12 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L12:

    // drop($t0) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L4 at <internal>:1:1+10
    goto L4;

}

// struct dkg::DKGSessionMetadata at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/dkg.move:18:5+251
datatype $1_dkg_DKGSessionMetadata {
    $1_dkg_DKGSessionMetadata($dealer_epoch: int, $randomness_config: $1_randomness_config_RandomnessConfig, $dealer_validator_set: Vec ($1_validator_consensus_info_ValidatorConsensusInfo), $target_validator_set: Vec ($1_validator_consensus_info_ValidatorConsensusInfo))
}
function {:inline} $Update'$1_dkg_DKGSessionMetadata'_dealer_epoch(s: $1_dkg_DKGSessionMetadata, x: int): $1_dkg_DKGSessionMetadata {
    $1_dkg_DKGSessionMetadata(x, s->$randomness_config, s->$dealer_validator_set, s->$target_validator_set)
}
function {:inline} $Update'$1_dkg_DKGSessionMetadata'_randomness_config(s: $1_dkg_DKGSessionMetadata, x: $1_randomness_config_RandomnessConfig): $1_dkg_DKGSessionMetadata {
    $1_dkg_DKGSessionMetadata(s->$dealer_epoch, x, s->$dealer_validator_set, s->$target_validator_set)
}
function {:inline} $Update'$1_dkg_DKGSessionMetadata'_dealer_validator_set(s: $1_dkg_DKGSessionMetadata, x: Vec ($1_validator_consensus_info_ValidatorConsensusInfo)): $1_dkg_DKGSessionMetadata {
    $1_dkg_DKGSessionMetadata(s->$dealer_epoch, s->$randomness_config, x, s->$target_validator_set)
}
function {:inline} $Update'$1_dkg_DKGSessionMetadata'_target_validator_set(s: $1_dkg_DKGSessionMetadata, x: Vec ($1_validator_consensus_info_ValidatorConsensusInfo)): $1_dkg_DKGSessionMetadata {
    $1_dkg_DKGSessionMetadata(s->$dealer_epoch, s->$randomness_config, s->$dealer_validator_set, x)
}
function $IsValid'$1_dkg_DKGSessionMetadata'(s: $1_dkg_DKGSessionMetadata): bool {
    $IsValid'u64'(s->$dealer_epoch)
      && $IsValid'$1_randomness_config_RandomnessConfig'(s->$randomness_config)
      && $IsValid'vec'$1_validator_consensus_info_ValidatorConsensusInfo''(s->$dealer_validator_set)
      && $IsValid'vec'$1_validator_consensus_info_ValidatorConsensusInfo''(s->$target_validator_set)
}
function {:inline} $IsEqual'$1_dkg_DKGSessionMetadata'(s1: $1_dkg_DKGSessionMetadata, s2: $1_dkg_DKGSessionMetadata): bool {
    $IsEqual'u64'(s1->$dealer_epoch, s2->$dealer_epoch)
    && $IsEqual'$1_randomness_config_RandomnessConfig'(s1->$randomness_config, s2->$randomness_config)
    && $IsEqual'vec'$1_validator_consensus_info_ValidatorConsensusInfo''(s1->$dealer_validator_set, s2->$dealer_validator_set)
    && $IsEqual'vec'$1_validator_consensus_info_ValidatorConsensusInfo''(s1->$target_validator_set, s2->$target_validator_set)}

// struct dkg::DKGSessionState at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/dkg.move:33:5+150
datatype $1_dkg_DKGSessionState {
    $1_dkg_DKGSessionState($metadata: $1_dkg_DKGSessionMetadata, $start_time_us: int, $transcript: Vec (int))
}
function {:inline} $Update'$1_dkg_DKGSessionState'_metadata(s: $1_dkg_DKGSessionState, x: $1_dkg_DKGSessionMetadata): $1_dkg_DKGSessionState {
    $1_dkg_DKGSessionState(x, s->$start_time_us, s->$transcript)
}
function {:inline} $Update'$1_dkg_DKGSessionState'_start_time_us(s: $1_dkg_DKGSessionState, x: int): $1_dkg_DKGSessionState {
    $1_dkg_DKGSessionState(s->$metadata, x, s->$transcript)
}
function {:inline} $Update'$1_dkg_DKGSessionState'_transcript(s: $1_dkg_DKGSessionState, x: Vec (int)): $1_dkg_DKGSessionState {
    $1_dkg_DKGSessionState(s->$metadata, s->$start_time_us, x)
}
function $IsValid'$1_dkg_DKGSessionState'(s: $1_dkg_DKGSessionState): bool {
    $IsValid'$1_dkg_DKGSessionMetadata'(s->$metadata)
      && $IsValid'u64'(s->$start_time_us)
      && $IsValid'vec'u8''(s->$transcript)
}
function {:inline} $IsEqual'$1_dkg_DKGSessionState'(s1: $1_dkg_DKGSessionState, s2: $1_dkg_DKGSessionState): bool {
    $IsEqual'$1_dkg_DKGSessionMetadata'(s1->$metadata, s2->$metadata)
    && $IsEqual'u64'(s1->$start_time_us, s2->$start_time_us)
    && $IsEqual'vec'u8''(s1->$transcript, s2->$transcript)}

// struct dkg::DKGState at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/dkg.move:40:5+126
datatype $1_dkg_DKGState {
    $1_dkg_DKGState($last_completed: $1_option_Option'$1_dkg_DKGSessionState', $in_progress: $1_option_Option'$1_dkg_DKGSessionState')
}
function {:inline} $Update'$1_dkg_DKGState'_last_completed(s: $1_dkg_DKGState, x: $1_option_Option'$1_dkg_DKGSessionState'): $1_dkg_DKGState {
    $1_dkg_DKGState(x, s->$in_progress)
}
function {:inline} $Update'$1_dkg_DKGState'_in_progress(s: $1_dkg_DKGState, x: $1_option_Option'$1_dkg_DKGSessionState'): $1_dkg_DKGState {
    $1_dkg_DKGState(s->$last_completed, x)
}
function $IsValid'$1_dkg_DKGState'(s: $1_dkg_DKGState): bool {
    $IsValid'$1_option_Option'$1_dkg_DKGSessionState''(s->$last_completed)
      && $IsValid'$1_option_Option'$1_dkg_DKGSessionState''(s->$in_progress)
}
function {:inline} $IsEqual'$1_dkg_DKGState'(s1: $1_dkg_DKGState, s2: $1_dkg_DKGState): bool {
    $IsEqual'$1_option_Option'$1_dkg_DKGSessionState''(s1->$last_completed, s2->$last_completed)
    && $IsEqual'$1_option_Option'$1_dkg_DKGSessionState''(s1->$in_progress, s2->$in_progress)}
var $1_dkg_DKGState_$memory: $Memory $1_dkg_DKGState;

// struct consensus_config::ConsensusConfig at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/configs/consensus_config.move:15:5+79
datatype $1_consensus_config_ConsensusConfig {
    $1_consensus_config_ConsensusConfig($config: Vec (int))
}
function {:inline} $Update'$1_consensus_config_ConsensusConfig'_config(s: $1_consensus_config_ConsensusConfig, x: Vec (int)): $1_consensus_config_ConsensusConfig {
    $1_consensus_config_ConsensusConfig(x)
}
function $IsValid'$1_consensus_config_ConsensusConfig'(s: $1_consensus_config_ConsensusConfig): bool {
    $IsValid'vec'u8''(s->$config)
}
function {:inline} $IsEqual'$1_consensus_config_ConsensusConfig'(s1: $1_consensus_config_ConsensusConfig, s2: $1_consensus_config_ConsensusConfig): bool {
    $IsEqual'vec'u8''(s1->$config, s2->$config)}
var $1_consensus_config_ConsensusConfig_$memory: $Memory $1_consensus_config_ConsensusConfig;

// struct randomness::PerBlockRandomness at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/randomness.move:33:5+121
datatype $1_randomness_PerBlockRandomness {
    $1_randomness_PerBlockRandomness($epoch: int, $round: int, $seed: $1_option_Option'vec'u8'')
}
function {:inline} $Update'$1_randomness_PerBlockRandomness'_epoch(s: $1_randomness_PerBlockRandomness, x: int): $1_randomness_PerBlockRandomness {
    $1_randomness_PerBlockRandomness(x, s->$round, s->$seed)
}
function {:inline} $Update'$1_randomness_PerBlockRandomness'_round(s: $1_randomness_PerBlockRandomness, x: int): $1_randomness_PerBlockRandomness {
    $1_randomness_PerBlockRandomness(s->$epoch, x, s->$seed)
}
function {:inline} $Update'$1_randomness_PerBlockRandomness'_seed(s: $1_randomness_PerBlockRandomness, x: $1_option_Option'vec'u8''): $1_randomness_PerBlockRandomness {
    $1_randomness_PerBlockRandomness(s->$epoch, s->$round, x)
}
function $IsValid'$1_randomness_PerBlockRandomness'(s: $1_randomness_PerBlockRandomness): bool {
    $IsValid'u64'(s->$epoch)
      && $IsValid'u64'(s->$round)
      && $IsValid'$1_option_Option'vec'u8'''(s->$seed)
}
function {:inline} $IsEqual'$1_randomness_PerBlockRandomness'(s1: $1_randomness_PerBlockRandomness, s2: $1_randomness_PerBlockRandomness): bool {
    $IsEqual'u64'(s1->$epoch, s2->$epoch)
    && $IsEqual'u64'(s1->$round, s2->$round)
    && $IsEqual'$1_option_Option'vec'u8'''(s1->$seed, s2->$seed)}
var $1_randomness_PerBlockRandomness_$memory: $Memory $1_randomness_PerBlockRandomness;

// struct block::BlockResource at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/block.move:24:5+369
datatype $1_block_BlockResource {
    $1_block_BlockResource($height: int, $epoch_interval: int, $new_block_events: $1_event_EventHandle'$1_block_NewBlockEvent', $update_epoch_interval_events: $1_event_EventHandle'$1_block_UpdateEpochIntervalEvent')
}
function {:inline} $Update'$1_block_BlockResource'_height(s: $1_block_BlockResource, x: int): $1_block_BlockResource {
    $1_block_BlockResource(x, s->$epoch_interval, s->$new_block_events, s->$update_epoch_interval_events)
}
function {:inline} $Update'$1_block_BlockResource'_epoch_interval(s: $1_block_BlockResource, x: int): $1_block_BlockResource {
    $1_block_BlockResource(s->$height, x, s->$new_block_events, s->$update_epoch_interval_events)
}
function {:inline} $Update'$1_block_BlockResource'_new_block_events(s: $1_block_BlockResource, x: $1_event_EventHandle'$1_block_NewBlockEvent'): $1_block_BlockResource {
    $1_block_BlockResource(s->$height, s->$epoch_interval, x, s->$update_epoch_interval_events)
}
function {:inline} $Update'$1_block_BlockResource'_update_epoch_interval_events(s: $1_block_BlockResource, x: $1_event_EventHandle'$1_block_UpdateEpochIntervalEvent'): $1_block_BlockResource {
    $1_block_BlockResource(s->$height, s->$epoch_interval, s->$new_block_events, x)
}
function $IsValid'$1_block_BlockResource'(s: $1_block_BlockResource): bool {
    $IsValid'u64'(s->$height)
      && $IsValid'u64'(s->$epoch_interval)
      && $IsValid'$1_event_EventHandle'$1_block_NewBlockEvent''(s->$new_block_events)
      && $IsValid'$1_event_EventHandle'$1_block_UpdateEpochIntervalEvent''(s->$update_epoch_interval_events)
}
function {:inline} $IsEqual'$1_block_BlockResource'(s1: $1_block_BlockResource, s2: $1_block_BlockResource): bool {
    s1 == s2
}
var $1_block_BlockResource_$memory: $Memory $1_block_BlockResource;

// struct block::CommitHistory at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/block.move:35:5+138
datatype $1_block_CommitHistory {
    $1_block_CommitHistory($max_capacity: int, $next_idx: int, $table: Table int ($1_block_NewBlockEvent))
}
function {:inline} $Update'$1_block_CommitHistory'_max_capacity(s: $1_block_CommitHistory, x: int): $1_block_CommitHistory {
    $1_block_CommitHistory(x, s->$next_idx, s->$table)
}
function {:inline} $Update'$1_block_CommitHistory'_next_idx(s: $1_block_CommitHistory, x: int): $1_block_CommitHistory {
    $1_block_CommitHistory(s->$max_capacity, x, s->$table)
}
function {:inline} $Update'$1_block_CommitHistory'_table(s: $1_block_CommitHistory, x: Table int ($1_block_NewBlockEvent)): $1_block_CommitHistory {
    $1_block_CommitHistory(s->$max_capacity, s->$next_idx, x)
}
function $IsValid'$1_block_CommitHistory'(s: $1_block_CommitHistory): bool {
    $IsValid'u32'(s->$max_capacity)
      && $IsValid'u32'(s->$next_idx)
      && $IsValid'$1_table_with_length_TableWithLength'u32_$1_block_NewBlockEvent''(s->$table)
}
function {:inline} $IsEqual'$1_block_CommitHistory'(s1: $1_block_CommitHistory, s2: $1_block_CommitHistory): bool {
    s1 == s2
}
var $1_block_CommitHistory_$memory: $Memory $1_block_CommitHistory;

// struct block::NewBlockEvent at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/block.move:42:5+351
datatype $1_block_NewBlockEvent {
    $1_block_NewBlockEvent($hash: int, $epoch: int, $round: int, $height: int, $previous_block_votes_bitvec: Vec (int), $proposer: int, $failed_proposer_indices: Vec (int), $time_microseconds: int)
}
function {:inline} $Update'$1_block_NewBlockEvent'_hash(s: $1_block_NewBlockEvent, x: int): $1_block_NewBlockEvent {
    $1_block_NewBlockEvent(x, s->$epoch, s->$round, s->$height, s->$previous_block_votes_bitvec, s->$proposer, s->$failed_proposer_indices, s->$time_microseconds)
}
function {:inline} $Update'$1_block_NewBlockEvent'_epoch(s: $1_block_NewBlockEvent, x: int): $1_block_NewBlockEvent {
    $1_block_NewBlockEvent(s->$hash, x, s->$round, s->$height, s->$previous_block_votes_bitvec, s->$proposer, s->$failed_proposer_indices, s->$time_microseconds)
}
function {:inline} $Update'$1_block_NewBlockEvent'_round(s: $1_block_NewBlockEvent, x: int): $1_block_NewBlockEvent {
    $1_block_NewBlockEvent(s->$hash, s->$epoch, x, s->$height, s->$previous_block_votes_bitvec, s->$proposer, s->$failed_proposer_indices, s->$time_microseconds)
}
function {:inline} $Update'$1_block_NewBlockEvent'_height(s: $1_block_NewBlockEvent, x: int): $1_block_NewBlockEvent {
    $1_block_NewBlockEvent(s->$hash, s->$epoch, s->$round, x, s->$previous_block_votes_bitvec, s->$proposer, s->$failed_proposer_indices, s->$time_microseconds)
}
function {:inline} $Update'$1_block_NewBlockEvent'_previous_block_votes_bitvec(s: $1_block_NewBlockEvent, x: Vec (int)): $1_block_NewBlockEvent {
    $1_block_NewBlockEvent(s->$hash, s->$epoch, s->$round, s->$height, x, s->$proposer, s->$failed_proposer_indices, s->$time_microseconds)
}
function {:inline} $Update'$1_block_NewBlockEvent'_proposer(s: $1_block_NewBlockEvent, x: int): $1_block_NewBlockEvent {
    $1_block_NewBlockEvent(s->$hash, s->$epoch, s->$round, s->$height, s->$previous_block_votes_bitvec, x, s->$failed_proposer_indices, s->$time_microseconds)
}
function {:inline} $Update'$1_block_NewBlockEvent'_failed_proposer_indices(s: $1_block_NewBlockEvent, x: Vec (int)): $1_block_NewBlockEvent {
    $1_block_NewBlockEvent(s->$hash, s->$epoch, s->$round, s->$height, s->$previous_block_votes_bitvec, s->$proposer, x, s->$time_microseconds)
}
function {:inline} $Update'$1_block_NewBlockEvent'_time_microseconds(s: $1_block_NewBlockEvent, x: int): $1_block_NewBlockEvent {
    $1_block_NewBlockEvent(s->$hash, s->$epoch, s->$round, s->$height, s->$previous_block_votes_bitvec, s->$proposer, s->$failed_proposer_indices, x)
}
function $IsValid'$1_block_NewBlockEvent'(s: $1_block_NewBlockEvent): bool {
    $IsValid'address'(s->$hash)
      && $IsValid'u64'(s->$epoch)
      && $IsValid'u64'(s->$round)
      && $IsValid'u64'(s->$height)
      && $IsValid'vec'u8''(s->$previous_block_votes_bitvec)
      && $IsValid'address'(s->$proposer)
      && $IsValid'vec'u64''(s->$failed_proposer_indices)
      && $IsValid'u64'(s->$time_microseconds)
}
function {:inline} $IsEqual'$1_block_NewBlockEvent'(s1: $1_block_NewBlockEvent, s2: $1_block_NewBlockEvent): bool {
    $IsEqual'address'(s1->$hash, s2->$hash)
    && $IsEqual'u64'(s1->$epoch, s2->$epoch)
    && $IsEqual'u64'(s1->$round, s2->$round)
    && $IsEqual'u64'(s1->$height, s2->$height)
    && $IsEqual'vec'u8''(s1->$previous_block_votes_bitvec, s2->$previous_block_votes_bitvec)
    && $IsEqual'address'(s1->$proposer, s2->$proposer)
    && $IsEqual'vec'u64''(s1->$failed_proposer_indices, s2->$failed_proposer_indices)
    && $IsEqual'u64'(s1->$time_microseconds, s2->$time_microseconds)}

// struct block::UpdateEpochIntervalEvent at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/block.move:55:5+121
datatype $1_block_UpdateEpochIntervalEvent {
    $1_block_UpdateEpochIntervalEvent($old_epoch_interval: int, $new_epoch_interval: int)
}
function {:inline} $Update'$1_block_UpdateEpochIntervalEvent'_old_epoch_interval(s: $1_block_UpdateEpochIntervalEvent, x: int): $1_block_UpdateEpochIntervalEvent {
    $1_block_UpdateEpochIntervalEvent(x, s->$new_epoch_interval)
}
function {:inline} $Update'$1_block_UpdateEpochIntervalEvent'_new_epoch_interval(s: $1_block_UpdateEpochIntervalEvent, x: int): $1_block_UpdateEpochIntervalEvent {
    $1_block_UpdateEpochIntervalEvent(s->$old_epoch_interval, x)
}
function $IsValid'$1_block_UpdateEpochIntervalEvent'(s: $1_block_UpdateEpochIntervalEvent): bool {
    $IsValid'u64'(s->$old_epoch_interval)
      && $IsValid'u64'(s->$new_epoch_interval)
}
function {:inline} $IsEqual'$1_block_UpdateEpochIntervalEvent'(s1: $1_block_UpdateEpochIntervalEvent, s2: $1_block_UpdateEpochIntervalEvent): bool {
    s1 == s2
}

// choice expression at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.move:1031:13+63
function {:inline} $choice_0_pred(i: int, jwks: Vec ($1_jwks_JWK), jwk_id: Vec (int)): bool {
    $IsValid'num'(i) && $InRange($RangeVec'$1_jwks_JWK'(jwks), i) &&
    $IsEqual'vec'u8''($1_jwks_$get_jwk_id(ReadVec(jwks, i)), jwk_id)
}
function $choice_0(jwks: Vec ($1_jwks_JWK), jwk_id: Vec (int)): int;
axiom (forall jwks: Vec ($1_jwks_JWK), jwk_id: Vec (int):: $IsValid'vec'$1_jwks_JWK''(jwks) && $IsValid'vec'u8''(jwk_id) ==>
    (exists i: int:: $choice_0_pred(i, jwks, jwk_id)) ==>
    (var i := $choice_0(jwks, jwk_id); $choice_0_pred(i, jwks, jwk_id)
     && (var $$c := i; (forall i: int:: i < $$c ==> !$choice_0_pred(i, jwks, jwk_id)))));

// choice expression at /Users/jake/Documents/aptos-core/aptos-move/framework/aptos-framework/sources/jwks.spec.move:50:20+81
function {:inline} $choice_1_pred(i: int, $t40: Vec ($1_jwks_JWK), $t39: Vec (int)): bool {
    $IsValid'num'(i) && $InRange($RangeVec'$1_jwks_JWK'($t40), i) &&
    $IsEqual'vec'u8''($1_jwks_$get_jwk_id(ReadVec($t40, i)), $t39)
}
function $choice_1($t40: Vec ($1_jwks_JWK), $t39: Vec (int)): int;
axiom (forall $t40: Vec ($1_jwks_JWK), $t39: Vec (int):: $IsValid'vec'$1_jwks_JWK''($t40) && $IsValid'vec'u8''($t39) ==>
    (exists i: int:: $choice_1_pred(i, $t40, $t39)) ==>
    (var i := $choice_1($t40, $t39); $choice_1_pred(i, $t40, $t39)
     && (var $$c := i; (forall i: int:: i < $$c ==> !$choice_1_pred(i, $t40, $t39)))));
