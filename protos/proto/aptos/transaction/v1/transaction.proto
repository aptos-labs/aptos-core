// Copyright Â© Aptos Foundation
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package aptos.transaction.v1;

import "aptos/util/timestamp/timestamp.proto";

// A block on Aptos holds transactions in chronological order (ordered by a transactions monotonically increasing `version` field)
// All blocks start with a `BlockMetadataTransaction`, and are followed by zero or more transactions.
// The next `BlockMetadataTransaction` denotes the end of the current block, and the start of the next one.
//
// The Block `height` is a strictly monotonically increasing count of the number of blocks,
// and there will never be a gap in the numbers. It is also a unique identifier: there will never be two blocks with
// the same `height`.
//
// The Genesis Transaction (version 0) is contained within the first block, which has a height of `0`
message Block {
  // Timestamp represents the timestamp of the `BlockMetadataTransaction` (or `GenesisTransaction` for the genesis block)
  // and every transaction in the `transactions` will have the same `timestamp` as the block.
  aptos.util.timestamp.Timestamp timestamp = 1;

  // Height represents the block number and ultimately, is the count of `BlockMetadataTransaction` that happened on the chain.
  uint64 height = 2 [jstype = JS_STRING];

  // Transactions holds all transactions that happened in the Block, which is transactions that happened starting with (and including)
  // a `BlockMetadataTransaction`, and every other transaction up to (but excluding) the next `BlockMetadataTransaction`.
  repeated Transaction transactions = 3;

  // Chain ID informs us which chain we're trying to index, this is important to ensure that we're not mixing chains within a single pipeline.
  uint32 chain_id = 4;
}

// Transaction as it happened on the chain, there are 4 types of transactions:
// - User Transaction: a user initiated transaction to interact with the chain
// - Block Metadata Transaction: transactions generated by the chain to group together transactions forming a "block"
// - Block Epilogue / State Checkpoint Transaction: transactions generated by the chain to end the group transactions forming a bloc
// - Genesis Transaction: the first transaction of the chain, with all core contract and validator information baked in
message Transaction {
  aptos.util.timestamp.Timestamp timestamp = 1;
  uint64 version = 2 [jstype = JS_STRING];
  TransactionInfo info = 3;
  uint64 epoch = 4 [jstype = JS_STRING];
  uint64 block_height = 5 [jstype = JS_STRING];

  enum TransactionType {
    TRANSACTION_TYPE_UNSPECIFIED = 0;
    TRANSACTION_TYPE_GENESIS = 1;
    TRANSACTION_TYPE_BLOCK_METADATA = 2;
    TRANSACTION_TYPE_STATE_CHECKPOINT = 3;
    TRANSACTION_TYPE_USER = 4;
    // values 5-19 skipped for no reason
    TRANSACTION_TYPE_VALIDATOR = 20;
    TRANSACTION_TYPE_BLOCK_EPILOGUE = 21;
  }

  TransactionType type = 6;

  oneof txn_data {
    BlockMetadataTransaction block_metadata = 7;
    GenesisTransaction genesis = 8;
    StateCheckpointTransaction state_checkpoint = 9;
    UserTransaction user = 10;
    // value 11-19 skipped for no reason
    ValidatorTransaction validator = 21;
    // value 22 is used up below (all Transaction fields have to have different index), so going to 23
    BlockEpilogueTransaction block_epilogue = 23;
  }

  TransactionSizeInfo size_info = 22;
}

// Transaction types.
message BlockMetadataTransaction {
  string id = 1;
  uint64 round = 2 [jstype = JS_STRING];
  repeated Event events = 3;
  bytes previous_block_votes_bitvec = 4;
  string proposer = 5;
  repeated uint32 failed_proposer_indices = 6;
}

message GenesisTransaction {
  WriteSet payload = 1;
  repeated Event events = 2;
}

message StateCheckpointTransaction {}

message ValidatorTransaction {
  oneof ValidatorTransactionType {
    ObservedJwkUpdate observed_jwk_update = 1;
    DkgUpdate dkg_update = 2;
  }

  message ObservedJwkUpdate {
    message ExportedProviderJWKs {
      string issuer = 1;
      uint64 version = 2;
      message JWK {
        message RSA {
          string kid = 1;
          string kty = 2;
          string alg = 3;
          string e = 4;
          string n = 5;
        }
        message UnsupportedJWK {
          bytes id = 1;
          bytes payload = 2;
        }
        oneof JwkType {
          UnsupportedJWK unsupported_jwk = 1;
          RSA rsa = 2;
        }
      }

      repeated JWK jwks = 3;
    }
    message ExportedAggregateSignature {
      repeated uint64 signer_indices = 1;
      // HexToBytes.
      bytes sig = 2;
    }
    message QuorumCertifiedUpdate {
      ExportedProviderJWKs update = 1;
      ExportedAggregateSignature multi_sig = 2;
    }
    QuorumCertifiedUpdate quorum_certified_update = 1;
  }

  message DkgUpdate {
    message DkgTranscript {
      uint64 epoch = 1;
      string author = 2;
      bytes payload = 3;
    }
    DkgTranscript dkg_transcript = 1;
  }

  repeated Event events = 3;
}

message BlockEpilogueTransaction {
  optional BlockEndInfo block_end_info = 1;
}

message BlockEndInfo {
  bool block_gas_limit_reached = 1;
  bool block_output_limit_reached = 2;
  uint64 block_effective_block_gas_units = 3;
  uint64 block_approx_output_size = 4;
}

message UserTransaction {
  UserTransactionRequest request = 1;
  repeated Event events = 2;
}

message Event {
  EventKey key = 1;
  uint64 sequence_number = 2 [jstype = JS_STRING];
  MoveType type = 3;
  string type_str = 5;
  string data = 4;
}

message TransactionInfo {
  bytes hash = 1;
  bytes state_change_hash = 2;
  bytes event_root_hash = 3;
  optional bytes state_checkpoint_hash = 4;
  uint64 gas_used = 5 [jstype = JS_STRING];
  bool success = 6;
  string vm_status = 7;
  bytes accumulator_root_hash = 8;
  repeated WriteSetChange changes = 9;
}

message EventKey {
  uint64 creation_number = 1 [jstype = JS_STRING];
  string account_address = 2;
}

message UserTransactionRequest {
  string sender = 1;
  uint64 sequence_number = 2 [jstype = JS_STRING];
  uint64 max_gas_amount = 3 [jstype = JS_STRING];
  uint64 gas_unit_price = 4 [jstype = JS_STRING];
  aptos.util.timestamp.Timestamp expiration_timestamp_secs = 5;
  TransactionPayload payload = 6;
  Signature signature = 7;
}

message WriteSet {
  enum WriteSetType {
    WRITE_SET_TYPE_UNSPECIFIED = 0;
    WRITE_SET_TYPE_SCRIPT_WRITE_SET = 1;
    WRITE_SET_TYPE_DIRECT_WRITE_SET = 2;
  }

  WriteSetType write_set_type = 1;
  oneof write_set {
    ScriptWriteSet script_write_set = 2;
    DirectWriteSet direct_write_set = 3;
  }
}

message ScriptWriteSet {
  string execute_as = 1;
  ScriptPayload script = 2;
}

message DirectWriteSet {
  repeated WriteSetChange write_set_change = 1;
  repeated Event events = 2;
}

message WriteSetChange {
  enum Type {
    TYPE_UNSPECIFIED = 0;
    TYPE_DELETE_MODULE = 1;
    TYPE_DELETE_RESOURCE = 2;
    TYPE_DELETE_TABLE_ITEM = 3;
    TYPE_WRITE_MODULE = 4;
    TYPE_WRITE_RESOURCE = 5;
    TYPE_WRITE_TABLE_ITEM = 6;
  }

  Type type = 1;

  oneof change {
    DeleteModule delete_module = 2;
    DeleteResource delete_resource = 3;
    DeleteTableItem delete_table_item = 4;
    WriteModule write_module = 5;
    WriteResource write_resource = 6;
    WriteTableItem write_table_item = 7;
  }
}

message DeleteModule {
  string address = 1;
  bytes state_key_hash = 2;
  MoveModuleId module = 3;
}

message DeleteResource {
  string address = 1;
  bytes state_key_hash = 2;
  MoveStructTag type = 3;
  string type_str = 4;
}

message DeleteTableItem {
  bytes state_key_hash = 1;
  string handle = 2;
  string key = 3;
  DeleteTableData data = 4;
}

message DeleteTableData {
  string key = 1;
  string key_type = 2;
}

message WriteModule {
  string address = 1;
  bytes state_key_hash = 2;
  MoveModuleBytecode data = 3;
}

message WriteResource {
  string address = 1;
  bytes state_key_hash = 2;
  MoveStructTag type = 3;
  string type_str = 4;
  string data = 5;
}

message WriteTableData {
  string key = 1;
  string key_type = 2;
  string value = 3;
  string value_type = 4;
}

message WriteTableItem {
  bytes state_key_hash = 1;
  string handle = 2;
  string key = 3;
  WriteTableData data = 4;
}

message TransactionPayload {
  enum Type {
    TYPE_UNSPECIFIED = 0;
    TYPE_ENTRY_FUNCTION_PAYLOAD = 1;
    TYPE_SCRIPT_PAYLOAD = 2;
    TYPE_WRITE_SET_PAYLOAD = 4;
    TYPE_MULTISIG_PAYLOAD = 5;
    reserved 3;
  }

  Type type = 1;

  oneof payload {
    EntryFunctionPayload entry_function_payload = 2;
    ScriptPayload script_payload = 3;
    WriteSetPayload write_set_payload = 5;
    MultisigPayload multisig_payload = 6;
  }
  reserved 4;
}

message EntryFunctionPayload {
  EntryFunctionId function = 1;
  repeated MoveType type_arguments = 2;
  repeated string arguments = 3;
  string entry_function_id_str = 4;
}

message MoveScriptBytecode {
  bytes bytecode = 1;
  MoveFunction abi = 2;
}

message ScriptPayload {
  MoveScriptBytecode code = 1;
  repeated MoveType type_arguments = 2;
  repeated string arguments = 3;
}

message MultisigPayload {
  string multisig_address = 1;
  optional MultisigTransactionPayload transaction_payload = 2;
}

message MultisigTransactionPayload {
  enum Type {
    TYPE_UNSPECIFIED = 0;
    TYPE_ENTRY_FUNCTION_PAYLOAD = 1;
  }

  Type type = 1;

  oneof payload {
    EntryFunctionPayload entry_function_payload = 2;
  }
}

message MoveModuleBytecode {
  bytes bytecode = 1;
  MoveModule abi = 2;
}

message MoveModule {
  string address = 1;
  string name = 2;
  repeated MoveModuleId friends = 3;
  repeated MoveFunction exposed_functions = 4;
  repeated MoveStruct structs = 5;
}
message MoveFunction {
  enum Visibility {
    VISIBILITY_UNSPECIFIED = 0;
    VISIBILITY_PRIVATE = 1;
    VISIBILITY_PUBLIC = 2;
    VISIBILITY_FRIEND = 3;
  }
  string name = 1;
  MoveFunction.Visibility visibility = 2;
  bool is_entry = 3;
  repeated MoveFunctionGenericTypeParam generic_type_params = 4;
  repeated MoveType params = 5;
  repeated MoveType return = 6;
}

message MoveStruct {
  string name = 1;
  bool is_native = 2;
  bool is_event = 6;
  repeated MoveAbility abilities = 3;
  repeated MoveStructGenericTypeParam generic_type_params = 4;
  repeated MoveStructField fields = 5;
}

message MoveStructGenericTypeParam {
  repeated MoveAbility constraints = 1;
  bool is_phantom = 2;
}

message MoveStructField {
  string name = 1;
  MoveType type = 2;
}

message MoveFunctionGenericTypeParam {
  repeated MoveAbility constraints = 1;
}

enum MoveTypes {
  MOVE_TYPES_UNSPECIFIED = 0;
  MOVE_TYPES_BOOL = 1;
  MOVE_TYPES_U8 = 2;
  MOVE_TYPES_U16 = 12;
  MOVE_TYPES_U32 = 13;
  MOVE_TYPES_U64 = 3;
  MOVE_TYPES_U128 = 4;
  MOVE_TYPES_U256 = 14;
  MOVE_TYPES_ADDRESS = 5;
  MOVE_TYPES_SIGNER = 6;
  MOVE_TYPES_VECTOR = 7; // `{ items: Box<MoveType> }`,
  MOVE_TYPES_STRUCT = 8; // `(MoveStructTag)`,
  MOVE_TYPES_GENERIC_TYPE_PARAM = 9; // `{ index: u16 }``,
  MOVE_TYPES_REFERENCE = 10; // `{ mutable: bool, to: Box<MoveType> }`,
  MOVE_TYPES_UNPARSABLE = 11; // `(String)`,
}

message MoveType {
  message ReferenceType {
    bool mutable = 1;
    MoveType to = 2;
  }

  MoveTypes type = 1;
  oneof content {
    MoveType vector = 3;
    MoveStructTag struct = 4;
    uint32 generic_type_param_index = 5;
    ReferenceType reference = 6;
    string unparsable = 7;
  }
}

enum MoveAbility {
  MOVE_ABILITY_UNSPECIFIED = 0;
  MOVE_ABILITY_COPY = 1;
  MOVE_ABILITY_DROP = 2;
  MOVE_ABILITY_STORE = 3;
  MOVE_ABILITY_KEY = 4;
}

message WriteSetPayload {
  WriteSet write_set = 1;
}

message EntryFunctionId {
  MoveModuleId module = 1;
  string name = 2;
}

message MoveModuleId {
  string address = 1;
  string name = 2;
}

message MoveStructTag {
  string address = 1;
  string module = 2;
  string name = 3;
  repeated MoveType generic_type_params = 4;
}

message Signature {
  enum Type {
    TYPE_UNSPECIFIED = 0;
    TYPE_ED25519 = 1;
    TYPE_MULTI_ED25519 = 2;
    TYPE_MULTI_AGENT = 3;
    TYPE_FEE_PAYER = 4;
    TYPE_SINGLE_SENDER = 6;
    reserved 5;
  }

  Type type = 1;
  oneof signature {
    Ed25519Signature ed25519 = 2;
    MultiEd25519Signature multi_ed25519 = 3;
    MultiAgentSignature multi_agent = 4;
    FeePayerSignature fee_payer = 5;
    // 6 is reserved.
    SingleSender single_sender = 7;
  }
}

message Ed25519Signature {
  bytes public_key = 1;
  bytes signature = 2;
}

message MultiEd25519Signature {
  repeated bytes public_keys = 1;
  repeated bytes signatures = 2;
  uint32 threshold = 3;
  repeated uint32 public_key_indices = 4;
}

message MultiAgentSignature {
  AccountSignature sender = 1;
  repeated string secondary_signer_addresses = 2;
  repeated AccountSignature secondary_signers = 3;
}

message FeePayerSignature {
  AccountSignature sender = 1;
  repeated string secondary_signer_addresses = 2;
  repeated AccountSignature secondary_signers = 3;
  string fee_payer_address = 4;
  AccountSignature fee_payer_signer = 5;
}

message AnyPublicKey {
  enum Type {
    TYPE_UNSPECIFIED = 0;
    TYPE_ED25519 = 1;
    TYPE_SECP256K1_ECDSA = 2;
    TYPE_SECP256R1_ECDSA = 3;
    TYPE_KEYLESS = 4;
    TYPE_FEDERATED_KEYLESS = 5;
  }

  Type type = 1;
  bytes public_key = 2;
}

message AnySignature {
  enum Type {
    TYPE_UNSPECIFIED = 0;
    TYPE_ED25519 = 1;
    TYPE_SECP256K1_ECDSA = 2;
    TYPE_WEBAUTHN = 3;
    TYPE_KEYLESS = 4;
  }

  Type type = 1;

  // Deprecated: use signature_variant instead.
  // Note: >= 1.10, this field is deprecated.
  bytes signature = 2 [deprecated = true];

  // Support: >= 1.10.
  oneof signature_variant {
    Ed25519 ed25519 = 3;
    Secp256k1Ecdsa secp256k1_ecdsa = 4;
    WebAuthn webauthn = 5;
    Keyless keyless = 6;
  }
}

message Ed25519 {
  bytes signature = 1;
}

message Secp256k1Ecdsa {
  bytes signature = 1;
}

message WebAuthn {
  bytes signature = 1;
}

message Keyless {
  bytes signature = 1;
}

message SingleKeySignature {
  AnyPublicKey public_key = 1;
  AnySignature signature = 2;
}

message IndexedSignature {
  uint32 index = 1;
  AnySignature signature = 2;
}

message MultiKeySignature {
  repeated AnyPublicKey public_keys = 1;
  repeated IndexedSignature signatures = 2;
  uint32 signatures_required = 3;
}

message AbstractionSignature {
  string function_info = 1;
  bytes signature = 2;
}

message SingleSender {
  AccountSignature sender = 1;
}

message AccountSignature {
  enum Type {
    TYPE_UNSPECIFIED = 0;
    TYPE_ED25519 = 1;
    TYPE_MULTI_ED25519 = 2;
    TYPE_SINGLE_KEY = 4;
    TYPE_MULTI_KEY = 5;
    TYPE_ABSTRACTION = 6;

    reserved 3;
  }

  Type type = 1;
  oneof signature {
    Ed25519Signature ed25519 = 2;
    MultiEd25519Signature multi_ed25519 = 3;
    // 4 is reserved.
    SingleKeySignature single_key_signature = 5;
    MultiKeySignature multi_key_signature = 6;
    AbstractionSignature abstraction = 7;
  }
}

message TransactionSizeInfo {
  uint32 transaction_bytes = 1;
  repeated EventSizeInfo event_size_info = 2;
  repeated WriteOpSizeInfo write_op_size_info = 3;
}

message EventSizeInfo {
  uint32 type_tag_bytes = 1;
  uint32 total_bytes = 2;
}

message WriteOpSizeInfo {
  uint32 key_bytes = 1;
  uint32 value_bytes = 2;
}
