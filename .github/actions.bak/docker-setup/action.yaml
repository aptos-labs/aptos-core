name: "Docker build setup"
description: |
  Runs an opinionated and unified docker build setup action. It does the following:
  * Logs in to docker image registries
    * The GCP args are required because we always want to login and upload images to GAR.
    * Only if the AWS args are provided will we log into ECR.
  * Setup for buildx and other dependencies (crane)
  * Sets git credentials for private builds
inputs:
  # GCP auth. These are mandatory.
  GCP_WORKLOAD_IDENTITY_PROVIDER:
    required: true
    description: "GCP Workload Identity provider"
  GCP_SERVICE_ACCOUNT_EMAIL:
    required: true
    description: "GCP service account email"
  EXPORT_GCP_PROJECT_VARIABLES:
    required: false
    description: "Whether to export GCP credentials to the environment. Useful for running gcloud commands"
    default: "true"

  # AWS auth. These are optional, we will only log into ECR if these are provided.
  AWS_ACCESS_KEY_ID:
    required: false
    description: "AWS access key id"
  AWS_SECRET_ACCESS_KEY:
    required: false
    description: "AWS secret access key"
  AWS_DOCKER_ARTIFACT_REPO:
    required: false
    description: "AWS ECR repo to authenticate to"

  # Optional git auth
  GIT_CREDENTIALS:
    description: "Optional credentials to pass to git. Useful if you need to pull private repos for dependencies"
    required: false
  GCP_AUTH_DURATION:
    description: "Duration of GCP auth token in seconds"
    # setting this to 1.5h since sometimes docker builds (special performance
    # builds etc.) take that long. Default is 1h.
    default: "5400"

outputs:
  CLOUDSDK_AUTH_ACCESS_TOKEN:
    description: "GCP access token"
    value: ${{ steps.auth.outputs.access_token }}

runs:
  using: composite
  steps:
    # There is no way to declare an input as required conditionally with Github Actions
    # so we do it ourselves here. If the user is trying to setup AWS, we ensure that
    # they have provided all of the required args.
    - name: Check AWS args
      shell: bash
      if: inputs.AWS_ACCESS_KEY_ID != '' || inputs.AWS_SECRET_ACCESS_KEY != '' || inputs.AWS_DOCKER_ARTIFACT_REPO != ''
      run: |
        if [[ -z "${{ inputs.AWS_ACCESS_KEY_ID }}" ]]; then
          echo "AWS_ACCESS_KEY_ID is required if AWS_SECRET_ACCESS_KEY or AWS_DOCKER_ARTIFACT_REPO is provided"
          exit 1
        fi
        if [[ -z "${{ inputs.AWS_SECRET_ACCESS_KEY }}" ]]; then
          echo "AWS_SECRET_ACCESS_KEY is required if AWS_ACCESS_KEY_ID or AWS_DOCKER_ARTIFACT_REPO is provided"
          exit 1
        fi
        if [[ -z "${{ inputs.AWS_DOCKER_ARTIFACT_REPO }}" ]]; then
          echo "AWS_DOCKER_ARTIFACT_REPO is required if AWS_ACCESS_KEY_ID or AWS_SECRET_ACCESS_KEY is provided"
          exit 1
        fi
        echo "AWS args were supplied and are vaild, we will log into ECR"

    - uses: aptos-labs/aptos-core/.github/actions/buildx-setup@main

    - uses: imjasonh/setup-crane@00c9e93efa4e1138c9a7a5c594acd6c75a2fbf0c # pin@v0.3
      with:
        version: v0.15.2

    - id: auth
      name: "Authenticate to Google Cloud"
      uses: "google-github-actions/auth@v2"
      with:
        create_credentials_file: false
        token_format: "access_token"
        access_token_lifetime: ${{ inputs.GCP_AUTH_DURATION }}
        workload_identity_provider: ${{ inputs.GCP_WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ inputs.GCP_SERVICE_ACCOUNT_EMAIL }}
        export_environment_variables: ${{ inputs.EXPORT_GCP_PROJECT_VARIABLES }}

    - name: Login to us-west1 Google Artifact Registry
      uses: docker/login-action@v2
      with:
        registry: us-west1-docker.pkg.dev
        username: oauth2accesstoken
        password: ${{ steps.auth.outputs.access_token }}

    - name: Login to US multi-region Google Artifact Registry
      uses: docker/login-action@v2
      with:
        registry: us-docker.pkg.dev
        username: oauth2accesstoken
        password: ${{ steps.auth.outputs.access_token }}

    - name: Login to ECR
      uses: docker/login-action@v2
      if: inputs.AWS_ACCESS_KEY_ID != ''
      with:
        registry: ${{ inputs.AWS_DOCKER_ARTIFACT_REPO }}
        username: ${{ inputs.AWS_ACCESS_KEY_ID }}
        password: ${{ inputs.AWS_SECRET_ACCESS_KEY }}

    - name: Setup git credentials
      if: inputs.GIT_CREDENTIALS != ''
      shell: bash
      run: |
        git config --global credential.helper store
        echo "${{ inputs.GIT_CREDENTIALS }}" > ~/.git-credentials
