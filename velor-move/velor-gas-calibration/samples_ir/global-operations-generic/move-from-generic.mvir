module 0xcafe.MoveFromGeneric {
    struct S1<T> has key, drop { x: T }

    public entry calibrate_move_from_generic_x100(s: signer) acquires S1 {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if_false (copy(i) < 100) loop_end;
        i = move(i) + 1;

        move_to<S1<u64>>(&s, S1<u64>{ x: 0 });
        _ = move_from<S1<u64>>(0xcafe);

        move_to<S1<u64>>(&s, S1<u64>{ x: 0 });
        _ = move_from<S1<u64>>(0xcafe);

        move_to<S1<u64>>(&s, S1<u64>{ x: 0 });
        _ = move_from<S1<u64>>(0xcafe);

        move_to<S1<u64>>(&s, S1<u64>{ x: 0 });
        _ = move_from<S1<u64>>(0xcafe);

        move_to<S1<u64>>(&s, S1<u64>{ x: 0 });
        _ = move_from<S1<u64>>(0xcafe); 

        move_to<S1<u64>>(&s, S1<u64>{ x: 0 });
        _ = move_from<S1<u64>>(0xcafe);

        move_to<S1<u64>>(&s, S1<u64>{ x: 0 });
        _ = move_from<S1<u64>>(0xcafe);

        move_to<S1<u64>>(&s, S1<u64>{ x: 0 });
        _ = move_from<S1<u64>>(0xcafe);

        move_to<S1<u64>>(&s, S1<u64>{ x: 0 });
        _ = move_from<S1<u64>>(0xcafe);

        move_to<S1<u64>>(&s, S1<u64>{ x: 0 });
        _ = move_from<S1<u64>>(0xcafe);                                                                     

        jump loop_start;
    label loop_end:
        return;      
    }

    public entry calibrate_move_from_generic_x1000(s: signer) acquires S1 {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if_false (copy(i) < 1000) loop_end;
        i = move(i) + 1;

        move_to<S1<u64>>(&s, S1<u64>{ x: 0 });
        _ = move_from<S1<u64>>(0xcafe);

        move_to<S1<u64>>(&s, S1<u64>{ x: 0 });
        _ = move_from<S1<u64>>(0xcafe);

        move_to<S1<u64>>(&s, S1<u64>{ x: 0 });
        _ = move_from<S1<u64>>(0xcafe);

        move_to<S1<u64>>(&s, S1<u64>{ x: 0 });
        _ = move_from<S1<u64>>(0xcafe);

        move_to<S1<u64>>(&s, S1<u64>{ x: 0 });
        _ = move_from<S1<u64>>(0xcafe); 

        move_to<S1<u64>>(&s, S1<u64>{ x: 0 });
        _ = move_from<S1<u64>>(0xcafe);

        move_to<S1<u64>>(&s, S1<u64>{ x: 0 });
        _ = move_from<S1<u64>>(0xcafe);

        move_to<S1<u64>>(&s, S1<u64>{ x: 0 });
        _ = move_from<S1<u64>>(0xcafe);

        move_to<S1<u64>>(&s, S1<u64>{ x: 0 });
        _ = move_from<S1<u64>>(0xcafe);

        move_to<S1<u64>>(&s, S1<u64>{ x: 0 });
        _ = move_from<S1<u64>>(0xcafe);                                                                     

        jump loop_start;
    label loop_end:
        return;      
    } 

    public entry calibrate_move_from_generic_x5000(s: signer) acquires S1 {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if_false (copy(i) < 5000) loop_end;
        i = move(i) + 1;

        move_to<S1<u64>>(&s, S1<u64>{ x: 0 });
        _ = move_from<S1<u64>>(0xcafe);

        move_to<S1<u64>>(&s, S1<u64>{ x: 0 });
        _ = move_from<S1<u64>>(0xcafe);

        move_to<S1<u64>>(&s, S1<u64>{ x: 0 });
        _ = move_from<S1<u64>>(0xcafe);

        move_to<S1<u64>>(&s, S1<u64>{ x: 0 });
        _ = move_from<S1<u64>>(0xcafe);

        move_to<S1<u64>>(&s, S1<u64>{ x: 0 });
        _ = move_from<S1<u64>>(0xcafe); 

        move_to<S1<u64>>(&s, S1<u64>{ x: 0 });
        _ = move_from<S1<u64>>(0xcafe);

        move_to<S1<u64>>(&s, S1<u64>{ x: 0 });
        _ = move_from<S1<u64>>(0xcafe);

        move_to<S1<u64>>(&s, S1<u64>{ x: 0 });
        _ = move_from<S1<u64>>(0xcafe);

        move_to<S1<u64>>(&s, S1<u64>{ x: 0 });
        _ = move_from<S1<u64>>(0xcafe);

        move_to<S1<u64>>(&s, S1<u64>{ x: 0 });
        _ = move_from<S1<u64>>(0xcafe);                                                                     

        jump loop_start;
    label loop_end:
        return;      
    }        
}