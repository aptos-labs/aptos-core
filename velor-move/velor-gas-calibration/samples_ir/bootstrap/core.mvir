module 0xcafe.BootstrapCore {
    // A minimal set of samples that allow us to calibrate these instructions: ld_u64, pop & sub.
    // Among these instructions, pop is the most important one, since it is in many cases required
    // to maintain stack balance. 
    // Calibrating pop will allow many other instructions to be calibrated as well.

    public entry calibrate_empty_fun() {
    label b0:
        return;
    }

    public entry calibrate_ldu64_and_pop_x10() {
    label b0:
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        return;
    }

    public entry_ldu64_and_pop_x50() {
    label b0:
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        return;
    }

    public entry calibrate_ldu64_and_pop_x100() {
    label b0:
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        return;
    }

    public entry calibrate_ldu64_and_pop_x300() {
    label b0:
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);

        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);

        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        return;
    }

    public entry calibrate_ldu64_and_pop_x600() {
    label b0:
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);

        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);

        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);

        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);

        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);

        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = (1,2,3,4,5,6,7,8,9,10);
        return;
    }

    public entry calibrate_sub_and_ldu64_10() {
    label b0:
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        return;
    }

    public entry calibrate_sub_and_ldu64_50() {
    label b0:
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        return;
    }

    public entry calibrate_sub_and_ldu64_100() {
    label b0:
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        return;
    }

    public entry calibrate_sub_and_ldu64_300() {
    label b0:
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);

        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);

        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        return;
    }

    public entry calibrate_sub_and_ldu64_600() {
    label b0:
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);

        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);

        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);

        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);

        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);

        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        _ = (10 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1);
        return;
    }

    public entry calibrate_ldu64_10_should_error() {
    label b0:
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        
        _ = (0 - 1);

        _, _, _, _, _, _, _, _, _, _ = ();

        return;
    }

    public entry calibrate_ldu64_50_should_error() {
    label b0:
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        
        _ = (0 - 1);

        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        return;
    }

    public entry calibrate_ldu64_100_should_error() {
    label b0:
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        
        _ = (0 - 1);

        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        return;
    }

    public entry calibrate_ldu64_300_should_error() {
    label b0:
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        
        _ = (0 - 1);

        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();

        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();

        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        return;
    }

    public entry calibrate_ldu64_600_should_error() {
    label b0:
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        
        _ = (0 - 1);

        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();

        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();

        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();

        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();

        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();

        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        _, _, _, _, _, _, _, _, _, _ = ();
        return;
    }

    public entry calibrate_tuning_many_of_all_instr() {
    label b0:
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);        
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);        
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);                
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = (); 
        return;        
    }    
}