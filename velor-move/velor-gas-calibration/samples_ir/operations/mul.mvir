module 0xcafe.OperationMul {
    // - mul

    public entry calibrate_mul_x10() {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if_false (copy(i) < 1) loop_end;
        i = move(i) + 1;

        _, _, _, _, _, _, _, _, _, _ = (100*1, 100*1, 100*1, 100*1, 100*1, 100*1, 100*1, 100*1, 100*1, 100*1);

        jump loop_start;
    label loop_end:
        return;        
    }

    public entry calibrate_mul_x50() {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if_false (copy(i) < 5) loop_end;
        i = move(i) + 1;

        _, _, _, _, _, _, _, _, _, _ = (100*1, 100*1, 100*1, 100*1, 100*1, 100*1, 100*1, 100*1, 100*1, 100*1);

        jump loop_start;
    label loop_end:
        return;        
    }

    public entry calibrate_mul_x100() {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if_false (copy(i) < 10) loop_end;
        i = move(i) + 1;

        _, _, _, _, _, _, _, _, _, _ = (100*1, 100*1, 100*1, 100*1, 100*1, 100*1, 100*1, 100*1, 100*1, 100*1);

        jump loop_start;
    label loop_end:
        return;        
    }

    public entry calibrate_mul_x300() {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if_false (copy(i) < 30) loop_end;
        i = move(i) + 1;

        _, _, _, _, _, _, _, _, _, _ = (100*1, 100*1, 100*1, 100*1, 100*1, 100*1, 100*1, 100*1, 100*1, 100*1);

        jump loop_start;
    label loop_end:
        return;        
    }  

    public entry calibrate_mul_x600() {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if_false (copy(i) < 60) loop_end;
        i = move(i) + 1;

        _, _, _, _, _, _, _, _, _, _ = (100*1, 100*1, 100*1, 100*1, 100*1, 100*1, 100*1, 100*1, 100*1, 100*1);

        jump loop_start;
    label loop_end:
        return;        
    }                
}