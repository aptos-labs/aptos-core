module 0xcafe.Eq {

    public eq_u16_impl(n: u64) {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if_false (copy(i) < copy(n)) loop_end;
        i = move(i) + 1;

        _ = to_u16(21u8) == 21u16;
        _ = to_u16(21u64) == 21u16;
        _ = to_u16(21u128) == 21u16;
        _ = to_u16(21u16) == 21u16;
        _ = to_u16(21u32) == 21u16;
        _ = to_u16(21u256) == 21u16;
        _ = to_u16(255u8) == 255u16;
        _ = to_u16(65535u64) == 65535u16;
        _ = to_u16(65535u128) == 65535u16;
        _ = to_u16(65535u16) == 65535u16;
        _ = to_u16(65535u32) == 65535u16;
        _ = to_u16(65535u256) == 65535u16;                      

        jump loop_start;
    label loop_end:
        return;
    }

    public entry calibrate_eq_with_u16_x120() {
    label b0:
        Self.eq_u16_impl(10);
        return;
    }

    public entry calibrate_eq_with_u16_x600() {
    label b0:
        Self.eq_u16_impl(50);
        return;
    } 

    public entry calibrate_eq_with_u16_x1200() {
    label b0:
        Self.eq_u16_impl(100);
        return;
    }        

    public eq_u32_impl(n: u64) {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if_false (copy(i) < copy(n)) loop_end;
        i = move(i) + 1;

        _ = to_u32(21u8) == 21u32;
        _ = to_u32(21u64) == 21u32;
        _ = to_u32(21u128) == 21u32;
        _ = to_u32(21u16) == 21u32;
        _ = to_u32(21u32) == 21u32;
        _ = to_u32(21u256) == 21u32;
        _ = to_u32(255u8) == 255u32;
        _ = to_u32(4294967295u64) == 4294967295u32;
        _ = to_u32(4294967295u128) == 4294967295u32;
        _ = to_u32(65535u16) == 65535u32;
        _ = to_u32(4294967295u32) == 4294967295u32;
        _ = to_u32(4294967295u256) == 4294967295u32;                       

        jump loop_start;
    label loop_end:
        return;
    }

    public entry calibrate_eq_with_u32_x120() {
    label b0:
        Self.eq_u32_impl(10);
        return;
    }

    public entry calibrate_eq_with_u32_x600() {
    label b0:
        Self.eq_u32_impl(50);
        return;
    } 

    public entry calibrate_eq_with_u32_x1200() {
    label b0:
        Self.eq_u32_impl(100);
        return;
    } 

    public eq_u64_impl(n: u64) {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if_false (copy(i) < copy(n)) loop_end;
        i = move(i) + 1;

        _ = to_u64(0u8) == 0u64;
        _ = to_u64(0u64) == 0u64;
        _ = to_u64(0u128) == 0u64;
        _ = to_u64(21u8) == 21u64;
        _ = to_u64(21u64) == 21u64;
        _ = to_u64(21u128) == 21u64;
        _ = to_u64(255u8) == 255u64;
        _ = to_u64(18446744073709551615u64) == 18446744073709551615u64;
        _ = to_u64(18446744073709551615u128) == 18446744073709551615u64;                      

        jump loop_start;
    label loop_end:
        return;
    }

    public entry calibrate_eq_with_u64_x90() {
    label b0:
        Self.eq_u64_impl(10);
        return;
    }

    public entry calibrate_eq_with_u64_x450() {
    label b0:
        Self.eq_u64_impl(50);
        return;
    } 

    public entry calibrate_eq_with_u64_x900() {
    label b0:
        Self.eq_u64_impl(100);
        return;
    } 

    public eq_u128_impl(n: u64) {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if_false (copy(i) < copy(n)) loop_end;
        i = move(i) + 1;

        _ = to_u128(0u8) == 0u128;
        _ = to_u128(0u64) == 0u128;
        _ = to_u128(0u128) == 0u128;
        _ = to_u128(21u8) == 21u128;
        _ = to_u128(21u64) == 21u128;
        _ = to_u128(21u128) == 21u128;
        _ = to_u128(255u8) == 255u128;
        _ = to_u128(18446744073709551615u64) == 18446744073709551615u128;
        _ = to_u128(340282366920938463463374607431768211455u128) == 340282366920938463463374607431768211455u128;                     

        jump loop_start;
    label loop_end:
        return;
    }

    public entry calibrate_eq_with_u128_x90() {
    label b0:
        Self.eq_u128_impl(10);
        return;
    }

    public entry calibrate_eq_with_u128_x450() {
    label b0:
        Self.eq_u128_impl(50);
        return;
    } 

    public entry calibrate_eq_with_u128_x900() {
    label b0:
        Self.eq_u128_impl(100);
        return;
    }

    public eq_u256_impl(n: u64) {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if_false (copy(i) < copy(n)) loop_end;
        i = move(i) + 1;

        _ = to_u256(0u8) == 0u256;
        _ = to_u256(0u64) == 0u256;
        _ = to_u256(0u128) == 0u256;
        _ = to_u256(0u16) == 0u256;
        _ = to_u256(0u32) == 0u256;
        _ = to_u256(0u256) == 0u256;
        _ = to_u256(21u8) == 21u256;
        _ = to_u256(21u64) == 21u256;
        _ = to_u256(21u128) == 21u256;
        _ = to_u256(21u16) == 21u256;
        _ = to_u256(21u32) == 21u256;
        _ = to_u256(21u256) == 21u256;
        _ = to_u256(255u8) == 255u256;
        _ = to_u256(18446744073709551615u64) == 18446744073709551615u256;
        _ = to_u256(340282366920938463463374607431768211455u128) == 340282366920938463463374607431768211455u256;
        _ = to_u256(65535u16) == 65535u256;
        _ = to_u256(4294967295u32) == 4294967295u256;
        _ = to_u256(115792089237316195423570985008687907853269984665640564039457584007913129639935u256) == 115792089237316195423570985008687907853269984665640564039457584007913129639935u256;                      

        jump loop_start;
    label loop_end:
        return;
    }

    public entry calibrate_eq_with_u256_x180() {
    label b0:
        Self.eq_u256_impl(10);
        return;
    }

    public entry calibrate_eq_with_u256_x900() {
    label b0:
        Self.eq_u256_impl(50);
        return;
    } 

    public entry calibrate_eq_with_u256_x1800() {
    label b0:
        Self.eq_u256_impl(100);
        return;
    }           

    public eq_vec_same_len_impl(n: u64) {
        let i: u64;
        let a: vector<u8>;
        let b: vector<u8>;
    label entry:
        i = 0;
        a = h"000102030405060712346536356345012392385678567856785678567856785678123412341234123412341234";           
        b = h"000102030405060712346536356345012392385678567856785678567856785678123412341234123412341234";   
    label loop_start:
        jump_if_false (copy(i) < copy(n)) loop_end;
        i = move(i) + 1;

        _,_,_,_,_,_,_,_,_,_ = (&a == &b,&a == &b,&a == &b,&a == &b,&a == &b,&a == &b,&a == &b,&a == &b,&a == &b,&a == &b);

        jump loop_start;
    label loop_end:
        return;
    }

    public entry calibrate_eq_vec_same_len_x100() {
    label b0:
        Self.eq_vec_same_len_impl(10);
        return;
    }

    public entry calibrate_eq_vec_same_len_x500() {
    label b0:
        Self.eq_vec_same_len_impl(50);
        return;
    } 

    public entry calibrate_eq_vec_same_len_x1000() {
    label b0:
        Self.eq_vec_same_len_impl(100);
        return;
    }     

    public eq_vec_mix_len_impl(n: u64) {
        let i: u64;
        let a: vector<u8>;
        let b: vector<u8>;
        let c: vector<u8>;
        let d: vector<u8>;
        let e: vector<u8>;
        let f: vector<u8>;                        
        let g: vector<u8>;
        let h: vector<u8>;        
        let k: vector<u8>;        
    label entry:
        i = 0;
        a = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        b = h"";
        c = h"000102030405060712346536356345012392385678567856785678567856785678";
        d = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        e = h"1234";
        f = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        g = h"";
        h = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        k = h"000102030405060712346536356345012392385678567856785678567856785678";      
    label loop_start:
        jump_if_false (copy(i) < copy(n)) loop_end;
        i = move(i) + 1;

        _,_,_,_,_,_,_,_,_,_ = (&a == &b,&c == &d,&e == &f,&g == &h,&h == &k,&a == &b,&c == &d,&e == &f,&g == &h,&h == &k);

        jump loop_start;
    label loop_end:
        return;
    }

    public entry calibrate_eq_vec_mix_len_x100() {
    label b0:
        Self.eq_vec_mix_len_impl(10);
        return;
    }

    public entry calibrate_eq_vec_mix_len_x500() {
    label b0:
        Self.eq_vec_mix_len_impl(50);
        return;
    } 

    public entry calibrate_eq_vec_mix_len_x1000() {
    label b0:
        Self.eq_vec_mix_len_impl(100);
        return;
    }       
                   
}