module 0xcafe.MoveFrom {
    struct S1 has key, drop { x: u64 }

    public entry calibrate_move_from_x100(s: signer) acquires S1 {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if_false (copy(i) < 100) loop_end;
        i = move(i) + 1;

        move_to<S1>(&s, S1{ x: 0 });
        _ = move_from<S1>(0xcafe);

        move_to<S1>(&s, S1{ x: 0 });
        _ = move_from<S1>(0xcafe);

        move_to<S1>(&s, S1{ x: 0 });
        _ = move_from<S1>(0xcafe);

        move_to<S1>(&s, S1{ x: 0 });
        _ = move_from<S1>(0xcafe);

        move_to<S1>(&s, S1{ x: 0 });
        _ = move_from<S1>(0xcafe); 

        move_to<S1>(&s, S1{ x: 0 });
        _ = move_from<S1>(0xcafe);

        move_to<S1>(&s, S1{ x: 0 });
        _ = move_from<S1>(0xcafe);

        move_to<S1>(&s, S1{ x: 0 });
        _ = move_from<S1>(0xcafe);

        move_to<S1>(&s, S1{ x: 0 });
        _ = move_from<S1>(0xcafe);

        move_to<S1>(&s, S1{ x: 0 });
        _ = move_from<S1>(0xcafe);                                                                     

        jump loop_start;
    label loop_end:
        return;      
    }

    public entry calibrate_move_from_x1000(s: signer) acquires S1 {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if_false (copy(i) < 1000) loop_end;
        i = move(i) + 1;

        move_to<S1>(&s, S1{ x: 0 });
        _ = move_from<S1>(0xcafe);

        move_to<S1>(&s, S1{ x: 0 });
        _ = move_from<S1>(0xcafe);

        move_to<S1>(&s, S1{ x: 0 });
        _ = move_from<S1>(0xcafe);

        move_to<S1>(&s, S1{ x: 0 });
        _ = move_from<S1>(0xcafe);

        move_to<S1>(&s, S1{ x: 0 });
        _ = move_from<S1>(0xcafe); 

        move_to<S1>(&s, S1{ x: 0 });
        _ = move_from<S1>(0xcafe);

        move_to<S1>(&s, S1{ x: 0 });
        _ = move_from<S1>(0xcafe);

        move_to<S1>(&s, S1{ x: 0 });
        _ = move_from<S1>(0xcafe);

        move_to<S1>(&s, S1{ x: 0 });
        _ = move_from<S1>(0xcafe);

        move_to<S1>(&s, S1{ x: 0 });
        _ = move_from<S1>(0xcafe);                                                                     

        jump loop_start;
    label loop_end:
        return;      
    } 

    public entry calibrate_move_from_x5000(s: signer) acquires S1 {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if_false (copy(i) < 5000) loop_end;
        i = move(i) + 1;

        move_to<S1>(&s, S1{ x: 0 });
        _ = move_from<S1>(0xcafe);

        move_to<S1>(&s, S1{ x: 0 });
        _ = move_from<S1>(0xcafe);

        move_to<S1>(&s, S1{ x: 0 });
        _ = move_from<S1>(0xcafe);

        move_to<S1>(&s, S1{ x: 0 });
        _ = move_from<S1>(0xcafe);

        move_to<S1>(&s, S1{ x: 0 });
        _ = move_from<S1>(0xcafe); 

        move_to<S1>(&s, S1{ x: 0 });
        _ = move_from<S1>(0xcafe);

        move_to<S1>(&s, S1{ x: 0 });
        _ = move_from<S1>(0xcafe);

        move_to<S1>(&s, S1{ x: 0 });
        _ = move_from<S1>(0xcafe);

        move_to<S1>(&s, S1{ x: 0 });
        _ = move_from<S1>(0xcafe);

        move_to<S1>(&s, S1{ x: 0 });
        _ = move_from<S1>(0xcafe);                                                                     

        jump loop_start;
    label loop_end:
        return;      
    }        
}