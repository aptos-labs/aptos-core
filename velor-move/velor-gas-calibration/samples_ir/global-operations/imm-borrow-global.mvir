module 0xcafe.ImmBorrowGlobal {
    struct S1 has key, drop { x: u64 }
    struct S2 has key, drop { x: u64 }
    struct S3 has key, drop { x: u64 }

    public entry calibrate_imm_borrow_global_x100(s: signer) acquires S1 {
        let i: u64;
    label entry:
        i = 0;
        move_to<S1>(&s, S1{x:0});
    label loop_start:
        jump_if_false (copy(i) < 100) loop_end;
        i = move(i) + 1;

        _, _, _, _, _, _, _, _, _, _ = (borrow_global<S1>(0xcafe), borrow_global<S1>(0xcafe), borrow_global<S1>(0xcafe), borrow_global<S1>(0xcafe), borrow_global<S1>(0xcafe), borrow_global<S1>(0xcafe), borrow_global<S1>(0xcafe), borrow_global<S1>(0xcafe), borrow_global<S1>(0xcafe), borrow_global<S1>(0xcafe));

        jump loop_start;
    label loop_end:
        return;            
    }

    public entry calibrate_imm_borrow_global_x500(s: signer) acquires S2 {
        let i: u64;
    label entry:
        i = 0;
        move_to<S2>(&s, S2{x:0});
    label loop_start:
        jump_if_false (copy(i) < 500) loop_end;
        i = move(i) + 1;

        _, _, _, _, _, _, _, _, _, _ = (borrow_global<S2>(0xcafe), borrow_global<S2>(0xcafe), borrow_global<S2>(0xcafe), borrow_global<S2>(0xcafe), borrow_global<S2>(0xcafe), borrow_global<S2>(0xcafe), borrow_global<S2>(0xcafe), borrow_global<S2>(0xcafe), borrow_global<S2>(0xcafe), borrow_global<S2>(0xcafe));

        jump loop_start;
    label loop_end:
        return;            
    }    

    public entry calibrate_imm_borrow_global_x1000(s: signer) acquires S3 {
        let i: u64;
    label entry:
        i = 0;
        move_to<S3>(&s, S3{x:0});
    label loop_start:
        jump_if_false (copy(i) < 1000) loop_end;
        i = move(i) + 1;

        _, _, _, _, _, _, _, _, _, _ = (borrow_global<S3>(0xcafe), borrow_global<S3>(0xcafe), borrow_global<S3>(0xcafe), borrow_global<S3>(0xcafe), borrow_global<S3>(0xcafe), borrow_global<S3>(0xcafe), borrow_global<S3>(0xcafe), borrow_global<S3>(0xcafe), borrow_global<S3>(0xcafe), borrow_global<S3>(0xcafe));

        jump loop_start;
    label loop_end:
        return;            
    }    
}